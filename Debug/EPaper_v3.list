
EPaper_v3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f84c  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003ac0  0800f990  0800f990  00010990  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08013450  08013450  00014450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   0000000c  08013458  08013458  00014458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   0000000c  08013464  08013464  00014464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000002d4  20000008  08013470  00015008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00011458  200002dc  08013744  000152dc  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20011734  08013744  00015734  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000152dc  2**0
                  CONTENTS, READONLY
 10 .debug_info   000411b8  00000000  00000000  0001530c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000737b  00000000  00000000  000564c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003020  00000000  00000000  0005d840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0002b963  00000000  00000000  00060860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0002e061  00000000  00000000  0008c1c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00100580  00000000  00000000  000ba224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001ba7a4  2**0
                  CONTENTS, READONLY
 17 .debug_rnglists 000024cb  00000000  00000000  001ba7e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000e114  00000000  00000000  001bccb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000065  00000000  00000000  001cadc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200002dc 	.word	0x200002dc
 800015c:	00000000 	.word	0x00000000
 8000160:	0800f974 	.word	0x0800f974

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200002e0 	.word	0x200002e0
 800017c:	0800f974 	.word	0x0800f974

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_uldivmod>:
 8000b58:	b953      	cbnz	r3, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5a:	b94a      	cbnz	r2, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5c:	2900      	cmp	r1, #0
 8000b5e:	bf08      	it	eq
 8000b60:	2800      	cmpeq	r0, #0
 8000b62:	bf1c      	itt	ne
 8000b64:	f04f 31ff 	movne.w	r1, #4294967295
 8000b68:	f04f 30ff 	movne.w	r0, #4294967295
 8000b6c:	f000 b96a 	b.w	8000e44 <__aeabi_idiv0>
 8000b70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b78:	f000 f806 	bl	8000b88 <__udivmoddi4>
 8000b7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b84:	b004      	add	sp, #16
 8000b86:	4770      	bx	lr

08000b88 <__udivmoddi4>:
 8000b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b8c:	9d08      	ldr	r5, [sp, #32]
 8000b8e:	460c      	mov	r4, r1
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d14e      	bne.n	8000c32 <__udivmoddi4+0xaa>
 8000b94:	4694      	mov	ip, r2
 8000b96:	458c      	cmp	ip, r1
 8000b98:	4686      	mov	lr, r0
 8000b9a:	fab2 f282 	clz	r2, r2
 8000b9e:	d962      	bls.n	8000c66 <__udivmoddi4+0xde>
 8000ba0:	b14a      	cbz	r2, 8000bb6 <__udivmoddi4+0x2e>
 8000ba2:	f1c2 0320 	rsb	r3, r2, #32
 8000ba6:	4091      	lsls	r1, r2
 8000ba8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bb0:	4319      	orrs	r1, r3
 8000bb2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bba:	fa1f f68c 	uxth.w	r6, ip
 8000bbe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000bc2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bc6:	fb07 1114 	mls	r1, r7, r4, r1
 8000bca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bce:	fb04 f106 	mul.w	r1, r4, r6
 8000bd2:	4299      	cmp	r1, r3
 8000bd4:	d90a      	bls.n	8000bec <__udivmoddi4+0x64>
 8000bd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bda:	f104 30ff 	add.w	r0, r4, #4294967295
 8000bde:	f080 8112 	bcs.w	8000e06 <__udivmoddi4+0x27e>
 8000be2:	4299      	cmp	r1, r3
 8000be4:	f240 810f 	bls.w	8000e06 <__udivmoddi4+0x27e>
 8000be8:	3c02      	subs	r4, #2
 8000bea:	4463      	add	r3, ip
 8000bec:	1a59      	subs	r1, r3, r1
 8000bee:	fa1f f38e 	uxth.w	r3, lr
 8000bf2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bf6:	fb07 1110 	mls	r1, r7, r0, r1
 8000bfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bfe:	fb00 f606 	mul.w	r6, r0, r6
 8000c02:	429e      	cmp	r6, r3
 8000c04:	d90a      	bls.n	8000c1c <__udivmoddi4+0x94>
 8000c06:	eb1c 0303 	adds.w	r3, ip, r3
 8000c0a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c0e:	f080 80fc 	bcs.w	8000e0a <__udivmoddi4+0x282>
 8000c12:	429e      	cmp	r6, r3
 8000c14:	f240 80f9 	bls.w	8000e0a <__udivmoddi4+0x282>
 8000c18:	4463      	add	r3, ip
 8000c1a:	3802      	subs	r0, #2
 8000c1c:	1b9b      	subs	r3, r3, r6
 8000c1e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c22:	2100      	movs	r1, #0
 8000c24:	b11d      	cbz	r5, 8000c2e <__udivmoddi4+0xa6>
 8000c26:	40d3      	lsrs	r3, r2
 8000c28:	2200      	movs	r2, #0
 8000c2a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c32:	428b      	cmp	r3, r1
 8000c34:	d905      	bls.n	8000c42 <__udivmoddi4+0xba>
 8000c36:	b10d      	cbz	r5, 8000c3c <__udivmoddi4+0xb4>
 8000c38:	e9c5 0100 	strd	r0, r1, [r5]
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	4608      	mov	r0, r1
 8000c40:	e7f5      	b.n	8000c2e <__udivmoddi4+0xa6>
 8000c42:	fab3 f183 	clz	r1, r3
 8000c46:	2900      	cmp	r1, #0
 8000c48:	d146      	bne.n	8000cd8 <__udivmoddi4+0x150>
 8000c4a:	42a3      	cmp	r3, r4
 8000c4c:	d302      	bcc.n	8000c54 <__udivmoddi4+0xcc>
 8000c4e:	4290      	cmp	r0, r2
 8000c50:	f0c0 80f0 	bcc.w	8000e34 <__udivmoddi4+0x2ac>
 8000c54:	1a86      	subs	r6, r0, r2
 8000c56:	eb64 0303 	sbc.w	r3, r4, r3
 8000c5a:	2001      	movs	r0, #1
 8000c5c:	2d00      	cmp	r5, #0
 8000c5e:	d0e6      	beq.n	8000c2e <__udivmoddi4+0xa6>
 8000c60:	e9c5 6300 	strd	r6, r3, [r5]
 8000c64:	e7e3      	b.n	8000c2e <__udivmoddi4+0xa6>
 8000c66:	2a00      	cmp	r2, #0
 8000c68:	f040 8090 	bne.w	8000d8c <__udivmoddi4+0x204>
 8000c6c:	eba1 040c 	sub.w	r4, r1, ip
 8000c70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c74:	fa1f f78c 	uxth.w	r7, ip
 8000c78:	2101      	movs	r1, #1
 8000c7a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c82:	fb08 4416 	mls	r4, r8, r6, r4
 8000c86:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c8a:	fb07 f006 	mul.w	r0, r7, r6
 8000c8e:	4298      	cmp	r0, r3
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0x11c>
 8000c92:	eb1c 0303 	adds.w	r3, ip, r3
 8000c96:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c9a:	d202      	bcs.n	8000ca2 <__udivmoddi4+0x11a>
 8000c9c:	4298      	cmp	r0, r3
 8000c9e:	f200 80cd 	bhi.w	8000e3c <__udivmoddi4+0x2b4>
 8000ca2:	4626      	mov	r6, r4
 8000ca4:	1a1c      	subs	r4, r3, r0
 8000ca6:	fa1f f38e 	uxth.w	r3, lr
 8000caa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cae:	fb08 4410 	mls	r4, r8, r0, r4
 8000cb2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cb6:	fb00 f707 	mul.w	r7, r0, r7
 8000cba:	429f      	cmp	r7, r3
 8000cbc:	d908      	bls.n	8000cd0 <__udivmoddi4+0x148>
 8000cbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000cc2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cc6:	d202      	bcs.n	8000cce <__udivmoddi4+0x146>
 8000cc8:	429f      	cmp	r7, r3
 8000cca:	f200 80b0 	bhi.w	8000e2e <__udivmoddi4+0x2a6>
 8000cce:	4620      	mov	r0, r4
 8000cd0:	1bdb      	subs	r3, r3, r7
 8000cd2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cd6:	e7a5      	b.n	8000c24 <__udivmoddi4+0x9c>
 8000cd8:	f1c1 0620 	rsb	r6, r1, #32
 8000cdc:	408b      	lsls	r3, r1
 8000cde:	fa22 f706 	lsr.w	r7, r2, r6
 8000ce2:	431f      	orrs	r7, r3
 8000ce4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ce8:	fa04 f301 	lsl.w	r3, r4, r1
 8000cec:	ea43 030c 	orr.w	r3, r3, ip
 8000cf0:	40f4      	lsrs	r4, r6
 8000cf2:	fa00 f801 	lsl.w	r8, r0, r1
 8000cf6:	0c38      	lsrs	r0, r7, #16
 8000cf8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000cfc:	fbb4 fef0 	udiv	lr, r4, r0
 8000d00:	fa1f fc87 	uxth.w	ip, r7
 8000d04:	fb00 441e 	mls	r4, r0, lr, r4
 8000d08:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d0c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d10:	45a1      	cmp	r9, r4
 8000d12:	fa02 f201 	lsl.w	r2, r2, r1
 8000d16:	d90a      	bls.n	8000d2e <__udivmoddi4+0x1a6>
 8000d18:	193c      	adds	r4, r7, r4
 8000d1a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d1e:	f080 8084 	bcs.w	8000e2a <__udivmoddi4+0x2a2>
 8000d22:	45a1      	cmp	r9, r4
 8000d24:	f240 8081 	bls.w	8000e2a <__udivmoddi4+0x2a2>
 8000d28:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d2c:	443c      	add	r4, r7
 8000d2e:	eba4 0409 	sub.w	r4, r4, r9
 8000d32:	fa1f f983 	uxth.w	r9, r3
 8000d36:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d3a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d3e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d42:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d46:	45a4      	cmp	ip, r4
 8000d48:	d907      	bls.n	8000d5a <__udivmoddi4+0x1d2>
 8000d4a:	193c      	adds	r4, r7, r4
 8000d4c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d50:	d267      	bcs.n	8000e22 <__udivmoddi4+0x29a>
 8000d52:	45a4      	cmp	ip, r4
 8000d54:	d965      	bls.n	8000e22 <__udivmoddi4+0x29a>
 8000d56:	3b02      	subs	r3, #2
 8000d58:	443c      	add	r4, r7
 8000d5a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d5e:	fba0 9302 	umull	r9, r3, r0, r2
 8000d62:	eba4 040c 	sub.w	r4, r4, ip
 8000d66:	429c      	cmp	r4, r3
 8000d68:	46ce      	mov	lr, r9
 8000d6a:	469c      	mov	ip, r3
 8000d6c:	d351      	bcc.n	8000e12 <__udivmoddi4+0x28a>
 8000d6e:	d04e      	beq.n	8000e0e <__udivmoddi4+0x286>
 8000d70:	b155      	cbz	r5, 8000d88 <__udivmoddi4+0x200>
 8000d72:	ebb8 030e 	subs.w	r3, r8, lr
 8000d76:	eb64 040c 	sbc.w	r4, r4, ip
 8000d7a:	fa04 f606 	lsl.w	r6, r4, r6
 8000d7e:	40cb      	lsrs	r3, r1
 8000d80:	431e      	orrs	r6, r3
 8000d82:	40cc      	lsrs	r4, r1
 8000d84:	e9c5 6400 	strd	r6, r4, [r5]
 8000d88:	2100      	movs	r1, #0
 8000d8a:	e750      	b.n	8000c2e <__udivmoddi4+0xa6>
 8000d8c:	f1c2 0320 	rsb	r3, r2, #32
 8000d90:	fa20 f103 	lsr.w	r1, r0, r3
 8000d94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d98:	fa24 f303 	lsr.w	r3, r4, r3
 8000d9c:	4094      	lsls	r4, r2
 8000d9e:	430c      	orrs	r4, r1
 8000da0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da8:	fa1f f78c 	uxth.w	r7, ip
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3110 	mls	r1, r8, r0, r3
 8000db4:	0c23      	lsrs	r3, r4, #16
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb00 f107 	mul.w	r1, r0, r7
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x24c>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000dca:	d22c      	bcs.n	8000e26 <__udivmoddi4+0x29e>
 8000dcc:	4299      	cmp	r1, r3
 8000dce:	d92a      	bls.n	8000e26 <__udivmoddi4+0x29e>
 8000dd0:	3802      	subs	r0, #2
 8000dd2:	4463      	add	r3, ip
 8000dd4:	1a5b      	subs	r3, r3, r1
 8000dd6:	b2a4      	uxth	r4, r4
 8000dd8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ddc:	fb08 3311 	mls	r3, r8, r1, r3
 8000de0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000de4:	fb01 f307 	mul.w	r3, r1, r7
 8000de8:	42a3      	cmp	r3, r4
 8000dea:	d908      	bls.n	8000dfe <__udivmoddi4+0x276>
 8000dec:	eb1c 0404 	adds.w	r4, ip, r4
 8000df0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000df4:	d213      	bcs.n	8000e1e <__udivmoddi4+0x296>
 8000df6:	42a3      	cmp	r3, r4
 8000df8:	d911      	bls.n	8000e1e <__udivmoddi4+0x296>
 8000dfa:	3902      	subs	r1, #2
 8000dfc:	4464      	add	r4, ip
 8000dfe:	1ae4      	subs	r4, r4, r3
 8000e00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e04:	e739      	b.n	8000c7a <__udivmoddi4+0xf2>
 8000e06:	4604      	mov	r4, r0
 8000e08:	e6f0      	b.n	8000bec <__udivmoddi4+0x64>
 8000e0a:	4608      	mov	r0, r1
 8000e0c:	e706      	b.n	8000c1c <__udivmoddi4+0x94>
 8000e0e:	45c8      	cmp	r8, r9
 8000e10:	d2ae      	bcs.n	8000d70 <__udivmoddi4+0x1e8>
 8000e12:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e16:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e1a:	3801      	subs	r0, #1
 8000e1c:	e7a8      	b.n	8000d70 <__udivmoddi4+0x1e8>
 8000e1e:	4631      	mov	r1, r6
 8000e20:	e7ed      	b.n	8000dfe <__udivmoddi4+0x276>
 8000e22:	4603      	mov	r3, r0
 8000e24:	e799      	b.n	8000d5a <__udivmoddi4+0x1d2>
 8000e26:	4630      	mov	r0, r6
 8000e28:	e7d4      	b.n	8000dd4 <__udivmoddi4+0x24c>
 8000e2a:	46d6      	mov	lr, sl
 8000e2c:	e77f      	b.n	8000d2e <__udivmoddi4+0x1a6>
 8000e2e:	4463      	add	r3, ip
 8000e30:	3802      	subs	r0, #2
 8000e32:	e74d      	b.n	8000cd0 <__udivmoddi4+0x148>
 8000e34:	4606      	mov	r6, r0
 8000e36:	4623      	mov	r3, r4
 8000e38:	4608      	mov	r0, r1
 8000e3a:	e70f      	b.n	8000c5c <__udivmoddi4+0xd4>
 8000e3c:	3e02      	subs	r6, #2
 8000e3e:	4463      	add	r3, ip
 8000e40:	e730      	b.n	8000ca4 <__udivmoddi4+0x11c>
 8000e42:	bf00      	nop

08000e44 <__aeabi_idiv0>:
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop

08000e48 <_Z12log_message2hPKcz>:
 */
#include "Debug.h"
#include  <cstdint>
#include <cstdio>

void log_message2(uint8_t level, const char *format, ...) {
 8000e48:	b40e      	push	{r1, r2, r3}
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	b0a5      	sub	sp, #148	@ 0x94
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	4603      	mov	r3, r0
 8000e52:	71fb      	strb	r3, [r7, #7]
    if (level > LOG_LEVEL) {
 8000e54:	79fb      	ldrb	r3, [r7, #7]
 8000e56:	2b03      	cmp	r3, #3
 8000e58:	d811      	bhi.n	8000e7e <_Z12log_message2hPKcz+0x36>
        return;
    }

    char buffer[128];
    va_list args;
    va_start(args, format);
 8000e5a:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8000e5e:	60fb      	str	r3, [r7, #12]
    vsnprintf(buffer, sizeof(buffer), format, args);
 8000e60:	f107 0010 	add.w	r0, r7, #16
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8000e6a:	2180      	movs	r1, #128	@ 0x80
 8000e6c:	f00c fd10 	bl	800d890 <vsniprintf>
    va_end(args);

    printf("%s", buffer);
 8000e70:	f107 0310 	add.w	r3, r7, #16
 8000e74:	4619      	mov	r1, r3
 8000e76:	4805      	ldr	r0, [pc, #20]	@ (8000e8c <_Z12log_message2hPKcz+0x44>)
 8000e78:	f00c fbf8 	bl	800d66c <iprintf>
 8000e7c:	e000      	b.n	8000e80 <_Z12log_message2hPKcz+0x38>
        return;
 8000e7e:	bf00      	nop
}
 8000e80:	3794      	adds	r7, #148	@ 0x94
 8000e82:	46bd      	mov	sp, r7
 8000e84:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000e88:	b003      	add	sp, #12
 8000e8a:	4770      	bx	lr
 8000e8c:	0800f990 	.word	0x0800f990

08000e90 <_ZN9EPD_4in26C1EP12GPIO_TypeDeftS1_tS1_tS1_tS1_tP19__SPI_HandleTypeDef>:
	busyPort(BUSY_GPIO_Port), busyPin(BUSY_Pin),
	pwrPort(PWR_GPIO_Port), pwrPin(PWR_Pin),
	spi(&hspi1)
{}

EPD_4in26::EPD_4in26(GPIO_TypeDef* rstPort, uint16_t rstPin,
 8000e90:	b480      	push	{r7}
 8000e92:	b085      	sub	sp, #20
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	60f8      	str	r0, [r7, #12]
 8000e98:	60b9      	str	r1, [r7, #8]
 8000e9a:	603b      	str	r3, [r7, #0]
 8000e9c:	4613      	mov	r3, r2
 8000e9e:	80fb      	strh	r3, [r7, #6]
		GPIO_TypeDef* dcPort, uint16_t dcPin,
		GPIO_TypeDef* csPort, uint16_t csPin,
		GPIO_TypeDef* busyPort, uint16_t busyPin,
		GPIO_TypeDef* pwrPort, uint16_t pwrPin,
		SPI_HandleTypeDef* spiHandle):
	rstPort(rstPort), rstPin(rstPin),
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	68ba      	ldr	r2, [r7, #8]
 8000ea4:	601a      	str	r2, [r3, #0]
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	88fa      	ldrh	r2, [r7, #6]
 8000eaa:	809a      	strh	r2, [r3, #4]
	dcPort(dcPort), dcPin(dcPin),
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	683a      	ldr	r2, [r7, #0]
 8000eb0:	609a      	str	r2, [r3, #8]
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	8b3a      	ldrh	r2, [r7, #24]
 8000eb6:	819a      	strh	r2, [r3, #12]
	csPort(csPort), csPin(csPin),
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	69fa      	ldr	r2, [r7, #28]
 8000ebc:	611a      	str	r2, [r3, #16]
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	8c3a      	ldrh	r2, [r7, #32]
 8000ec2:	829a      	strh	r2, [r3, #20]
	busyPort(busyPort), busyPin(busyPin),
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ec8:	619a      	str	r2, [r3, #24]
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8000ece:	839a      	strh	r2, [r3, #28]
	pwrPort(pwrPort), pwrPin(pwrPin),
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000ed4:	621a      	str	r2, [r3, #32]
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8000eda:	849a      	strh	r2, [r3, #36]	@ 0x24
	spi(spiHandle)
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000ee0:	629a      	str	r2, [r3, #40]	@ 0x28
{

}
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	3714      	adds	r7, #20
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr

08000ef0 <_ZN9EPD_4in267pinInitEv>:
0x00,	0x00,
};


int EPD_4in26::pinInit(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(dcPort, dcPin, GPIO_PIN_RESET);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	6898      	ldr	r0, [r3, #8]
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	899b      	ldrh	r3, [r3, #12]
 8000f00:	2200      	movs	r2, #0
 8000f02:	4619      	mov	r1, r3
 8000f04:	f005 fca8 	bl	8006858 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(csPort, csPin, GPIO_PIN_RESET);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6918      	ldr	r0, [r3, #16]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	8a9b      	ldrh	r3, [r3, #20]
 8000f10:	2200      	movs	r2, #0
 8000f12:	4619      	mov	r1, r3
 8000f14:	f005 fca0 	bl	8006858 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(pwrPort, pwrPin, GPIO_PIN_SET);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6a18      	ldr	r0, [r3, #32]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000f20:	2201      	movs	r2, #1
 8000f22:	4619      	mov	r1, r3
 8000f24:	f005 fc98 	bl	8006858 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(rstPort, rstPin, GPIO_PIN_SET);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6818      	ldr	r0, [r3, #0]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	889b      	ldrh	r3, [r3, #4]
 8000f30:	2201      	movs	r2, #1
 8000f32:	4619      	mov	r1, r3
 8000f34:	f005 fc90 	bl	8006858 <HAL_GPIO_WritePin>
    return 0;
 8000f38:	2300      	movs	r3, #0
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}

08000f42 <_ZN9EPD_4in2615EPD_4in26_ResetEv>:
/******************************************************************************
function :	Software reset
parameter:
******************************************************************************/
void EPD_4in26::EPD_4in26_Reset(void)
{
 8000f42:	b580      	push	{r7, lr}
 8000f44:	b082      	sub	sp, #8
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(rstPort, rstPin, GPIO_PIN_SET);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6818      	ldr	r0, [r3, #0]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	889b      	ldrh	r3, [r3, #4]
 8000f52:	2201      	movs	r2, #1
 8000f54:	4619      	mov	r1, r3
 8000f56:	f005 fc7f 	bl	8006858 <HAL_GPIO_WritePin>
	vTaskDelay(100);
 8000f5a:	2064      	movs	r0, #100	@ 0x64
 8000f5c:	f00a f84c 	bl	800aff8 <vTaskDelay>
	HAL_GPIO_WritePin(rstPort, rstPin, GPIO_PIN_RESET);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6818      	ldr	r0, [r3, #0]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	889b      	ldrh	r3, [r3, #4]
 8000f68:	2200      	movs	r2, #0
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	f005 fc74 	bl	8006858 <HAL_GPIO_WritePin>
    vTaskDelay(2);
 8000f70:	2002      	movs	r0, #2
 8000f72:	f00a f841 	bl	800aff8 <vTaskDelay>
	HAL_GPIO_WritePin(rstPort, rstPin, GPIO_PIN_SET);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6818      	ldr	r0, [r3, #0]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	889b      	ldrh	r3, [r3, #4]
 8000f7e:	2201      	movs	r2, #1
 8000f80:	4619      	mov	r1, r3
 8000f82:	f005 fc69 	bl	8006858 <HAL_GPIO_WritePin>
    vTaskDelay(100);
 8000f86:	2064      	movs	r0, #100	@ 0x64
 8000f88:	f00a f836 	bl	800aff8 <vTaskDelay>
}
 8000f8c:	bf00      	nop
 8000f8e:	3708      	adds	r7, #8
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <_ZN9EPD_4in2621EPD_4in26_SendCommandEh>:
function :	send command
parameter:
     Reg : Command register
******************************************************************************/
void EPD_4in26::EPD_4in26_SendCommand(UBYTE Reg)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	460b      	mov	r3, r1
 8000f9e:	70fb      	strb	r3, [r7, #3]

	__HAL_SPI_DISABLE(spi);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000fb2:	601a      	str	r2, [r3, #0]
	HAL_Delay(1);
 8000fb4:	2001      	movs	r0, #1
 8000fb6:	f005 f9c3 	bl	8006340 <HAL_Delay>
	__HAL_SPI_ENABLE(spi);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000fcc:	601a      	str	r2, [r3, #0]

	// Flush the RX buffer manually before starting transmission
	__HAL_SPI_CLEAR_OVRFLAG(spi);
 8000fce:	2300      	movs	r3, #0
 8000fd0:	60fb      	str	r3, [r7, #12]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	68db      	ldr	r3, [r3, #12]
 8000fda:	60fb      	str	r3, [r7, #12]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	689b      	ldr	r3, [r3, #8]
 8000fe4:	60fb      	str	r3, [r7, #12]
 8000fe6:	68fb      	ldr	r3, [r7, #12]

    HAL_GPIO_WritePin(dcPort, dcPin, GPIO_PIN_RESET);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6898      	ldr	r0, [r3, #8]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	899b      	ldrh	r3, [r3, #12]
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	f005 fc30 	bl	8006858 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(csPort, csPin, GPIO_PIN_RESET);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6918      	ldr	r0, [r3, #16]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	8a9b      	ldrh	r3, [r3, #20]
 8001000:	2200      	movs	r2, #0
 8001002:	4619      	mov	r1, r3
 8001004:	f005 fc28 	bl	8006858 <HAL_GPIO_WritePin>

    vTaskDelay(1);
 8001008:	2001      	movs	r0, #1
 800100a:	f009 fff5 	bl	800aff8 <vTaskDelay>

    HAL_SPI_Transmit(spi, &Reg, 1, HAL_MAX_DELAY);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8001012:	1cf9      	adds	r1, r7, #3
 8001014:	f04f 33ff 	mov.w	r3, #4294967295
 8001018:	2201      	movs	r2, #1
 800101a:	f007 fafa 	bl	8008612 <HAL_SPI_Transmit>

    vTaskDelay(1);
 800101e:	2001      	movs	r0, #1
 8001020:	f009 ffea 	bl	800aff8 <vTaskDelay>

    HAL_GPIO_WritePin(csPort, csPin, GPIO_PIN_SET);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6918      	ldr	r0, [r3, #16]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	8a9b      	ldrh	r3, [r3, #20]
 800102c:	2201      	movs	r2, #1
 800102e:	4619      	mov	r1, r3
 8001030:	f005 fc12 	bl	8006858 <HAL_GPIO_WritePin>
}
 8001034:	bf00      	nop
 8001036:	3710      	adds	r7, #16
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}

0800103c <_ZN9EPD_4in2618EPD_4in26_SendDataEh>:
function :	send data
parameter:
    Data : Write data
******************************************************************************/
void EPD_4in26::EPD_4in26_SendData(UBYTE Data)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	460b      	mov	r3, r1
 8001046:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(dcPort, dcPin, GPIO_PIN_SET);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6898      	ldr	r0, [r3, #8]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	899b      	ldrh	r3, [r3, #12]
 8001050:	2201      	movs	r2, #1
 8001052:	4619      	mov	r1, r3
 8001054:	f005 fc00 	bl	8006858 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(csPort, csPin, GPIO_PIN_RESET);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6918      	ldr	r0, [r3, #16]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	8a9b      	ldrh	r3, [r3, #20]
 8001060:	2200      	movs	r2, #0
 8001062:	4619      	mov	r1, r3
 8001064:	f005 fbf8 	bl	8006858 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(spi, &Data, 1, HAL_MAX_DELAY);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800106c:	1cf9      	adds	r1, r7, #3
 800106e:	f04f 33ff 	mov.w	r3, #4294967295
 8001072:	2201      	movs	r2, #1
 8001074:	f007 facd 	bl	8008612 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(csPort, csPin, GPIO_PIN_SET);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6918      	ldr	r0, [r3, #16]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	8a9b      	ldrh	r3, [r3, #20]
 8001080:	2201      	movs	r2, #1
 8001082:	4619      	mov	r1, r3
 8001084:	f005 fbe8 	bl	8006858 <HAL_GPIO_WritePin>
}
 8001088:	bf00      	nop
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}

08001090 <_ZN9EPD_4in2619EPD_4in26_SendData2EPhm>:

void EPD_4in26::EPD_4in26_SendData2(UBYTE *pData, UDOUBLE len)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	60f8      	str	r0, [r7, #12]
 8001098:	60b9      	str	r1, [r7, #8]
 800109a:	607a      	str	r2, [r7, #4]
    HAL_GPIO_WritePin(dcPort, dcPin, GPIO_PIN_SET);
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	6898      	ldr	r0, [r3, #8]
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	899b      	ldrh	r3, [r3, #12]
 80010a4:	2201      	movs	r2, #1
 80010a6:	4619      	mov	r1, r3
 80010a8:	f005 fbd6 	bl	8006858 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(csPort, csPin, GPIO_PIN_RESET);
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	6918      	ldr	r0, [r3, #16]
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	8a9b      	ldrh	r3, [r3, #20]
 80010b4:	2200      	movs	r2, #0
 80010b6:	4619      	mov	r1, r3
 80010b8:	f005 fbce 	bl	8006858 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(spi, pData, len, HAL_MAX_DELAY);
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	b29a      	uxth	r2, r3
 80010c4:	f04f 33ff 	mov.w	r3, #4294967295
 80010c8:	68b9      	ldr	r1, [r7, #8]
 80010ca:	f007 faa2 	bl	8008612 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(csPort, csPin, GPIO_PIN_SET);
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	6918      	ldr	r0, [r3, #16]
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	8a9b      	ldrh	r3, [r3, #20]
 80010d6:	2201      	movs	r2, #1
 80010d8:	4619      	mov	r1, r3
 80010da:	f005 fbbd 	bl	8006858 <HAL_GPIO_WritePin>
}
 80010de:	bf00      	nop
 80010e0:	3710      	adds	r7, #16
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <_ZN9EPD_4in2618EPD_4in26_ReadBusyEv>:
//		DEV_Delay_ms(20);
//	}
//	DEV_Delay_ms(20);
//    Debug("e-Paper busy release\r\n");
void EPD_4in26::EPD_4in26_ReadBusy(void)
{
 80010e6:	b580      	push	{r7, lr}
 80010e8:	b082      	sub	sp, #8
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	6078      	str	r0, [r7, #4]
		while(1)
		{	 //=1 BUSY
			if(HAL_GPIO_ReadPin(busyPort, busyPin) == GPIO_PIN_RESET)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	699a      	ldr	r2, [r3, #24]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	8b9b      	ldrh	r3, [r3, #28]
 80010f6:	4619      	mov	r1, r3
 80010f8:	4610      	mov	r0, r2
 80010fa:	f005 fb95 	bl	8006828 <HAL_GPIO_ReadPin>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	bf0c      	ite	eq
 8001104:	2301      	moveq	r3, #1
 8001106:	2300      	movne	r3, #0
 8001108:	b2db      	uxtb	r3, r3
 800110a:	2b00      	cmp	r3, #0
 800110c:	d103      	bne.n	8001116 <_ZN9EPD_4in2618EPD_4in26_ReadBusyEv+0x30>
				break;
			vTaskDelay(20);
 800110e:	2014      	movs	r0, #20
 8001110:	f009 ff72 	bl	800aff8 <vTaskDelay>
			if(HAL_GPIO_ReadPin(busyPort, busyPin) == GPIO_PIN_RESET)
 8001114:	e7eb      	b.n	80010ee <_ZN9EPD_4in2618EPD_4in26_ReadBusyEv+0x8>
				break;
 8001116:	bf00      	nop
		}
		vTaskDelay(20);
 8001118:	2014      	movs	r0, #20
 800111a:	f009 ff6d 	bl	800aff8 <vTaskDelay>
        Debug("e-Paper busy release\r\n");
    }
    vTaskDelay(20);
//    Debug("e-Paper busy release\r\n");
#endif
}
 800111e:	bf00      	nop
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}

08001126 <_ZN9EPD_4in2623EPD_4in26_TurnOnDisplayEv>:
/******************************************************************************
function :	Turn On Display
parameter:
******************************************************************************/
void EPD_4in26::EPD_4in26_TurnOnDisplay(void)
{
 8001126:	b580      	push	{r7, lr}
 8001128:	b082      	sub	sp, #8
 800112a:	af00      	add	r7, sp, #0
 800112c:	6078      	str	r0, [r7, #4]
	EPD_4in26_SendCommand(0x22); //Display Update Control
 800112e:	2122      	movs	r1, #34	@ 0x22
 8001130:	6878      	ldr	r0, [r7, #4]
 8001132:	f7ff ff2f 	bl	8000f94 <_ZN9EPD_4in2621EPD_4in26_SendCommandEh>
	EPD_4in26_SendData(0xF7);
 8001136:	21f7      	movs	r1, #247	@ 0xf7
 8001138:	6878      	ldr	r0, [r7, #4]
 800113a:	f7ff ff7f 	bl	800103c <_ZN9EPD_4in2618EPD_4in26_SendDataEh>
	EPD_4in26_SendCommand(0x20); //Activate Display Update Sequence
 800113e:	2120      	movs	r1, #32
 8001140:	6878      	ldr	r0, [r7, #4]
 8001142:	f7ff ff27 	bl	8000f94 <_ZN9EPD_4in2621EPD_4in26_SendCommandEh>
	EPD_4in26_ReadBusy();
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f7ff ffcd 	bl	80010e6 <_ZN9EPD_4in2618EPD_4in26_ReadBusyEv>
}
 800114c:	bf00      	nop
 800114e:	3708      	adds	r7, #8
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}

08001154 <_ZN9EPD_4in2628EPD_4in26_TurnOnDisplay_PartEv>:
	EPD_4in26_SendCommand(0x20); //Activate Display Update Sequence
	EPD_4in26_ReadBusy();
}

void EPD_4in26::EPD_4in26_TurnOnDisplay_Part(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
	EPD_4in26_SendCommand(0x22); //Display Update Control
 800115c:	2122      	movs	r1, #34	@ 0x22
 800115e:	6878      	ldr	r0, [r7, #4]
 8001160:	f7ff ff18 	bl	8000f94 <_ZN9EPD_4in2621EPD_4in26_SendCommandEh>
	EPD_4in26_SendData(0xFF);
 8001164:	21ff      	movs	r1, #255	@ 0xff
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	f7ff ff68 	bl	800103c <_ZN9EPD_4in2618EPD_4in26_SendDataEh>
	EPD_4in26_SendCommand(0x20); //Activate Display Update Sequence
 800116c:	2120      	movs	r1, #32
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f7ff ff10 	bl	8000f94 <_ZN9EPD_4in2621EPD_4in26_SendCommandEh>
	EPD_4in26_ReadBusy();
 8001174:	6878      	ldr	r0, [r7, #4]
 8001176:	f7ff ffb6 	bl	80010e6 <_ZN9EPD_4in2618EPD_4in26_ReadBusyEv>
}
 800117a:	bf00      	nop
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}

08001182 <_ZN9EPD_4in2620EPD_4in26_SetWindowsEtttt>:
/******************************************************************************
function :	Setting the display window
parameter:
******************************************************************************/
void EPD_4in26::EPD_4in26_SetWindows(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend)
{
 8001182:	b580      	push	{r7, lr}
 8001184:	b084      	sub	sp, #16
 8001186:	af00      	add	r7, sp, #0
 8001188:	60f8      	str	r0, [r7, #12]
 800118a:	4608      	mov	r0, r1
 800118c:	4611      	mov	r1, r2
 800118e:	461a      	mov	r2, r3
 8001190:	4603      	mov	r3, r0
 8001192:	817b      	strh	r3, [r7, #10]
 8001194:	460b      	mov	r3, r1
 8001196:	813b      	strh	r3, [r7, #8]
 8001198:	4613      	mov	r3, r2
 800119a:	80fb      	strh	r3, [r7, #6]
    EPD_4in26_SendCommand(0x44); // SET_RAM_X_ADDRESS_START_END_POSITION
 800119c:	2144      	movs	r1, #68	@ 0x44
 800119e:	68f8      	ldr	r0, [r7, #12]
 80011a0:	f7ff fef8 	bl	8000f94 <_ZN9EPD_4in2621EPD_4in26_SendCommandEh>
    EPD_4in26_SendData(Xstart & 0xFF);
 80011a4:	897b      	ldrh	r3, [r7, #10]
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	4619      	mov	r1, r3
 80011aa:	68f8      	ldr	r0, [r7, #12]
 80011ac:	f7ff ff46 	bl	800103c <_ZN9EPD_4in2618EPD_4in26_SendDataEh>
    EPD_4in26_SendData((Xstart>>8) & 0x03);
 80011b0:	897b      	ldrh	r3, [r7, #10]
 80011b2:	0a1b      	lsrs	r3, r3, #8
 80011b4:	b29b      	uxth	r3, r3
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	f003 0303 	and.w	r3, r3, #3
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	4619      	mov	r1, r3
 80011c0:	68f8      	ldr	r0, [r7, #12]
 80011c2:	f7ff ff3b 	bl	800103c <_ZN9EPD_4in2618EPD_4in26_SendDataEh>
    EPD_4in26_SendData(Xend & 0xFF);
 80011c6:	88fb      	ldrh	r3, [r7, #6]
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	4619      	mov	r1, r3
 80011cc:	68f8      	ldr	r0, [r7, #12]
 80011ce:	f7ff ff35 	bl	800103c <_ZN9EPD_4in2618EPD_4in26_SendDataEh>
    EPD_4in26_SendData((Xend>>8) & 0x03);
 80011d2:	88fb      	ldrh	r3, [r7, #6]
 80011d4:	0a1b      	lsrs	r3, r3, #8
 80011d6:	b29b      	uxth	r3, r3
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	f003 0303 	and.w	r3, r3, #3
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	4619      	mov	r1, r3
 80011e2:	68f8      	ldr	r0, [r7, #12]
 80011e4:	f7ff ff2a 	bl	800103c <_ZN9EPD_4in2618EPD_4in26_SendDataEh>

    EPD_4in26_SendCommand(0x45); // SET_RAM_Y_ADDRESS_START_END_POSITION
 80011e8:	2145      	movs	r1, #69	@ 0x45
 80011ea:	68f8      	ldr	r0, [r7, #12]
 80011ec:	f7ff fed2 	bl	8000f94 <_ZN9EPD_4in2621EPD_4in26_SendCommandEh>
    EPD_4in26_SendData(Ystart & 0xFF);
 80011f0:	893b      	ldrh	r3, [r7, #8]
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	4619      	mov	r1, r3
 80011f6:	68f8      	ldr	r0, [r7, #12]
 80011f8:	f7ff ff20 	bl	800103c <_ZN9EPD_4in2618EPD_4in26_SendDataEh>
    EPD_4in26_SendData((Ystart>>8) & 0x03);
 80011fc:	893b      	ldrh	r3, [r7, #8]
 80011fe:	0a1b      	lsrs	r3, r3, #8
 8001200:	b29b      	uxth	r3, r3
 8001202:	b2db      	uxtb	r3, r3
 8001204:	f003 0303 	and.w	r3, r3, #3
 8001208:	b2db      	uxtb	r3, r3
 800120a:	4619      	mov	r1, r3
 800120c:	68f8      	ldr	r0, [r7, #12]
 800120e:	f7ff ff15 	bl	800103c <_ZN9EPD_4in2618EPD_4in26_SendDataEh>
    EPD_4in26_SendData(Yend & 0xFF);
 8001212:	8b3b      	ldrh	r3, [r7, #24]
 8001214:	b2db      	uxtb	r3, r3
 8001216:	4619      	mov	r1, r3
 8001218:	68f8      	ldr	r0, [r7, #12]
 800121a:	f7ff ff0f 	bl	800103c <_ZN9EPD_4in2618EPD_4in26_SendDataEh>
    EPD_4in26_SendData((Yend>>8) & 0x03);
 800121e:	8b3b      	ldrh	r3, [r7, #24]
 8001220:	0a1b      	lsrs	r3, r3, #8
 8001222:	b29b      	uxth	r3, r3
 8001224:	b2db      	uxtb	r3, r3
 8001226:	f003 0303 	and.w	r3, r3, #3
 800122a:	b2db      	uxtb	r3, r3
 800122c:	4619      	mov	r1, r3
 800122e:	68f8      	ldr	r0, [r7, #12]
 8001230:	f7ff ff04 	bl	800103c <_ZN9EPD_4in2618EPD_4in26_SendDataEh>
}
 8001234:	bf00      	nop
 8001236:	3710      	adds	r7, #16
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}

0800123c <_ZN9EPD_4in2619EPD_4in26_SetCursorEtt>:
/******************************************************************************
function :	Set Cursor
parameter:
******************************************************************************/
void EPD_4in26::EPD_4in26_SetCursor(UWORD Xstart, UWORD Ystart)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	460b      	mov	r3, r1
 8001246:	807b      	strh	r3, [r7, #2]
 8001248:	4613      	mov	r3, r2
 800124a:	803b      	strh	r3, [r7, #0]
    EPD_4in26_SendCommand(0x4E); // SET_RAM_X_ADDRESS_COUNTER
 800124c:	214e      	movs	r1, #78	@ 0x4e
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f7ff fea0 	bl	8000f94 <_ZN9EPD_4in2621EPD_4in26_SendCommandEh>
    EPD_4in26_SendData(Xstart & 0xFF);
 8001254:	887b      	ldrh	r3, [r7, #2]
 8001256:	b2db      	uxtb	r3, r3
 8001258:	4619      	mov	r1, r3
 800125a:	6878      	ldr	r0, [r7, #4]
 800125c:	f7ff feee 	bl	800103c <_ZN9EPD_4in2618EPD_4in26_SendDataEh>
    EPD_4in26_SendData((Xstart>>8) & 0x03);
 8001260:	887b      	ldrh	r3, [r7, #2]
 8001262:	0a1b      	lsrs	r3, r3, #8
 8001264:	b29b      	uxth	r3, r3
 8001266:	b2db      	uxtb	r3, r3
 8001268:	f003 0303 	and.w	r3, r3, #3
 800126c:	b2db      	uxtb	r3, r3
 800126e:	4619      	mov	r1, r3
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f7ff fee3 	bl	800103c <_ZN9EPD_4in2618EPD_4in26_SendDataEh>

    EPD_4in26_SendCommand(0x4F); // SET_RAM_Y_ADDRESS_COUNTER
 8001276:	214f      	movs	r1, #79	@ 0x4f
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f7ff fe8b 	bl	8000f94 <_ZN9EPD_4in2621EPD_4in26_SendCommandEh>
    EPD_4in26_SendData(Ystart & 0xFF);
 800127e:	883b      	ldrh	r3, [r7, #0]
 8001280:	b2db      	uxtb	r3, r3
 8001282:	4619      	mov	r1, r3
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	f7ff fed9 	bl	800103c <_ZN9EPD_4in2618EPD_4in26_SendDataEh>
    EPD_4in26_SendData((Ystart>>8) & 0x03);
 800128a:	883b      	ldrh	r3, [r7, #0]
 800128c:	0a1b      	lsrs	r3, r3, #8
 800128e:	b29b      	uxth	r3, r3
 8001290:	b2db      	uxtb	r3, r3
 8001292:	f003 0303 	and.w	r3, r3, #3
 8001296:	b2db      	uxtb	r3, r3
 8001298:	4619      	mov	r1, r3
 800129a:	6878      	ldr	r0, [r7, #4]
 800129c:	f7ff fece 	bl	800103c <_ZN9EPD_4in2618EPD_4in26_SendDataEh>
}
 80012a0:	bf00      	nop
 80012a2:	3708      	adds	r7, #8
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <_ZN9EPD_4in2614EPD_4in26_InitEv>:
/******************************************************************************
function :	Initialize the e-Paper register
parameter:
******************************************************************************/
void EPD_4in26::EPD_4in26_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af02      	add	r7, sp, #8
 80012ae:	6078      	str	r0, [r7, #4]
	EPD_4in26_Reset();
 80012b0:	6878      	ldr	r0, [r7, #4]
 80012b2:	f7ff fe46 	bl	8000f42 <_ZN9EPD_4in2615EPD_4in26_ResetEv>
	DEV_Delay_ms(100);
 80012b6:	2064      	movs	r0, #100	@ 0x64
 80012b8:	f009 fe9e 	bl	800aff8 <vTaskDelay>

	EPD_4in26_ReadBusy();
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f7ff ff12 	bl	80010e6 <_ZN9EPD_4in2618EPD_4in26_ReadBusyEv>
	EPD_4in26_SendCommand(0x12);  //SWRESET
 80012c2:	2112      	movs	r1, #18
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f7ff fe65 	bl	8000f94 <_ZN9EPD_4in2621EPD_4in26_SendCommandEh>
	EPD_4in26_ReadBusy();
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f7ff ff0b 	bl	80010e6 <_ZN9EPD_4in2618EPD_4in26_ReadBusyEv>

	EPD_4in26_SendCommand(0x18); // use the internal temperature sensor
 80012d0:	2118      	movs	r1, #24
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f7ff fe5e 	bl	8000f94 <_ZN9EPD_4in2621EPD_4in26_SendCommandEh>
	EPD_4in26_SendData(0x80);
 80012d8:	2180      	movs	r1, #128	@ 0x80
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f7ff feae 	bl	800103c <_ZN9EPD_4in2618EPD_4in26_SendDataEh>

	EPD_4in26_SendCommand(0x0C); //set soft start
 80012e0:	210c      	movs	r1, #12
 80012e2:	6878      	ldr	r0, [r7, #4]
 80012e4:	f7ff fe56 	bl	8000f94 <_ZN9EPD_4in2621EPD_4in26_SendCommandEh>
	EPD_4in26_SendData(0xAE);
 80012e8:	21ae      	movs	r1, #174	@ 0xae
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	f7ff fea6 	bl	800103c <_ZN9EPD_4in2618EPD_4in26_SendDataEh>
	EPD_4in26_SendData(0xC7);
 80012f0:	21c7      	movs	r1, #199	@ 0xc7
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f7ff fea2 	bl	800103c <_ZN9EPD_4in2618EPD_4in26_SendDataEh>
	EPD_4in26_SendData(0xC3);
 80012f8:	21c3      	movs	r1, #195	@ 0xc3
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f7ff fe9e 	bl	800103c <_ZN9EPD_4in2618EPD_4in26_SendDataEh>
	EPD_4in26_SendData(0xC0);
 8001300:	21c0      	movs	r1, #192	@ 0xc0
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f7ff fe9a 	bl	800103c <_ZN9EPD_4in2618EPD_4in26_SendDataEh>
	EPD_4in26_SendData(0x80);
 8001308:	2180      	movs	r1, #128	@ 0x80
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	f7ff fe96 	bl	800103c <_ZN9EPD_4in2618EPD_4in26_SendDataEh>

	EPD_4in26_SendCommand(0x01);   //      drive output control
 8001310:	2101      	movs	r1, #1
 8001312:	6878      	ldr	r0, [r7, #4]
 8001314:	f7ff fe3e 	bl	8000f94 <_ZN9EPD_4in2621EPD_4in26_SendCommandEh>
	EPD_4in26_SendData((EPD_4in26_HEIGHT-1)%256); //  Y
 8001318:	21df      	movs	r1, #223	@ 0xdf
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f7ff fe8e 	bl	800103c <_ZN9EPD_4in2618EPD_4in26_SendDataEh>
	EPD_4in26_SendData((EPD_4in26_HEIGHT-1)/256); //  Y
 8001320:	2101      	movs	r1, #1
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f7ff fe8a 	bl	800103c <_ZN9EPD_4in2618EPD_4in26_SendDataEh>
	EPD_4in26_SendData(0x02);
 8001328:	2102      	movs	r1, #2
 800132a:	6878      	ldr	r0, [r7, #4]
 800132c:	f7ff fe86 	bl	800103c <_ZN9EPD_4in2618EPD_4in26_SendDataEh>

	EPD_4in26_SendCommand(0x3C);        // Border       Border setting
 8001330:	213c      	movs	r1, #60	@ 0x3c
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	f7ff fe2e 	bl	8000f94 <_ZN9EPD_4in2621EPD_4in26_SendCommandEh>
	EPD_4in26_SendData(0x01);
 8001338:	2101      	movs	r1, #1
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	f7ff fe7e 	bl	800103c <_ZN9EPD_4in2618EPD_4in26_SendDataEh>

	EPD_4in26_SendCommand(0x11);        //    data  entry  mode
 8001340:	2111      	movs	r1, #17
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f7ff fe26 	bl	8000f94 <_ZN9EPD_4in2621EPD_4in26_SendCommandEh>
	EPD_4in26_SendData(0x01);           //       X-mode  x+ y-
 8001348:	2101      	movs	r1, #1
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f7ff fe76 	bl	800103c <_ZN9EPD_4in2618EPD_4in26_SendDataEh>

	EPD_4in26_SetWindows(0, EPD_4in26_HEIGHT-1, EPD_4in26_WIDTH-1, 0);
 8001350:	2300      	movs	r3, #0
 8001352:	9300      	str	r3, [sp, #0]
 8001354:	f240 331f 	movw	r3, #799	@ 0x31f
 8001358:	f240 12df 	movw	r2, #479	@ 0x1df
 800135c:	2100      	movs	r1, #0
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f7ff ff0f 	bl	8001182 <_ZN9EPD_4in2620EPD_4in26_SetWindowsEtttt>

	EPD_4in26_SetCursor(0, 0);
 8001364:	2200      	movs	r2, #0
 8001366:	2100      	movs	r1, #0
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	f7ff ff67 	bl	800123c <_ZN9EPD_4in2619EPD_4in26_SetCursorEtt>

	EPD_4in26_ReadBusy();
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f7ff feb9 	bl	80010e6 <_ZN9EPD_4in2618EPD_4in26_ReadBusyEv>
}
 8001374:	bf00      	nop
 8001376:	3708      	adds	r7, #8
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}

0800137c <_ZN9EPD_4in2622EPD_4in26_Display_BaseEPKh>:
	}
	EPD_4in26_TurnOnDisplay();
}

void EPD_4in26::EPD_4in26_Display_Base( const  UBYTE *Image)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b084      	sub	sp, #16
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	6039      	str	r1, [r7, #0]
	UWORD i;
	UWORD height = EPD_4in26_HEIGHT;
 8001386:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 800138a:	81bb      	strh	r3, [r7, #12]
	UWORD width = EPD_4in26_WIDTH/8;
 800138c:	2364      	movs	r3, #100	@ 0x64
 800138e:	817b      	strh	r3, [r7, #10]

//	EPD_4in26_SetWindows(0, EPD_4in26_HEIGHT-1, EPD_4in26_WIDTH-1, 0);
//
//	EPD_4in26_SetCursor(0, 0);

	EPD_4in26_SendCommand(0x24);   //write RAM for black(0)/white (1)
 8001390:	2124      	movs	r1, #36	@ 0x24
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f7ff fdfe 	bl	8000f94 <_ZN9EPD_4in2621EPD_4in26_SendCommandEh>
	for(i=0; i<height; i++)
 8001398:	2300      	movs	r3, #0
 800139a:	81fb      	strh	r3, [r7, #14]
 800139c:	e00e      	b.n	80013bc <_ZN9EPD_4in2622EPD_4in26_Display_BaseEPKh+0x40>
	{
		EPD_4in26_SendData2((UBYTE *)(Image+i*width), width);
 800139e:	89fb      	ldrh	r3, [r7, #14]
 80013a0:	897a      	ldrh	r2, [r7, #10]
 80013a2:	fb02 f303 	mul.w	r3, r2, r3
 80013a6:	461a      	mov	r2, r3
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	4413      	add	r3, r2
 80013ac:	897a      	ldrh	r2, [r7, #10]
 80013ae:	4619      	mov	r1, r3
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	f7ff fe6d 	bl	8001090 <_ZN9EPD_4in2619EPD_4in26_SendData2EPhm>
	for(i=0; i<height; i++)
 80013b6:	89fb      	ldrh	r3, [r7, #14]
 80013b8:	3301      	adds	r3, #1
 80013ba:	81fb      	strh	r3, [r7, #14]
 80013bc:	89fa      	ldrh	r2, [r7, #14]
 80013be:	89bb      	ldrh	r3, [r7, #12]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d3ec      	bcc.n	800139e <_ZN9EPD_4in2622EPD_4in26_Display_BaseEPKh+0x22>
	}

	EPD_4in26_SendCommand(0x26);   //write RAM for black(0)/white (1)
 80013c4:	2126      	movs	r1, #38	@ 0x26
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	f7ff fde4 	bl	8000f94 <_ZN9EPD_4in2621EPD_4in26_SendCommandEh>
	for(i=0; i<height; i++)
 80013cc:	2300      	movs	r3, #0
 80013ce:	81fb      	strh	r3, [r7, #14]
 80013d0:	e00e      	b.n	80013f0 <_ZN9EPD_4in2622EPD_4in26_Display_BaseEPKh+0x74>
	{
		EPD_4in26_SendData2((UBYTE *)(Image+i*width), width);
 80013d2:	89fb      	ldrh	r3, [r7, #14]
 80013d4:	897a      	ldrh	r2, [r7, #10]
 80013d6:	fb02 f303 	mul.w	r3, r2, r3
 80013da:	461a      	mov	r2, r3
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	4413      	add	r3, r2
 80013e0:	897a      	ldrh	r2, [r7, #10]
 80013e2:	4619      	mov	r1, r3
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f7ff fe53 	bl	8001090 <_ZN9EPD_4in2619EPD_4in26_SendData2EPhm>
	for(i=0; i<height; i++)
 80013ea:	89fb      	ldrh	r3, [r7, #14]
 80013ec:	3301      	adds	r3, #1
 80013ee:	81fb      	strh	r3, [r7, #14]
 80013f0:	89fa      	ldrh	r2, [r7, #14]
 80013f2:	89bb      	ldrh	r3, [r7, #12]
 80013f4:	429a      	cmp	r2, r3
 80013f6:	d3ec      	bcc.n	80013d2 <_ZN9EPD_4in2622EPD_4in26_Display_BaseEPKh+0x56>
	}
	EPD_4in26_TurnOnDisplay();
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	f7ff fe94 	bl	8001126 <_ZN9EPD_4in2623EPD_4in26_TurnOnDisplayEv>
}
 80013fe:	bf00      	nop
 8001400:	3710      	adds	r7, #16
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}

08001406 <_ZN9EPD_4in2623EPD_4in26_WriteToBufferEPKhtttt>:
	}

	EPD_4in26_TurnOnDisplay_Part();
}

void EPD_4in26::EPD_4in26_WriteToBuffer(const UBYTE *Image, UWORD x, UWORD y, UWORD w, UWORD l){
 8001406:	b590      	push	{r4, r7, lr}
 8001408:	b089      	sub	sp, #36	@ 0x24
 800140a:	af02      	add	r7, sp, #8
 800140c:	60f8      	str	r0, [r7, #12]
 800140e:	60b9      	str	r1, [r7, #8]
 8001410:	4611      	mov	r1, r2
 8001412:	461a      	mov	r2, r3
 8001414:	460b      	mov	r3, r1
 8001416:	80fb      	strh	r3, [r7, #6]
 8001418:	4613      	mov	r3, r2
 800141a:	80bb      	strh	r3, [r7, #4]

	UWORD i;
	UWORD height = l;
 800141c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800141e:	82bb      	strh	r3, [r7, #20]
	UWORD width =  (w % 8 == 0)? (w / 8 ): (w / 8 + 1);
 8001420:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001422:	f003 0307 	and.w	r3, r3, #7
 8001426:	2b00      	cmp	r3, #0
 8001428:	d103      	bne.n	8001432 <_ZN9EPD_4in2623EPD_4in26_WriteToBufferEPKhtttt+0x2c>
 800142a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800142c:	08db      	lsrs	r3, r3, #3
 800142e:	b29b      	uxth	r3, r3
 8001430:	e004      	b.n	800143c <_ZN9EPD_4in2623EPD_4in26_WriteToBufferEPKhtttt+0x36>
 8001432:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001434:	08db      	lsrs	r3, r3, #3
 8001436:	b29b      	uxth	r3, r3
 8001438:	3301      	adds	r3, #1
 800143a:	b29b      	uxth	r3, r3
 800143c:	827b      	strh	r3, [r7, #18]

    EPD_4in26_Reset();
 800143e:	68f8      	ldr	r0, [r7, #12]
 8001440:	f7ff fd7f 	bl	8000f42 <_ZN9EPD_4in2615EPD_4in26_ResetEv>

    EPD_4in26_SendCommand(0x18); // use the internal temperature sensor
 8001444:	2118      	movs	r1, #24
 8001446:	68f8      	ldr	r0, [r7, #12]
 8001448:	f7ff fda4 	bl	8000f94 <_ZN9EPD_4in2621EPD_4in26_SendCommandEh>
	EPD_4in26_SendData(0x80);
 800144c:	2180      	movs	r1, #128	@ 0x80
 800144e:	68f8      	ldr	r0, [r7, #12]
 8001450:	f7ff fdf4 	bl	800103c <_ZN9EPD_4in2618EPD_4in26_SendDataEh>

//	EPD_4in26_SendCommand(0x3C);        // Border       Border setting
//	EPD_4in26_SendData(0x80);

	EPD_4in26_SetWindows(x, EPD_4in26_HEIGHT-y-1, x+w-1, EPD_4in26_HEIGHT -(y+l));
 8001454:	88bb      	ldrh	r3, [r7, #4]
 8001456:	f5c3 73ef 	rsb	r3, r3, #478	@ 0x1de
 800145a:	3301      	adds	r3, #1
 800145c:	b298      	uxth	r0, r3
 800145e:	88fa      	ldrh	r2, [r7, #6]
 8001460:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001462:	4413      	add	r3, r2
 8001464:	b29b      	uxth	r3, r3
 8001466:	3b01      	subs	r3, #1
 8001468:	b29c      	uxth	r4, r3
 800146a:	88ba      	ldrh	r2, [r7, #4]
 800146c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800146e:	4413      	add	r3, r2
 8001470:	b29b      	uxth	r3, r3
 8001472:	f5c3 73f0 	rsb	r3, r3, #480	@ 0x1e0
 8001476:	b29b      	uxth	r3, r3
 8001478:	88f9      	ldrh	r1, [r7, #6]
 800147a:	9300      	str	r3, [sp, #0]
 800147c:	4623      	mov	r3, r4
 800147e:	4602      	mov	r2, r0
 8001480:	68f8      	ldr	r0, [r7, #12]
 8001482:	f7ff fe7e 	bl	8001182 <_ZN9EPD_4in2620EPD_4in26_SetWindowsEtttt>

	EPD_4in26_SetCursor(x, y);
 8001486:	88ba      	ldrh	r2, [r7, #4]
 8001488:	88fb      	ldrh	r3, [r7, #6]
 800148a:	4619      	mov	r1, r3
 800148c:	68f8      	ldr	r0, [r7, #12]
 800148e:	f7ff fed5 	bl	800123c <_ZN9EPD_4in2619EPD_4in26_SetCursorEtt>

	EPD_4in26_SendCommand(0x24);   //write RAM for black(0)/white (1)
 8001492:	2124      	movs	r1, #36	@ 0x24
 8001494:	68f8      	ldr	r0, [r7, #12]
 8001496:	f7ff fd7d 	bl	8000f94 <_ZN9EPD_4in2621EPD_4in26_SendCommandEh>
	for(i=0; i<height; i++)
 800149a:	2300      	movs	r3, #0
 800149c:	82fb      	strh	r3, [r7, #22]
 800149e:	e00e      	b.n	80014be <_ZN9EPD_4in2623EPD_4in26_WriteToBufferEPKhtttt+0xb8>
	{
		EPD_4in26_SendData2((UBYTE *)(Image+i*width), width);
 80014a0:	8afb      	ldrh	r3, [r7, #22]
 80014a2:	8a7a      	ldrh	r2, [r7, #18]
 80014a4:	fb02 f303 	mul.w	r3, r2, r3
 80014a8:	461a      	mov	r2, r3
 80014aa:	68bb      	ldr	r3, [r7, #8]
 80014ac:	4413      	add	r3, r2
 80014ae:	8a7a      	ldrh	r2, [r7, #18]
 80014b0:	4619      	mov	r1, r3
 80014b2:	68f8      	ldr	r0, [r7, #12]
 80014b4:	f7ff fdec 	bl	8001090 <_ZN9EPD_4in2619EPD_4in26_SendData2EPhm>
	for(i=0; i<height; i++)
 80014b8:	8afb      	ldrh	r3, [r7, #22]
 80014ba:	3301      	adds	r3, #1
 80014bc:	82fb      	strh	r3, [r7, #22]
 80014be:	8afa      	ldrh	r2, [r7, #22]
 80014c0:	8abb      	ldrh	r3, [r7, #20]
 80014c2:	429a      	cmp	r2, r3
 80014c4:	d3ec      	bcc.n	80014a0 <_ZN9EPD_4in2623EPD_4in26_WriteToBufferEPKhtttt+0x9a>
	}

}
 80014c6:	bf00      	nop
 80014c8:	bf00      	nop
 80014ca:	371c      	adds	r7, #28
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd90      	pop	{r4, r7, pc}

080014d0 <_ZSt23__is_constant_evaluatedv>:
  // This can be used without checking if the compiler supports the feature.
  // The macro _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED can be used to check if
  // the compiler support is present to make this function work as expected.
  _GLIBCXX_CONSTEXPR inline bool
  __is_constant_evaluated() _GLIBCXX_NOEXCEPT
  {
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
#if __cpp_if_consteval >= 202106L
# define _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED 1
    if consteval { return true; } else { return false; }
#elif __cplusplus >= 201103L && __has_builtin(__builtin_is_constant_evaluated)
# define _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED 1
    return __builtin_is_constant_evaluated();
 80014d4:	2300      	movs	r3, #0
#else
    return false;
#endif
  }
 80014d6:	4618      	mov	r0, r3
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr

080014e0 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	6039      	str	r1, [r7, #0]
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	4618      	mov	r0, r3
 80014ee:	370c      	adds	r7, #12
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr

080014f8 <_ZNK15FreeRTOSDeleterclEPv>:
#include <memory>
#include "FreeRTOS.h"
#include "main.h"
// Custom deleter for FreeRTOS allocated memory
struct FreeRTOSDeleter {
    void operator()(void* ptr) const {
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	6039      	str	r1, [r7, #0]
        vPortFree(ptr);
 8001502:	6838      	ldr	r0, [r7, #0]
 8001504:	f00b f9ae 	bl	800c864 <vPortFree>
    }
 8001508:	bf00      	nop
 800150a:	3708      	adds	r7, #8
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}

08001510 <_ZN11FrameBuffer11getInstanceEtttt>:

public:

	FrameBuffer() = delete;

    static FrameBuffer& getInstance(UWORD Width = EPD_4in26_WIDTH, UWORD Height= EPD_4in26_HEIGHT, UWORD Rotate = ROTATE_0, UWORD Color = WHITE) {
 8001510:	b590      	push	{r4, r7, lr}
 8001512:	b087      	sub	sp, #28
 8001514:	af02      	add	r7, sp, #8
 8001516:	4604      	mov	r4, r0
 8001518:	4608      	mov	r0, r1
 800151a:	4611      	mov	r1, r2
 800151c:	461a      	mov	r2, r3
 800151e:	4623      	mov	r3, r4
 8001520:	80fb      	strh	r3, [r7, #6]
 8001522:	4603      	mov	r3, r0
 8001524:	80bb      	strh	r3, [r7, #4]
 8001526:	460b      	mov	r3, r1
 8001528:	807b      	strh	r3, [r7, #2]
 800152a:	4613      	mov	r3, r2
 800152c:	803b      	strh	r3, [r7, #0]
        if (!instance) {
 800152e:	4818      	ldr	r0, [pc, #96]	@ (8001590 <_ZN11FrameBuffer11getInstanceEtttt+0x80>)
 8001530:	f002 fa4a 	bl	80039c8 <_ZNKSt10unique_ptrI11FrameBuffer15FreeRTOSDeleterEcvbEv>
 8001534:	4603      	mov	r3, r0
 8001536:	f083 0301 	eor.w	r3, r3, #1
 800153a:	b2db      	uxtb	r3, r3
 800153c:	2b00      	cmp	r3, #0
 800153e:	d01e      	beq.n	800157e <_ZN11FrameBuffer11getInstanceEtttt+0x6e>
        	void* mem = pvPortMalloc(sizeof(FrameBuffer));  // Allocate the singleton instance
 8001540:	2018      	movs	r0, #24
 8001542:	f00b f8bb 	bl	800c6bc <pvPortMalloc>
 8001546:	60f8      	str	r0, [r7, #12]
//            instance = std::unique_ptr<FrameBuffer>(new FrameBuffer(Width, Height, Rotate, Color)); // Use `new` since the constructor is private
        	if (mem) {
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d013      	beq.n	8001576 <_ZN11FrameBuffer11getInstanceEtttt+0x66>
				instance.reset(new (mem) FrameBuffer(Width, Height, Rotate, Color)); // Placement new
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	4619      	mov	r1, r3
 8001552:	2018      	movs	r0, #24
 8001554:	f7ff ffc4 	bl	80014e0 <_ZnwjPv>
 8001558:	4604      	mov	r4, r0
 800155a:	8878      	ldrh	r0, [r7, #2]
 800155c:	88ba      	ldrh	r2, [r7, #4]
 800155e:	88f9      	ldrh	r1, [r7, #6]
 8001560:	883b      	ldrh	r3, [r7, #0]
 8001562:	9300      	str	r3, [sp, #0]
 8001564:	4603      	mov	r3, r0
 8001566:	4620      	mov	r0, r4
 8001568:	f002 fd1f 	bl	8003faa <_ZN11FrameBufferC1Etttt>
 800156c:	4621      	mov	r1, r4
 800156e:	4808      	ldr	r0, [pc, #32]	@ (8001590 <_ZN11FrameBuffer11getInstanceEtttt+0x80>)
 8001570:	f002 fa3b 	bl	80039ea <_ZNSt10unique_ptrI11FrameBuffer15FreeRTOSDeleterE5resetEPS0_>
 8001574:	e003      	b.n	800157e <_ZN11FrameBuffer11getInstanceEtttt+0x6e>
			} else {
				LOG_ERROR("FreeRTOS allocation failed for FrameBuffer instance!");
 8001576:	4907      	ldr	r1, [pc, #28]	@ (8001594 <_ZN11FrameBuffer11getInstanceEtttt+0x84>)
 8001578:	2001      	movs	r0, #1
 800157a:	f7ff fc65 	bl	8000e48 <_Z12log_message2hPKcz>
			}
        }
        return *instance;
 800157e:	4804      	ldr	r0, [pc, #16]	@ (8001590 <_ZN11FrameBuffer11getInstanceEtttt+0x80>)
 8001580:	f002 fa47 	bl	8003a12 <_ZNKSt10unique_ptrI11FrameBuffer15FreeRTOSDeleterEdeEv>
 8001584:	4603      	mov	r3, r0
    }
 8001586:	4618      	mov	r0, r3
 8001588:	3714      	adds	r7, #20
 800158a:	46bd      	mov	sp, r7
 800158c:	bd90      	pop	{r4, r7, pc}
 800158e:	bf00      	nop
 8001590:	20000680 	.word	0x20000680
 8001594:	0800f994 	.word	0x0800f994

08001598 <_ZN11FrameBuffer8getImageEv>:

	UBYTE* getImage() {
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
		return Image.get();
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	4618      	mov	r0, r3
 80015a4:	f002 fa50 	bl	8003a48 <_ZNKSt10unique_ptrIA_h15FreeRTOSDeleterE3getEv>
 80015a8:	4603      	mov	r3, r0
	}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
	...

080015b4 <_ZN8DrawableC1EPFvvEttt>:

public:
//	?
	using Callback = void (*)();

	Drawable(Callback onSelect = nullptr,UWORD Rotate_ = ROTATE_0, UWORD Mirror_ = MIRROR_NONE, UWORD layer_ = 0):
 80015b4:	b480      	push	{r7}
 80015b6:	b085      	sub	sp, #20
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	60f8      	str	r0, [r7, #12]
 80015bc:	60b9      	str	r1, [r7, #8]
 80015be:	4611      	mov	r1, r2
 80015c0:	461a      	mov	r2, r3
 80015c2:	460b      	mov	r3, r1
 80015c4:	80fb      	strh	r3, [r7, #6]
 80015c6:	4613      	mov	r3, r2
 80015c8:	80bb      	strh	r3, [r7, #4]
		localRotate(Rotate_), localMirror(Mirror_), layer(layer_), onSelect(onSelect), updated(false), firstDraw(true), hide(false)
 80015ca:	4a12      	ldr	r2, [pc, #72]	@ (8001614 <_ZN8DrawableC1EPFvvEttt+0x60>)
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	601a      	str	r2, [r3, #0]
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	88fa      	ldrh	r2, [r7, #6]
 80015d4:	809a      	strh	r2, [r3, #4]
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	88ba      	ldrh	r2, [r7, #4]
 80015da:	80da      	strh	r2, [r3, #6]
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	8b3a      	ldrh	r2, [r7, #24]
 80015e0:	811a      	strh	r2, [r3, #8]
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	68ba      	ldr	r2, [r7, #8]
 80015e6:	60da      	str	r2, [r3, #12]
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	2200      	movs	r2, #0
 80015ec:	741a      	strb	r2, [r3, #16]
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	2201      	movs	r2, #1
 80015f2:	745a      	strb	r2, [r3, #17]
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	2200      	movs	r2, #0
 80015f8:	749a      	strb	r2, [r3, #18]
	{
		if(onSelect){
 80015fa:	68bb      	ldr	r3, [r7, #8]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d002      	beq.n	8001606 <_ZN8DrawableC1EPFvvEttt+0x52>
			isInteractable = true;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	2201      	movs	r2, #1
 8001604:	74da      	strb	r2, [r3, #19]
		}
		else{
			false;
		}
	}
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	4618      	mov	r0, r3
 800160a:	3714      	adds	r7, #20
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr
 8001614:	08012fc4 	.word	0x08012fc4

08001618 <_ZN8Drawable10onInteractEv>:

    virtual void draw(FrameBuffer& fb, UWORD xMove = 0, UWORD yMove =0) = 0;

    virtual void onInteract(){
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
    	if(onSelect)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d002      	beq.n	800162e <_ZN8Drawable10onInteractEv+0x16>
    		onSelect();
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	4798      	blx	r3
    };
 800162e:	bf00      	nop
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}

08001636 <_ZN8Drawable9clearAreaER11FrameBuffertt>:

    virtual void clearArea(FrameBuffer& fb, UWORD xStart = 0, UWORD yStart =0){}
 8001636:	b480      	push	{r7}
 8001638:	b085      	sub	sp, #20
 800163a:	af00      	add	r7, sp, #0
 800163c:	60f8      	str	r0, [r7, #12]
 800163e:	60b9      	str	r1, [r7, #8]
 8001640:	4611      	mov	r1, r2
 8001642:	461a      	mov	r2, r3
 8001644:	460b      	mov	r3, r1
 8001646:	80fb      	strh	r3, [r7, #6]
 8001648:	4613      	mov	r3, r2
 800164a:	80bb      	strh	r3, [r7, #4]
 800164c:	bf00      	nop
 800164e:	3714      	adds	r7, #20
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr

08001658 <_ZN8Drawable9highlightEb>:

    virtual void highlight(bool isSelected){};
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	460b      	mov	r3, r1
 8001662:	70fb      	strb	r3, [r7, #3]
 8001664:	bf00      	nop
 8001666:	370c      	adds	r7, #12
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr

08001670 <_ZN8Drawable12resetUpdatedEv>:

    virtual void resetUpdated(){
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
    	updated = true;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2201      	movs	r2, #1
 800167c:	741a      	strb	r2, [r3, #16]
    }
 800167e:	bf00      	nop
 8001680:	370c      	adds	r7, #12
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr

0800168a <_ZN8Drawable12interactableEv>:
    void triggerAction() {
    	if (onSelect)
    		onSelect();
    }

    bool interactable(){
 800168a:	b480      	push	{r7}
 800168c:	b083      	sub	sp, #12
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]
    	if (onSelect)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	68db      	ldr	r3, [r3, #12]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <_ZN8Drawable12interactableEv+0x14>
    		return true;
 800169a:	2301      	movs	r3, #1
 800169c:	e000      	b.n	80016a0 <_ZN8Drawable12interactableEv+0x16>
    	return false;
 800169e:	2300      	movs	r3, #0
    }
 80016a0:	4618      	mov	r0, r3
 80016a2:	370c      	adds	r7, #12
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr

080016ac <_ZN8Drawable11addCallbackEPFvvE>:

    void setInteractability(bool i){
    	isInteractable = i;
    }

    void addCallback(Callback cb){
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	6039      	str	r1, [r7, #0]
    	onSelect = cb;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	683a      	ldr	r2, [r7, #0]
 80016ba:	60da      	str	r2, [r3, #12]
    }
 80016bc:	bf00      	nop
 80016be:	370c      	adds	r7, #12
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr

080016c8 <_ZN8DrawableD1Ev>:

    virtual ~Drawable() = default;
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	4a04      	ldr	r2, [pc, #16]	@ (80016e4 <_ZN8DrawableD1Ev+0x1c>)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	601a      	str	r2, [r3, #0]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4618      	mov	r0, r3
 80016da:	370c      	adds	r7, #12
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr
 80016e4:	08012fc4 	.word	0x08012fc4

080016e8 <_ZN8DrawableD0Ev>:
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f7ff ffe9 	bl	80016c8 <_ZN8DrawableD1Ev>
 80016f6:	2114      	movs	r1, #20
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	f00b f9d3 	bl	800caa4 <_ZdlPvj>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4618      	mov	r0, r3
 8001702:	3708      	adds	r7, #8
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}

08001708 <_ZN9ContainerC1EttttPFvvE>:

#define MAX_CONTAINER_DRAWABLES 10  // Set a reasonable limit for contained drawables

class Container: public Drawable {
public:
	Container(UWORD xStart, UWORD yStart, UWORD xEnd, UWORD yEnd, Callback cb = nullptr):
 8001708:	b580      	push	{r7, lr}
 800170a:	b086      	sub	sp, #24
 800170c:	af02      	add	r7, sp, #8
 800170e:	60f8      	str	r0, [r7, #12]
 8001710:	4608      	mov	r0, r1
 8001712:	4611      	mov	r1, r2
 8001714:	461a      	mov	r2, r3
 8001716:	4603      	mov	r3, r0
 8001718:	817b      	strh	r3, [r7, #10]
 800171a:	460b      	mov	r3, r1
 800171c:	813b      	strh	r3, [r7, #8]
 800171e:	4613      	mov	r3, r2
 8001720:	80fb      	strh	r3, [r7, #6]
		Drawable(cb),
		xStart(xStart), yStart(yStart), xEnd(xEnd), yEnd(yEnd), drawableCount(0)
 8001722:	68f8      	ldr	r0, [r7, #12]
 8001724:	2300      	movs	r3, #0
 8001726:	9300      	str	r3, [sp, #0]
 8001728:	2300      	movs	r3, #0
 800172a:	2200      	movs	r2, #0
 800172c:	69f9      	ldr	r1, [r7, #28]
 800172e:	f7ff ff41 	bl	80015b4 <_ZN8DrawableC1EPFvvEttt>
 8001732:	4a0b      	ldr	r2, [pc, #44]	@ (8001760 <_ZN9ContainerC1EttttPFvvE+0x58>)
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	601a      	str	r2, [r3, #0]
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	897a      	ldrh	r2, [r7, #10]
 800173c:	829a      	strh	r2, [r3, #20]
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	893a      	ldrh	r2, [r7, #8]
 8001742:	82da      	strh	r2, [r3, #22]
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	88fa      	ldrh	r2, [r7, #6]
 8001748:	831a      	strh	r2, [r3, #24]
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	8b3a      	ldrh	r2, [r7, #24]
 800174e:	835a      	strh	r2, [r3, #26]
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	2200      	movs	r2, #0
 8001754:	645a      	str	r2, [r3, #68]	@ 0x44
	{

	}
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	4618      	mov	r0, r3
 800175a:	3710      	adds	r7, #16
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	08012fa0 	.word	0x08012fa0

08001764 <_ZN9Container4drawER11FrameBuffertt>:
    void draw(FrameBuffer& fb, UWORD xMove = 0, UWORD yMove =0) override{
 8001764:	b590      	push	{r4, r7, lr}
 8001766:	b087      	sub	sp, #28
 8001768:	af00      	add	r7, sp, #0
 800176a:	60f8      	str	r0, [r7, #12]
 800176c:	60b9      	str	r1, [r7, #8]
 800176e:	4611      	mov	r1, r2
 8001770:	461a      	mov	r2, r3
 8001772:	460b      	mov	r3, r1
 8001774:	80fb      	strh	r3, [r7, #6]
 8001776:	4613      	mov	r3, r2
 8001778:	80bb      	strh	r3, [r7, #4]
    	//TODO displace draws in the container?

    	UWORD x = xStart + xMove;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	8a9a      	ldrh	r2, [r3, #20]
 800177e:	88fb      	ldrh	r3, [r7, #6]
 8001780:	4413      	add	r3, r2
 8001782:	827b      	strh	r3, [r7, #18]
    	UWORD y = yStart + yMove;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	8ada      	ldrh	r2, [r3, #22]
 8001788:	88bb      	ldrh	r3, [r7, #4]
 800178a:	4413      	add	r3, r2
 800178c:	823b      	strh	r3, [r7, #16]

        for (int i = 0; i < drawableCount; i++) {
 800178e:	2300      	movs	r3, #0
 8001790:	617b      	str	r3, [r7, #20]
 8001792:	e032      	b.n	80017fa <_ZN9Container4drawER11FrameBuffertt+0x96>
			if(updated){
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	7c1b      	ldrb	r3, [r3, #16]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d012      	beq.n	80017c2 <_ZN9Container4drawER11FrameBuffertt+0x5e>
				drawables[i]->clearArea(fb, x, y);
 800179c:	68fa      	ldr	r2, [r7, #12]
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	3306      	adds	r3, #6
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	4413      	add	r3, r2
 80017a6:	6858      	ldr	r0, [r3, #4]
 80017a8:	68fa      	ldr	r2, [r7, #12]
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	3306      	adds	r3, #6
 80017ae:	009b      	lsls	r3, r3, #2
 80017b0:	4413      	add	r3, r2
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	3308      	adds	r3, #8
 80017b8:	681c      	ldr	r4, [r3, #0]
 80017ba:	8a3b      	ldrh	r3, [r7, #16]
 80017bc:	8a7a      	ldrh	r2, [r7, #18]
 80017be:	68b9      	ldr	r1, [r7, #8]
 80017c0:	47a0      	blx	r4
			}
			if(!hide){
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	7c9b      	ldrb	r3, [r3, #18]
 80017c6:	f083 0301 	eor.w	r3, r3, #1
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d011      	beq.n	80017f4 <_ZN9Container4drawER11FrameBuffertt+0x90>
				drawables[i]->draw(fb, x, y);
 80017d0:	68fa      	ldr	r2, [r7, #12]
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	3306      	adds	r3, #6
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	4413      	add	r3, r2
 80017da:	6858      	ldr	r0, [r3, #4]
 80017dc:	68fa      	ldr	r2, [r7, #12]
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	3306      	adds	r3, #6
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	4413      	add	r3, r2
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	681c      	ldr	r4, [r3, #0]
 80017ec:	8a3b      	ldrh	r3, [r7, #16]
 80017ee:	8a7a      	ldrh	r2, [r7, #18]
 80017f0:	68b9      	ldr	r1, [r7, #8]
 80017f2:	47a0      	blx	r4
        for (int i = 0; i < drawableCount; i++) {
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	3301      	adds	r3, #1
 80017f8:	617b      	str	r3, [r7, #20]
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017fe:	697a      	ldr	r2, [r7, #20]
 8001800:	429a      	cmp	r2, r3
 8001802:	dbc7      	blt.n	8001794 <_ZN9Container4drawER11FrameBuffertt+0x30>
			}
        }
        updated = false;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	2200      	movs	r2, #0
 8001808:	741a      	strb	r2, [r3, #16]

    }
 800180a:	bf00      	nop
 800180c:	371c      	adds	r7, #28
 800180e:	46bd      	mov	sp, r7
 8001810:	bd90      	pop	{r4, r7, pc}

08001812 <_ZN9Container12resetUpdatedEv>:

    void resetUpdated() override{
 8001812:	b580      	push	{r7, lr}
 8001814:	b084      	sub	sp, #16
 8001816:	af00      	add	r7, sp, #0
 8001818:	6078      	str	r0, [r7, #4]
        for (int i = 0; i < drawableCount; i++) {
 800181a:	2300      	movs	r3, #0
 800181c:	60fb      	str	r3, [r7, #12]
 800181e:	e013      	b.n	8001848 <_ZN9Container12resetUpdatedEv+0x36>
            drawables[i]->resetUpdated();
 8001820:	687a      	ldr	r2, [r7, #4]
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	3306      	adds	r3, #6
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	4413      	add	r3, r2
 800182a:	6859      	ldr	r1, [r3, #4]
 800182c:	687a      	ldr	r2, [r7, #4]
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	3306      	adds	r3, #6
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	4413      	add	r3, r2
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	3310      	adds	r3, #16
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4608      	mov	r0, r1
 8001840:	4798      	blx	r3
        for (int i = 0; i < drawableCount; i++) {
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	3301      	adds	r3, #1
 8001846:	60fb      	str	r3, [r7, #12]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800184c:	68fa      	ldr	r2, [r7, #12]
 800184e:	429a      	cmp	r2, r3
 8001850:	dbe6      	blt.n	8001820 <_ZN9Container12resetUpdatedEv+0xe>
        }
    }
 8001852:	bf00      	nop
 8001854:	bf00      	nop
 8001856:	3710      	adds	r7, #16
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}

0800185c <_ZN9Container9highlightEb>:

    void highlight(bool isSelected) override{
 800185c:	b580      	push	{r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	460b      	mov	r3, r1
 8001866:	70fb      	strb	r3, [r7, #3]
    	updated = true;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2201      	movs	r2, #1
 800186c:	741a      	strb	r2, [r3, #16]
    	for (int i = 0; i < drawableCount; i++) {
 800186e:	2300      	movs	r3, #0
 8001870:	60fb      	str	r3, [r7, #12]
 8001872:	e014      	b.n	800189e <_ZN9Container9highlightEb+0x42>
            drawables[i]->highlight(isSelected);
 8001874:	687a      	ldr	r2, [r7, #4]
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	3306      	adds	r3, #6
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	4413      	add	r3, r2
 800187e:	6858      	ldr	r0, [r3, #4]
 8001880:	687a      	ldr	r2, [r7, #4]
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	3306      	adds	r3, #6
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	4413      	add	r3, r2
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	330c      	adds	r3, #12
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	78fa      	ldrb	r2, [r7, #3]
 8001894:	4611      	mov	r1, r2
 8001896:	4798      	blx	r3
    	for (int i = 0; i < drawableCount; i++) {
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	3301      	adds	r3, #1
 800189c:	60fb      	str	r3, [r7, #12]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018a2:	68fa      	ldr	r2, [r7, #12]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	dbe5      	blt.n	8001874 <_ZN9Container9highlightEb+0x18>
        }
    }
 80018a8:	bf00      	nop
 80018aa:	bf00      	nop
 80018ac:	3710      	adds	r7, #16
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}

080018b2 <_ZN9Container11addDrawableEP8Drawable>:

    void addDrawable(Drawable * draw){
 80018b2:	b480      	push	{r7}
 80018b4:	b083      	sub	sp, #12
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
 80018ba:	6039      	str	r1, [r7, #0]
        if (drawableCount < MAX_CONTAINER_DRAWABLES) {
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018c0:	2b09      	cmp	r3, #9
 80018c2:	dc0a      	bgt.n	80018da <_ZN9Container11addDrawableEP8Drawable+0x28>
            drawables[drawableCount++] = draw;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018c8:	1c59      	adds	r1, r3, #1
 80018ca:	687a      	ldr	r2, [r7, #4]
 80018cc:	6451      	str	r1, [r2, #68]	@ 0x44
 80018ce:	687a      	ldr	r2, [r7, #4]
 80018d0:	3306      	adds	r3, #6
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	4413      	add	r3, r2
 80018d6:	683a      	ldr	r2, [r7, #0]
 80018d8:	605a      	str	r2, [r3, #4]
        }
    }
 80018da:	bf00      	nop
 80018dc:	370c      	adds	r7, #12
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr

080018e6 <_ZN9Container7setXEndEt>:

	UWORD getXEnd() const {
		return xEnd;
	}

	void setXEnd(UWORD xEnd) {
 80018e6:	b480      	push	{r7}
 80018e8:	b083      	sub	sp, #12
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]
 80018ee:	460b      	mov	r3, r1
 80018f0:	807b      	strh	r3, [r7, #2]
		this->xEnd = xEnd;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	887a      	ldrh	r2, [r7, #2]
 80018f6:	831a      	strh	r2, [r3, #24]
	}
 80018f8:	bf00      	nop
 80018fa:	370c      	adds	r7, #12
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr

08001904 <_ZN9Container9setXStartEt>:

	UWORD getXStart() const {
		return xStart;
	}

	void setXStart(UWORD xStart) {
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	460b      	mov	r3, r1
 800190e:	807b      	strh	r3, [r7, #2]
		this->xStart = xStart;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	887a      	ldrh	r2, [r7, #2]
 8001914:	829a      	strh	r2, [r3, #20]
	}
 8001916:	bf00      	nop
 8001918:	370c      	adds	r7, #12
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr

08001922 <_ZN9Container7setYEndEt>:

	UWORD getYEnd() const {
		return yEnd;
	}

	void setYEnd(UWORD yEnd) {
 8001922:	b480      	push	{r7}
 8001924:	b083      	sub	sp, #12
 8001926:	af00      	add	r7, sp, #0
 8001928:	6078      	str	r0, [r7, #4]
 800192a:	460b      	mov	r3, r1
 800192c:	807b      	strh	r3, [r7, #2]
		this->yEnd = yEnd;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	887a      	ldrh	r2, [r7, #2]
 8001932:	835a      	strh	r2, [r3, #26]
	}
 8001934:	bf00      	nop
 8001936:	370c      	adds	r7, #12
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr

08001940 <_ZN9Container9setYStartEt>:

	UWORD getYStart() const {
		return yStart;
	}

	void setYStart(UWORD yStart) {
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	460b      	mov	r3, r1
 800194a:	807b      	strh	r3, [r7, #2]
		this->yStart = yStart;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	887a      	ldrh	r2, [r7, #2]
 8001950:	82da      	strh	r2, [r3, #22]
	}
 8001952:	bf00      	nop
 8001954:	370c      	adds	r7, #12
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr

0800195e <_ZN6ScreenC1EPFv6ButtonEtttt>:

class Screen {
public:
	using Callback = void (*)(Button button);

    Screen(Callback cb = nullptr, UWORD Width_ = EPD_4in26_WIDTH, UWORD Height_  = EPD_4in26_HEIGHT, UWORD colour = WHITE, UWORD Rotate= ROTATE_0):
 800195e:	b480      	push	{r7}
 8001960:	b085      	sub	sp, #20
 8001962:	af00      	add	r7, sp, #0
 8001964:	60f8      	str	r0, [r7, #12]
 8001966:	60b9      	str	r1, [r7, #8]
 8001968:	4611      	mov	r1, r2
 800196a:	461a      	mov	r2, r3
 800196c:	460b      	mov	r3, r1
 800196e:	80fb      	strh	r3, [r7, #6]
 8001970:	4613      	mov	r3, r2
 8001972:	80bb      	strh	r3, [r7, #4]
    	currentSelection(-1),
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	f04f 32ff 	mov.w	r2, #4294967295
 800197a:	601a      	str	r2, [r3, #0]
		elementCount(0),
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	2200      	movs	r2, #0
 8001980:	62da      	str	r2, [r3, #44]	@ 0x2c
//		selectableCount(0),
		buttonCb(cb),
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	68ba      	ldr	r2, [r7, #8]
 8001986:	631a      	str	r2, [r3, #48]	@ 0x30
		Colour(colour)
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	8b3a      	ldrh	r2, [r7, #24]
 800198c:	869a      	strh	r2, [r3, #52]	@ 0x34
    {

    }
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	4618      	mov	r0, r3
 8001992:	3714      	adds	r7, #20
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr

0800199c <_ZN6ScreenD1Ev>:

    ~Screen() {
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
    }
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	4618      	mov	r0, r3
 80019a8:	370c      	adds	r7, #12
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr

080019b2 <_ZN6Screen11addDrawableEP8Drawable>:
        }
    }



    void addDrawable(Drawable* obj) {
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b082      	sub	sp, #8
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	6078      	str	r0, [r7, #4]
 80019ba:	6039      	str	r1, [r7, #0]
    	if (elementCount < MAX_SCREEN_DRAWABLES) {
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019c0:	2b09      	cmp	r3, #9
 80019c2:	dc1d      	bgt.n	8001a00 <_ZN6Screen11addDrawableEP8Drawable+0x4e>

			if(obj->interactable() && currentSelection == -1){
 80019c4:	6838      	ldr	r0, [r7, #0]
 80019c6:	f7ff fe60 	bl	800168a <_ZN8Drawable12interactableEv>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d006      	beq.n	80019de <_ZN6Screen11addDrawableEP8Drawable+0x2c>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019d8:	d101      	bne.n	80019de <_ZN6Screen11addDrawableEP8Drawable+0x2c>
 80019da:	2301      	movs	r3, #1
 80019dc:	e000      	b.n	80019e0 <_ZN6Screen11addDrawableEP8Drawable+0x2e>
 80019de:	2300      	movs	r3, #0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d003      	beq.n	80019ec <_ZN6Screen11addDrawableEP8Drawable+0x3a>
				currentSelection = elementCount;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	601a      	str	r2, [r3, #0]
			}

			elements[elementCount++] = obj;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019f0:	1c59      	adds	r1, r3, #1
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	4413      	add	r3, r2
 80019fc:	683a      	ldr	r2, [r7, #0]
 80019fe:	605a      	str	r2, [r3, #4]
		}
    }
 8001a00:	bf00      	nop
 8001a02:	3708      	adds	r7, #8
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}

08001a08 <_ZN6Screen8getImageEv>:

    inline UBYTE* getImage() {
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
    	FrameBuffer& fb = FrameBuffer::getInstance();
 8001a10:	23ff      	movs	r3, #255	@ 0xff
 8001a12:	2200      	movs	r2, #0
 8001a14:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8001a18:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8001a1c:	f7ff fd78 	bl	8001510 <_ZN11FrameBuffer11getInstanceEtttt>
 8001a20:	60f8      	str	r0, [r7, #12]

    	return fb.getImage();
 8001a22:	68f8      	ldr	r0, [r7, #12]
 8001a24:	f7ff fdb8 	bl	8001598 <_ZN11FrameBuffer8getImageEv>
 8001a28:	4603      	mov	r3, r0
    }
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3710      	adds	r7, #16
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <_ZN6Screen11cleanRenderEv>:

        for (int i = 0; i < elementCount; i++) {
            elements[i]->draw(fb);
        }
    }
    void cleanRender() {
 8001a32:	b590      	push	{r4, r7, lr}
 8001a34:	b085      	sub	sp, #20
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]
    	clear(Colour);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8001a3e:	4619      	mov	r1, r3
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	f000 f84d 	bl	8001ae0 <_ZN6Screen5clearEt>

    	//safety highlight
        if (currentSelection > -1) {
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	db10      	blt.n	8001a70 <_ZN6Screen11cleanRenderEv+0x3e>
        	elements[currentSelection]->highlight(true);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	687a      	ldr	r2, [r7, #4]
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	4413      	add	r3, r2
 8001a58:	6858      	ldr	r0, [r3, #4]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	687a      	ldr	r2, [r7, #4]
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	4413      	add	r3, r2
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	330c      	adds	r3, #12
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2101      	movs	r1, #1
 8001a6e:	4798      	blx	r3
        }

    	FrameBuffer& fb = FrameBuffer::getInstance();
 8001a70:	23ff      	movs	r3, #255	@ 0xff
 8001a72:	2200      	movs	r2, #0
 8001a74:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8001a78:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8001a7c:	f7ff fd48 	bl	8001510 <_ZN11FrameBuffer11getInstanceEtttt>
 8001a80:	60b8      	str	r0, [r7, #8]

//        }
        for (int i = 0; i < elementCount; i++) {
 8001a82:	2300      	movs	r3, #0
 8001a84:	60fb      	str	r3, [r7, #12]
 8001a86:	e021      	b.n	8001acc <_ZN6Screen11cleanRenderEv+0x9a>
        	elements[i]->resetUpdated();
 8001a88:	687a      	ldr	r2, [r7, #4]
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	4413      	add	r3, r2
 8001a90:	6859      	ldr	r1, [r3, #4]
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	4413      	add	r3, r2
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	3310      	adds	r3, #16
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4608      	mov	r0, r1
 8001aa4:	4798      	blx	r3
            elements[i]->draw(fb);
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	4413      	add	r3, r2
 8001aae:	6858      	ldr	r0, [r3, #4]
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	009b      	lsls	r3, r3, #2
 8001ab6:	4413      	add	r3, r2
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	681c      	ldr	r4, [r3, #0]
 8001abe:	2300      	movs	r3, #0
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	68b9      	ldr	r1, [r7, #8]
 8001ac4:	47a0      	blx	r4
        for (int i = 0; i < elementCount; i++) {
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	3301      	adds	r3, #1
 8001aca:	60fb      	str	r3, [r7, #12]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ad0:	68fa      	ldr	r2, [r7, #12]
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	dbd8      	blt.n	8001a88 <_ZN6Screen11cleanRenderEv+0x56>
        }
    }
 8001ad6:	bf00      	nop
 8001ad8:	bf00      	nop
 8001ada:	3714      	adds	r7, #20
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd90      	pop	{r4, r7, pc}

08001ae0 <_ZN6Screen5clearEt>:

    void clear(UWORD colour){
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
 8001ae8:	460b      	mov	r3, r1
 8001aea:	807b      	strh	r3, [r7, #2]
    	FrameBuffer& fb = FrameBuffer::getInstance();
 8001aec:	23ff      	movs	r3, #255	@ 0xff
 8001aee:	2200      	movs	r2, #0
 8001af0:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8001af4:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8001af8:	f7ff fd0a 	bl	8001510 <_ZN11FrameBuffer11getInstanceEtttt>
 8001afc:	60f8      	str	r0, [r7, #12]

    	fb.Paint_Clear(colour);
 8001afe:	887b      	ldrh	r3, [r7, #2]
 8001b00:	4619      	mov	r1, r3
 8001b02:	68f8      	ldr	r0, [r7, #12]
 8001b04:	f002 fc74 	bl	80043f0 <_ZN11FrameBuffer11Paint_ClearEt>
    }
 8001b08:	bf00      	nop
 8001b0a:	3710      	adds	r7, #16
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}

08001b10 <_ZN6Screen17setButtonCallbackEPFv6ButtonE>:
    	if(buttonCb){
    		buttonCb(bt);
    	}
    }

    void setButtonCallback(Callback cb){
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	6039      	str	r1, [r7, #0]
    	buttonCb = cb;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	683a      	ldr	r2, [r7, #0]
 8001b1e:	631a      	str	r2, [r3, #48]	@ 0x30
    }
 8001b20:	bf00      	nop
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <_ZN9Rectangle4drawER11FrameBuffertt>:
	DOT_PIXEL lineWidth;
	DRAW_FILL fill;
  /* data */
public:

	void draw(FrameBuffer& fb, UWORD xStart = 0, UWORD yStart =0) override {
 8001b2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b2e:	b089      	sub	sp, #36	@ 0x24
 8001b30:	af04      	add	r7, sp, #16
 8001b32:	60f8      	str	r0, [r7, #12]
 8001b34:	60b9      	str	r1, [r7, #8]
 8001b36:	4611      	mov	r1, r2
 8001b38:	461a      	mov	r2, r3
 8001b3a:	460b      	mov	r3, r1
 8001b3c:	80fb      	strh	r3, [r7, #6]
 8001b3e:	4613      	mov	r3, r2
 8001b40:	80bb      	strh	r3, [r7, #4]

		if (updated || firstDraw ){
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	7c1b      	ldrb	r3, [r3, #16]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d103      	bne.n	8001b52 <_ZN9Rectangle4drawER11FrameBuffertt+0x26>
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	7c5b      	ldrb	r3, [r3, #17]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d023      	beq.n	8001b9a <_ZN9Rectangle4drawER11FrameBuffertt+0x6e>
			fb.Paint_DrawRectangle(this->xStart + xStart, this->yStart+ yStart, xEnd+ xStart, yEnd+ yStart, color, lineWidth, fill);
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	8a9a      	ldrh	r2, [r3, #20]
 8001b56:	88fb      	ldrh	r3, [r7, #6]
 8001b58:	4413      	add	r3, r2
 8001b5a:	b29c      	uxth	r4, r3
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	8ada      	ldrh	r2, [r3, #22]
 8001b60:	88bb      	ldrh	r3, [r7, #4]
 8001b62:	4413      	add	r3, r2
 8001b64:	b29d      	uxth	r5, r3
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	8b1a      	ldrh	r2, [r3, #24]
 8001b6a:	88fb      	ldrh	r3, [r7, #6]
 8001b6c:	4413      	add	r3, r2
 8001b6e:	b29e      	uxth	r6, r3
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	8b5a      	ldrh	r2, [r3, #26]
 8001b74:	88bb      	ldrh	r3, [r7, #4]
 8001b76:	4413      	add	r3, r2
 8001b78:	b29b      	uxth	r3, r3
 8001b7a:	68fa      	ldr	r2, [r7, #12]
 8001b7c:	8b92      	ldrh	r2, [r2, #28]
 8001b7e:	68f9      	ldr	r1, [r7, #12]
 8001b80:	7f89      	ldrb	r1, [r1, #30]
 8001b82:	68f8      	ldr	r0, [r7, #12]
 8001b84:	7fc0      	ldrb	r0, [r0, #31]
 8001b86:	9003      	str	r0, [sp, #12]
 8001b88:	9102      	str	r1, [sp, #8]
 8001b8a:	9201      	str	r2, [sp, #4]
 8001b8c:	9300      	str	r3, [sp, #0]
 8001b8e:	4633      	mov	r3, r6
 8001b90:	462a      	mov	r2, r5
 8001b92:	4621      	mov	r1, r4
 8001b94:	68b8      	ldr	r0, [r7, #8]
 8001b96:	f002 fe4b 	bl	8004830 <_ZN11FrameBuffer19Paint_DrawRectangleEttttt9DOT_PIXEL9DRAW_FILL>
		}
		firstDraw = false;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	745a      	strb	r2, [r3, #17]
		updated = false;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	741a      	strb	r2, [r3, #16]
    }
 8001ba6:	bf00      	nop
 8001ba8:	3714      	adds	r7, #20
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001bae <_ZN9Rectangle9clearAreaER11FrameBuffertt>:

    void clearArea(FrameBuffer& fb, UWORD xStart = 0, UWORD yStart =0) override {
 8001bae:	b590      	push	{r4, r7, lr}
 8001bb0:	b087      	sub	sp, #28
 8001bb2:	af02      	add	r7, sp, #8
 8001bb4:	60f8      	str	r0, [r7, #12]
 8001bb6:	60b9      	str	r1, [r7, #8]
 8001bb8:	4611      	mov	r1, r2
 8001bba:	461a      	mov	r2, r3
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	80fb      	strh	r3, [r7, #6]
 8001bc0:	4613      	mov	r3, r2
 8001bc2:	80bb      	strh	r3, [r7, #4]
//    	updated = true;
    	fb.Paint_ClearWindows(this->xStart + xStart, this->yStart+ yStart, xEnd+ xStart, yEnd+ yStart, color==BLACK?WHITE:BLACK);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	8a9a      	ldrh	r2, [r3, #20]
 8001bc8:	88fb      	ldrh	r3, [r7, #6]
 8001bca:	4413      	add	r3, r2
 8001bcc:	b299      	uxth	r1, r3
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	8ada      	ldrh	r2, [r3, #22]
 8001bd2:	88bb      	ldrh	r3, [r7, #4]
 8001bd4:	4413      	add	r3, r2
 8001bd6:	b298      	uxth	r0, r3
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	8b1a      	ldrh	r2, [r3, #24]
 8001bdc:	88fb      	ldrh	r3, [r7, #6]
 8001bde:	4413      	add	r3, r2
 8001be0:	b29c      	uxth	r4, r3
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	8b5a      	ldrh	r2, [r3, #26]
 8001be6:	88bb      	ldrh	r3, [r7, #4]
 8001be8:	4413      	add	r3, r2
 8001bea:	b29b      	uxth	r3, r3
 8001bec:	68fa      	ldr	r2, [r7, #12]
 8001bee:	8b92      	ldrh	r2, [r2, #28]
 8001bf0:	2a00      	cmp	r2, #0
 8001bf2:	d101      	bne.n	8001bf8 <_ZN9Rectangle9clearAreaER11FrameBuffertt+0x4a>
 8001bf4:	22ff      	movs	r2, #255	@ 0xff
 8001bf6:	e000      	b.n	8001bfa <_ZN9Rectangle9clearAreaER11FrameBuffertt+0x4c>
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	9201      	str	r2, [sp, #4]
 8001bfc:	9300      	str	r3, [sp, #0]
 8001bfe:	4623      	mov	r3, r4
 8001c00:	4602      	mov	r2, r0
 8001c02:	68b8      	ldr	r0, [r7, #8]
 8001c04:	f002 fc9b 	bl	800453e <_ZN11FrameBuffer18Paint_ClearWindowsEttttt>
    }
 8001c08:	bf00      	nop
 8001c0a:	3714      	adds	r7, #20
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd90      	pop	{r4, r7, pc}

08001c10 <_ZN9RectangleC1Ettttt9DOT_PIXEL9DRAW_FILLPFvvEttt>:


    Rectangle(UWORD xStart, UWORD yStart, UWORD xEnd, UWORD yEnd, UWORD color, DOT_PIXEL lineWidth, DRAW_FILL fill,
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b086      	sub	sp, #24
 8001c14:	af02      	add	r7, sp, #8
 8001c16:	60f8      	str	r0, [r7, #12]
 8001c18:	4608      	mov	r0, r1
 8001c1a:	4611      	mov	r1, r2
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	4603      	mov	r3, r0
 8001c20:	817b      	strh	r3, [r7, #10]
 8001c22:	460b      	mov	r3, r1
 8001c24:	813b      	strh	r3, [r7, #8]
 8001c26:	4613      	mov	r3, r2
 8001c28:	80fb      	strh	r3, [r7, #6]
    		Callback onSelect = nullptr,
    		UWORD Rotate_ = ROTATE_0, UWORD Mirror_ = MIRROR_NONE, UWORD layer_ = 0 ):
    	Drawable(onSelect, Rotate_, Mirror_,  layer_),
    	xStart(xStart), yStart(yStart), xEnd(xEnd), yEnd(yEnd), color(color), lineWidth(lineWidth), fill(fill) {}
 8001c2a:	68f8      	ldr	r0, [r7, #12]
 8001c2c:	8e39      	ldrh	r1, [r7, #48]	@ 0x30
 8001c2e:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8001c30:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001c32:	9300      	str	r3, [sp, #0]
 8001c34:	460b      	mov	r3, r1
 8001c36:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001c38:	f7ff fcbc 	bl	80015b4 <_ZN8DrawableC1EPFvvEttt>
 8001c3c:	4a0f      	ldr	r2, [pc, #60]	@ (8001c7c <_ZN9RectangleC1Ettttt9DOT_PIXEL9DRAW_FILLPFvvEttt+0x6c>)
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	601a      	str	r2, [r3, #0]
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	897a      	ldrh	r2, [r7, #10]
 8001c46:	829a      	strh	r2, [r3, #20]
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	893a      	ldrh	r2, [r7, #8]
 8001c4c:	82da      	strh	r2, [r3, #22]
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	88fa      	ldrh	r2, [r7, #6]
 8001c52:	831a      	strh	r2, [r3, #24]
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	8b3a      	ldrh	r2, [r7, #24]
 8001c58:	835a      	strh	r2, [r3, #26]
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	8bba      	ldrh	r2, [r7, #28]
 8001c5e:	839a      	strh	r2, [r3, #28]
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001c66:	779a      	strb	r2, [r3, #30]
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8001c6e:	77da      	strb	r2, [r3, #31]
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	4618      	mov	r0, r3
 8001c74:	3710      	adds	r7, #16
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	08012f7c 	.word	0x08012f7c

08001c80 <_ZN9RectangleD1Ev>:
    ~Rectangle(){}
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	4a05      	ldr	r2, [pc, #20]	@ (8001ca0 <_ZN9RectangleD1Ev+0x20>)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	601a      	str	r2, [r3, #0]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7ff fd19 	bl	80016c8 <_ZN8DrawableD1Ev>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3708      	adds	r7, #8
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	08012f7c 	.word	0x08012f7c

08001ca4 <_ZN9RectangleD0Ev>:
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f7ff ffe7 	bl	8001c80 <_ZN9RectangleD1Ev>
 8001cb2:	2120      	movs	r1, #32
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	f00a fef5 	bl	800caa4 <_ZdlPvj>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3708      	adds	r7, #8
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}

08001cc4 <_ZN28HighLightOnInteractRectangleC1Ettttt9DOT_PIXEL9DRAW_FILLPFvvEttt>:

};

class HighLightOnInteractRectangle: public Rectangle {
public:
	HighLightOnInteractRectangle(
 8001cc4:	b590      	push	{r4, r7, lr}
 8001cc6:	b08d      	sub	sp, #52	@ 0x34
 8001cc8:	af08      	add	r7, sp, #32
 8001cca:	60f8      	str	r0, [r7, #12]
 8001ccc:	4608      	mov	r0, r1
 8001cce:	4611      	mov	r1, r2
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	817b      	strh	r3, [r7, #10]
 8001cd6:	460b      	mov	r3, r1
 8001cd8:	813b      	strh	r3, [r7, #8]
 8001cda:	4613      	mov	r3, r2
 8001cdc:	80fb      	strh	r3, [r7, #6]
			UWORD xStart, UWORD yStart, UWORD xEnd, UWORD yEnd,
			UWORD color, DOT_PIXEL lineWidth, DRAW_FILL fill,
			Callback onSelect = nullptr,
			UWORD Rotate_ = ROTATE_0, UWORD Mirror_ = MIRROR_NONE, UWORD layer_ = 0 ):
		Rectangle(xStart, yStart, xEnd, yEnd, color, lineWidth, fill, onSelect, Rotate_, Mirror_,  layer_)
 8001cde:	68f8      	ldr	r0, [r7, #12]
 8001ce0:	88fc      	ldrh	r4, [r7, #6]
 8001ce2:	893a      	ldrh	r2, [r7, #8]
 8001ce4:	8979      	ldrh	r1, [r7, #10]
 8001ce6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001ce8:	9307      	str	r3, [sp, #28]
 8001cea:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8001cec:	9306      	str	r3, [sp, #24]
 8001cee:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001cf0:	9305      	str	r3, [sp, #20]
 8001cf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001cf4:	9304      	str	r3, [sp, #16]
 8001cf6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001cfa:	9303      	str	r3, [sp, #12]
 8001cfc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001d00:	9302      	str	r3, [sp, #8]
 8001d02:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001d04:	9301      	str	r3, [sp, #4]
 8001d06:	8c3b      	ldrh	r3, [r7, #32]
 8001d08:	9300      	str	r3, [sp, #0]
 8001d0a:	4623      	mov	r3, r4
 8001d0c:	f7ff ff80 	bl	8001c10 <_ZN9RectangleC1Ettttt9DOT_PIXEL9DRAW_FILLPFvvEttt>
 8001d10:	4a03      	ldr	r2, [pc, #12]	@ (8001d20 <_ZN28HighLightOnInteractRectangleC1Ettttt9DOT_PIXEL9DRAW_FILLPFvvEttt+0x5c>)
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	601a      	str	r2, [r3, #0]
	    {}
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3714      	adds	r7, #20
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd90      	pop	{r4, r7, pc}
 8001d20:	08012f58 	.word	0x08012f58

08001d24 <_ZN28HighLightOnInteractRectangle9highlightEb>:
private:
	virtual void highlight(bool isSelected) override{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	70fb      	strb	r3, [r7, #3]
		if(isSelected){
 8001d30:	78fb      	ldrb	r3, [r7, #3]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d003      	beq.n	8001d3e <_ZN28HighLightOnInteractRectangle9highlightEb+0x1a>
			this->fill = DRAW_FILL_FULL;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2201      	movs	r2, #1
 8001d3a:	77da      	strb	r2, [r3, #31]
 8001d3c:	e002      	b.n	8001d44 <_ZN28HighLightOnInteractRectangle9highlightEb+0x20>
		}else {
			this->fill = DRAW_FILL_EMPTY;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2200      	movs	r2, #0
 8001d42:	77da      	strb	r2, [r3, #31]
		}
		updated = true;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2201      	movs	r2, #1
 8001d48:	741a      	strb	r2, [r3, #16]
	}
 8001d4a:	bf00      	nop
 8001d4c:	370c      	adds	r7, #12
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr

08001d56 <_ZN13ScreenManagerC1EP9EPD_4in26>:


class ScreenManager {
public:
	ScreenManager() = delete;
	ScreenManager(EPD_4in26 * _EPDController):  EPDController(_EPDController),
 8001d56:	b480      	push	{r7}
 8001d58:	b083      	sub	sp, #12
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	6078      	str	r0, [r7, #4]
 8001d5e:	6039      	str	r1, [r7, #0]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	683a      	ldr	r2, [r7, #0]
 8001d64:	601a      	str	r2, [r3, #0]
			currentScreen(nullptr), screentype(ScreenType::HomeScreen) {}
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	605a      	str	r2, [r3, #4]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	609a      	str	r2, [r3, #8]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4618      	mov	r0, r3
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr

08001d80 <_ZN6BitMapC1EPKhttttt>:

#include "Drawable.h"

class BitMap: public Drawable{
public:
	BitMap(const UBYTE* img, UWORD xStart = 0, UWORD yStart = 0,UWORD width = 0, UWORD height = 0, UWORD flipColour = WHITE):
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b086      	sub	sp, #24
 8001d84:	af02      	add	r7, sp, #8
 8001d86:	60f8      	str	r0, [r7, #12]
 8001d88:	60b9      	str	r1, [r7, #8]
 8001d8a:	4611      	mov	r1, r2
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	460b      	mov	r3, r1
 8001d90:	80fb      	strh	r3, [r7, #6]
 8001d92:	4613      	mov	r3, r2
 8001d94:	80bb      	strh	r3, [r7, #4]
		Drawable(),
		img(img), xStart(xStart), yStart(yStart), width(width), height(height), flipColour(flipColour){}
 8001d96:	68f8      	ldr	r0, [r7, #12]
 8001d98:	2300      	movs	r3, #0
 8001d9a:	9300      	str	r3, [sp, #0]
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	2200      	movs	r2, #0
 8001da0:	2100      	movs	r1, #0
 8001da2:	f7ff fc07 	bl	80015b4 <_ZN8DrawableC1EPFvvEttt>
 8001da6:	4a0d      	ldr	r2, [pc, #52]	@ (8001ddc <_ZN6BitMapC1EPKhttttt+0x5c>)
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	601a      	str	r2, [r3, #0]
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	68ba      	ldr	r2, [r7, #8]
 8001db0:	615a      	str	r2, [r3, #20]
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	88fa      	ldrh	r2, [r7, #6]
 8001db6:	831a      	strh	r2, [r3, #24]
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	88ba      	ldrh	r2, [r7, #4]
 8001dbc:	835a      	strh	r2, [r3, #26]
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	8b3a      	ldrh	r2, [r7, #24]
 8001dc2:	839a      	strh	r2, [r3, #28]
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	8bba      	ldrh	r2, [r7, #28]
 8001dc8:	83da      	strh	r2, [r3, #30]
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	8c3a      	ldrh	r2, [r7, #32]
 8001dce:	841a      	strh	r2, [r3, #32]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3710      	adds	r7, #16
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	08012f34 	.word	0x08012f34

08001de0 <_ZN6BitMap4drawER11FrameBuffertt>:

	void draw(FrameBuffer& fb, UWORD xMove= 0, UWORD yMove=0) override{
 8001de0:	b5b0      	push	{r4, r5, r7, lr}
 8001de2:	b088      	sub	sp, #32
 8001de4:	af04      	add	r7, sp, #16
 8001de6:	60f8      	str	r0, [r7, #12]
 8001de8:	60b9      	str	r1, [r7, #8]
 8001dea:	4611      	mov	r1, r2
 8001dec:	461a      	mov	r2, r3
 8001dee:	460b      	mov	r3, r1
 8001df0:	80fb      	strh	r3, [r7, #6]
 8001df2:	4613      	mov	r3, r2
 8001df4:	80bb      	strh	r3, [r7, #4]
//		LOG_WARN("x: %i, y: %i", this->xStart + xMove,this->yStart + yMove);
		if(updated){
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	7c1b      	ldrb	r3, [r3, #16]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d01b      	beq.n	8001e36 <_ZN6BitMap4drawER11FrameBuffertt+0x56>
			fb.Paint_DrawBitMap_Paste(img, this->xStart + xMove, this->yStart + yMove, width , height , flipColour);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	6958      	ldr	r0, [r3, #20]
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	8b1a      	ldrh	r2, [r3, #24]
 8001e06:	88fb      	ldrh	r3, [r7, #6]
 8001e08:	4413      	add	r3, r2
 8001e0a:	b29c      	uxth	r4, r3
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	8b5a      	ldrh	r2, [r3, #26]
 8001e10:	88bb      	ldrh	r3, [r7, #4]
 8001e12:	4413      	add	r3, r2
 8001e14:	b29d      	uxth	r5, r3
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	8b9b      	ldrh	r3, [r3, #28]
 8001e1a:	68fa      	ldr	r2, [r7, #12]
 8001e1c:	8bd2      	ldrh	r2, [r2, #30]
 8001e1e:	68f9      	ldr	r1, [r7, #12]
 8001e20:	8c09      	ldrh	r1, [r1, #32]
 8001e22:	b2c9      	uxtb	r1, r1
 8001e24:	9102      	str	r1, [sp, #8]
 8001e26:	9201      	str	r2, [sp, #4]
 8001e28:	9300      	str	r3, [sp, #0]
 8001e2a:	462b      	mov	r3, r5
 8001e2c:	4622      	mov	r2, r4
 8001e2e:	4601      	mov	r1, r0
 8001e30:	68b8      	ldr	r0, [r7, #8]
 8001e32:	f002 ffd7 	bl	8004de4 <_ZN11FrameBuffer22Paint_DrawBitMap_PasteEPKhtttth>
		}
		updated = false;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	741a      	strb	r2, [r3, #16]
	}
 8001e3c:	bf00      	nop
 8001e3e:	3710      	adds	r7, #16
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bdb0      	pop	{r4, r5, r7, pc}

08001e44 <_ZN6BitMap9highlightEb>:

	void highlight(bool isSelected) override{};
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	460b      	mov	r3, r1
 8001e4e:	70fb      	strb	r3, [r7, #3]
 8001e50:	bf00      	nop
 8001e52:	370c      	adds	r7, #12
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr

08001e5c <_ZN8DrawText4drawER11FrameBuffertt>:
	UWORD Color_Foreground;
	UWORD Color_Background;
  /* data */
public:

    void draw(FrameBuffer& fb, UWORD xMove = 0, UWORD yMove = 0) override{
 8001e5c:	b5b0      	push	{r4, r5, r7, lr}
 8001e5e:	b088      	sub	sp, #32
 8001e60:	af04      	add	r7, sp, #16
 8001e62:	60f8      	str	r0, [r7, #12]
 8001e64:	60b9      	str	r1, [r7, #8]
 8001e66:	4611      	mov	r1, r2
 8001e68:	461a      	mov	r2, r3
 8001e6a:	460b      	mov	r3, r1
 8001e6c:	80fb      	strh	r3, [r7, #6]
 8001e6e:	4613      	mov	r3, r2
 8001e70:	80bb      	strh	r3, [r7, #4]
    	if(updated){
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	7c1b      	ldrb	r3, [r3, #16]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d03a      	beq.n	8001ef0 <_ZN8DrawText4drawER11FrameBuffertt+0x94>
			if(pTime == nullptr)
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	69db      	ldr	r3, [r3, #28]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d11b      	bne.n	8001eba <_ZN8DrawText4drawER11FrameBuffertt+0x5e>
				fb.Paint_DrawString_EN( Xstart + xMove,  Ystart + yMove,  pString, Font,  Color_Foreground,  Color_Background); // we want to pass in a array
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	8a9a      	ldrh	r2, [r3, #20]
 8001e86:	88fb      	ldrh	r3, [r7, #6]
 8001e88:	4413      	add	r3, r2
 8001e8a:	b298      	uxth	r0, r3
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	8ada      	ldrh	r2, [r3, #22]
 8001e90:	88bb      	ldrh	r3, [r7, #4]
 8001e92:	4413      	add	r3, r2
 8001e94:	b29c      	uxth	r4, r3
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	699d      	ldr	r5, [r3, #24]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	6a1b      	ldr	r3, [r3, #32]
 8001e9e:	68fa      	ldr	r2, [r7, #12]
 8001ea0:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 8001ea2:	68f9      	ldr	r1, [r7, #12]
 8001ea4:	8cc9      	ldrh	r1, [r1, #38]	@ 0x26
 8001ea6:	9102      	str	r1, [sp, #8]
 8001ea8:	9201      	str	r2, [sp, #4]
 8001eaa:	9300      	str	r3, [sp, #0]
 8001eac:	462b      	mov	r3, r5
 8001eae:	4622      	mov	r2, r4
 8001eb0:	4601      	mov	r1, r0
 8001eb2:	68b8      	ldr	r0, [r7, #8]
 8001eb4:	f002 fdec 	bl	8004a90 <_ZN11FrameBuffer19Paint_DrawString_ENEttPKcP6_tFonttt>
 8001eb8:	e01a      	b.n	8001ef0 <_ZN8DrawText4drawER11FrameBuffertt+0x94>
			else{
				fb.Paint_DrawTime(Xstart + xMove, Ystart + yMove, pTime, Font, Color_Foreground, Color_Background);
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	8a9a      	ldrh	r2, [r3, #20]
 8001ebe:	88fb      	ldrh	r3, [r7, #6]
 8001ec0:	4413      	add	r3, r2
 8001ec2:	b298      	uxth	r0, r3
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	8ada      	ldrh	r2, [r3, #22]
 8001ec8:	88bb      	ldrh	r3, [r7, #4]
 8001eca:	4413      	add	r3, r2
 8001ecc:	b29c      	uxth	r4, r3
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	69dd      	ldr	r5, [r3, #28]
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	6a1b      	ldr	r3, [r3, #32]
 8001ed6:	68fa      	ldr	r2, [r7, #12]
 8001ed8:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 8001eda:	68f9      	ldr	r1, [r7, #12]
 8001edc:	8cc9      	ldrh	r1, [r1, #38]	@ 0x26
 8001ede:	9102      	str	r1, [sp, #8]
 8001ee0:	9201      	str	r2, [sp, #4]
 8001ee2:	9300      	str	r3, [sp, #0]
 8001ee4:	462b      	mov	r3, r5
 8001ee6:	4622      	mov	r2, r4
 8001ee8:	4601      	mov	r1, r0
 8001eea:	68b8      	ldr	r0, [r7, #8]
 8001eec:	f002 fe26 	bl	8004b3c <_ZN11FrameBuffer14Paint_DrawTimeEttP10PAINT_TIMEP6_tFonttt>
			}
    	}
    	updated = false;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	741a      	strb	r2, [r3, #16]
    }
 8001ef6:	bf00      	nop
 8001ef8:	3710      	adds	r7, #16
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bdb0      	pop	{r4, r5, r7, pc}

08001efe <_ZN8DrawText11updatedTextEv>:

    void updatedText(){
 8001efe:	b480      	push	{r7}
 8001f00:	b083      	sub	sp, #12
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	6078      	str	r0, [r7, #4]
    	updated = true;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2201      	movs	r2, #1
 8001f0a:	741a      	strb	r2, [r3, #16]
    }
 8001f0c:	bf00      	nop
 8001f0e:	370c      	adds	r7, #12
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <_ZN8DrawTextC1EttPKcP6_tFonttt>:
    DrawText() = delete;

    DrawText(UWORD Xstart, UWORD Ystart, const char * pString, sFONT* Font, UWORD Color_Foreground, UWORD Color_Background):
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b086      	sub	sp, #24
 8001f1c:	af02      	add	r7, sp, #8
 8001f1e:	60f8      	str	r0, [r7, #12]
 8001f20:	607b      	str	r3, [r7, #4]
 8001f22:	460b      	mov	r3, r1
 8001f24:	817b      	strh	r3, [r7, #10]
 8001f26:	4613      	mov	r3, r2
 8001f28:	813b      	strh	r3, [r7, #8]
    	Drawable(),
		Xstart(Xstart), Ystart(Ystart), pString(pString), pTime(nullptr), Font(Font), Color_Foreground(Color_Foreground), Color_Background(Color_Background) {}
 8001f2a:	68f8      	ldr	r0, [r7, #12]
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	9300      	str	r3, [sp, #0]
 8001f30:	2300      	movs	r3, #0
 8001f32:	2200      	movs	r2, #0
 8001f34:	2100      	movs	r1, #0
 8001f36:	f7ff fb3d 	bl	80015b4 <_ZN8DrawableC1EPFvvEttt>
 8001f3a:	4a0e      	ldr	r2, [pc, #56]	@ (8001f74 <_ZN8DrawTextC1EttPKcP6_tFonttt+0x5c>)
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	601a      	str	r2, [r3, #0]
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	897a      	ldrh	r2, [r7, #10]
 8001f44:	829a      	strh	r2, [r3, #20]
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	893a      	ldrh	r2, [r7, #8]
 8001f4a:	82da      	strh	r2, [r3, #22]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	619a      	str	r2, [r3, #24]
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	2200      	movs	r2, #0
 8001f56:	61da      	str	r2, [r3, #28]
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	69ba      	ldr	r2, [r7, #24]
 8001f5c:	621a      	str	r2, [r3, #32]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	8bba      	ldrh	r2, [r7, #28]
 8001f62:	849a      	strh	r2, [r3, #36]	@ 0x24
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	8c3a      	ldrh	r2, [r7, #32]
 8001f68:	84da      	strh	r2, [r3, #38]	@ 0x26
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3710      	adds	r7, #16
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	08012f10 	.word	0x08012f10

08001f78 <_ZN8DrawTextC1EttP10PAINT_TIMEP6_tFonttt>:

    DrawText(UWORD Xstart, UWORD Ystart, PAINT_TIME *pTime, sFONT* Font,UWORD Color_Foreground, UWORD Color_Background):
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b086      	sub	sp, #24
 8001f7c:	af02      	add	r7, sp, #8
 8001f7e:	60f8      	str	r0, [r7, #12]
 8001f80:	607b      	str	r3, [r7, #4]
 8001f82:	460b      	mov	r3, r1
 8001f84:	817b      	strh	r3, [r7, #10]
 8001f86:	4613      	mov	r3, r2
 8001f88:	813b      	strh	r3, [r7, #8]
		Drawable(),
		Xstart(Xstart), Ystart(Ystart), pString(nullptr), pTime(pTime), Font(Font), Color_Foreground(Color_Foreground), Color_Background(Color_Background) {}
 8001f8a:	68f8      	ldr	r0, [r7, #12]
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	9300      	str	r3, [sp, #0]
 8001f90:	2300      	movs	r3, #0
 8001f92:	2200      	movs	r2, #0
 8001f94:	2100      	movs	r1, #0
 8001f96:	f7ff fb0d 	bl	80015b4 <_ZN8DrawableC1EPFvvEttt>
 8001f9a:	4a0e      	ldr	r2, [pc, #56]	@ (8001fd4 <_ZN8DrawTextC1EttP10PAINT_TIMEP6_tFonttt+0x5c>)
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	601a      	str	r2, [r3, #0]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	897a      	ldrh	r2, [r7, #10]
 8001fa4:	829a      	strh	r2, [r3, #20]
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	893a      	ldrh	r2, [r7, #8]
 8001faa:	82da      	strh	r2, [r3, #22]
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	619a      	str	r2, [r3, #24]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	687a      	ldr	r2, [r7, #4]
 8001fb6:	61da      	str	r2, [r3, #28]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	621a      	str	r2, [r3, #32]
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	8bba      	ldrh	r2, [r7, #28]
 8001fc2:	849a      	strh	r2, [r3, #36]	@ 0x24
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	8c3a      	ldrh	r2, [r7, #32]
 8001fc8:	84da      	strh	r2, [r3, #38]	@ 0x26
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3710      	adds	r7, #16
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	08012f10 	.word	0x08012f10

08001fd8 <_ZN8DrawTextD1Ev>:


    ~DrawText(){}
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	4a05      	ldr	r2, [pc, #20]	@ (8001ff8 <_ZN8DrawTextD1Ev+0x20>)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	601a      	str	r2, [r3, #0]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f7ff fb6d 	bl	80016c8 <_ZN8DrawableD1Ev>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3708      	adds	r7, #8
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	08012f10 	.word	0x08012f10

08001ffc <_ZN8DrawTextD0Ev>:
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	f7ff ffe7 	bl	8001fd8 <_ZN8DrawTextD1Ev>
 800200a:	2128      	movs	r1, #40	@ 0x28
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	f00a fd49 	bl	800caa4 <_ZdlPvj>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4618      	mov	r0, r3
 8002016:	3708      	adds	r7, #8
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}

0800201c <_ZN21HighlightableDrawTextC1EttPKcP6_tFonttt>:
};


class HighlightableDrawText: public DrawText {
public:
	HighlightableDrawText(UWORD Xstart, UWORD Ystart, const char * pString, sFONT* Font, UWORD Color_Foreground, UWORD Color_Background):
 800201c:	b580      	push	{r7, lr}
 800201e:	b088      	sub	sp, #32
 8002020:	af04      	add	r7, sp, #16
 8002022:	60f8      	str	r0, [r7, #12]
 8002024:	607b      	str	r3, [r7, #4]
 8002026:	460b      	mov	r3, r1
 8002028:	817b      	strh	r3, [r7, #10]
 800202a:	4613      	mov	r3, r2
 800202c:	813b      	strh	r3, [r7, #8]
		DrawText( Xstart,  Ystart,  pString, Font, Color_Foreground, Color_Background) {}
 800202e:	68f8      	ldr	r0, [r7, #12]
 8002030:	893a      	ldrh	r2, [r7, #8]
 8002032:	8979      	ldrh	r1, [r7, #10]
 8002034:	8c3b      	ldrh	r3, [r7, #32]
 8002036:	9302      	str	r3, [sp, #8]
 8002038:	8bbb      	ldrh	r3, [r7, #28]
 800203a:	9301      	str	r3, [sp, #4]
 800203c:	69bb      	ldr	r3, [r7, #24]
 800203e:	9300      	str	r3, [sp, #0]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f7ff ff69 	bl	8001f18 <_ZN8DrawTextC1EttPKcP6_tFonttt>
 8002046:	4a04      	ldr	r2, [pc, #16]	@ (8002058 <_ZN21HighlightableDrawTextC1EttPKcP6_tFonttt+0x3c>)
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	601a      	str	r2, [r3, #0]
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	4618      	mov	r0, r3
 8002050:	3710      	adds	r7, #16
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	08012eec 	.word	0x08012eec

0800205c <_ZN21HighlightableDrawText9highlightEb>:
	HighlightableDrawText(UWORD Xstart, UWORD Ystart, PAINT_TIME *pTime, sFONT* Font,UWORD Color_Foreground, UWORD Color_Background):
		DrawText( Xstart,  Ystart, pTime,  Font, Color_Foreground,  Color_Background) {}

	HighlightableDrawText() = delete;

    void highlight(bool isSelected) override{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	460b      	mov	r3, r1
 8002066:	70fb      	strb	r3, [r7, #3]

		if(isSelected){
 8002068:	78fb      	ldrb	r3, [r7, #3]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d006      	beq.n	800207c <_ZN21HighlightableDrawText9highlightEb+0x20>
			this->Color_Foreground = BLACK;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2200      	movs	r2, #0
 8002072:	849a      	strh	r2, [r3, #36]	@ 0x24
			this->Color_Background = WHITE;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	22ff      	movs	r2, #255	@ 0xff
 8002078:	84da      	strh	r2, [r3, #38]	@ 0x26
 800207a:	e005      	b.n	8002088 <_ZN21HighlightableDrawText9highlightEb+0x2c>

		}else {
			this->Color_Foreground = WHITE;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	22ff      	movs	r2, #255	@ 0xff
 8002080:	849a      	strh	r2, [r3, #36]	@ 0x24
			this->Color_Background = BLACK;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2200      	movs	r2, #0
 8002086:	84da      	strh	r2, [r3, #38]	@ 0x26

		}
		updated = true;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2201      	movs	r2, #1
 800208c:	741a      	strb	r2, [r3, #16]
    }
 800208e:	bf00      	nop
 8002090:	370c      	adds	r7, #12
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
	...

0800209c <_ZN17SetPointContainerC1Ev>:
typedef struct {
	char setPointBuffer[50];
	Container container = Container(0,0,0,0);
	HighLightOnInteractRectangle rectangle = HighLightOnInteractRectangle(0, 0, setPointContainerWidth, setPointContainerHeight, BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY);;
	HighlightableDrawText text = HighlightableDrawText(20,20,setPointBuffer,&Font24, WHITE, BLACK);
} SetPointContainer;
 800209c:	b580      	push	{r7, lr}
 800209e:	b08a      	sub	sp, #40	@ 0x28
 80020a0:	af08      	add	r7, sp, #32
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f103 0034 	add.w	r0, r3, #52	@ 0x34
 80020aa:	2300      	movs	r3, #0
 80020ac:	9301      	str	r3, [sp, #4]
 80020ae:	2300      	movs	r3, #0
 80020b0:	9300      	str	r3, [sp, #0]
 80020b2:	2300      	movs	r3, #0
 80020b4:	2200      	movs	r2, #0
 80020b6:	2100      	movs	r1, #0
 80020b8:	f7ff fb26 	bl	8001708 <_ZN9ContainerC1EttttPFvvE>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 80020c2:	4b15      	ldr	r3, [pc, #84]	@ (8002118 <_ZN17SetPointContainerC1Ev+0x7c>)
 80020c4:	881a      	ldrh	r2, [r3, #0]
 80020c6:	4b15      	ldr	r3, [pc, #84]	@ (800211c <_ZN17SetPointContainerC1Ev+0x80>)
 80020c8:	881b      	ldrh	r3, [r3, #0]
 80020ca:	2100      	movs	r1, #0
 80020cc:	9107      	str	r1, [sp, #28]
 80020ce:	2100      	movs	r1, #0
 80020d0:	9106      	str	r1, [sp, #24]
 80020d2:	2100      	movs	r1, #0
 80020d4:	9105      	str	r1, [sp, #20]
 80020d6:	2100      	movs	r1, #0
 80020d8:	9104      	str	r1, [sp, #16]
 80020da:	2100      	movs	r1, #0
 80020dc:	9103      	str	r1, [sp, #12]
 80020de:	2101      	movs	r1, #1
 80020e0:	9102      	str	r1, [sp, #8]
 80020e2:	2100      	movs	r1, #0
 80020e4:	9101      	str	r1, [sp, #4]
 80020e6:	9300      	str	r3, [sp, #0]
 80020e8:	4613      	mov	r3, r2
 80020ea:	2200      	movs	r2, #0
 80020ec:	2100      	movs	r1, #0
 80020ee:	f7ff fde9 	bl	8001cc4 <_ZN28HighLightOnInteractRectangleC1Ettttt9DOT_PIXEL9DRAW_FILLPFvvEttt>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f103 009c 	add.w	r0, r3, #156	@ 0x9c
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2200      	movs	r2, #0
 80020fc:	9202      	str	r2, [sp, #8]
 80020fe:	22ff      	movs	r2, #255	@ 0xff
 8002100:	9201      	str	r2, [sp, #4]
 8002102:	4a07      	ldr	r2, [pc, #28]	@ (8002120 <_ZN17SetPointContainerC1Ev+0x84>)
 8002104:	9200      	str	r2, [sp, #0]
 8002106:	2214      	movs	r2, #20
 8002108:	2114      	movs	r1, #20
 800210a:	f7ff ff87 	bl	800201c <_ZN21HighlightableDrawTextC1EttPKcP6_tFonttt>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4618      	mov	r0, r3
 8002112:	3708      	adds	r7, #8
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}
 8002118:	20000018 	.word	0x20000018
 800211c:	2000001a 	.word	0x2000001a
 8002120:	20000010 	.word	0x20000010

08002124 <_ZZ29updateSetPointDynamicElementshENKUlvE_clEv>:
		SetPointData data = day.setpoints[i];

		if(i < day.setpointCount){
	        snprintf(container.setPointBuffer, sizeof(container.setPointBuffer), "%02d:%02d - %.1fC", data.hour, data.minute, data.temperature);
	        container.text.updatedText();
	        container.container.addCallback([](){
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]

//	    		xQueueSend(dataSetPointOperationQueue, &data, portMAX_DELAY);

	        });
 800212c:	bf00      	nop
 800212e:	370c      	adds	r7, #12
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr

08002138 <_ZZ29updateSetPointDynamicElementshENUlvE_4_FUNEv>:
	        container.container.addCallback([](){
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
	        });
 800213c:	2000      	movs	r0, #0
 800213e:	f7ff fff1 	bl	8002124 <_ZZ29updateSetPointDynamicElementshENKUlvE_clEv>
 8002142:	bd80      	pop	{r7, pc}

08002144 <_ZZ29updateSetPointDynamicElementshENKUlvE_cvPFvvEEv>:
	        container.container.addCallback([](){
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
	        });
 800214c:	4b03      	ldr	r3, [pc, #12]	@ (800215c <_ZZ29updateSetPointDynamicElementshENKUlvE_cvPFvvEEv+0x18>)
 800214e:	4618      	mov	r0, r3
 8002150:	370c      	adds	r7, #12
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop
 800215c:	08002139 	.word	0x08002139

08002160 <_ZZ29updateSetPointDynamicElementshENKUlvE0_clEv>:
		}

		else if(i == day.setpointCount ){
	        snprintf(container.setPointBuffer, sizeof(container.setPointBuffer), "Add + SetPoint");
	        container.text.updatedText();
	        container.container.addCallback([](){
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]

	        });
 8002168:	bf00      	nop
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr

08002174 <_ZZ29updateSetPointDynamicElementshENUlvE0_4_FUNEv>:
	        container.container.addCallback([](){
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0
	        });
 8002178:	2000      	movs	r0, #0
 800217a:	f7ff fff1 	bl	8002160 <_ZZ29updateSetPointDynamicElementshENKUlvE0_clEv>
 800217e:	bd80      	pop	{r7, pc}

08002180 <_ZZ29updateSetPointDynamicElementshENKUlvE0_cvPFvvEEv>:
	        container.container.addCallback([](){
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
	        });
 8002188:	4b03      	ldr	r3, [pc, #12]	@ (8002198 <_ZZ29updateSetPointDynamicElementshENKUlvE0_cvPFvvEEv+0x18>)
 800218a:	4618      	mov	r0, r3
 800218c:	370c      	adds	r7, #12
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	08002175 	.word	0x08002175

0800219c <_Z29updateSetPointDynamicElementsh>:
void updateSetPointDynamicElements(UBYTE index){
 800219c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800219e:	b095      	sub	sp, #84	@ 0x54
 80021a0:	af04      	add	r7, sp, #16
 80021a2:	4603      	mov	r3, r0
 80021a4:	71fb      	strb	r3, [r7, #7]
	currentDay = index;
 80021a6:	4a45      	ldr	r2, [pc, #276]	@ (80022bc <_Z29updateSetPointDynamicElementsh+0x120>)
 80021a8:	79fb      	ldrb	r3, [r7, #7]
 80021aa:	7013      	strb	r3, [r2, #0]
	DaySchedule day = schedule[index];
 80021ac:	79fa      	ldrb	r2, [r7, #7]
 80021ae:	4944      	ldr	r1, [pc, #272]	@ (80022c0 <_Z29updateSetPointDynamicElementsh+0x124>)
 80021b0:	4613      	mov	r3, r2
 80021b2:	00db      	lsls	r3, r3, #3
 80021b4:	1a9b      	subs	r3, r3, r2
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	440b      	add	r3, r1
 80021ba:	f107 0414 	add.w	r4, r7, #20
 80021be:	461d      	mov	r5, r3
 80021c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021c4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80021c8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	for(int i =0; i < MAX_SETPOINTS_PER_DAY; i ++){
 80021cc:	2300      	movs	r3, #0
 80021ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80021d0:	e06b      	b.n	80022aa <_Z29updateSetPointDynamicElementsh+0x10e>
		SetPointContainer& container = setPointOptions[i];
 80021d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80021d4:	22c4      	movs	r2, #196	@ 0xc4
 80021d6:	fb02 f303 	mul.w	r3, r2, r3
 80021da:	4a3a      	ldr	r2, [pc, #232]	@ (80022c4 <_Z29updateSetPointDynamicElementsh+0x128>)
 80021dc:	4413      	add	r3, r2
 80021de:	63bb      	str	r3, [r7, #56]	@ 0x38
		SetPointData data = day.setpoints[i];
 80021e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80021e2:	00db      	lsls	r3, r3, #3
 80021e4:	3340      	adds	r3, #64	@ 0x40
 80021e6:	443b      	add	r3, r7
 80021e8:	f107 020c 	add.w	r2, r7, #12
 80021ec:	3b2c      	subs	r3, #44	@ 0x2c
 80021ee:	e893 0003 	ldmia.w	r3, {r0, r1}
 80021f2:	e882 0003 	stmia.w	r2, {r0, r1}
		if(i < day.setpointCount){
 80021f6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80021fa:	461a      	mov	r2, r3
 80021fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80021fe:	4293      	cmp	r3, r2
 8002200:	da26      	bge.n	8002250 <_Z29updateSetPointDynamicElementsh+0xb4>
	        snprintf(container.setPointBuffer, sizeof(container.setPointBuffer), "%02d:%02d - %.1fC", data.hour, data.minute, data.temperature);
 8002202:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 8002204:	7c3b      	ldrb	r3, [r7, #16]
 8002206:	461e      	mov	r6, r3
 8002208:	7c7b      	ldrb	r3, [r7, #17]
 800220a:	461d      	mov	r5, r3
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	4618      	mov	r0, r3
 8002210:	f7fe f972 	bl	80004f8 <__aeabi_f2d>
 8002214:	4602      	mov	r2, r0
 8002216:	460b      	mov	r3, r1
 8002218:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800221c:	9500      	str	r5, [sp, #0]
 800221e:	4633      	mov	r3, r6
 8002220:	4a29      	ldr	r2, [pc, #164]	@ (80022c8 <_Z29updateSetPointDynamicElementsh+0x12c>)
 8002222:	2132      	movs	r1, #50	@ 0x32
 8002224:	4620      	mov	r0, r4
 8002226:	f00b fa91 	bl	800d74c <sniprintf>
	        container.text.updatedText();
 800222a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800222c:	339c      	adds	r3, #156	@ 0x9c
 800222e:	4618      	mov	r0, r3
 8002230:	f7ff fe65 	bl	8001efe <_ZN8DrawText11updatedTextEv>
	        container.container.addCallback([](){
 8002234:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002236:	f103 0434 	add.w	r4, r3, #52	@ 0x34
 800223a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800223e:	4618      	mov	r0, r3
 8002240:	f7ff ff80 	bl	8002144 <_ZZ29updateSetPointDynamicElementshENKUlvE_cvPFvvEEv>
 8002244:	4603      	mov	r3, r0
 8002246:	4619      	mov	r1, r3
 8002248:	4620      	mov	r0, r4
 800224a:	f7ff fa2f 	bl	80016ac <_ZN8Drawable11addCallbackEPFvvE>
 800224e:	e029      	b.n	80022a4 <_Z29updateSetPointDynamicElementsh+0x108>
		else if(i == day.setpointCount ){
 8002250:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002254:	461a      	mov	r2, r3
 8002256:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002258:	4293      	cmp	r3, r2
 800225a:	d118      	bne.n	800228e <_Z29updateSetPointDynamicElementsh+0xf2>
	        snprintf(container.setPointBuffer, sizeof(container.setPointBuffer), "Add + SetPoint");
 800225c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800225e:	4a1b      	ldr	r2, [pc, #108]	@ (80022cc <_Z29updateSetPointDynamicElementsh+0x130>)
 8002260:	2132      	movs	r1, #50	@ 0x32
 8002262:	4618      	mov	r0, r3
 8002264:	f00b fa72 	bl	800d74c <sniprintf>
	        container.text.updatedText();
 8002268:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800226a:	339c      	adds	r3, #156	@ 0x9c
 800226c:	4618      	mov	r0, r3
 800226e:	f7ff fe46 	bl	8001efe <_ZN8DrawText11updatedTextEv>
	        container.container.addCallback([](){
 8002272:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002274:	f103 0434 	add.w	r4, r3, #52	@ 0x34
 8002278:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800227c:	4618      	mov	r0, r3
 800227e:	f7ff ff7f 	bl	8002180 <_ZZ29updateSetPointDynamicElementshENKUlvE0_cvPFvvEEv>
 8002282:	4603      	mov	r3, r0
 8002284:	4619      	mov	r1, r3
 8002286:	4620      	mov	r0, r4
 8002288:	f7ff fa10 	bl	80016ac <_ZN8Drawable11addCallbackEPFvvE>
 800228c:	e00a      	b.n	80022a4 <_Z29updateSetPointDynamicElementsh+0x108>
		} else {
	        snprintf(container.setPointBuffer, sizeof(container.setPointBuffer), "\0");
 800228e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002290:	4a0f      	ldr	r2, [pc, #60]	@ (80022d0 <_Z29updateSetPointDynamicElementsh+0x134>)
 8002292:	2132      	movs	r1, #50	@ 0x32
 8002294:	4618      	mov	r0, r3
 8002296:	f00b fa59 	bl	800d74c <sniprintf>
	        container.text.updatedText();
 800229a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800229c:	339c      	adds	r3, #156	@ 0x9c
 800229e:	4618      	mov	r0, r3
 80022a0:	f7ff fe2d 	bl	8001efe <_ZN8DrawText11updatedTextEv>
	for(int i =0; i < MAX_SETPOINTS_PER_DAY; i ++){
 80022a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022a6:	3301      	adds	r3, #1
 80022a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80022aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	dd90      	ble.n	80021d2 <_Z29updateSetPointDynamicElementsh+0x36>
		}


	}
}
 80022b0:	bf00      	nop
 80022b2:	bf00      	nop
 80022b4:	3744      	adds	r7, #68	@ 0x44
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022ba:	bf00      	nop
 80022bc:	200000e0 	.word	0x200000e0
 80022c0:	2000001c 	.word	0x2000001c
 80022c4:	200002f8 	.word	0x200002f8
 80022c8:	0800f9d4 	.word	0x0800f9d4
 80022cc:	0800f9e8 	.word	0x0800f9e8
 80022d0:	0800f9f8 	.word	0x0800f9f8

080022d4 <_Z29setPointInitializeConnectionsR6Screen>:





void setPointInitializeConnections(Screen & setPointScreen){
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b086      	sub	sp, #24
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
//	DaySchedule day = schedule[index];
	UWORD setPointContainerHeightIndent = 15;
 80022dc:	230f      	movs	r3, #15
 80022de:	827b      	strh	r3, [r7, #18]
	UWORD setPointContainerWidth = 307;
 80022e0:	f240 1333 	movw	r3, #307	@ 0x133
 80022e4:	823b      	strh	r3, [r7, #16]
	UWORD setPointContainerHeight = 78;
 80022e6:	234e      	movs	r3, #78	@ 0x4e
 80022e8:	81fb      	strh	r3, [r7, #14]



	for(int i =0; i < MAX_SETPOINTS_PER_DAY; i++){
 80022ea:	2300      	movs	r3, #0
 80022ec:	617b      	str	r3, [r7, #20]
 80022ee:	e044      	b.n	800237a <_Z29setPointInitializeConnectionsR6Screen+0xa6>

		SetPointContainer& setPointContaienr = setPointOptions[i];
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	22c4      	movs	r2, #196	@ 0xc4
 80022f4:	fb02 f303 	mul.w	r3, r2, r3
 80022f8:	4a24      	ldr	r2, [pc, #144]	@ (800238c <_Z29setPointInitializeConnectionsR6Screen+0xb8>)
 80022fa:	4413      	add	r3, r2
 80022fc:	60bb      	str	r3, [r7, #8]
		setPointContaienr.container.setXStart(0);
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	3334      	adds	r3, #52	@ 0x34
 8002302:	2100      	movs	r1, #0
 8002304:	4618      	mov	r0, r3
 8002306:	f7ff fafd 	bl	8001904 <_ZN9Container9setXStartEt>
		setPointContaienr.container.setYStart(setPointContainerHeightIndent + setPointContainerHeight *i);
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	f103 0034 	add.w	r0, r3, #52	@ 0x34
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	b29b      	uxth	r3, r3
 8002314:	89fa      	ldrh	r2, [r7, #14]
 8002316:	fb12 f303 	smulbb	r3, r2, r3
 800231a:	b29a      	uxth	r2, r3
 800231c:	8a7b      	ldrh	r3, [r7, #18]
 800231e:	4413      	add	r3, r2
 8002320:	b29b      	uxth	r3, r3
 8002322:	4619      	mov	r1, r3
 8002324:	f7ff fb0c 	bl	8001940 <_ZN9Container9setYStartEt>
		setPointContaienr.container.setXEnd(setPointContainerWidth);
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	3334      	adds	r3, #52	@ 0x34
 800232c:	8a3a      	ldrh	r2, [r7, #16]
 800232e:	4611      	mov	r1, r2
 8002330:	4618      	mov	r0, r3
 8002332:	f7ff fad8 	bl	80018e6 <_ZN9Container7setXEndEt>
		setPointContaienr.container.setYEnd(setPointContainerHeight);
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	3334      	adds	r3, #52	@ 0x34
 800233a:	89fa      	ldrh	r2, [r7, #14]
 800233c:	4611      	mov	r1, r2
 800233e:	4618      	mov	r0, r3
 8002340:	f7ff faef 	bl	8001922 <_ZN9Container7setYEndEt>


		setPointContaienr.container.addDrawable(&setPointContaienr.rectangle);
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	337c      	adds	r3, #124	@ 0x7c
 800234e:	4619      	mov	r1, r3
 8002350:	4610      	mov	r0, r2
 8002352:	f7ff faae 	bl	80018b2 <_ZN9Container11addDrawableEP8Drawable>
		setPointContaienr.container.addDrawable(&setPointContaienr.text);
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	339c      	adds	r3, #156	@ 0x9c
 8002360:	4619      	mov	r1, r3
 8002362:	4610      	mov	r0, r2
 8002364:	f7ff faa5 	bl	80018b2 <_ZN9Container11addDrawableEP8Drawable>

		setPointScreen.addDrawable(&setPointContaienr.container);
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	3334      	adds	r3, #52	@ 0x34
 800236c:	4619      	mov	r1, r3
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f7ff fb1f 	bl	80019b2 <_ZN6Screen11addDrawableEP8Drawable>
	for(int i =0; i < MAX_SETPOINTS_PER_DAY; i++){
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	3301      	adds	r3, #1
 8002378:	617b      	str	r3, [r7, #20]
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	2b02      	cmp	r3, #2
 800237e:	ddb7      	ble.n	80022f0 <_Z29setPointInitializeConnectionsR6Screen+0x1c>
	}

//	setPointScreen

}
 8002380:	bf00      	nop
 8002382:	bf00      	nop
 8002384:	3718      	adds	r7, #24
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	200002f8 	.word	0x200002f8

08002390 <_Z23setPointScreenCallback16Button>:
	clockDateScreen.addDrawable(&clockMiddleContainer);

}


void setPointScreenCallback1(Button bt){
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
	State currState = State::Error;
 8002398:	230e      	movs	r3, #14
 800239a:	60fb      	str	r3, [r7, #12]
	switch (bt){
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2b04      	cmp	r3, #4
 80023a0:	d848      	bhi.n	8002434 <_Z23setPointScreenCallback16Button+0xa4>
 80023a2:	a201      	add	r2, pc, #4	@ (adr r2, 80023a8 <_Z23setPointScreenCallback16Button+0x18>)
 80023a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023a8:	08002405 	.word	0x08002405
 80023ac:	0800241d 	.word	0x0800241d
 80023b0:	080023ed 	.word	0x080023ed
 80023b4:	080023bd 	.word	0x080023bd
 80023b8:	080023d5 	.word	0x080023d5
	case Button::Middle:
		currState = State::Delete;
 80023bc:	2307      	movs	r3, #7
 80023be:	60fb      	str	r3, [r7, #12]
	    xQueueSend(stateQueue, &currState, portMAX_DELAY);
 80023c0:	4b1f      	ldr	r3, [pc, #124]	@ (8002440 <_Z23setPointScreenCallback16Button+0xb0>)
 80023c2:	6818      	ldr	r0, [r3, #0]
 80023c4:	f107 010c 	add.w	r1, r7, #12
 80023c8:	2300      	movs	r3, #0
 80023ca:	f04f 32ff 	mov.w	r2, #4294967295
 80023ce:	f008 f817 	bl	800a400 <xQueueGenericSend>
		break;
 80023d2:	e030      	b.n	8002436 <_Z23setPointScreenCallback16Button+0xa6>
	case Button::Right:
		currState = State::Interact;
 80023d4:	230d      	movs	r3, #13
 80023d6:	60fb      	str	r3, [r7, #12]
	    xQueueSend(stateQueue, &currState, portMAX_DELAY);
 80023d8:	4b19      	ldr	r3, [pc, #100]	@ (8002440 <_Z23setPointScreenCallback16Button+0xb0>)
 80023da:	6818      	ldr	r0, [r3, #0]
 80023dc:	f107 010c 	add.w	r1, r7, #12
 80023e0:	2300      	movs	r3, #0
 80023e2:	f04f 32ff 	mov.w	r2, #4294967295
 80023e6:	f008 f80b 	bl	800a400 <xQueueGenericSend>
		break;
 80023ea:	e024      	b.n	8002436 <_Z23setPointScreenCallback16Button+0xa6>
	case Button::Left:
		currState = State::PrevScreen;
 80023ec:	2309      	movs	r3, #9
 80023ee:	60fb      	str	r3, [r7, #12]
	    xQueueSend(stateQueue, &currState, portMAX_DELAY);
 80023f0:	4b13      	ldr	r3, [pc, #76]	@ (8002440 <_Z23setPointScreenCallback16Button+0xb0>)
 80023f2:	6818      	ldr	r0, [r3, #0]
 80023f4:	f107 010c 	add.w	r1, r7, #12
 80023f8:	2300      	movs	r3, #0
 80023fa:	f04f 32ff 	mov.w	r2, #4294967295
 80023fe:	f007 ffff 	bl	800a400 <xQueueGenericSend>
	    break;
 8002402:	e018      	b.n	8002436 <_Z23setPointScreenCallback16Button+0xa6>
	case Button::Up:
		currState = State::PrevElement;
 8002404:	230b      	movs	r3, #11
 8002406:	60fb      	str	r3, [r7, #12]
	    xQueueSend(stateQueue, &currState, portMAX_DELAY);
 8002408:	4b0d      	ldr	r3, [pc, #52]	@ (8002440 <_Z23setPointScreenCallback16Button+0xb0>)
 800240a:	6818      	ldr	r0, [r3, #0]
 800240c:	f107 010c 	add.w	r1, r7, #12
 8002410:	2300      	movs	r3, #0
 8002412:	f04f 32ff 	mov.w	r2, #4294967295
 8002416:	f007 fff3 	bl	800a400 <xQueueGenericSend>
	    break;
 800241a:	e00c      	b.n	8002436 <_Z23setPointScreenCallback16Button+0xa6>
	case Button::Down:
		currState = State::NextElement;
 800241c:	230c      	movs	r3, #12
 800241e:	60fb      	str	r3, [r7, #12]
	    xQueueSend(stateQueue, &currState, portMAX_DELAY);
 8002420:	4b07      	ldr	r3, [pc, #28]	@ (8002440 <_Z23setPointScreenCallback16Button+0xb0>)
 8002422:	6818      	ldr	r0, [r3, #0]
 8002424:	f107 010c 	add.w	r1, r7, #12
 8002428:	2300      	movs	r3, #0
 800242a:	f04f 32ff 	mov.w	r2, #4294967295
 800242e:	f007 ffe7 	bl	800a400 <xQueueGenericSend>
	    break;
 8002432:	e000      	b.n	8002436 <_Z23setPointScreenCallback16Button+0xa6>
	default:
		break;
 8002434:	bf00      	nop
	}
}
 8002436:	bf00      	nop
 8002438:	3710      	adds	r7, #16
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	20000704 	.word	0x20000704

08002444 <_ZZ21EPD_MainMenuWithQueuevENKUlvE_clEv>:
	Screen alertScreen = Screen();

	Screen openingScreen = Screen();


	Container container1 = Container(ContainerxStart,containerYStart,138,65, []() {
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
			State state = State::MainMenuScreen;
 800244c:	2301      	movs	r3, #1
 800244e:	60fb      	str	r3, [r7, #12]
		    xQueueSend(stateQueue, &state, portMAX_DELAY);
 8002450:	4b06      	ldr	r3, [pc, #24]	@ (800246c <_ZZ21EPD_MainMenuWithQueuevENKUlvE_clEv+0x28>)
 8002452:	6818      	ldr	r0, [r3, #0]
 8002454:	f107 010c 	add.w	r1, r7, #12
 8002458:	2300      	movs	r3, #0
 800245a:	f04f 32ff 	mov.w	r2, #4294967295
 800245e:	f007 ffcf 	bl	800a400 <xQueueGenericSend>
		});
 8002462:	bf00      	nop
 8002464:	3710      	adds	r7, #16
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	20000704 	.word	0x20000704

08002470 <_ZZ21EPD_MainMenuWithQueuevENUlvE_4_FUNEv>:
	Container container1 = Container(ContainerxStart,containerYStart,138,65, []() {
 8002470:	b580      	push	{r7, lr}
 8002472:	af00      	add	r7, sp, #0
		});
 8002474:	2000      	movs	r0, #0
 8002476:	f7ff ffe5 	bl	8002444 <_ZZ21EPD_MainMenuWithQueuevENKUlvE_clEv>
 800247a:	bd80      	pop	{r7, pc}

0800247c <_ZZ21EPD_MainMenuWithQueuevENKUlvE_cvPFvvEEv>:
	Container container1 = Container(ContainerxStart,containerYStart,138,65, []() {
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
		});
 8002484:	4b03      	ldr	r3, [pc, #12]	@ (8002494 <_ZZ21EPD_MainMenuWithQueuevENKUlvE_cvPFvvEEv+0x18>)
 8002486:	4618      	mov	r0, r3
 8002488:	370c      	adds	r7, #12
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
 8002492:	bf00      	nop
 8002494:	08002471 	.word	0x08002471

08002498 <_ZZ21EPD_MainMenuWithQueuevENKUlvE0_clEv>:

	UWORD mainMenuWidth = 747;
	UWORD mainMenuHeight = 93;


	Container scheduleContainer = Container(26,87,mainMenuWidth,mainMenuHeight, [](){
 8002498:	b580      	push	{r7, lr}
 800249a:	b084      	sub	sp, #16
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
		State state = State::ScheduleScreen;
 80024a0:	2303      	movs	r3, #3
 80024a2:	60fb      	str	r3, [r7, #12]
		xQueueSend(stateQueue, &state, portMAX_DELAY);
 80024a4:	4b06      	ldr	r3, [pc, #24]	@ (80024c0 <_ZZ21EPD_MainMenuWithQueuevENKUlvE0_clEv+0x28>)
 80024a6:	6818      	ldr	r0, [r3, #0]
 80024a8:	f107 010c 	add.w	r1, r7, #12
 80024ac:	2300      	movs	r3, #0
 80024ae:	f04f 32ff 	mov.w	r2, #4294967295
 80024b2:	f007 ffa5 	bl	800a400 <xQueueGenericSend>
	});
 80024b6:	bf00      	nop
 80024b8:	3710      	adds	r7, #16
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	20000704 	.word	0x20000704

080024c4 <_ZZ21EPD_MainMenuWithQueuevENUlvE0_4_FUNEv>:
	Container scheduleContainer = Container(26,87,mainMenuWidth,mainMenuHeight, [](){
 80024c4:	b580      	push	{r7, lr}
 80024c6:	af00      	add	r7, sp, #0
	});
 80024c8:	2000      	movs	r0, #0
 80024ca:	f7ff ffe5 	bl	8002498 <_ZZ21EPD_MainMenuWithQueuevENKUlvE0_clEv>
 80024ce:	bd80      	pop	{r7, pc}

080024d0 <_ZZ21EPD_MainMenuWithQueuevENKUlvE0_cvPFvvEEv>:
	Container scheduleContainer = Container(26,87,mainMenuWidth,mainMenuHeight, [](){
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
	});
 80024d8:	4b03      	ldr	r3, [pc, #12]	@ (80024e8 <_ZZ21EPD_MainMenuWithQueuevENKUlvE0_cvPFvvEEv+0x18>)
 80024da:	4618      	mov	r0, r3
 80024dc:	370c      	adds	r7, #12
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
 80024e6:	bf00      	nop
 80024e8:	080024c5 	.word	0x080024c5

080024ec <_ZZ21EPD_MainMenuWithQueuevENKUlvE1_clEv>:
	HighlightableDrawText scheduleText = HighlightableDrawText(20,20,"Schedule",&Font24, WHITE, BLACK);

	scheduleContainer.addDrawable(&scheduleRectangle);
	scheduleContainer.addDrawable(&scheduleText);

	Container ClockContainer = Container(26,180,mainMenuWidth,mainMenuHeight, [](){
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]

	});
 80024f4:	bf00      	nop
 80024f6:	370c      	adds	r7, #12
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr

08002500 <_ZZ21EPD_MainMenuWithQueuevENUlvE1_4_FUNEv>:
	Container ClockContainer = Container(26,180,mainMenuWidth,mainMenuHeight, [](){
 8002500:	b580      	push	{r7, lr}
 8002502:	af00      	add	r7, sp, #0
	});
 8002504:	2000      	movs	r0, #0
 8002506:	f7ff fff1 	bl	80024ec <_ZZ21EPD_MainMenuWithQueuevENKUlvE1_clEv>
 800250a:	bd80      	pop	{r7, pc}

0800250c <_ZZ21EPD_MainMenuWithQueuevENKUlvE1_cvPFvvEEv>:
	Container ClockContainer = Container(26,180,mainMenuWidth,mainMenuHeight, [](){
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
	});
 8002514:	4b03      	ldr	r3, [pc, #12]	@ (8002524 <_ZZ21EPD_MainMenuWithQueuevENKUlvE1_cvPFvvEEv+0x18>)
 8002516:	4618      	mov	r0, r3
 8002518:	370c      	adds	r7, #12
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop
 8002524:	08002501 	.word	0x08002501

08002528 <_ZZ21EPD_MainMenuWithQueuevENKUlvE2_clEv>:
	HighlightableDrawText ClockText = HighlightableDrawText(20,20,"Clock/Date",&Font24, WHITE, BLACK);

	ClockContainer.addDrawable(&ClockRectangle);
	ClockContainer.addDrawable(&ClockText);

	Container AlertContainer = Container(26,273,mainMenuWidth,mainMenuHeight, [](){
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]

	});
 8002530:	bf00      	nop
 8002532:	370c      	adds	r7, #12
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr

0800253c <_ZZ21EPD_MainMenuWithQueuevENUlvE2_4_FUNEv>:
	Container AlertContainer = Container(26,273,mainMenuWidth,mainMenuHeight, [](){
 800253c:	b580      	push	{r7, lr}
 800253e:	af00      	add	r7, sp, #0
	});
 8002540:	2000      	movs	r0, #0
 8002542:	f7ff fff1 	bl	8002528 <_ZZ21EPD_MainMenuWithQueuevENKUlvE2_clEv>
 8002546:	bd80      	pop	{r7, pc}

08002548 <_ZZ21EPD_MainMenuWithQueuevENKUlvE2_cvPFvvEEv>:
	Container AlertContainer = Container(26,273,mainMenuWidth,mainMenuHeight, [](){
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
	});
 8002550:	4b03      	ldr	r3, [pc, #12]	@ (8002560 <_ZZ21EPD_MainMenuWithQueuevENKUlvE2_cvPFvvEEv+0x18>)
 8002552:	4618      	mov	r0, r3
 8002554:	370c      	adds	r7, #12
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr
 800255e:	bf00      	nop
 8002560:	0800253d 	.word	0x0800253d

08002564 <_ZZ21EPD_MainMenuWithQueuevENKUlvE3_clEv>:
	UWORD scheduleContainerWidth = 307;
	UWORD scheduleContainerHeight = 56;



	Container mondayContainer = Container(0, scheduleContainerHeightIndent, scheduleContainerWidth, scheduleContainerHeight, [](){
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
		updateSetPointDynamicElements(0);
 800256c:	2000      	movs	r0, #0
 800256e:	f7ff fe15 	bl	800219c <_Z29updateSetPointDynamicElementsh>
		State state = State::SetPointScreen;
 8002572:	2306      	movs	r3, #6
 8002574:	60fb      	str	r3, [r7, #12]
		xQueueSend(stateQueue, &state, portMAX_DELAY);
 8002576:	4b06      	ldr	r3, [pc, #24]	@ (8002590 <_ZZ21EPD_MainMenuWithQueuevENKUlvE3_clEv+0x2c>)
 8002578:	6818      	ldr	r0, [r3, #0]
 800257a:	f107 010c 	add.w	r1, r7, #12
 800257e:	2300      	movs	r3, #0
 8002580:	f04f 32ff 	mov.w	r2, #4294967295
 8002584:	f007 ff3c 	bl	800a400 <xQueueGenericSend>
	} );
 8002588:	bf00      	nop
 800258a:	3710      	adds	r7, #16
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}
 8002590:	20000704 	.word	0x20000704

08002594 <_ZZ21EPD_MainMenuWithQueuevENUlvE3_4_FUNEv>:
	Container mondayContainer = Container(0, scheduleContainerHeightIndent, scheduleContainerWidth, scheduleContainerHeight, [](){
 8002594:	b580      	push	{r7, lr}
 8002596:	af00      	add	r7, sp, #0
	} );
 8002598:	2000      	movs	r0, #0
 800259a:	f7ff ffe3 	bl	8002564 <_ZZ21EPD_MainMenuWithQueuevENKUlvE3_clEv>
 800259e:	bd80      	pop	{r7, pc}

080025a0 <_ZZ21EPD_MainMenuWithQueuevENKUlvE3_cvPFvvEEv>:
	Container mondayContainer = Container(0, scheduleContainerHeightIndent, scheduleContainerWidth, scheduleContainerHeight, [](){
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
	} );
 80025a8:	4b03      	ldr	r3, [pc, #12]	@ (80025b8 <_ZZ21EPD_MainMenuWithQueuevENKUlvE3_cvPFvvEEv+0x18>)
 80025aa:	4618      	mov	r0, r3
 80025ac:	370c      	adds	r7, #12
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	08002595 	.word	0x08002595

080025bc <_ZZ21EPD_MainMenuWithQueuevENKUlvE4_clEv>:
	HighlightableDrawText mondayText = HighlightableDrawText(20,20,"Monday",&Font24, WHITE, BLACK);

	mondayContainer.addDrawable(&mondayRectangle);
	mondayContainer.addDrawable(&mondayText);

	Container tuesdayContainer = Container(0, scheduleContainerHeightIndent + scheduleContainerHeight * 1, scheduleContainerWidth, scheduleContainerHeight, [](){
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
		updateSetPointDynamicElements(1);
 80025c4:	2001      	movs	r0, #1
 80025c6:	f7ff fde9 	bl	800219c <_Z29updateSetPointDynamicElementsh>
		State state = State::SetPointScreen;
 80025ca:	2306      	movs	r3, #6
 80025cc:	60fb      	str	r3, [r7, #12]
		xQueueSend(stateQueue, &state, portMAX_DELAY);
 80025ce:	4b06      	ldr	r3, [pc, #24]	@ (80025e8 <_ZZ21EPD_MainMenuWithQueuevENKUlvE4_clEv+0x2c>)
 80025d0:	6818      	ldr	r0, [r3, #0]
 80025d2:	f107 010c 	add.w	r1, r7, #12
 80025d6:	2300      	movs	r3, #0
 80025d8:	f04f 32ff 	mov.w	r2, #4294967295
 80025dc:	f007 ff10 	bl	800a400 <xQueueGenericSend>
	}  );
 80025e0:	bf00      	nop
 80025e2:	3710      	adds	r7, #16
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	20000704 	.word	0x20000704

080025ec <_ZZ21EPD_MainMenuWithQueuevENUlvE4_4_FUNEv>:
	Container tuesdayContainer = Container(0, scheduleContainerHeightIndent + scheduleContainerHeight * 1, scheduleContainerWidth, scheduleContainerHeight, [](){
 80025ec:	b580      	push	{r7, lr}
 80025ee:	af00      	add	r7, sp, #0
	}  );
 80025f0:	2000      	movs	r0, #0
 80025f2:	f7ff ffe3 	bl	80025bc <_ZZ21EPD_MainMenuWithQueuevENKUlvE4_clEv>
 80025f6:	bd80      	pop	{r7, pc}

080025f8 <_ZZ21EPD_MainMenuWithQueuevENKUlvE4_cvPFvvEEv>:
	Container tuesdayContainer = Container(0, scheduleContainerHeightIndent + scheduleContainerHeight * 1, scheduleContainerWidth, scheduleContainerHeight, [](){
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
	}  );
 8002600:	4b03      	ldr	r3, [pc, #12]	@ (8002610 <_ZZ21EPD_MainMenuWithQueuevENKUlvE4_cvPFvvEEv+0x18>)
 8002602:	4618      	mov	r0, r3
 8002604:	370c      	adds	r7, #12
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr
 800260e:	bf00      	nop
 8002610:	080025ed 	.word	0x080025ed

08002614 <_ZZ21EPD_MainMenuWithQueuevENKUlvE5_clEv>:
	HighlightableDrawText tuesdayText = HighlightableDrawText(20,20,"Tuesday",&Font24, WHITE, BLACK);

	tuesdayContainer.addDrawable(&tuesdayRectangle);
	tuesdayContainer.addDrawable(&tuesdayText);

	Container wednesdayContainer = Container(0, scheduleContainerHeightIndent + scheduleContainerHeight * 2, scheduleContainerWidth, scheduleContainerHeight, [](){
 8002614:	b580      	push	{r7, lr}
 8002616:	b084      	sub	sp, #16
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
		updateSetPointDynamicElements(2);
 800261c:	2002      	movs	r0, #2
 800261e:	f7ff fdbd 	bl	800219c <_Z29updateSetPointDynamicElementsh>
		State state = State::SetPointScreen;
 8002622:	2306      	movs	r3, #6
 8002624:	60fb      	str	r3, [r7, #12]
		xQueueSend(stateQueue, &state, portMAX_DELAY);
 8002626:	4b06      	ldr	r3, [pc, #24]	@ (8002640 <_ZZ21EPD_MainMenuWithQueuevENKUlvE5_clEv+0x2c>)
 8002628:	6818      	ldr	r0, [r3, #0]
 800262a:	f107 010c 	add.w	r1, r7, #12
 800262e:	2300      	movs	r3, #0
 8002630:	f04f 32ff 	mov.w	r2, #4294967295
 8002634:	f007 fee4 	bl	800a400 <xQueueGenericSend>
	}  );
 8002638:	bf00      	nop
 800263a:	3710      	adds	r7, #16
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}
 8002640:	20000704 	.word	0x20000704

08002644 <_ZZ21EPD_MainMenuWithQueuevENUlvE5_4_FUNEv>:
	Container wednesdayContainer = Container(0, scheduleContainerHeightIndent + scheduleContainerHeight * 2, scheduleContainerWidth, scheduleContainerHeight, [](){
 8002644:	b580      	push	{r7, lr}
 8002646:	af00      	add	r7, sp, #0
	}  );
 8002648:	2000      	movs	r0, #0
 800264a:	f7ff ffe3 	bl	8002614 <_ZZ21EPD_MainMenuWithQueuevENKUlvE5_clEv>
 800264e:	bd80      	pop	{r7, pc}

08002650 <_ZZ21EPD_MainMenuWithQueuevENKUlvE5_cvPFvvEEv>:
	Container wednesdayContainer = Container(0, scheduleContainerHeightIndent + scheduleContainerHeight * 2, scheduleContainerWidth, scheduleContainerHeight, [](){
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
	}  );
 8002658:	4b03      	ldr	r3, [pc, #12]	@ (8002668 <_ZZ21EPD_MainMenuWithQueuevENKUlvE5_cvPFvvEEv+0x18>)
 800265a:	4618      	mov	r0, r3
 800265c:	370c      	adds	r7, #12
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr
 8002666:	bf00      	nop
 8002668:	08002645 	.word	0x08002645

0800266c <_ZZ21EPD_MainMenuWithQueuevENKUlvE6_clEv>:
	HighlightableDrawText wednesdayText = HighlightableDrawText(20,20,"Wednesday",&Font24, WHITE, BLACK);

	wednesdayContainer.addDrawable(&wednesdayRectangle);
	wednesdayContainer.addDrawable(&wednesdayText);

	Container thursdayContainer = Container(0, scheduleContainerHeightIndent + scheduleContainerHeight * 3, scheduleContainerWidth, scheduleContainerHeight, [](){
 800266c:	b580      	push	{r7, lr}
 800266e:	b084      	sub	sp, #16
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
		updateSetPointDynamicElements(3);
 8002674:	2003      	movs	r0, #3
 8002676:	f7ff fd91 	bl	800219c <_Z29updateSetPointDynamicElementsh>
		State state = State::SetPointScreen;
 800267a:	2306      	movs	r3, #6
 800267c:	60fb      	str	r3, [r7, #12]
		xQueueSend(stateQueue, &state, portMAX_DELAY);
 800267e:	4b06      	ldr	r3, [pc, #24]	@ (8002698 <_ZZ21EPD_MainMenuWithQueuevENKUlvE6_clEv+0x2c>)
 8002680:	6818      	ldr	r0, [r3, #0]
 8002682:	f107 010c 	add.w	r1, r7, #12
 8002686:	2300      	movs	r3, #0
 8002688:	f04f 32ff 	mov.w	r2, #4294967295
 800268c:	f007 feb8 	bl	800a400 <xQueueGenericSend>
	}  );
 8002690:	bf00      	nop
 8002692:	3710      	adds	r7, #16
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}
 8002698:	20000704 	.word	0x20000704

0800269c <_ZZ21EPD_MainMenuWithQueuevENUlvE6_4_FUNEv>:
	Container thursdayContainer = Container(0, scheduleContainerHeightIndent + scheduleContainerHeight * 3, scheduleContainerWidth, scheduleContainerHeight, [](){
 800269c:	b580      	push	{r7, lr}
 800269e:	af00      	add	r7, sp, #0
	}  );
 80026a0:	2000      	movs	r0, #0
 80026a2:	f7ff ffe3 	bl	800266c <_ZZ21EPD_MainMenuWithQueuevENKUlvE6_clEv>
 80026a6:	bd80      	pop	{r7, pc}

080026a8 <_ZZ21EPD_MainMenuWithQueuevENKUlvE6_cvPFvvEEv>:
	Container thursdayContainer = Container(0, scheduleContainerHeightIndent + scheduleContainerHeight * 3, scheduleContainerWidth, scheduleContainerHeight, [](){
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
	}  );
 80026b0:	4b03      	ldr	r3, [pc, #12]	@ (80026c0 <_ZZ21EPD_MainMenuWithQueuevENKUlvE6_cvPFvvEEv+0x18>)
 80026b2:	4618      	mov	r0, r3
 80026b4:	370c      	adds	r7, #12
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	0800269d 	.word	0x0800269d

080026c4 <_ZZ21EPD_MainMenuWithQueuevENKUlvE7_clEv>:
	HighlightableDrawText thursdayText = HighlightableDrawText(20,20,"Thursday",&Font24, WHITE, BLACK);

	thursdayContainer.addDrawable(&thursdayRectangle);
	thursdayContainer.addDrawable(&thursdayText);

	Container fridayContainer = Container(0, scheduleContainerHeightIndent + scheduleContainerHeight * 4, scheduleContainerWidth, scheduleContainerHeight, [](){
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
		updateSetPointDynamicElements(4);
 80026cc:	2004      	movs	r0, #4
 80026ce:	f7ff fd65 	bl	800219c <_Z29updateSetPointDynamicElementsh>
		State state = State::SetPointScreen;
 80026d2:	2306      	movs	r3, #6
 80026d4:	60fb      	str	r3, [r7, #12]
		xQueueSend(stateQueue, &state, portMAX_DELAY);
 80026d6:	4b06      	ldr	r3, [pc, #24]	@ (80026f0 <_ZZ21EPD_MainMenuWithQueuevENKUlvE7_clEv+0x2c>)
 80026d8:	6818      	ldr	r0, [r3, #0]
 80026da:	f107 010c 	add.w	r1, r7, #12
 80026de:	2300      	movs	r3, #0
 80026e0:	f04f 32ff 	mov.w	r2, #4294967295
 80026e4:	f007 fe8c 	bl	800a400 <xQueueGenericSend>
	}  );
 80026e8:	bf00      	nop
 80026ea:	3710      	adds	r7, #16
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	20000704 	.word	0x20000704

080026f4 <_ZZ21EPD_MainMenuWithQueuevENUlvE7_4_FUNEv>:
	Container fridayContainer = Container(0, scheduleContainerHeightIndent + scheduleContainerHeight * 4, scheduleContainerWidth, scheduleContainerHeight, [](){
 80026f4:	b580      	push	{r7, lr}
 80026f6:	af00      	add	r7, sp, #0
	}  );
 80026f8:	2000      	movs	r0, #0
 80026fa:	f7ff ffe3 	bl	80026c4 <_ZZ21EPD_MainMenuWithQueuevENKUlvE7_clEv>
 80026fe:	bd80      	pop	{r7, pc}

08002700 <_ZZ21EPD_MainMenuWithQueuevENKUlvE7_cvPFvvEEv>:
	Container fridayContainer = Container(0, scheduleContainerHeightIndent + scheduleContainerHeight * 4, scheduleContainerWidth, scheduleContainerHeight, [](){
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
	}  );
 8002708:	4b03      	ldr	r3, [pc, #12]	@ (8002718 <_ZZ21EPD_MainMenuWithQueuevENKUlvE7_cvPFvvEEv+0x18>)
 800270a:	4618      	mov	r0, r3
 800270c:	370c      	adds	r7, #12
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	080026f5 	.word	0x080026f5

0800271c <_ZZ21EPD_MainMenuWithQueuevENKUlvE8_clEv>:
	HighlightableDrawText fridayText = HighlightableDrawText(20,20,"Friday",&Font24, WHITE, BLACK);

	fridayContainer.addDrawable(&fridayRectangle);
	fridayContainer.addDrawable(&fridayText);

	Container saturdayContainer = Container(0, scheduleContainerHeightIndent + scheduleContainerHeight * 5, scheduleContainerWidth, scheduleContainerHeight, [](){
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
		updateSetPointDynamicElements(5);
 8002724:	2005      	movs	r0, #5
 8002726:	f7ff fd39 	bl	800219c <_Z29updateSetPointDynamicElementsh>
		State state = State::SetPointScreen;
 800272a:	2306      	movs	r3, #6
 800272c:	60fb      	str	r3, [r7, #12]
		xQueueSend(stateQueue, &state, portMAX_DELAY);
 800272e:	4b06      	ldr	r3, [pc, #24]	@ (8002748 <_ZZ21EPD_MainMenuWithQueuevENKUlvE8_clEv+0x2c>)
 8002730:	6818      	ldr	r0, [r3, #0]
 8002732:	f107 010c 	add.w	r1, r7, #12
 8002736:	2300      	movs	r3, #0
 8002738:	f04f 32ff 	mov.w	r2, #4294967295
 800273c:	f007 fe60 	bl	800a400 <xQueueGenericSend>
	}  );
 8002740:	bf00      	nop
 8002742:	3710      	adds	r7, #16
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	20000704 	.word	0x20000704

0800274c <_ZZ21EPD_MainMenuWithQueuevENUlvE8_4_FUNEv>:
	Container saturdayContainer = Container(0, scheduleContainerHeightIndent + scheduleContainerHeight * 5, scheduleContainerWidth, scheduleContainerHeight, [](){
 800274c:	b580      	push	{r7, lr}
 800274e:	af00      	add	r7, sp, #0
	}  );
 8002750:	2000      	movs	r0, #0
 8002752:	f7ff ffe3 	bl	800271c <_ZZ21EPD_MainMenuWithQueuevENKUlvE8_clEv>
 8002756:	bd80      	pop	{r7, pc}

08002758 <_ZZ21EPD_MainMenuWithQueuevENKUlvE8_cvPFvvEEv>:
	Container saturdayContainer = Container(0, scheduleContainerHeightIndent + scheduleContainerHeight * 5, scheduleContainerWidth, scheduleContainerHeight, [](){
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
	}  );
 8002760:	4b03      	ldr	r3, [pc, #12]	@ (8002770 <_ZZ21EPD_MainMenuWithQueuevENKUlvE8_cvPFvvEEv+0x18>)
 8002762:	4618      	mov	r0, r3
 8002764:	370c      	adds	r7, #12
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr
 800276e:	bf00      	nop
 8002770:	0800274d 	.word	0x0800274d

08002774 <_ZZ21EPD_MainMenuWithQueuevENKUlvE9_clEv>:
	HighlightableDrawText saturdayText = HighlightableDrawText(20,20,"Saturday",&Font24, WHITE, BLACK);

	saturdayContainer.addDrawable(&saturdayRectangle);
	saturdayContainer.addDrawable(&saturdayText);

	Container sundayContainer = Container(0, scheduleContainerHeightIndent + scheduleContainerHeight * 6, scheduleContainerWidth, scheduleContainerHeight, [](){
 8002774:	b580      	push	{r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
		updateSetPointDynamicElements(6);
 800277c:	2006      	movs	r0, #6
 800277e:	f7ff fd0d 	bl	800219c <_Z29updateSetPointDynamicElementsh>
		State state = State::SetPointScreen;
 8002782:	2306      	movs	r3, #6
 8002784:	60fb      	str	r3, [r7, #12]
		xQueueSend(stateQueue, &state, portMAX_DELAY);
 8002786:	4b06      	ldr	r3, [pc, #24]	@ (80027a0 <_ZZ21EPD_MainMenuWithQueuevENKUlvE9_clEv+0x2c>)
 8002788:	6818      	ldr	r0, [r3, #0]
 800278a:	f107 010c 	add.w	r1, r7, #12
 800278e:	2300      	movs	r3, #0
 8002790:	f04f 32ff 	mov.w	r2, #4294967295
 8002794:	f007 fe34 	bl	800a400 <xQueueGenericSend>
	}  );
 8002798:	bf00      	nop
 800279a:	3710      	adds	r7, #16
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	20000704 	.word	0x20000704

080027a4 <_ZZ21EPD_MainMenuWithQueuevENUlvE9_4_FUNEv>:
	Container sundayContainer = Container(0, scheduleContainerHeightIndent + scheduleContainerHeight * 6, scheduleContainerWidth, scheduleContainerHeight, [](){
 80027a4:	b580      	push	{r7, lr}
 80027a6:	af00      	add	r7, sp, #0
	}  );
 80027a8:	2000      	movs	r0, #0
 80027aa:	f7ff ffe3 	bl	8002774 <_ZZ21EPD_MainMenuWithQueuevENKUlvE9_clEv>
 80027ae:	bd80      	pop	{r7, pc}

080027b0 <_ZZ21EPD_MainMenuWithQueuevENKUlvE9_cvPFvvEEv>:
	Container sundayContainer = Container(0, scheduleContainerHeightIndent + scheduleContainerHeight * 6, scheduleContainerWidth, scheduleContainerHeight, [](){
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
	}  );
 80027b8:	4b03      	ldr	r3, [pc, #12]	@ (80027c8 <_ZZ21EPD_MainMenuWithQueuevENKUlvE9_cvPFvvEEv+0x18>)
 80027ba:	4618      	mov	r0, r3
 80027bc:	370c      	adds	r7, #12
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr
 80027c6:	bf00      	nop
 80027c8:	080027a5 	.word	0x080027a5

080027cc <_ZZ21EPD_MainMenuWithQueuevENKUl6ButtonE10_clES_>:

	Button buttonReceivedState;

	State state;

	openingScreen.setButtonCallback([](Button bt){
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b084      	sub	sp, #16
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	6039      	str	r1, [r7, #0]
		State currState = State::Error;
 80027d6:	230e      	movs	r3, #14
 80027d8:	60fb      	str	r3, [r7, #12]
		switch(bt){
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	2b03      	cmp	r3, #3
 80027de:	d10b      	bne.n	80027f8 <_ZZ21EPD_MainMenuWithQueuevENKUl6ButtonE10_clES_+0x2c>
		case Button::Middle:
			currState = State::Interact;
 80027e0:	230d      	movs	r3, #13
 80027e2:	60fb      	str	r3, [r7, #12]
		    xQueueSend(stateQueue, &currState, portMAX_DELAY);
 80027e4:	4b07      	ldr	r3, [pc, #28]	@ (8002804 <_ZZ21EPD_MainMenuWithQueuevENKUl6ButtonE10_clES_+0x38>)
 80027e6:	6818      	ldr	r0, [r3, #0]
 80027e8:	f107 010c 	add.w	r1, r7, #12
 80027ec:	2300      	movs	r3, #0
 80027ee:	f04f 32ff 	mov.w	r2, #4294967295
 80027f2:	f007 fe05 	bl	800a400 <xQueueGenericSend>
			break;
 80027f6:	e000      	b.n	80027fa <_ZZ21EPD_MainMenuWithQueuevENKUl6ButtonE10_clES_+0x2e>
		default:
			break;
 80027f8:	bf00      	nop
		}
	});
 80027fa:	bf00      	nop
 80027fc:	3710      	adds	r7, #16
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	20000704 	.word	0x20000704

08002808 <_ZZ21EPD_MainMenuWithQueuevENUl6ButtonE10_4_FUNES_>:
	openingScreen.setButtonCallback([](Button bt){
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
	});
 8002810:	6879      	ldr	r1, [r7, #4]
 8002812:	2000      	movs	r0, #0
 8002814:	f7ff ffda 	bl	80027cc <_ZZ21EPD_MainMenuWithQueuevENKUl6ButtonE10_clES_>
 8002818:	3708      	adds	r7, #8
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
	...

08002820 <_ZZ21EPD_MainMenuWithQueuevENKUl6ButtonE10_cvPFvS_EEv>:
	openingScreen.setButtonCallback([](Button bt){
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
	});
 8002828:	4b03      	ldr	r3, [pc, #12]	@ (8002838 <_ZZ21EPD_MainMenuWithQueuevENKUl6ButtonE10_cvPFvS_EEv+0x18>)
 800282a:	4618      	mov	r0, r3
 800282c:	370c      	adds	r7, #12
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr
 8002836:	bf00      	nop
 8002838:	08002809 	.word	0x08002809

0800283c <_ZZ21EPD_MainMenuWithQueuevENKUl6ButtonE11_clES_>:



	mainMenu.setButtonCallback([](Button bt){
 800283c:	b580      	push	{r7, lr}
 800283e:	b084      	sub	sp, #16
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	6039      	str	r1, [r7, #0]
		State currState = State::Error;
 8002846:	230e      	movs	r3, #14
 8002848:	60fb      	str	r3, [r7, #12]
		switch (bt){
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	2b04      	cmp	r3, #4
 800284e:	d849      	bhi.n	80028e4 <_ZZ21EPD_MainMenuWithQueuevENKUl6ButtonE11_clES_+0xa8>
 8002850:	a201      	add	r2, pc, #4	@ (adr r2, 8002858 <_ZZ21EPD_MainMenuWithQueuevENKUl6ButtonE11_clES_+0x1c>)
 8002852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002856:	bf00      	nop
 8002858:	080028b5 	.word	0x080028b5
 800285c:	080028cd 	.word	0x080028cd
 8002860:	0800289d 	.word	0x0800289d
 8002864:	0800286d 	.word	0x0800286d
 8002868:	08002885 	.word	0x08002885
		case Button::Middle:
			currState = State::HomeScreen;
 800286c:	2300      	movs	r3, #0
 800286e:	60fb      	str	r3, [r7, #12]
		    xQueueSend(stateQueue, &currState, portMAX_DELAY);
 8002870:	4b1f      	ldr	r3, [pc, #124]	@ (80028f0 <_ZZ21EPD_MainMenuWithQueuevENKUl6ButtonE11_clES_+0xb4>)
 8002872:	6818      	ldr	r0, [r3, #0]
 8002874:	f107 010c 	add.w	r1, r7, #12
 8002878:	2300      	movs	r3, #0
 800287a:	f04f 32ff 	mov.w	r2, #4294967295
 800287e:	f007 fdbf 	bl	800a400 <xQueueGenericSend>
			break;
 8002882:	e030      	b.n	80028e6 <_ZZ21EPD_MainMenuWithQueuevENKUl6ButtonE11_clES_+0xaa>
		case Button::Right:
			currState = State::Interact;
 8002884:	230d      	movs	r3, #13
 8002886:	60fb      	str	r3, [r7, #12]
		    xQueueSend(stateQueue, &currState, portMAX_DELAY);
 8002888:	4b19      	ldr	r3, [pc, #100]	@ (80028f0 <_ZZ21EPD_MainMenuWithQueuevENKUl6ButtonE11_clES_+0xb4>)
 800288a:	6818      	ldr	r0, [r3, #0]
 800288c:	f107 010c 	add.w	r1, r7, #12
 8002890:	2300      	movs	r3, #0
 8002892:	f04f 32ff 	mov.w	r2, #4294967295
 8002896:	f007 fdb3 	bl	800a400 <xQueueGenericSend>
			break;
 800289a:	e024      	b.n	80028e6 <_ZZ21EPD_MainMenuWithQueuevENKUl6ButtonE11_clES_+0xaa>
		case Button::Left:
			currState = State::PrevScreen;
 800289c:	2309      	movs	r3, #9
 800289e:	60fb      	str	r3, [r7, #12]
		    xQueueSend(stateQueue, &currState, portMAX_DELAY);
 80028a0:	4b13      	ldr	r3, [pc, #76]	@ (80028f0 <_ZZ21EPD_MainMenuWithQueuevENKUl6ButtonE11_clES_+0xb4>)
 80028a2:	6818      	ldr	r0, [r3, #0]
 80028a4:	f107 010c 	add.w	r1, r7, #12
 80028a8:	2300      	movs	r3, #0
 80028aa:	f04f 32ff 	mov.w	r2, #4294967295
 80028ae:	f007 fda7 	bl	800a400 <xQueueGenericSend>
		    break;
 80028b2:	e018      	b.n	80028e6 <_ZZ21EPD_MainMenuWithQueuevENKUl6ButtonE11_clES_+0xaa>
		case Button::Up:
			currState = State::PrevElement;
 80028b4:	230b      	movs	r3, #11
 80028b6:	60fb      	str	r3, [r7, #12]
		    xQueueSend(stateQueue, &currState, portMAX_DELAY);
 80028b8:	4b0d      	ldr	r3, [pc, #52]	@ (80028f0 <_ZZ21EPD_MainMenuWithQueuevENKUl6ButtonE11_clES_+0xb4>)
 80028ba:	6818      	ldr	r0, [r3, #0]
 80028bc:	f107 010c 	add.w	r1, r7, #12
 80028c0:	2300      	movs	r3, #0
 80028c2:	f04f 32ff 	mov.w	r2, #4294967295
 80028c6:	f007 fd9b 	bl	800a400 <xQueueGenericSend>
		    break;
 80028ca:	e00c      	b.n	80028e6 <_ZZ21EPD_MainMenuWithQueuevENKUl6ButtonE11_clES_+0xaa>
		case Button::Down:
			currState = State::NextElement;
 80028cc:	230c      	movs	r3, #12
 80028ce:	60fb      	str	r3, [r7, #12]
		    xQueueSend(stateQueue, &currState, portMAX_DELAY);
 80028d0:	4b07      	ldr	r3, [pc, #28]	@ (80028f0 <_ZZ21EPD_MainMenuWithQueuevENKUl6ButtonE11_clES_+0xb4>)
 80028d2:	6818      	ldr	r0, [r3, #0]
 80028d4:	f107 010c 	add.w	r1, r7, #12
 80028d8:	2300      	movs	r3, #0
 80028da:	f04f 32ff 	mov.w	r2, #4294967295
 80028de:	f007 fd8f 	bl	800a400 <xQueueGenericSend>
		    break;
 80028e2:	e000      	b.n	80028e6 <_ZZ21EPD_MainMenuWithQueuevENKUl6ButtonE11_clES_+0xaa>
		default:
			break;
 80028e4:	bf00      	nop
		}
	});
 80028e6:	bf00      	nop
 80028e8:	3710      	adds	r7, #16
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	20000704 	.word	0x20000704

080028f4 <_ZZ21EPD_MainMenuWithQueuevENUl6ButtonE11_4_FUNES_>:
	mainMenu.setButtonCallback([](Button bt){
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
	});
 80028fc:	6879      	ldr	r1, [r7, #4]
 80028fe:	2000      	movs	r0, #0
 8002900:	f7ff ff9c 	bl	800283c <_ZZ21EPD_MainMenuWithQueuevENKUl6ButtonE11_clES_>
 8002904:	3708      	adds	r7, #8
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
	...

0800290c <_ZZ21EPD_MainMenuWithQueuevENKUl6ButtonE11_cvPFvS_EEv>:
	mainMenu.setButtonCallback([](Button bt){
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
	});
 8002914:	4b03      	ldr	r3, [pc, #12]	@ (8002924 <_ZZ21EPD_MainMenuWithQueuevENKUl6ButtonE11_cvPFvS_EEv+0x18>)
 8002916:	4618      	mov	r0, r3
 8002918:	370c      	adds	r7, #12
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr
 8002922:	bf00      	nop
 8002924:	080028f5 	.word	0x080028f5

08002928 <_ZZ21EPD_MainMenuWithQueuevENKUl6ButtonE12_clES_>:

	scheduleScreen.setButtonCallback([](Button bt){
 8002928:	b580      	push	{r7, lr}
 800292a:	b084      	sub	sp, #16
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	6039      	str	r1, [r7, #0]
		State currState = State::Error;
 8002932:	230e      	movs	r3, #14
 8002934:	60fb      	str	r3, [r7, #12]
		switch (bt){
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	2b04      	cmp	r3, #4
 800293a:	d849      	bhi.n	80029d0 <_ZZ21EPD_MainMenuWithQueuevENKUl6ButtonE12_clES_+0xa8>
 800293c:	a201      	add	r2, pc, #4	@ (adr r2, 8002944 <_ZZ21EPD_MainMenuWithQueuevENKUl6ButtonE12_clES_+0x1c>)
 800293e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002942:	bf00      	nop
 8002944:	080029a1 	.word	0x080029a1
 8002948:	080029b9 	.word	0x080029b9
 800294c:	08002989 	.word	0x08002989
 8002950:	08002959 	.word	0x08002959
 8002954:	08002971 	.word	0x08002971
		case Button::Middle:
			currState = State::HomeScreen;
 8002958:	2300      	movs	r3, #0
 800295a:	60fb      	str	r3, [r7, #12]
		    xQueueSend(stateQueue, &currState, portMAX_DELAY);
 800295c:	4b1f      	ldr	r3, [pc, #124]	@ (80029dc <_ZZ21EPD_MainMenuWithQueuevENKUl6ButtonE12_clES_+0xb4>)
 800295e:	6818      	ldr	r0, [r3, #0]
 8002960:	f107 010c 	add.w	r1, r7, #12
 8002964:	2300      	movs	r3, #0
 8002966:	f04f 32ff 	mov.w	r2, #4294967295
 800296a:	f007 fd49 	bl	800a400 <xQueueGenericSend>
			break;
 800296e:	e030      	b.n	80029d2 <_ZZ21EPD_MainMenuWithQueuevENKUl6ButtonE12_clES_+0xaa>
		case Button::Right:
			currState = State::Interact;
 8002970:	230d      	movs	r3, #13
 8002972:	60fb      	str	r3, [r7, #12]
		    xQueueSend(stateQueue, &currState, portMAX_DELAY);
 8002974:	4b19      	ldr	r3, [pc, #100]	@ (80029dc <_ZZ21EPD_MainMenuWithQueuevENKUl6ButtonE12_clES_+0xb4>)
 8002976:	6818      	ldr	r0, [r3, #0]
 8002978:	f107 010c 	add.w	r1, r7, #12
 800297c:	2300      	movs	r3, #0
 800297e:	f04f 32ff 	mov.w	r2, #4294967295
 8002982:	f007 fd3d 	bl	800a400 <xQueueGenericSend>
			break;
 8002986:	e024      	b.n	80029d2 <_ZZ21EPD_MainMenuWithQueuevENKUl6ButtonE12_clES_+0xaa>
		case Button::Left:
			currState = State::PrevScreen;
 8002988:	2309      	movs	r3, #9
 800298a:	60fb      	str	r3, [r7, #12]
		    xQueueSend(stateQueue, &currState, portMAX_DELAY);
 800298c:	4b13      	ldr	r3, [pc, #76]	@ (80029dc <_ZZ21EPD_MainMenuWithQueuevENKUl6ButtonE12_clES_+0xb4>)
 800298e:	6818      	ldr	r0, [r3, #0]
 8002990:	f107 010c 	add.w	r1, r7, #12
 8002994:	2300      	movs	r3, #0
 8002996:	f04f 32ff 	mov.w	r2, #4294967295
 800299a:	f007 fd31 	bl	800a400 <xQueueGenericSend>
		    break;
 800299e:	e018      	b.n	80029d2 <_ZZ21EPD_MainMenuWithQueuevENKUl6ButtonE12_clES_+0xaa>
		case Button::Up:
			currState = State::PrevElement;
 80029a0:	230b      	movs	r3, #11
 80029a2:	60fb      	str	r3, [r7, #12]
		    xQueueSend(stateQueue, &currState, portMAX_DELAY);
 80029a4:	4b0d      	ldr	r3, [pc, #52]	@ (80029dc <_ZZ21EPD_MainMenuWithQueuevENKUl6ButtonE12_clES_+0xb4>)
 80029a6:	6818      	ldr	r0, [r3, #0]
 80029a8:	f107 010c 	add.w	r1, r7, #12
 80029ac:	2300      	movs	r3, #0
 80029ae:	f04f 32ff 	mov.w	r2, #4294967295
 80029b2:	f007 fd25 	bl	800a400 <xQueueGenericSend>
		    break;
 80029b6:	e00c      	b.n	80029d2 <_ZZ21EPD_MainMenuWithQueuevENKUl6ButtonE12_clES_+0xaa>
		case Button::Down:
			currState = State::NextElement;
 80029b8:	230c      	movs	r3, #12
 80029ba:	60fb      	str	r3, [r7, #12]
		    xQueueSend(stateQueue, &currState, portMAX_DELAY);
 80029bc:	4b07      	ldr	r3, [pc, #28]	@ (80029dc <_ZZ21EPD_MainMenuWithQueuevENKUl6ButtonE12_clES_+0xb4>)
 80029be:	6818      	ldr	r0, [r3, #0]
 80029c0:	f107 010c 	add.w	r1, r7, #12
 80029c4:	2300      	movs	r3, #0
 80029c6:	f04f 32ff 	mov.w	r2, #4294967295
 80029ca:	f007 fd19 	bl	800a400 <xQueueGenericSend>
		    break;
 80029ce:	e000      	b.n	80029d2 <_ZZ21EPD_MainMenuWithQueuevENKUl6ButtonE12_clES_+0xaa>
		default:
			break;
 80029d0:	bf00      	nop
		}
	});
 80029d2:	bf00      	nop
 80029d4:	3710      	adds	r7, #16
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	20000704 	.word	0x20000704

080029e0 <_ZZ21EPD_MainMenuWithQueuevENUl6ButtonE12_4_FUNES_>:
	scheduleScreen.setButtonCallback([](Button bt){
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b082      	sub	sp, #8
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
	});
 80029e8:	6879      	ldr	r1, [r7, #4]
 80029ea:	2000      	movs	r0, #0
 80029ec:	f7ff ff9c 	bl	8002928 <_ZZ21EPD_MainMenuWithQueuevENKUl6ButtonE12_clES_>
 80029f0:	3708      	adds	r7, #8
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
	...

080029f8 <_ZZ21EPD_MainMenuWithQueuevENKUl6ButtonE12_cvPFvS_EEv>:
	scheduleScreen.setButtonCallback([](Button bt){
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
	});
 8002a00:	4b03      	ldr	r3, [pc, #12]	@ (8002a10 <_ZZ21EPD_MainMenuWithQueuevENKUl6ButtonE12_cvPFvS_EEv+0x18>)
 8002a02:	4618      	mov	r0, r3
 8002a04:	370c      	adds	r7, #12
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop
 8002a10:	080029e1 	.word	0x080029e1

08002a14 <_Z21EPD_MainMenuWithQueuev>:
void EPD_MainMenuWithQueue(){
 8002a14:	b5b0      	push	{r4, r5, r7, lr}
 8002a16:	f6ad 3dc8 	subw	sp, sp, #3016	@ 0xbc8
 8002a1a:	af08      	add	r7, sp, #32
	ScreenManager screenManager(&ePaperGlobal);
 8002a1c:	f607 333c 	addw	r3, r7, #2876	@ 0xb3c
 8002a20:	49d1      	ldr	r1, [pc, #836]	@ (8002d68 <_Z21EPD_MainMenuWithQueuev+0x354>)
 8002a22:	4618      	mov	r0, r3
 8002a24:	f7ff f997 	bl	8001d56 <_ZN13ScreenManagerC1EP9EPD_4in26>
	Screen ClockDateScreen = Screen();
 8002a28:	f607 3004 	addw	r0, r7, #2820	@ 0xb04
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	9301      	str	r3, [sp, #4]
 8002a30:	23ff      	movs	r3, #255	@ 0xff
 8002a32:	9300      	str	r3, [sp, #0]
 8002a34:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8002a38:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8002a3c:	2100      	movs	r1, #0
 8002a3e:	f7fe ff8e 	bl	800195e <_ZN6ScreenC1EPFv6ButtonEtttt>
	Screen alertScreen = Screen();
 8002a42:	f607 20cc 	addw	r0, r7, #2764	@ 0xacc
 8002a46:	2300      	movs	r3, #0
 8002a48:	9301      	str	r3, [sp, #4]
 8002a4a:	23ff      	movs	r3, #255	@ 0xff
 8002a4c:	9300      	str	r3, [sp, #0]
 8002a4e:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8002a52:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8002a56:	2100      	movs	r1, #0
 8002a58:	f7fe ff81 	bl	800195e <_ZN6ScreenC1EPFv6ButtonEtttt>
	Screen openingScreen = Screen();
 8002a5c:	f607 2094 	addw	r0, r7, #2708	@ 0xa94
 8002a60:	2300      	movs	r3, #0
 8002a62:	9301      	str	r3, [sp, #4]
 8002a64:	23ff      	movs	r3, #255	@ 0xff
 8002a66:	9300      	str	r3, [sp, #0]
 8002a68:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8002a6c:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8002a70:	2100      	movs	r1, #0
 8002a72:	f7fe ff74 	bl	800195e <_ZN6ScreenC1EPFv6ButtonEtttt>
		});
 8002a76:	4bbd      	ldr	r3, [pc, #756]	@ (8002d6c <_Z21EPD_MainMenuWithQueuev+0x358>)
 8002a78:	881c      	ldrh	r4, [r3, #0]
 8002a7a:	4bbd      	ldr	r3, [pc, #756]	@ (8002d70 <_Z21EPD_MainMenuWithQueuev+0x35c>)
 8002a7c:	881d      	ldrh	r5, [r3, #0]
 8002a7e:	f607 3364 	addw	r3, r7, #2916	@ 0xb64
 8002a82:	4618      	mov	r0, r3
 8002a84:	f7ff fcfa 	bl	800247c <_ZZ21EPD_MainMenuWithQueuevENKUlvE_cvPFvvEEv>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	f607 204c 	addw	r0, r7, #2636	@ 0xa4c
 8002a8e:	9301      	str	r3, [sp, #4]
 8002a90:	2341      	movs	r3, #65	@ 0x41
 8002a92:	9300      	str	r3, [sp, #0]
 8002a94:	238a      	movs	r3, #138	@ 0x8a
 8002a96:	462a      	mov	r2, r5
 8002a98:	4621      	mov	r1, r4
 8002a9a:	f7fe fe35 	bl	8001708 <_ZN9ContainerC1EttttPFvvE>
	Rectangle rect1 = Rectangle(0, 0, ContainerxLength, containerYLength, BLACK, DOT_PIXEL_2X2, DRAW_FILL_EMPTY);
 8002a9e:	4bb5      	ldr	r3, [pc, #724]	@ (8002d74 <_Z21EPD_MainMenuWithQueuev+0x360>)
 8002aa0:	881a      	ldrh	r2, [r3, #0]
 8002aa2:	4bb5      	ldr	r3, [pc, #724]	@ (8002d78 <_Z21EPD_MainMenuWithQueuev+0x364>)
 8002aa4:	881b      	ldrh	r3, [r3, #0]
 8002aa6:	f607 202c 	addw	r0, r7, #2604	@ 0xa2c
 8002aaa:	2100      	movs	r1, #0
 8002aac:	9107      	str	r1, [sp, #28]
 8002aae:	2100      	movs	r1, #0
 8002ab0:	9106      	str	r1, [sp, #24]
 8002ab2:	2100      	movs	r1, #0
 8002ab4:	9105      	str	r1, [sp, #20]
 8002ab6:	2100      	movs	r1, #0
 8002ab8:	9104      	str	r1, [sp, #16]
 8002aba:	2100      	movs	r1, #0
 8002abc:	9103      	str	r1, [sp, #12]
 8002abe:	2102      	movs	r1, #2
 8002ac0:	9102      	str	r1, [sp, #8]
 8002ac2:	2100      	movs	r1, #0
 8002ac4:	9101      	str	r1, [sp, #4]
 8002ac6:	9300      	str	r3, [sp, #0]
 8002ac8:	4613      	mov	r3, r2
 8002aca:	2200      	movs	r2, #0
 8002acc:	2100      	movs	r1, #0
 8002ace:	f7ff f89f 	bl	8001c10 <_ZN9RectangleC1Ettttt9DOT_PIXEL9DRAW_FILLPFvvEttt>
	BitMap bitmap = BitMap(gImage_icon, 27, 2, 96, 96, WHITE);
 8002ad2:	f607 2008 	addw	r0, r7, #2568	@ 0xa08
 8002ad6:	23ff      	movs	r3, #255	@ 0xff
 8002ad8:	9302      	str	r3, [sp, #8]
 8002ada:	2360      	movs	r3, #96	@ 0x60
 8002adc:	9301      	str	r3, [sp, #4]
 8002ade:	2360      	movs	r3, #96	@ 0x60
 8002ae0:	9300      	str	r3, [sp, #0]
 8002ae2:	2302      	movs	r3, #2
 8002ae4:	221b      	movs	r2, #27
 8002ae6:	49a5      	ldr	r1, [pc, #660]	@ (8002d7c <_Z21EPD_MainMenuWithQueuev+0x368>)
 8002ae8:	f7ff f94a 	bl	8001d80 <_ZN6BitMapC1EPKhttttt>
	snprintf(buffer, sizeof(buffer), "Setpoint: %.1fC", setPoint);
 8002aec:	4ba4      	ldr	r3, [pc, #656]	@ (8002d80 <_Z21EPD_MainMenuWithQueuev+0x36c>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4618      	mov	r0, r3
 8002af2:	f7fd fd01 	bl	80004f8 <__aeabi_f2d>
 8002af6:	4602      	mov	r2, r0
 8002af8:	460b      	mov	r3, r1
 8002afa:	e9cd 2300 	strd	r2, r3, [sp]
 8002afe:	4aa1      	ldr	r2, [pc, #644]	@ (8002d84 <_Z21EPD_MainMenuWithQueuev+0x370>)
 8002b00:	2132      	movs	r1, #50	@ 0x32
 8002b02:	48a1      	ldr	r0, [pc, #644]	@ (8002d88 <_Z21EPD_MainMenuWithQueuev+0x374>)
 8002b04:	f00a fe22 	bl	800d74c <sniprintf>
	snprintf(temparatureBuffer, sizeof(temparatureBuffer), "Temperature: %.1fC", temparature);
 8002b08:	4ba0      	ldr	r3, [pc, #640]	@ (8002d8c <_Z21EPD_MainMenuWithQueuev+0x378>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f7fd fcf3 	bl	80004f8 <__aeabi_f2d>
 8002b12:	4602      	mov	r2, r0
 8002b14:	460b      	mov	r3, r1
 8002b16:	e9cd 2300 	strd	r2, r3, [sp]
 8002b1a:	4a9d      	ldr	r2, [pc, #628]	@ (8002d90 <_Z21EPD_MainMenuWithQueuev+0x37c>)
 8002b1c:	2132      	movs	r1, #50	@ 0x32
 8002b1e:	489d      	ldr	r0, [pc, #628]	@ (8002d94 <_Z21EPD_MainMenuWithQueuev+0x380>)
 8002b20:	f00a fe14 	bl	800d74c <sniprintf>
	DrawText setPointText = DrawText(358,121,buffer,&Font16, WHITE, BLACK);
 8002b24:	f507 601e 	add.w	r0, r7, #2528	@ 0x9e0
 8002b28:	2300      	movs	r3, #0
 8002b2a:	9302      	str	r3, [sp, #8]
 8002b2c:	23ff      	movs	r3, #255	@ 0xff
 8002b2e:	9301      	str	r3, [sp, #4]
 8002b30:	4b99      	ldr	r3, [pc, #612]	@ (8002d98 <_Z21EPD_MainMenuWithQueuev+0x384>)
 8002b32:	9300      	str	r3, [sp, #0]
 8002b34:	4b94      	ldr	r3, [pc, #592]	@ (8002d88 <_Z21EPD_MainMenuWithQueuev+0x374>)
 8002b36:	2279      	movs	r2, #121	@ 0x79
 8002b38:	f44f 71b3 	mov.w	r1, #358	@ 0x166
 8002b3c:	f7ff f9ec 	bl	8001f18 <_ZN8DrawTextC1EttPKcP6_tFonttt>
	DrawText actualTemperature = DrawText(302,174,temparatureBuffer,&Font24, WHITE, BLACK);
 8002b40:	f607 10b8 	addw	r0, r7, #2488	@ 0x9b8
 8002b44:	2300      	movs	r3, #0
 8002b46:	9302      	str	r3, [sp, #8]
 8002b48:	23ff      	movs	r3, #255	@ 0xff
 8002b4a:	9301      	str	r3, [sp, #4]
 8002b4c:	4b93      	ldr	r3, [pc, #588]	@ (8002d9c <_Z21EPD_MainMenuWithQueuev+0x388>)
 8002b4e:	9300      	str	r3, [sp, #0]
 8002b50:	4b90      	ldr	r3, [pc, #576]	@ (8002d94 <_Z21EPD_MainMenuWithQueuev+0x380>)
 8002b52:	22ae      	movs	r2, #174	@ 0xae
 8002b54:	f44f 7197 	mov.w	r1, #302	@ 0x12e
 8002b58:	f7ff f9de 	bl	8001f18 <_ZN8DrawTextC1EttPKcP6_tFonttt>
	container1.addDrawable(&rect1);
 8002b5c:	f607 222c 	addw	r2, r7, #2604	@ 0xa2c
 8002b60:	f607 234c 	addw	r3, r7, #2636	@ 0xa4c
 8002b64:	4611      	mov	r1, r2
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7fe fea3 	bl	80018b2 <_ZN9Container11addDrawableEP8Drawable>
	container1.addDrawable(&bitmap);
 8002b6c:	f607 2208 	addw	r2, r7, #2568	@ 0xa08
 8002b70:	f607 234c 	addw	r3, r7, #2636	@ 0xa4c
 8002b74:	4611      	mov	r1, r2
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7fe fe9b 	bl	80018b2 <_ZN9Container11addDrawableEP8Drawable>
	openingScreen.addDrawable(&container1);
 8002b7c:	f607 224c 	addw	r2, r7, #2636	@ 0xa4c
 8002b80:	f607 2394 	addw	r3, r7, #2708	@ 0xa94
 8002b84:	4611      	mov	r1, r2
 8002b86:	4618      	mov	r0, r3
 8002b88:	f7fe ff13 	bl	80019b2 <_ZN6Screen11addDrawableEP8Drawable>
	openingScreen.addDrawable(&setPointText);
 8002b8c:	f507 621e 	add.w	r2, r7, #2528	@ 0x9e0
 8002b90:	f607 2394 	addw	r3, r7, #2708	@ 0xa94
 8002b94:	4611      	mov	r1, r2
 8002b96:	4618      	mov	r0, r3
 8002b98:	f7fe ff0b 	bl	80019b2 <_ZN6Screen11addDrawableEP8Drawable>
	openingScreen.addDrawable(&actualTemperature);
 8002b9c:	f607 12b8 	addw	r2, r7, #2488	@ 0x9b8
 8002ba0:	f607 2394 	addw	r3, r7, #2708	@ 0xa94
 8002ba4:	4611      	mov	r1, r2
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f7fe ff03 	bl	80019b2 <_ZN6Screen11addDrawableEP8Drawable>
	openingScreen.addDrawable(&timeText);
 8002bac:	f607 2394 	addw	r3, r7, #2708	@ 0xa94
 8002bb0:	497b      	ldr	r1, [pc, #492]	@ (8002da0 <_Z21EPD_MainMenuWithQueuev+0x38c>)
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f7fe fefd 	bl	80019b2 <_ZN6Screen11addDrawableEP8Drawable>
	openingScreen.addDrawable(&battery);
 8002bb8:	f607 2394 	addw	r3, r7, #2708	@ 0xa94
 8002bbc:	4979      	ldr	r1, [pc, #484]	@ (8002da4 <_Z21EPD_MainMenuWithQueuev+0x390>)
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7fe fef7 	bl	80019b2 <_ZN6Screen11addDrawableEP8Drawable>
	openingScreen.addDrawable(&wifi);
 8002bc4:	f607 2394 	addw	r3, r7, #2708	@ 0xa94
 8002bc8:	4977      	ldr	r1, [pc, #476]	@ (8002da8 <_Z21EPD_MainMenuWithQueuev+0x394>)
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f7fe fef1 	bl	80019b2 <_ZN6Screen11addDrawableEP8Drawable>
	Screen mainMenu = Screen();
 8002bd0:	f507 6018 	add.w	r0, r7, #2432	@ 0x980
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	9301      	str	r3, [sp, #4]
 8002bd8:	23ff      	movs	r3, #255	@ 0xff
 8002bda:	9300      	str	r3, [sp, #0]
 8002bdc:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8002be0:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8002be4:	2100      	movs	r1, #0
 8002be6:	f7fe feba 	bl	800195e <_ZN6ScreenC1EPFv6ButtonEtttt>
	UWORD containerWidth = 138;
 8002bea:	238a      	movs	r3, #138	@ 0x8a
 8002bec:	f8a7 3ba6 	strh.w	r3, [r7, #2982]	@ 0xba6
	UWORD containerHeight = 65;
 8002bf0:	2341      	movs	r3, #65	@ 0x41
 8002bf2:	f8a7 3ba4 	strh.w	r3, [r7, #2980]	@ 0xba4
	Container BackContainer = Container(169,415,containerWidth,containerHeight);
 8002bf6:	f8b7 2ba6 	ldrh.w	r2, [r7, #2982]	@ 0xba6
 8002bfa:	f607 1038 	addw	r0, r7, #2360	@ 0x938
 8002bfe:	2300      	movs	r3, #0
 8002c00:	9301      	str	r3, [sp, #4]
 8002c02:	f8b7 3ba4 	ldrh.w	r3, [r7, #2980]	@ 0xba4
 8002c06:	9300      	str	r3, [sp, #0]
 8002c08:	4613      	mov	r3, r2
 8002c0a:	f240 129f 	movw	r2, #415	@ 0x19f
 8002c0e:	21a9      	movs	r1, #169	@ 0xa9
 8002c10:	f7fe fd7a 	bl	8001708 <_ZN9ContainerC1EttttPFvvE>
	Rectangle backRectangle =  Rectangle(0, 0, containerWidth, containerHeight, BLACK, DOT_PIXEL_2X2, DRAW_FILL_EMPTY);
 8002c14:	f8b7 2ba6 	ldrh.w	r2, [r7, #2982]	@ 0xba6
 8002c18:	f607 1018 	addw	r0, r7, #2328	@ 0x918
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	9307      	str	r3, [sp, #28]
 8002c20:	2300      	movs	r3, #0
 8002c22:	9306      	str	r3, [sp, #24]
 8002c24:	2300      	movs	r3, #0
 8002c26:	9305      	str	r3, [sp, #20]
 8002c28:	2300      	movs	r3, #0
 8002c2a:	9304      	str	r3, [sp, #16]
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	9303      	str	r3, [sp, #12]
 8002c30:	2302      	movs	r3, #2
 8002c32:	9302      	str	r3, [sp, #8]
 8002c34:	2300      	movs	r3, #0
 8002c36:	9301      	str	r3, [sp, #4]
 8002c38:	f8b7 3ba4 	ldrh.w	r3, [r7, #2980]	@ 0xba4
 8002c3c:	9300      	str	r3, [sp, #0]
 8002c3e:	4613      	mov	r3, r2
 8002c40:	2200      	movs	r2, #0
 8002c42:	2100      	movs	r1, #0
 8002c44:	f7fe ffe4 	bl	8001c10 <_ZN9RectangleC1Ettttt9DOT_PIXEL9DRAW_FILLPFvvEttt>
	DrawText backText =  DrawText(20,20,"Back",&Font16, WHITE, BLACK);
 8002c48:	f507 600f 	add.w	r0, r7, #2288	@ 0x8f0
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	9302      	str	r3, [sp, #8]
 8002c50:	23ff      	movs	r3, #255	@ 0xff
 8002c52:	9301      	str	r3, [sp, #4]
 8002c54:	4b50      	ldr	r3, [pc, #320]	@ (8002d98 <_Z21EPD_MainMenuWithQueuev+0x384>)
 8002c56:	9300      	str	r3, [sp, #0]
 8002c58:	4b54      	ldr	r3, [pc, #336]	@ (8002dac <_Z21EPD_MainMenuWithQueuev+0x398>)
 8002c5a:	2214      	movs	r2, #20
 8002c5c:	2114      	movs	r1, #20
 8002c5e:	f7ff f95b 	bl	8001f18 <_ZN8DrawTextC1EttPKcP6_tFonttt>
	BackContainer.addDrawable(&backRectangle);
 8002c62:	f607 1218 	addw	r2, r7, #2328	@ 0x918
 8002c66:	f607 1338 	addw	r3, r7, #2360	@ 0x938
 8002c6a:	4611      	mov	r1, r2
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f7fe fe20 	bl	80018b2 <_ZN9Container11addDrawableEP8Drawable>
	BackContainer.addDrawable(&backText);
 8002c72:	f507 620f 	add.w	r2, r7, #2288	@ 0x8f0
 8002c76:	f607 1338 	addw	r3, r7, #2360	@ 0x938
 8002c7a:	4611      	mov	r1, r2
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f7fe fe18 	bl	80018b2 <_ZN9Container11addDrawableEP8Drawable>
	Container homeContainer = Container(331,415,containerWidth,containerHeight);
 8002c82:	f8b7 2ba6 	ldrh.w	r2, [r7, #2982]	@ 0xba6
 8002c86:	f607 00a8 	addw	r0, r7, #2216	@ 0x8a8
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	9301      	str	r3, [sp, #4]
 8002c8e:	f8b7 3ba4 	ldrh.w	r3, [r7, #2980]	@ 0xba4
 8002c92:	9300      	str	r3, [sp, #0]
 8002c94:	4613      	mov	r3, r2
 8002c96:	f240 129f 	movw	r2, #415	@ 0x19f
 8002c9a:	f240 114b 	movw	r1, #331	@ 0x14b
 8002c9e:	f7fe fd33 	bl	8001708 <_ZN9ContainerC1EttttPFvvE>
	DrawText homeText = DrawText(20,20,"Home",&Font16, WHITE, BLACK);
 8002ca2:	f507 6008 	add.w	r0, r7, #2176	@ 0x880
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	9302      	str	r3, [sp, #8]
 8002caa:	23ff      	movs	r3, #255	@ 0xff
 8002cac:	9301      	str	r3, [sp, #4]
 8002cae:	4b3a      	ldr	r3, [pc, #232]	@ (8002d98 <_Z21EPD_MainMenuWithQueuev+0x384>)
 8002cb0:	9300      	str	r3, [sp, #0]
 8002cb2:	4b3f      	ldr	r3, [pc, #252]	@ (8002db0 <_Z21EPD_MainMenuWithQueuev+0x39c>)
 8002cb4:	2214      	movs	r2, #20
 8002cb6:	2114      	movs	r1, #20
 8002cb8:	f7ff f92e 	bl	8001f18 <_ZN8DrawTextC1EttPKcP6_tFonttt>
	homeContainer.addDrawable(&backRectangle);
 8002cbc:	f607 1218 	addw	r2, r7, #2328	@ 0x918
 8002cc0:	f607 03a8 	addw	r3, r7, #2216	@ 0x8a8
 8002cc4:	4611      	mov	r1, r2
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f7fe fdf3 	bl	80018b2 <_ZN9Container11addDrawableEP8Drawable>
	homeContainer.addDrawable(&homeText);
 8002ccc:	f507 6208 	add.w	r2, r7, #2176	@ 0x880
 8002cd0:	f607 03a8 	addw	r3, r7, #2216	@ 0x8a8
 8002cd4:	4611      	mov	r1, r2
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f7fe fdeb 	bl	80018b2 <_ZN9Container11addDrawableEP8Drawable>
	Container selectContainer = Container(493,415,containerWidth,containerHeight);
 8002cdc:	f8b7 2ba6 	ldrh.w	r2, [r7, #2982]	@ 0xba6
 8002ce0:	f607 0038 	addw	r0, r7, #2104	@ 0x838
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	9301      	str	r3, [sp, #4]
 8002ce8:	f8b7 3ba4 	ldrh.w	r3, [r7, #2980]	@ 0xba4
 8002cec:	9300      	str	r3, [sp, #0]
 8002cee:	4613      	mov	r3, r2
 8002cf0:	f240 129f 	movw	r2, #415	@ 0x19f
 8002cf4:	f240 11ed 	movw	r1, #493	@ 0x1ed
 8002cf8:	f7fe fd06 	bl	8001708 <_ZN9ContainerC1EttttPFvvE>
	DrawText selectText = DrawText(20,20,"Select",&Font16, WHITE, BLACK);
 8002cfc:	f507 6001 	add.w	r0, r7, #2064	@ 0x810
 8002d00:	2300      	movs	r3, #0
 8002d02:	9302      	str	r3, [sp, #8]
 8002d04:	23ff      	movs	r3, #255	@ 0xff
 8002d06:	9301      	str	r3, [sp, #4]
 8002d08:	4b23      	ldr	r3, [pc, #140]	@ (8002d98 <_Z21EPD_MainMenuWithQueuev+0x384>)
 8002d0a:	9300      	str	r3, [sp, #0]
 8002d0c:	4b29      	ldr	r3, [pc, #164]	@ (8002db4 <_Z21EPD_MainMenuWithQueuev+0x3a0>)
 8002d0e:	2214      	movs	r2, #20
 8002d10:	2114      	movs	r1, #20
 8002d12:	f7ff f901 	bl	8001f18 <_ZN8DrawTextC1EttPKcP6_tFonttt>
	selectContainer.addDrawable(&backRectangle);
 8002d16:	f607 1218 	addw	r2, r7, #2328	@ 0x918
 8002d1a:	f607 0338 	addw	r3, r7, #2104	@ 0x838
 8002d1e:	4611      	mov	r1, r2
 8002d20:	4618      	mov	r0, r3
 8002d22:	f7fe fdc6 	bl	80018b2 <_ZN9Container11addDrawableEP8Drawable>
	selectContainer.addDrawable(&selectText);
 8002d26:	f507 6201 	add.w	r2, r7, #2064	@ 0x810
 8002d2a:	f607 0338 	addw	r3, r7, #2104	@ 0x838
 8002d2e:	4611      	mov	r1, r2
 8002d30:	4618      	mov	r0, r3
 8002d32:	f7fe fdbe 	bl	80018b2 <_ZN9Container11addDrawableEP8Drawable>
	UWORD mainMenuWidth = 747;
 8002d36:	f240 23eb 	movw	r3, #747	@ 0x2eb
 8002d3a:	f8a7 3ba2 	strh.w	r3, [r7, #2978]	@ 0xba2
	UWORD mainMenuHeight = 93;
 8002d3e:	235d      	movs	r3, #93	@ 0x5d
 8002d40:	f8a7 3ba0 	strh.w	r3, [r7, #2976]	@ 0xba0
	});
 8002d44:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f7ff fbc1 	bl	80024d0 <_ZZ21EPD_MainMenuWithQueuevENKUlvE0_cvPFvvEEv>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	f8b7 2ba2 	ldrh.w	r2, [r7, #2978]	@ 0xba2
 8002d54:	f507 60f9 	add.w	r0, r7, #1992	@ 0x7c8
 8002d58:	9301      	str	r3, [sp, #4]
 8002d5a:	f8b7 3ba0 	ldrh.w	r3, [r7, #2976]	@ 0xba0
 8002d5e:	9300      	str	r3, [sp, #0]
 8002d60:	4613      	mov	r3, r2
 8002d62:	2257      	movs	r2, #87	@ 0x57
 8002d64:	211a      	movs	r1, #26
 8002d66:	e027      	b.n	8002db8 <_Z21EPD_MainMenuWithQueuev+0x3a4>
 8002d68:	20000654 	.word	0x20000654
 8002d6c:	200000fc 	.word	0x200000fc
 8002d70:	200005aa 	.word	0x200005aa
 8002d74:	200000fa 	.word	0x200000fa
 8002d78:	200000f8 	.word	0x200000f8
 8002d7c:	08012a64 	.word	0x08012a64
 8002d80:	200000f0 	.word	0x200000f0
 8002d84:	0800fa34 	.word	0x0800fa34
 8002d88:	20000544 	.word	0x20000544
 8002d8c:	200000f4 	.word	0x200000f4
 8002d90:	0800fa44 	.word	0x0800fa44
 8002d94:	20000578 	.word	0x20000578
 8002d98:	20000008 	.word	0x20000008
 8002d9c:	20000010 	.word	0x20000010
 8002da0:	200005ac 	.word	0x200005ac
 8002da4:	200005d4 	.word	0x200005d4
 8002da8:	200005f8 	.word	0x200005f8
 8002dac:	0800f9fc 	.word	0x0800f9fc
 8002db0:	0800fa04 	.word	0x0800fa04
 8002db4:	0800fa0c 	.word	0x0800fa0c
 8002db8:	f7fe fca6 	bl	8001708 <_ZN9ContainerC1EttttPFvvE>
	HighLightOnInteractRectangle scheduleRectangle = HighLightOnInteractRectangle(0, 0, mainMenuWidth, mainMenuHeight, BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY);
 8002dbc:	f8b7 2ba2 	ldrh.w	r2, [r7, #2978]	@ 0xba2
 8002dc0:	f507 60f5 	add.w	r0, r7, #1960	@ 0x7a8
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	9307      	str	r3, [sp, #28]
 8002dc8:	2300      	movs	r3, #0
 8002dca:	9306      	str	r3, [sp, #24]
 8002dcc:	2300      	movs	r3, #0
 8002dce:	9305      	str	r3, [sp, #20]
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	9304      	str	r3, [sp, #16]
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	9303      	str	r3, [sp, #12]
 8002dd8:	2301      	movs	r3, #1
 8002dda:	9302      	str	r3, [sp, #8]
 8002ddc:	2300      	movs	r3, #0
 8002dde:	9301      	str	r3, [sp, #4]
 8002de0:	f8b7 3ba0 	ldrh.w	r3, [r7, #2976]	@ 0xba0
 8002de4:	9300      	str	r3, [sp, #0]
 8002de6:	4613      	mov	r3, r2
 8002de8:	2200      	movs	r2, #0
 8002dea:	2100      	movs	r1, #0
 8002dec:	f7fe ff6a 	bl	8001cc4 <_ZN28HighLightOnInteractRectangleC1Ettttt9DOT_PIXEL9DRAW_FILLPFvvEttt>
	HighlightableDrawText scheduleText = HighlightableDrawText(20,20,"Schedule",&Font24, WHITE, BLACK);
 8002df0:	f507 60f0 	add.w	r0, r7, #1920	@ 0x780
 8002df4:	2300      	movs	r3, #0
 8002df6:	9302      	str	r3, [sp, #8]
 8002df8:	23ff      	movs	r3, #255	@ 0xff
 8002dfa:	9301      	str	r3, [sp, #4]
 8002dfc:	4bdd      	ldr	r3, [pc, #884]	@ (8003174 <_Z21EPD_MainMenuWithQueuev+0x760>)
 8002dfe:	9300      	str	r3, [sp, #0]
 8002e00:	4bdd      	ldr	r3, [pc, #884]	@ (8003178 <_Z21EPD_MainMenuWithQueuev+0x764>)
 8002e02:	2214      	movs	r2, #20
 8002e04:	2114      	movs	r1, #20
 8002e06:	f7ff f909 	bl	800201c <_ZN21HighlightableDrawTextC1EttPKcP6_tFonttt>
	scheduleContainer.addDrawable(&scheduleRectangle);
 8002e0a:	f507 62f5 	add.w	r2, r7, #1960	@ 0x7a8
 8002e0e:	f507 63f9 	add.w	r3, r7, #1992	@ 0x7c8
 8002e12:	4611      	mov	r1, r2
 8002e14:	4618      	mov	r0, r3
 8002e16:	f7fe fd4c 	bl	80018b2 <_ZN9Container11addDrawableEP8Drawable>
	scheduleContainer.addDrawable(&scheduleText);
 8002e1a:	f507 62f0 	add.w	r2, r7, #1920	@ 0x780
 8002e1e:	f507 63f9 	add.w	r3, r7, #1992	@ 0x7c8
 8002e22:	4611      	mov	r1, r2
 8002e24:	4618      	mov	r0, r3
 8002e26:	f7fe fd44 	bl	80018b2 <_ZN9Container11addDrawableEP8Drawable>
	});
 8002e2a:	f607 336c 	addw	r3, r7, #2924	@ 0xb6c
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f7ff fb6c 	bl	800250c <_ZZ21EPD_MainMenuWithQueuevENKUlvE1_cvPFvvEEv>
 8002e34:	4603      	mov	r3, r0
 8002e36:	f8b7 2ba2 	ldrh.w	r2, [r7, #2978]	@ 0xba2
 8002e3a:	f507 60e7 	add.w	r0, r7, #1848	@ 0x738
 8002e3e:	9301      	str	r3, [sp, #4]
 8002e40:	f8b7 3ba0 	ldrh.w	r3, [r7, #2976]	@ 0xba0
 8002e44:	9300      	str	r3, [sp, #0]
 8002e46:	4613      	mov	r3, r2
 8002e48:	22b4      	movs	r2, #180	@ 0xb4
 8002e4a:	211a      	movs	r1, #26
 8002e4c:	f7fe fc5c 	bl	8001708 <_ZN9ContainerC1EttttPFvvE>
	HighLightOnInteractRectangle ClockRectangle = HighLightOnInteractRectangle(0, 0, mainMenuWidth, mainMenuHeight, BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY);
 8002e50:	f8b7 2ba2 	ldrh.w	r2, [r7, #2978]	@ 0xba2
 8002e54:	f507 60e3 	add.w	r0, r7, #1816	@ 0x718
 8002e58:	2300      	movs	r3, #0
 8002e5a:	9307      	str	r3, [sp, #28]
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	9306      	str	r3, [sp, #24]
 8002e60:	2300      	movs	r3, #0
 8002e62:	9305      	str	r3, [sp, #20]
 8002e64:	2300      	movs	r3, #0
 8002e66:	9304      	str	r3, [sp, #16]
 8002e68:	2300      	movs	r3, #0
 8002e6a:	9303      	str	r3, [sp, #12]
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	9302      	str	r3, [sp, #8]
 8002e70:	2300      	movs	r3, #0
 8002e72:	9301      	str	r3, [sp, #4]
 8002e74:	f8b7 3ba0 	ldrh.w	r3, [r7, #2976]	@ 0xba0
 8002e78:	9300      	str	r3, [sp, #0]
 8002e7a:	4613      	mov	r3, r2
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	2100      	movs	r1, #0
 8002e80:	f7fe ff20 	bl	8001cc4 <_ZN28HighLightOnInteractRectangleC1Ettttt9DOT_PIXEL9DRAW_FILLPFvvEttt>
	HighlightableDrawText ClockText = HighlightableDrawText(20,20,"Clock/Date",&Font24, WHITE, BLACK);
 8002e84:	f507 60de 	add.w	r0, r7, #1776	@ 0x6f0
 8002e88:	2300      	movs	r3, #0
 8002e8a:	9302      	str	r3, [sp, #8]
 8002e8c:	23ff      	movs	r3, #255	@ 0xff
 8002e8e:	9301      	str	r3, [sp, #4]
 8002e90:	4bb8      	ldr	r3, [pc, #736]	@ (8003174 <_Z21EPD_MainMenuWithQueuev+0x760>)
 8002e92:	9300      	str	r3, [sp, #0]
 8002e94:	4bb9      	ldr	r3, [pc, #740]	@ (800317c <_Z21EPD_MainMenuWithQueuev+0x768>)
 8002e96:	2214      	movs	r2, #20
 8002e98:	2114      	movs	r1, #20
 8002e9a:	f7ff f8bf 	bl	800201c <_ZN21HighlightableDrawTextC1EttPKcP6_tFonttt>
	ClockContainer.addDrawable(&ClockRectangle);
 8002e9e:	f507 62e3 	add.w	r2, r7, #1816	@ 0x718
 8002ea2:	f507 63e7 	add.w	r3, r7, #1848	@ 0x738
 8002ea6:	4611      	mov	r1, r2
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f7fe fd02 	bl	80018b2 <_ZN9Container11addDrawableEP8Drawable>
	ClockContainer.addDrawable(&ClockText);
 8002eae:	f507 62de 	add.w	r2, r7, #1776	@ 0x6f0
 8002eb2:	f507 63e7 	add.w	r3, r7, #1848	@ 0x738
 8002eb6:	4611      	mov	r1, r2
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f7fe fcfa 	bl	80018b2 <_ZN9Container11addDrawableEP8Drawable>
	});
 8002ebe:	f507 6337 	add.w	r3, r7, #2928	@ 0xb70
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f7ff fb40 	bl	8002548 <_ZZ21EPD_MainMenuWithQueuevENKUlvE2_cvPFvvEEv>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	f8b7 2ba2 	ldrh.w	r2, [r7, #2978]	@ 0xba2
 8002ece:	f507 60d5 	add.w	r0, r7, #1704	@ 0x6a8
 8002ed2:	9301      	str	r3, [sp, #4]
 8002ed4:	f8b7 3ba0 	ldrh.w	r3, [r7, #2976]	@ 0xba0
 8002ed8:	9300      	str	r3, [sp, #0]
 8002eda:	4613      	mov	r3, r2
 8002edc:	f240 1211 	movw	r2, #273	@ 0x111
 8002ee0:	211a      	movs	r1, #26
 8002ee2:	f7fe fc11 	bl	8001708 <_ZN9ContainerC1EttttPFvvE>
	HighLightOnInteractRectangle AlertRectangle = HighLightOnInteractRectangle(0, 0, mainMenuWidth, mainMenuHeight, BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY);
 8002ee6:	f8b7 2ba2 	ldrh.w	r2, [r7, #2978]	@ 0xba2
 8002eea:	f507 60d1 	add.w	r0, r7, #1672	@ 0x688
 8002eee:	2300      	movs	r3, #0
 8002ef0:	9307      	str	r3, [sp, #28]
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	9306      	str	r3, [sp, #24]
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	9305      	str	r3, [sp, #20]
 8002efa:	2300      	movs	r3, #0
 8002efc:	9304      	str	r3, [sp, #16]
 8002efe:	2300      	movs	r3, #0
 8002f00:	9303      	str	r3, [sp, #12]
 8002f02:	2301      	movs	r3, #1
 8002f04:	9302      	str	r3, [sp, #8]
 8002f06:	2300      	movs	r3, #0
 8002f08:	9301      	str	r3, [sp, #4]
 8002f0a:	f8b7 3ba0 	ldrh.w	r3, [r7, #2976]	@ 0xba0
 8002f0e:	9300      	str	r3, [sp, #0]
 8002f10:	4613      	mov	r3, r2
 8002f12:	2200      	movs	r2, #0
 8002f14:	2100      	movs	r1, #0
 8002f16:	f7fe fed5 	bl	8001cc4 <_ZN28HighLightOnInteractRectangleC1Ettttt9DOT_PIXEL9DRAW_FILLPFvvEttt>
	HighlightableDrawText AlertText = HighlightableDrawText(20,20,"Alerts",&Font24, WHITE, BLACK);
 8002f1a:	f507 60cc 	add.w	r0, r7, #1632	@ 0x660
 8002f1e:	2300      	movs	r3, #0
 8002f20:	9302      	str	r3, [sp, #8]
 8002f22:	23ff      	movs	r3, #255	@ 0xff
 8002f24:	9301      	str	r3, [sp, #4]
 8002f26:	4b93      	ldr	r3, [pc, #588]	@ (8003174 <_Z21EPD_MainMenuWithQueuev+0x760>)
 8002f28:	9300      	str	r3, [sp, #0]
 8002f2a:	4b95      	ldr	r3, [pc, #596]	@ (8003180 <_Z21EPD_MainMenuWithQueuev+0x76c>)
 8002f2c:	2214      	movs	r2, #20
 8002f2e:	2114      	movs	r1, #20
 8002f30:	f7ff f874 	bl	800201c <_ZN21HighlightableDrawTextC1EttPKcP6_tFonttt>
	AlertContainer.addDrawable(&AlertRectangle);
 8002f34:	f507 62d1 	add.w	r2, r7, #1672	@ 0x688
 8002f38:	f507 63d5 	add.w	r3, r7, #1704	@ 0x6a8
 8002f3c:	4611      	mov	r1, r2
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f7fe fcb7 	bl	80018b2 <_ZN9Container11addDrawableEP8Drawable>
	AlertContainer.addDrawable(&AlertText);
 8002f44:	f507 62cc 	add.w	r2, r7, #1632	@ 0x660
 8002f48:	f507 63d5 	add.w	r3, r7, #1704	@ 0x6a8
 8002f4c:	4611      	mov	r1, r2
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f7fe fcaf 	bl	80018b2 <_ZN9Container11addDrawableEP8Drawable>
	DrawText timeTextMainMenu = DrawText(338,20,&time,&Font24, WHITE, BLACK);
 8002f54:	f507 60c7 	add.w	r0, r7, #1592	@ 0x638
 8002f58:	2300      	movs	r3, #0
 8002f5a:	9302      	str	r3, [sp, #8]
 8002f5c:	23ff      	movs	r3, #255	@ 0xff
 8002f5e:	9301      	str	r3, [sp, #4]
 8002f60:	4b84      	ldr	r3, [pc, #528]	@ (8003174 <_Z21EPD_MainMenuWithQueuev+0x760>)
 8002f62:	9300      	str	r3, [sp, #0]
 8002f64:	4b87      	ldr	r3, [pc, #540]	@ (8003184 <_Z21EPD_MainMenuWithQueuev+0x770>)
 8002f66:	2214      	movs	r2, #20
 8002f68:	f44f 71a9 	mov.w	r1, #338	@ 0x152
 8002f6c:	f7ff f804 	bl	8001f78 <_ZN8DrawTextC1EttP10PAINT_TIMEP6_tFonttt>
	mainMenu.addDrawable(&BackContainer);
 8002f70:	f607 1238 	addw	r2, r7, #2360	@ 0x938
 8002f74:	f507 6318 	add.w	r3, r7, #2432	@ 0x980
 8002f78:	4611      	mov	r1, r2
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f7fe fd19 	bl	80019b2 <_ZN6Screen11addDrawableEP8Drawable>
	mainMenu.addDrawable(&homeContainer);
 8002f80:	f607 02a8 	addw	r2, r7, #2216	@ 0x8a8
 8002f84:	f507 6318 	add.w	r3, r7, #2432	@ 0x980
 8002f88:	4611      	mov	r1, r2
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f7fe fd11 	bl	80019b2 <_ZN6Screen11addDrawableEP8Drawable>
	mainMenu.addDrawable(&selectContainer);
 8002f90:	f607 0238 	addw	r2, r7, #2104	@ 0x838
 8002f94:	f507 6318 	add.w	r3, r7, #2432	@ 0x980
 8002f98:	4611      	mov	r1, r2
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f7fe fd09 	bl	80019b2 <_ZN6Screen11addDrawableEP8Drawable>
	mainMenu.addDrawable(&scheduleContainer);
 8002fa0:	f507 62f9 	add.w	r2, r7, #1992	@ 0x7c8
 8002fa4:	f507 6318 	add.w	r3, r7, #2432	@ 0x980
 8002fa8:	4611      	mov	r1, r2
 8002faa:	4618      	mov	r0, r3
 8002fac:	f7fe fd01 	bl	80019b2 <_ZN6Screen11addDrawableEP8Drawable>
	mainMenu.addDrawable(&ClockContainer);
 8002fb0:	f507 62e7 	add.w	r2, r7, #1848	@ 0x738
 8002fb4:	f507 6318 	add.w	r3, r7, #2432	@ 0x980
 8002fb8:	4611      	mov	r1, r2
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f7fe fcf9 	bl	80019b2 <_ZN6Screen11addDrawableEP8Drawable>
	mainMenu.addDrawable(&AlertContainer);
 8002fc0:	f507 62d5 	add.w	r2, r7, #1704	@ 0x6a8
 8002fc4:	f507 6318 	add.w	r3, r7, #2432	@ 0x980
 8002fc8:	4611      	mov	r1, r2
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f7fe fcf1 	bl	80019b2 <_ZN6Screen11addDrawableEP8Drawable>
	mainMenu.addDrawable(&timeText);
 8002fd0:	f507 6318 	add.w	r3, r7, #2432	@ 0x980
 8002fd4:	496c      	ldr	r1, [pc, #432]	@ (8003188 <_Z21EPD_MainMenuWithQueuev+0x774>)
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f7fe fceb 	bl	80019b2 <_ZN6Screen11addDrawableEP8Drawable>
	mainMenu.addDrawable(&battery);
 8002fdc:	f507 6318 	add.w	r3, r7, #2432	@ 0x980
 8002fe0:	496a      	ldr	r1, [pc, #424]	@ (800318c <_Z21EPD_MainMenuWithQueuev+0x778>)
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f7fe fce5 	bl	80019b2 <_ZN6Screen11addDrawableEP8Drawable>
	mainMenu.addDrawable(&wifi);
 8002fe8:	f507 6318 	add.w	r3, r7, #2432	@ 0x980
 8002fec:	4968      	ldr	r1, [pc, #416]	@ (8003190 <_Z21EPD_MainMenuWithQueuev+0x77c>)
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f7fe fcdf 	bl	80019b2 <_ZN6Screen11addDrawableEP8Drawable>
	Screen scheduleScreen = Screen();
 8002ff4:	f507 60c0 	add.w	r0, r7, #1536	@ 0x600
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	9301      	str	r3, [sp, #4]
 8002ffc:	23ff      	movs	r3, #255	@ 0xff
 8002ffe:	9300      	str	r3, [sp, #0]
 8003000:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8003004:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8003008:	2100      	movs	r1, #0
 800300a:	f7fe fca8 	bl	800195e <_ZN6ScreenC1EPFv6ButtonEtttt>
	Container BackContainerScheduleScreen = Container(169,415,containerWidth,containerHeight);
 800300e:	f8b7 2ba6 	ldrh.w	r2, [r7, #2982]	@ 0xba6
 8003012:	f507 60b7 	add.w	r0, r7, #1464	@ 0x5b8
 8003016:	2300      	movs	r3, #0
 8003018:	9301      	str	r3, [sp, #4]
 800301a:	f8b7 3ba4 	ldrh.w	r3, [r7, #2980]	@ 0xba4
 800301e:	9300      	str	r3, [sp, #0]
 8003020:	4613      	mov	r3, r2
 8003022:	f240 129f 	movw	r2, #415	@ 0x19f
 8003026:	21a9      	movs	r1, #169	@ 0xa9
 8003028:	f7fe fb6e 	bl	8001708 <_ZN9ContainerC1EttttPFvvE>
	BackContainerScheduleScreen.addDrawable(&backRectangle);
 800302c:	f607 1218 	addw	r2, r7, #2328	@ 0x918
 8003030:	f507 63b7 	add.w	r3, r7, #1464	@ 0x5b8
 8003034:	4611      	mov	r1, r2
 8003036:	4618      	mov	r0, r3
 8003038:	f7fe fc3b 	bl	80018b2 <_ZN9Container11addDrawableEP8Drawable>
	BackContainerScheduleScreen.addDrawable(&backText);
 800303c:	f507 620f 	add.w	r2, r7, #2288	@ 0x8f0
 8003040:	f507 63b7 	add.w	r3, r7, #1464	@ 0x5b8
 8003044:	4611      	mov	r1, r2
 8003046:	4618      	mov	r0, r3
 8003048:	f7fe fc33 	bl	80018b2 <_ZN9Container11addDrawableEP8Drawable>
	Container homeContainerScheduleScreen = Container(331,415,containerWidth,containerHeight);
 800304c:	f8b7 2ba6 	ldrh.w	r2, [r7, #2982]	@ 0xba6
 8003050:	f507 60ae 	add.w	r0, r7, #1392	@ 0x570
 8003054:	2300      	movs	r3, #0
 8003056:	9301      	str	r3, [sp, #4]
 8003058:	f8b7 3ba4 	ldrh.w	r3, [r7, #2980]	@ 0xba4
 800305c:	9300      	str	r3, [sp, #0]
 800305e:	4613      	mov	r3, r2
 8003060:	f240 129f 	movw	r2, #415	@ 0x19f
 8003064:	f240 114b 	movw	r1, #331	@ 0x14b
 8003068:	f7fe fb4e 	bl	8001708 <_ZN9ContainerC1EttttPFvvE>
	homeContainerScheduleScreen.addDrawable(&backRectangle);
 800306c:	f607 1218 	addw	r2, r7, #2328	@ 0x918
 8003070:	f507 63ae 	add.w	r3, r7, #1392	@ 0x570
 8003074:	4611      	mov	r1, r2
 8003076:	4618      	mov	r0, r3
 8003078:	f7fe fc1b 	bl	80018b2 <_ZN9Container11addDrawableEP8Drawable>
	homeContainerScheduleScreen.addDrawable(&homeText);
 800307c:	f507 6208 	add.w	r2, r7, #2176	@ 0x880
 8003080:	f507 63ae 	add.w	r3, r7, #1392	@ 0x570
 8003084:	4611      	mov	r1, r2
 8003086:	4618      	mov	r0, r3
 8003088:	f7fe fc13 	bl	80018b2 <_ZN9Container11addDrawableEP8Drawable>
	Container selectContainerScheduleScreen = Container(493,415,containerWidth,containerHeight);
 800308c:	f8b7 2ba6 	ldrh.w	r2, [r7, #2982]	@ 0xba6
 8003090:	f507 60a5 	add.w	r0, r7, #1320	@ 0x528
 8003094:	2300      	movs	r3, #0
 8003096:	9301      	str	r3, [sp, #4]
 8003098:	f8b7 3ba4 	ldrh.w	r3, [r7, #2980]	@ 0xba4
 800309c:	9300      	str	r3, [sp, #0]
 800309e:	4613      	mov	r3, r2
 80030a0:	f240 129f 	movw	r2, #415	@ 0x19f
 80030a4:	f240 11ed 	movw	r1, #493	@ 0x1ed
 80030a8:	f7fe fb2e 	bl	8001708 <_ZN9ContainerC1EttttPFvvE>
	selectContainerScheduleScreen.addDrawable(&backRectangle);
 80030ac:	f607 1218 	addw	r2, r7, #2328	@ 0x918
 80030b0:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 80030b4:	4611      	mov	r1, r2
 80030b6:	4618      	mov	r0, r3
 80030b8:	f7fe fbfb 	bl	80018b2 <_ZN9Container11addDrawableEP8Drawable>
	selectContainerScheduleScreen.addDrawable(&selectText);
 80030bc:	f507 6201 	add.w	r2, r7, #2064	@ 0x810
 80030c0:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 80030c4:	4611      	mov	r1, r2
 80030c6:	4618      	mov	r0, r3
 80030c8:	f7fe fbf3 	bl	80018b2 <_ZN9Container11addDrawableEP8Drawable>
	UWORD scheduleContainerHeightIndent = 15;
 80030cc:	230f      	movs	r3, #15
 80030ce:	f8a7 3b9e 	strh.w	r3, [r7, #2974]	@ 0xb9e
	UWORD scheduleContainerWidth = 307;
 80030d2:	f240 1333 	movw	r3, #307	@ 0x133
 80030d6:	f8a7 3b9c 	strh.w	r3, [r7, #2972]	@ 0xb9c
	UWORD scheduleContainerHeight = 56;
 80030da:	2338      	movs	r3, #56	@ 0x38
 80030dc:	f8a7 3b9a 	strh.w	r3, [r7, #2970]	@ 0xb9a
	} );
 80030e0:	f607 3374 	addw	r3, r7, #2932	@ 0xb74
 80030e4:	4618      	mov	r0, r3
 80030e6:	f7ff fa5b 	bl	80025a0 <_ZZ21EPD_MainMenuWithQueuevENKUlvE3_cvPFvvEEv>
 80030ea:	4603      	mov	r3, r0
 80030ec:	f8b7 1b9c 	ldrh.w	r1, [r7, #2972]	@ 0xb9c
 80030f0:	f8b7 2b9e 	ldrh.w	r2, [r7, #2974]	@ 0xb9e
 80030f4:	f507 609c 	add.w	r0, r7, #1248	@ 0x4e0
 80030f8:	9301      	str	r3, [sp, #4]
 80030fa:	f8b7 3b9a 	ldrh.w	r3, [r7, #2970]	@ 0xb9a
 80030fe:	9300      	str	r3, [sp, #0]
 8003100:	460b      	mov	r3, r1
 8003102:	2100      	movs	r1, #0
 8003104:	f7fe fb00 	bl	8001708 <_ZN9ContainerC1EttttPFvvE>
	HighLightOnInteractRectangle mondayRectangle = HighLightOnInteractRectangle(0, 0, scheduleContainerWidth, scheduleContainerHeight, BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY);
 8003108:	f8b7 2b9c 	ldrh.w	r2, [r7, #2972]	@ 0xb9c
 800310c:	f507 6098 	add.w	r0, r7, #1216	@ 0x4c0
 8003110:	2300      	movs	r3, #0
 8003112:	9307      	str	r3, [sp, #28]
 8003114:	2300      	movs	r3, #0
 8003116:	9306      	str	r3, [sp, #24]
 8003118:	2300      	movs	r3, #0
 800311a:	9305      	str	r3, [sp, #20]
 800311c:	2300      	movs	r3, #0
 800311e:	9304      	str	r3, [sp, #16]
 8003120:	2300      	movs	r3, #0
 8003122:	9303      	str	r3, [sp, #12]
 8003124:	2301      	movs	r3, #1
 8003126:	9302      	str	r3, [sp, #8]
 8003128:	2300      	movs	r3, #0
 800312a:	9301      	str	r3, [sp, #4]
 800312c:	f8b7 3b9a 	ldrh.w	r3, [r7, #2970]	@ 0xb9a
 8003130:	9300      	str	r3, [sp, #0]
 8003132:	4613      	mov	r3, r2
 8003134:	2200      	movs	r2, #0
 8003136:	2100      	movs	r1, #0
 8003138:	f7fe fdc4 	bl	8001cc4 <_ZN28HighLightOnInteractRectangleC1Ettttt9DOT_PIXEL9DRAW_FILLPFvvEttt>
	HighlightableDrawText mondayText = HighlightableDrawText(20,20,"Monday",&Font24, WHITE, BLACK);
 800313c:	f507 6093 	add.w	r0, r7, #1176	@ 0x498
 8003140:	2300      	movs	r3, #0
 8003142:	9302      	str	r3, [sp, #8]
 8003144:	23ff      	movs	r3, #255	@ 0xff
 8003146:	9301      	str	r3, [sp, #4]
 8003148:	4b0a      	ldr	r3, [pc, #40]	@ (8003174 <_Z21EPD_MainMenuWithQueuev+0x760>)
 800314a:	9300      	str	r3, [sp, #0]
 800314c:	4b11      	ldr	r3, [pc, #68]	@ (8003194 <_Z21EPD_MainMenuWithQueuev+0x780>)
 800314e:	2214      	movs	r2, #20
 8003150:	2114      	movs	r1, #20
 8003152:	f7fe ff63 	bl	800201c <_ZN21HighlightableDrawTextC1EttPKcP6_tFonttt>
	mondayContainer.addDrawable(&mondayRectangle);
 8003156:	f507 6298 	add.w	r2, r7, #1216	@ 0x4c0
 800315a:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 800315e:	4611      	mov	r1, r2
 8003160:	4618      	mov	r0, r3
 8003162:	f7fe fba6 	bl	80018b2 <_ZN9Container11addDrawableEP8Drawable>
	mondayContainer.addDrawable(&mondayText);
 8003166:	f507 6293 	add.w	r2, r7, #1176	@ 0x498
 800316a:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 800316e:	4611      	mov	r1, r2
 8003170:	4618      	mov	r0, r3
 8003172:	e011      	b.n	8003198 <_Z21EPD_MainMenuWithQueuev+0x784>
 8003174:	20000010 	.word	0x20000010
 8003178:	0800fa58 	.word	0x0800fa58
 800317c:	0800fa64 	.word	0x0800fa64
 8003180:	0800fa70 	.word	0x0800fa70
 8003184:	200000e4 	.word	0x200000e4
 8003188:	200005ac 	.word	0x200005ac
 800318c:	200005d4 	.word	0x200005d4
 8003190:	200005f8 	.word	0x200005f8
 8003194:	0800fa78 	.word	0x0800fa78
 8003198:	f7fe fb8b 	bl	80018b2 <_ZN9Container11addDrawableEP8Drawable>
	}  );
 800319c:	f8b7 2b9e 	ldrh.w	r2, [r7, #2974]	@ 0xb9e
 80031a0:	f8b7 3b9a 	ldrh.w	r3, [r7, #2970]	@ 0xb9a
 80031a4:	4413      	add	r3, r2
 80031a6:	b29c      	uxth	r4, r3
 80031a8:	f607 3378 	addw	r3, r7, #2936	@ 0xb78
 80031ac:	4618      	mov	r0, r3
 80031ae:	f7ff fa23 	bl	80025f8 <_ZZ21EPD_MainMenuWithQueuevENKUlvE4_cvPFvvEEv>
 80031b2:	4603      	mov	r3, r0
 80031b4:	f8b7 2b9c 	ldrh.w	r2, [r7, #2972]	@ 0xb9c
 80031b8:	f507 608a 	add.w	r0, r7, #1104	@ 0x450
 80031bc:	9301      	str	r3, [sp, #4]
 80031be:	f8b7 3b9a 	ldrh.w	r3, [r7, #2970]	@ 0xb9a
 80031c2:	9300      	str	r3, [sp, #0]
 80031c4:	4613      	mov	r3, r2
 80031c6:	4622      	mov	r2, r4
 80031c8:	2100      	movs	r1, #0
 80031ca:	f7fe fa9d 	bl	8001708 <_ZN9ContainerC1EttttPFvvE>
	HighLightOnInteractRectangle tuesdayRectangle = HighLightOnInteractRectangle(0, 0, scheduleContainerWidth, scheduleContainerHeight, BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY);
 80031ce:	f8b7 2b9c 	ldrh.w	r2, [r7, #2972]	@ 0xb9c
 80031d2:	f507 6086 	add.w	r0, r7, #1072	@ 0x430
 80031d6:	2300      	movs	r3, #0
 80031d8:	9307      	str	r3, [sp, #28]
 80031da:	2300      	movs	r3, #0
 80031dc:	9306      	str	r3, [sp, #24]
 80031de:	2300      	movs	r3, #0
 80031e0:	9305      	str	r3, [sp, #20]
 80031e2:	2300      	movs	r3, #0
 80031e4:	9304      	str	r3, [sp, #16]
 80031e6:	2300      	movs	r3, #0
 80031e8:	9303      	str	r3, [sp, #12]
 80031ea:	2301      	movs	r3, #1
 80031ec:	9302      	str	r3, [sp, #8]
 80031ee:	2300      	movs	r3, #0
 80031f0:	9301      	str	r3, [sp, #4]
 80031f2:	f8b7 3b9a 	ldrh.w	r3, [r7, #2970]	@ 0xb9a
 80031f6:	9300      	str	r3, [sp, #0]
 80031f8:	4613      	mov	r3, r2
 80031fa:	2200      	movs	r2, #0
 80031fc:	2100      	movs	r1, #0
 80031fe:	f7fe fd61 	bl	8001cc4 <_ZN28HighLightOnInteractRectangleC1Ettttt9DOT_PIXEL9DRAW_FILLPFvvEttt>
	HighlightableDrawText tuesdayText = HighlightableDrawText(20,20,"Tuesday",&Font24, WHITE, BLACK);
 8003202:	f507 6081 	add.w	r0, r7, #1032	@ 0x408
 8003206:	2300      	movs	r3, #0
 8003208:	9302      	str	r3, [sp, #8]
 800320a:	23ff      	movs	r3, #255	@ 0xff
 800320c:	9301      	str	r3, [sp, #4]
 800320e:	4bd2      	ldr	r3, [pc, #840]	@ (8003558 <_Z21EPD_MainMenuWithQueuev+0xb44>)
 8003210:	9300      	str	r3, [sp, #0]
 8003212:	4bd2      	ldr	r3, [pc, #840]	@ (800355c <_Z21EPD_MainMenuWithQueuev+0xb48>)
 8003214:	2214      	movs	r2, #20
 8003216:	2114      	movs	r1, #20
 8003218:	f7fe ff00 	bl	800201c <_ZN21HighlightableDrawTextC1EttPKcP6_tFonttt>
	tuesdayContainer.addDrawable(&tuesdayRectangle);
 800321c:	f507 6286 	add.w	r2, r7, #1072	@ 0x430
 8003220:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8003224:	4611      	mov	r1, r2
 8003226:	4618      	mov	r0, r3
 8003228:	f7fe fb43 	bl	80018b2 <_ZN9Container11addDrawableEP8Drawable>
	tuesdayContainer.addDrawable(&tuesdayText);
 800322c:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8003230:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8003234:	4611      	mov	r1, r2
 8003236:	4618      	mov	r0, r3
 8003238:	f7fe fb3b 	bl	80018b2 <_ZN9Container11addDrawableEP8Drawable>
	}  );
 800323c:	f8b7 3b9a 	ldrh.w	r3, [r7, #2970]	@ 0xb9a
 8003240:	005b      	lsls	r3, r3, #1
 8003242:	b29a      	uxth	r2, r3
 8003244:	f8b7 3b9e 	ldrh.w	r3, [r7, #2974]	@ 0xb9e
 8003248:	4413      	add	r3, r2
 800324a:	b29c      	uxth	r4, r3
 800324c:	f607 337c 	addw	r3, r7, #2940	@ 0xb7c
 8003250:	4618      	mov	r0, r3
 8003252:	f7ff f9fd 	bl	8002650 <_ZZ21EPD_MainMenuWithQueuevENKUlvE5_cvPFvvEEv>
 8003256:	4603      	mov	r3, r0
 8003258:	f8b7 2b9c 	ldrh.w	r2, [r7, #2972]	@ 0xb9c
 800325c:	f507 7070 	add.w	r0, r7, #960	@ 0x3c0
 8003260:	9301      	str	r3, [sp, #4]
 8003262:	f8b7 3b9a 	ldrh.w	r3, [r7, #2970]	@ 0xb9a
 8003266:	9300      	str	r3, [sp, #0]
 8003268:	4613      	mov	r3, r2
 800326a:	4622      	mov	r2, r4
 800326c:	2100      	movs	r1, #0
 800326e:	f7fe fa4b 	bl	8001708 <_ZN9ContainerC1EttttPFvvE>
	HighLightOnInteractRectangle wednesdayRectangle = HighLightOnInteractRectangle(0, 0, scheduleContainerWidth, scheduleContainerHeight, BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY);
 8003272:	f8b7 2b9c 	ldrh.w	r2, [r7, #2972]	@ 0xb9c
 8003276:	f507 7068 	add.w	r0, r7, #928	@ 0x3a0
 800327a:	2300      	movs	r3, #0
 800327c:	9307      	str	r3, [sp, #28]
 800327e:	2300      	movs	r3, #0
 8003280:	9306      	str	r3, [sp, #24]
 8003282:	2300      	movs	r3, #0
 8003284:	9305      	str	r3, [sp, #20]
 8003286:	2300      	movs	r3, #0
 8003288:	9304      	str	r3, [sp, #16]
 800328a:	2300      	movs	r3, #0
 800328c:	9303      	str	r3, [sp, #12]
 800328e:	2301      	movs	r3, #1
 8003290:	9302      	str	r3, [sp, #8]
 8003292:	2300      	movs	r3, #0
 8003294:	9301      	str	r3, [sp, #4]
 8003296:	f8b7 3b9a 	ldrh.w	r3, [r7, #2970]	@ 0xb9a
 800329a:	9300      	str	r3, [sp, #0]
 800329c:	4613      	mov	r3, r2
 800329e:	2200      	movs	r2, #0
 80032a0:	2100      	movs	r1, #0
 80032a2:	f7fe fd0f 	bl	8001cc4 <_ZN28HighLightOnInteractRectangleC1Ettttt9DOT_PIXEL9DRAW_FILLPFvvEttt>
	HighlightableDrawText wednesdayText = HighlightableDrawText(20,20,"Wednesday",&Font24, WHITE, BLACK);
 80032a6:	f507 705e 	add.w	r0, r7, #888	@ 0x378
 80032aa:	2300      	movs	r3, #0
 80032ac:	9302      	str	r3, [sp, #8]
 80032ae:	23ff      	movs	r3, #255	@ 0xff
 80032b0:	9301      	str	r3, [sp, #4]
 80032b2:	4ba9      	ldr	r3, [pc, #676]	@ (8003558 <_Z21EPD_MainMenuWithQueuev+0xb44>)
 80032b4:	9300      	str	r3, [sp, #0]
 80032b6:	4baa      	ldr	r3, [pc, #680]	@ (8003560 <_Z21EPD_MainMenuWithQueuev+0xb4c>)
 80032b8:	2214      	movs	r2, #20
 80032ba:	2114      	movs	r1, #20
 80032bc:	f7fe feae 	bl	800201c <_ZN21HighlightableDrawTextC1EttPKcP6_tFonttt>
	wednesdayContainer.addDrawable(&wednesdayRectangle);
 80032c0:	f507 7268 	add.w	r2, r7, #928	@ 0x3a0
 80032c4:	f507 7370 	add.w	r3, r7, #960	@ 0x3c0
 80032c8:	4611      	mov	r1, r2
 80032ca:	4618      	mov	r0, r3
 80032cc:	f7fe faf1 	bl	80018b2 <_ZN9Container11addDrawableEP8Drawable>
	wednesdayContainer.addDrawable(&wednesdayText);
 80032d0:	f507 725e 	add.w	r2, r7, #888	@ 0x378
 80032d4:	f507 7370 	add.w	r3, r7, #960	@ 0x3c0
 80032d8:	4611      	mov	r1, r2
 80032da:	4618      	mov	r0, r3
 80032dc:	f7fe fae9 	bl	80018b2 <_ZN9Container11addDrawableEP8Drawable>
	}  );
 80032e0:	f8b7 3b9a 	ldrh.w	r3, [r7, #2970]	@ 0xb9a
 80032e4:	461a      	mov	r2, r3
 80032e6:	0052      	lsls	r2, r2, #1
 80032e8:	4413      	add	r3, r2
 80032ea:	b29a      	uxth	r2, r3
 80032ec:	f8b7 3b9e 	ldrh.w	r3, [r7, #2974]	@ 0xb9e
 80032f0:	4413      	add	r3, r2
 80032f2:	b29c      	uxth	r4, r3
 80032f4:	f507 6338 	add.w	r3, r7, #2944	@ 0xb80
 80032f8:	4618      	mov	r0, r3
 80032fa:	f7ff f9d5 	bl	80026a8 <_ZZ21EPD_MainMenuWithQueuevENKUlvE6_cvPFvvEEv>
 80032fe:	4603      	mov	r3, r0
 8003300:	f8b7 2b9c 	ldrh.w	r2, [r7, #2972]	@ 0xb9c
 8003304:	f507 704c 	add.w	r0, r7, #816	@ 0x330
 8003308:	9301      	str	r3, [sp, #4]
 800330a:	f8b7 3b9a 	ldrh.w	r3, [r7, #2970]	@ 0xb9a
 800330e:	9300      	str	r3, [sp, #0]
 8003310:	4613      	mov	r3, r2
 8003312:	4622      	mov	r2, r4
 8003314:	2100      	movs	r1, #0
 8003316:	f7fe f9f7 	bl	8001708 <_ZN9ContainerC1EttttPFvvE>
	HighLightOnInteractRectangle thursdayRectangle = HighLightOnInteractRectangle(0, 0, scheduleContainerWidth, scheduleContainerHeight, BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY);
 800331a:	f8b7 2b9c 	ldrh.w	r2, [r7, #2972]	@ 0xb9c
 800331e:	f507 7044 	add.w	r0, r7, #784	@ 0x310
 8003322:	2300      	movs	r3, #0
 8003324:	9307      	str	r3, [sp, #28]
 8003326:	2300      	movs	r3, #0
 8003328:	9306      	str	r3, [sp, #24]
 800332a:	2300      	movs	r3, #0
 800332c:	9305      	str	r3, [sp, #20]
 800332e:	2300      	movs	r3, #0
 8003330:	9304      	str	r3, [sp, #16]
 8003332:	2300      	movs	r3, #0
 8003334:	9303      	str	r3, [sp, #12]
 8003336:	2301      	movs	r3, #1
 8003338:	9302      	str	r3, [sp, #8]
 800333a:	2300      	movs	r3, #0
 800333c:	9301      	str	r3, [sp, #4]
 800333e:	f8b7 3b9a 	ldrh.w	r3, [r7, #2970]	@ 0xb9a
 8003342:	9300      	str	r3, [sp, #0]
 8003344:	4613      	mov	r3, r2
 8003346:	2200      	movs	r2, #0
 8003348:	2100      	movs	r1, #0
 800334a:	f7fe fcbb 	bl	8001cc4 <_ZN28HighLightOnInteractRectangleC1Ettttt9DOT_PIXEL9DRAW_FILLPFvvEttt>
	HighlightableDrawText thursdayText = HighlightableDrawText(20,20,"Thursday",&Font24, WHITE, BLACK);
 800334e:	f507 703a 	add.w	r0, r7, #744	@ 0x2e8
 8003352:	2300      	movs	r3, #0
 8003354:	9302      	str	r3, [sp, #8]
 8003356:	23ff      	movs	r3, #255	@ 0xff
 8003358:	9301      	str	r3, [sp, #4]
 800335a:	4b7f      	ldr	r3, [pc, #508]	@ (8003558 <_Z21EPD_MainMenuWithQueuev+0xb44>)
 800335c:	9300      	str	r3, [sp, #0]
 800335e:	4b81      	ldr	r3, [pc, #516]	@ (8003564 <_Z21EPD_MainMenuWithQueuev+0xb50>)
 8003360:	2214      	movs	r2, #20
 8003362:	2114      	movs	r1, #20
 8003364:	f7fe fe5a 	bl	800201c <_ZN21HighlightableDrawTextC1EttPKcP6_tFonttt>
	thursdayContainer.addDrawable(&thursdayRectangle);
 8003368:	f507 7244 	add.w	r2, r7, #784	@ 0x310
 800336c:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8003370:	4611      	mov	r1, r2
 8003372:	4618      	mov	r0, r3
 8003374:	f7fe fa9d 	bl	80018b2 <_ZN9Container11addDrawableEP8Drawable>
	thursdayContainer.addDrawable(&thursdayText);
 8003378:	f507 723a 	add.w	r2, r7, #744	@ 0x2e8
 800337c:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8003380:	4611      	mov	r1, r2
 8003382:	4618      	mov	r0, r3
 8003384:	f7fe fa95 	bl	80018b2 <_ZN9Container11addDrawableEP8Drawable>
	}  );
 8003388:	f8b7 3b9a 	ldrh.w	r3, [r7, #2970]	@ 0xb9a
 800338c:	009b      	lsls	r3, r3, #2
 800338e:	b29a      	uxth	r2, r3
 8003390:	f8b7 3b9e 	ldrh.w	r3, [r7, #2974]	@ 0xb9e
 8003394:	4413      	add	r3, r2
 8003396:	b29c      	uxth	r4, r3
 8003398:	f607 3384 	addw	r3, r7, #2948	@ 0xb84
 800339c:	4618      	mov	r0, r3
 800339e:	f7ff f9af 	bl	8002700 <_ZZ21EPD_MainMenuWithQueuevENKUlvE7_cvPFvvEEv>
 80033a2:	4603      	mov	r3, r0
 80033a4:	f8b7 2b9c 	ldrh.w	r2, [r7, #2972]	@ 0xb9c
 80033a8:	f507 7028 	add.w	r0, r7, #672	@ 0x2a0
 80033ac:	9301      	str	r3, [sp, #4]
 80033ae:	f8b7 3b9a 	ldrh.w	r3, [r7, #2970]	@ 0xb9a
 80033b2:	9300      	str	r3, [sp, #0]
 80033b4:	4613      	mov	r3, r2
 80033b6:	4622      	mov	r2, r4
 80033b8:	2100      	movs	r1, #0
 80033ba:	f7fe f9a5 	bl	8001708 <_ZN9ContainerC1EttttPFvvE>
	HighLightOnInteractRectangle fridayRectangle = HighLightOnInteractRectangle(0, 0, scheduleContainerWidth, scheduleContainerHeight, BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY);
 80033be:	f8b7 2b9c 	ldrh.w	r2, [r7, #2972]	@ 0xb9c
 80033c2:	f507 7020 	add.w	r0, r7, #640	@ 0x280
 80033c6:	2300      	movs	r3, #0
 80033c8:	9307      	str	r3, [sp, #28]
 80033ca:	2300      	movs	r3, #0
 80033cc:	9306      	str	r3, [sp, #24]
 80033ce:	2300      	movs	r3, #0
 80033d0:	9305      	str	r3, [sp, #20]
 80033d2:	2300      	movs	r3, #0
 80033d4:	9304      	str	r3, [sp, #16]
 80033d6:	2300      	movs	r3, #0
 80033d8:	9303      	str	r3, [sp, #12]
 80033da:	2301      	movs	r3, #1
 80033dc:	9302      	str	r3, [sp, #8]
 80033de:	2300      	movs	r3, #0
 80033e0:	9301      	str	r3, [sp, #4]
 80033e2:	f8b7 3b9a 	ldrh.w	r3, [r7, #2970]	@ 0xb9a
 80033e6:	9300      	str	r3, [sp, #0]
 80033e8:	4613      	mov	r3, r2
 80033ea:	2200      	movs	r2, #0
 80033ec:	2100      	movs	r1, #0
 80033ee:	f7fe fc69 	bl	8001cc4 <_ZN28HighLightOnInteractRectangleC1Ettttt9DOT_PIXEL9DRAW_FILLPFvvEttt>
	HighlightableDrawText fridayText = HighlightableDrawText(20,20,"Friday",&Font24, WHITE, BLACK);
 80033f2:	f507 7016 	add.w	r0, r7, #600	@ 0x258
 80033f6:	2300      	movs	r3, #0
 80033f8:	9302      	str	r3, [sp, #8]
 80033fa:	23ff      	movs	r3, #255	@ 0xff
 80033fc:	9301      	str	r3, [sp, #4]
 80033fe:	4b56      	ldr	r3, [pc, #344]	@ (8003558 <_Z21EPD_MainMenuWithQueuev+0xb44>)
 8003400:	9300      	str	r3, [sp, #0]
 8003402:	4b59      	ldr	r3, [pc, #356]	@ (8003568 <_Z21EPD_MainMenuWithQueuev+0xb54>)
 8003404:	2214      	movs	r2, #20
 8003406:	2114      	movs	r1, #20
 8003408:	f7fe fe08 	bl	800201c <_ZN21HighlightableDrawTextC1EttPKcP6_tFonttt>
	fridayContainer.addDrawable(&fridayRectangle);
 800340c:	f507 7220 	add.w	r2, r7, #640	@ 0x280
 8003410:	f507 7328 	add.w	r3, r7, #672	@ 0x2a0
 8003414:	4611      	mov	r1, r2
 8003416:	4618      	mov	r0, r3
 8003418:	f7fe fa4b 	bl	80018b2 <_ZN9Container11addDrawableEP8Drawable>
	fridayContainer.addDrawable(&fridayText);
 800341c:	f507 7216 	add.w	r2, r7, #600	@ 0x258
 8003420:	f507 7328 	add.w	r3, r7, #672	@ 0x2a0
 8003424:	4611      	mov	r1, r2
 8003426:	4618      	mov	r0, r3
 8003428:	f7fe fa43 	bl	80018b2 <_ZN9Container11addDrawableEP8Drawable>
	}  );
 800342c:	f8b7 3b9a 	ldrh.w	r3, [r7, #2970]	@ 0xb9a
 8003430:	461a      	mov	r2, r3
 8003432:	0092      	lsls	r2, r2, #2
 8003434:	4413      	add	r3, r2
 8003436:	b29a      	uxth	r2, r3
 8003438:	f8b7 3b9e 	ldrh.w	r3, [r7, #2974]	@ 0xb9e
 800343c:	4413      	add	r3, r2
 800343e:	b29c      	uxth	r4, r3
 8003440:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8003444:	4618      	mov	r0, r3
 8003446:	f7ff f987 	bl	8002758 <_ZZ21EPD_MainMenuWithQueuevENKUlvE8_cvPFvvEEv>
 800344a:	4603      	mov	r3, r0
 800344c:	f8b7 2b9c 	ldrh.w	r2, [r7, #2972]	@ 0xb9c
 8003450:	f507 7004 	add.w	r0, r7, #528	@ 0x210
 8003454:	9301      	str	r3, [sp, #4]
 8003456:	f8b7 3b9a 	ldrh.w	r3, [r7, #2970]	@ 0xb9a
 800345a:	9300      	str	r3, [sp, #0]
 800345c:	4613      	mov	r3, r2
 800345e:	4622      	mov	r2, r4
 8003460:	2100      	movs	r1, #0
 8003462:	f7fe f951 	bl	8001708 <_ZN9ContainerC1EttttPFvvE>
	HighLightOnInteractRectangle saturdayRectangle = HighLightOnInteractRectangle(0, 0, scheduleContainerWidth, scheduleContainerHeight, BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY);
 8003466:	f8b7 2b9c 	ldrh.w	r2, [r7, #2972]	@ 0xb9c
 800346a:	f507 70f8 	add.w	r0, r7, #496	@ 0x1f0
 800346e:	2300      	movs	r3, #0
 8003470:	9307      	str	r3, [sp, #28]
 8003472:	2300      	movs	r3, #0
 8003474:	9306      	str	r3, [sp, #24]
 8003476:	2300      	movs	r3, #0
 8003478:	9305      	str	r3, [sp, #20]
 800347a:	2300      	movs	r3, #0
 800347c:	9304      	str	r3, [sp, #16]
 800347e:	2300      	movs	r3, #0
 8003480:	9303      	str	r3, [sp, #12]
 8003482:	2301      	movs	r3, #1
 8003484:	9302      	str	r3, [sp, #8]
 8003486:	2300      	movs	r3, #0
 8003488:	9301      	str	r3, [sp, #4]
 800348a:	f8b7 3b9a 	ldrh.w	r3, [r7, #2970]	@ 0xb9a
 800348e:	9300      	str	r3, [sp, #0]
 8003490:	4613      	mov	r3, r2
 8003492:	2200      	movs	r2, #0
 8003494:	2100      	movs	r1, #0
 8003496:	f7fe fc15 	bl	8001cc4 <_ZN28HighLightOnInteractRectangleC1Ettttt9DOT_PIXEL9DRAW_FILLPFvvEttt>
	HighlightableDrawText saturdayText = HighlightableDrawText(20,20,"Saturday",&Font24, WHITE, BLACK);
 800349a:	f507 70e4 	add.w	r0, r7, #456	@ 0x1c8
 800349e:	2300      	movs	r3, #0
 80034a0:	9302      	str	r3, [sp, #8]
 80034a2:	23ff      	movs	r3, #255	@ 0xff
 80034a4:	9301      	str	r3, [sp, #4]
 80034a6:	4b2c      	ldr	r3, [pc, #176]	@ (8003558 <_Z21EPD_MainMenuWithQueuev+0xb44>)
 80034a8:	9300      	str	r3, [sp, #0]
 80034aa:	4b30      	ldr	r3, [pc, #192]	@ (800356c <_Z21EPD_MainMenuWithQueuev+0xb58>)
 80034ac:	2214      	movs	r2, #20
 80034ae:	2114      	movs	r1, #20
 80034b0:	f7fe fdb4 	bl	800201c <_ZN21HighlightableDrawTextC1EttPKcP6_tFonttt>
	saturdayContainer.addDrawable(&saturdayRectangle);
 80034b4:	f507 72f8 	add.w	r2, r7, #496	@ 0x1f0
 80034b8:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80034bc:	4611      	mov	r1, r2
 80034be:	4618      	mov	r0, r3
 80034c0:	f7fe f9f7 	bl	80018b2 <_ZN9Container11addDrawableEP8Drawable>
	saturdayContainer.addDrawable(&saturdayText);
 80034c4:	f507 72e4 	add.w	r2, r7, #456	@ 0x1c8
 80034c8:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80034cc:	4611      	mov	r1, r2
 80034ce:	4618      	mov	r0, r3
 80034d0:	f7fe f9ef 	bl	80018b2 <_ZN9Container11addDrawableEP8Drawable>
	}  );
 80034d4:	f8b7 3b9a 	ldrh.w	r3, [r7, #2970]	@ 0xb9a
 80034d8:	461a      	mov	r2, r3
 80034da:	0052      	lsls	r2, r2, #1
 80034dc:	4413      	add	r3, r2
 80034de:	005b      	lsls	r3, r3, #1
 80034e0:	b29a      	uxth	r2, r3
 80034e2:	f8b7 3b9e 	ldrh.w	r3, [r7, #2974]	@ 0xb9e
 80034e6:	4413      	add	r3, r2
 80034e8:	b29c      	uxth	r4, r3
 80034ea:	f607 338c 	addw	r3, r7, #2956	@ 0xb8c
 80034ee:	4618      	mov	r0, r3
 80034f0:	f7ff f95e 	bl	80027b0 <_ZZ21EPD_MainMenuWithQueuevENKUlvE9_cvPFvvEEv>
 80034f4:	4603      	mov	r3, r0
 80034f6:	f8b7 2b9c 	ldrh.w	r2, [r7, #2972]	@ 0xb9c
 80034fa:	f507 70c0 	add.w	r0, r7, #384	@ 0x180
 80034fe:	9301      	str	r3, [sp, #4]
 8003500:	f8b7 3b9a 	ldrh.w	r3, [r7, #2970]	@ 0xb9a
 8003504:	9300      	str	r3, [sp, #0]
 8003506:	4613      	mov	r3, r2
 8003508:	4622      	mov	r2, r4
 800350a:	2100      	movs	r1, #0
 800350c:	f7fe f8fc 	bl	8001708 <_ZN9ContainerC1EttttPFvvE>
	HighLightOnInteractRectangle sundayRectangle = HighLightOnInteractRectangle(0, 0, scheduleContainerWidth, scheduleContainerHeight, BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY);
 8003510:	f8b7 2b9c 	ldrh.w	r2, [r7, #2972]	@ 0xb9c
 8003514:	f507 70b0 	add.w	r0, r7, #352	@ 0x160
 8003518:	2300      	movs	r3, #0
 800351a:	9307      	str	r3, [sp, #28]
 800351c:	2300      	movs	r3, #0
 800351e:	9306      	str	r3, [sp, #24]
 8003520:	2300      	movs	r3, #0
 8003522:	9305      	str	r3, [sp, #20]
 8003524:	2300      	movs	r3, #0
 8003526:	9304      	str	r3, [sp, #16]
 8003528:	2300      	movs	r3, #0
 800352a:	9303      	str	r3, [sp, #12]
 800352c:	2301      	movs	r3, #1
 800352e:	9302      	str	r3, [sp, #8]
 8003530:	2300      	movs	r3, #0
 8003532:	9301      	str	r3, [sp, #4]
 8003534:	f8b7 3b9a 	ldrh.w	r3, [r7, #2970]	@ 0xb9a
 8003538:	9300      	str	r3, [sp, #0]
 800353a:	4613      	mov	r3, r2
 800353c:	2200      	movs	r2, #0
 800353e:	2100      	movs	r1, #0
 8003540:	f7fe fbc0 	bl	8001cc4 <_ZN28HighLightOnInteractRectangleC1Ettttt9DOT_PIXEL9DRAW_FILLPFvvEttt>
	HighlightableDrawText sundayText = HighlightableDrawText(20,20,"Sunday",&Font24, WHITE, BLACK);
 8003544:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 8003548:	2300      	movs	r3, #0
 800354a:	9302      	str	r3, [sp, #8]
 800354c:	23ff      	movs	r3, #255	@ 0xff
 800354e:	9301      	str	r3, [sp, #4]
 8003550:	4b01      	ldr	r3, [pc, #4]	@ (8003558 <_Z21EPD_MainMenuWithQueuev+0xb44>)
 8003552:	9300      	str	r3, [sp, #0]
 8003554:	e00c      	b.n	8003570 <_Z21EPD_MainMenuWithQueuev+0xb5c>
 8003556:	bf00      	nop
 8003558:	20000010 	.word	0x20000010
 800355c:	0800fa80 	.word	0x0800fa80
 8003560:	0800fa88 	.word	0x0800fa88
 8003564:	0800fa94 	.word	0x0800fa94
 8003568:	0800faa0 	.word	0x0800faa0
 800356c:	0800faa8 	.word	0x0800faa8
 8003570:	4be2      	ldr	r3, [pc, #904]	@ (80038fc <_Z21EPD_MainMenuWithQueuev+0xee8>)
 8003572:	2214      	movs	r2, #20
 8003574:	2114      	movs	r1, #20
 8003576:	f7fe fd51 	bl	800201c <_ZN21HighlightableDrawTextC1EttPKcP6_tFonttt>
	sundayContainer.addDrawable(&sundayRectangle);
 800357a:	f507 72b0 	add.w	r2, r7, #352	@ 0x160
 800357e:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8003582:	4611      	mov	r1, r2
 8003584:	4618      	mov	r0, r3
 8003586:	f7fe f994 	bl	80018b2 <_ZN9Container11addDrawableEP8Drawable>
	sundayContainer.addDrawable(&sundayText);
 800358a:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800358e:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8003592:	4611      	mov	r1, r2
 8003594:	4618      	mov	r0, r3
 8003596:	f7fe f98c 	bl	80018b2 <_ZN9Container11addDrawableEP8Drawable>
	scheduleScreen.addDrawable(&BackContainerScheduleScreen);
 800359a:	f507 62b7 	add.w	r2, r7, #1464	@ 0x5b8
 800359e:	f507 63c0 	add.w	r3, r7, #1536	@ 0x600
 80035a2:	4611      	mov	r1, r2
 80035a4:	4618      	mov	r0, r3
 80035a6:	f7fe fa04 	bl	80019b2 <_ZN6Screen11addDrawableEP8Drawable>
	scheduleScreen.addDrawable(&homeContainerScheduleScreen);
 80035aa:	f507 62ae 	add.w	r2, r7, #1392	@ 0x570
 80035ae:	f507 63c0 	add.w	r3, r7, #1536	@ 0x600
 80035b2:	4611      	mov	r1, r2
 80035b4:	4618      	mov	r0, r3
 80035b6:	f7fe f9fc 	bl	80019b2 <_ZN6Screen11addDrawableEP8Drawable>
	scheduleScreen.addDrawable(&selectContainerScheduleScreen);
 80035ba:	f507 62a5 	add.w	r2, r7, #1320	@ 0x528
 80035be:	f507 63c0 	add.w	r3, r7, #1536	@ 0x600
 80035c2:	4611      	mov	r1, r2
 80035c4:	4618      	mov	r0, r3
 80035c6:	f7fe f9f4 	bl	80019b2 <_ZN6Screen11addDrawableEP8Drawable>
	scheduleScreen.addDrawable(&mondayContainer);
 80035ca:	f507 629c 	add.w	r2, r7, #1248	@ 0x4e0
 80035ce:	f507 63c0 	add.w	r3, r7, #1536	@ 0x600
 80035d2:	4611      	mov	r1, r2
 80035d4:	4618      	mov	r0, r3
 80035d6:	f7fe f9ec 	bl	80019b2 <_ZN6Screen11addDrawableEP8Drawable>
	scheduleScreen.addDrawable(&tuesdayContainer);
 80035da:	f507 628a 	add.w	r2, r7, #1104	@ 0x450
 80035de:	f507 63c0 	add.w	r3, r7, #1536	@ 0x600
 80035e2:	4611      	mov	r1, r2
 80035e4:	4618      	mov	r0, r3
 80035e6:	f7fe f9e4 	bl	80019b2 <_ZN6Screen11addDrawableEP8Drawable>
	scheduleScreen.addDrawable(&wednesdayContainer);
 80035ea:	f507 7270 	add.w	r2, r7, #960	@ 0x3c0
 80035ee:	f507 63c0 	add.w	r3, r7, #1536	@ 0x600
 80035f2:	4611      	mov	r1, r2
 80035f4:	4618      	mov	r0, r3
 80035f6:	f7fe f9dc 	bl	80019b2 <_ZN6Screen11addDrawableEP8Drawable>
	scheduleScreen.addDrawable(&thursdayContainer);
 80035fa:	f507 724c 	add.w	r2, r7, #816	@ 0x330
 80035fe:	f507 63c0 	add.w	r3, r7, #1536	@ 0x600
 8003602:	4611      	mov	r1, r2
 8003604:	4618      	mov	r0, r3
 8003606:	f7fe f9d4 	bl	80019b2 <_ZN6Screen11addDrawableEP8Drawable>
	scheduleScreen.addDrawable(&fridayContainer);
 800360a:	f507 7228 	add.w	r2, r7, #672	@ 0x2a0
 800360e:	f507 63c0 	add.w	r3, r7, #1536	@ 0x600
 8003612:	4611      	mov	r1, r2
 8003614:	4618      	mov	r0, r3
 8003616:	f7fe f9cc 	bl	80019b2 <_ZN6Screen11addDrawableEP8Drawable>
	scheduleScreen.addDrawable(&saturdayContainer);
 800361a:	f507 7204 	add.w	r2, r7, #528	@ 0x210
 800361e:	f507 63c0 	add.w	r3, r7, #1536	@ 0x600
 8003622:	4611      	mov	r1, r2
 8003624:	4618      	mov	r0, r3
 8003626:	f7fe f9c4 	bl	80019b2 <_ZN6Screen11addDrawableEP8Drawable>
	scheduleScreen.addDrawable(&sundayContainer);
 800362a:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 800362e:	f507 63c0 	add.w	r3, r7, #1536	@ 0x600
 8003632:	4611      	mov	r1, r2
 8003634:	4618      	mov	r0, r3
 8003636:	f7fe f9bc 	bl	80019b2 <_ZN6Screen11addDrawableEP8Drawable>
	setPointInitializeConnections(setPointScreen);
 800363a:	48b1      	ldr	r0, [pc, #708]	@ (8003900 <_Z21EPD_MainMenuWithQueuev+0xeec>)
 800363c:	f7fe fe4a 	bl	80022d4 <_Z29setPointInitializeConnectionsR6Screen>
	Container BackContainerSetPoint = Container(169,415,containerWidth,containerHeight);
 8003640:	f8b7 2ba6 	ldrh.w	r2, [r7, #2982]	@ 0xba6
 8003644:	f107 00f0 	add.w	r0, r7, #240	@ 0xf0
 8003648:	2300      	movs	r3, #0
 800364a:	9301      	str	r3, [sp, #4]
 800364c:	f8b7 3ba4 	ldrh.w	r3, [r7, #2980]	@ 0xba4
 8003650:	9300      	str	r3, [sp, #0]
 8003652:	4613      	mov	r3, r2
 8003654:	f240 129f 	movw	r2, #415	@ 0x19f
 8003658:	21a9      	movs	r1, #169	@ 0xa9
 800365a:	f7fe f855 	bl	8001708 <_ZN9ContainerC1EttttPFvvE>
	BackContainerSetPoint.addDrawable(&backRectangle);
 800365e:	f607 1218 	addw	r2, r7, #2328	@ 0x918
 8003662:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 8003666:	4611      	mov	r1, r2
 8003668:	4618      	mov	r0, r3
 800366a:	f7fe f922 	bl	80018b2 <_ZN9Container11addDrawableEP8Drawable>
	BackContainerSetPoint.addDrawable(&backText);
 800366e:	f507 620f 	add.w	r2, r7, #2288	@ 0x8f0
 8003672:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 8003676:	4611      	mov	r1, r2
 8003678:	4618      	mov	r0, r3
 800367a:	f7fe f91a 	bl	80018b2 <_ZN9Container11addDrawableEP8Drawable>
	Container deleteSetPoint = Container(331,415,containerWidth,containerHeight);
 800367e:	f8b7 2ba6 	ldrh.w	r2, [r7, #2982]	@ 0xba6
 8003682:	f107 00a8 	add.w	r0, r7, #168	@ 0xa8
 8003686:	2300      	movs	r3, #0
 8003688:	9301      	str	r3, [sp, #4]
 800368a:	f8b7 3ba4 	ldrh.w	r3, [r7, #2980]	@ 0xba4
 800368e:	9300      	str	r3, [sp, #0]
 8003690:	4613      	mov	r3, r2
 8003692:	f240 129f 	movw	r2, #415	@ 0x19f
 8003696:	f240 114b 	movw	r1, #331	@ 0x14b
 800369a:	f7fe f835 	bl	8001708 <_ZN9ContainerC1EttttPFvvE>
	DrawText deleteTextSetPoint = DrawText(20,20,"Delete",&Font16, WHITE, BLACK);
 800369e:	f107 0080 	add.w	r0, r7, #128	@ 0x80
 80036a2:	2300      	movs	r3, #0
 80036a4:	9302      	str	r3, [sp, #8]
 80036a6:	23ff      	movs	r3, #255	@ 0xff
 80036a8:	9301      	str	r3, [sp, #4]
 80036aa:	4b96      	ldr	r3, [pc, #600]	@ (8003904 <_Z21EPD_MainMenuWithQueuev+0xef0>)
 80036ac:	9300      	str	r3, [sp, #0]
 80036ae:	4b96      	ldr	r3, [pc, #600]	@ (8003908 <_Z21EPD_MainMenuWithQueuev+0xef4>)
 80036b0:	2214      	movs	r2, #20
 80036b2:	2114      	movs	r1, #20
 80036b4:	f7fe fc30 	bl	8001f18 <_ZN8DrawTextC1EttPKcP6_tFonttt>
	deleteSetPoint.addDrawable(&backRectangle);
 80036b8:	f607 1218 	addw	r2, r7, #2328	@ 0x918
 80036bc:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 80036c0:	4611      	mov	r1, r2
 80036c2:	4618      	mov	r0, r3
 80036c4:	f7fe f8f5 	bl	80018b2 <_ZN9Container11addDrawableEP8Drawable>
	deleteSetPoint.addDrawable(&deleteTextSetPoint);
 80036c8:	f107 0280 	add.w	r2, r7, #128	@ 0x80
 80036cc:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 80036d0:	4611      	mov	r1, r2
 80036d2:	4618      	mov	r0, r3
 80036d4:	f7fe f8ed 	bl	80018b2 <_ZN9Container11addDrawableEP8Drawable>
	Container editContainerSetPoint = Container(493,415,containerWidth,containerHeight);
 80036d8:	f8b7 2ba6 	ldrh.w	r2, [r7, #2982]	@ 0xba6
 80036dc:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 80036e0:	2300      	movs	r3, #0
 80036e2:	9301      	str	r3, [sp, #4]
 80036e4:	f8b7 3ba4 	ldrh.w	r3, [r7, #2980]	@ 0xba4
 80036e8:	9300      	str	r3, [sp, #0]
 80036ea:	4613      	mov	r3, r2
 80036ec:	f240 129f 	movw	r2, #415	@ 0x19f
 80036f0:	f240 11ed 	movw	r1, #493	@ 0x1ed
 80036f4:	f7fe f808 	bl	8001708 <_ZN9ContainerC1EttttPFvvE>
	DrawText editTextSetPoint = DrawText(20,20,"Edit",&Font16, WHITE, BLACK);
 80036f8:	f107 0010 	add.w	r0, r7, #16
 80036fc:	2300      	movs	r3, #0
 80036fe:	9302      	str	r3, [sp, #8]
 8003700:	23ff      	movs	r3, #255	@ 0xff
 8003702:	9301      	str	r3, [sp, #4]
 8003704:	4b7f      	ldr	r3, [pc, #508]	@ (8003904 <_Z21EPD_MainMenuWithQueuev+0xef0>)
 8003706:	9300      	str	r3, [sp, #0]
 8003708:	4b80      	ldr	r3, [pc, #512]	@ (800390c <_Z21EPD_MainMenuWithQueuev+0xef8>)
 800370a:	2214      	movs	r2, #20
 800370c:	2114      	movs	r1, #20
 800370e:	f7fe fc03 	bl	8001f18 <_ZN8DrawTextC1EttPKcP6_tFonttt>
	editContainerSetPoint.addDrawable(&backRectangle);
 8003712:	f607 1218 	addw	r2, r7, #2328	@ 0x918
 8003716:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800371a:	4611      	mov	r1, r2
 800371c:	4618      	mov	r0, r3
 800371e:	f7fe f8c8 	bl	80018b2 <_ZN9Container11addDrawableEP8Drawable>
	editContainerSetPoint.addDrawable(&editTextSetPoint);
 8003722:	f107 0210 	add.w	r2, r7, #16
 8003726:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800372a:	4611      	mov	r1, r2
 800372c:	4618      	mov	r0, r3
 800372e:	f7fe f8c0 	bl	80018b2 <_ZN9Container11addDrawableEP8Drawable>
	setPointScreen.addDrawable(&BackContainerSetPoint);
 8003732:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 8003736:	4619      	mov	r1, r3
 8003738:	4871      	ldr	r0, [pc, #452]	@ (8003900 <_Z21EPD_MainMenuWithQueuev+0xeec>)
 800373a:	f7fe f93a 	bl	80019b2 <_ZN6Screen11addDrawableEP8Drawable>
	setPointScreen.addDrawable(&deleteSetPoint);
 800373e:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8003742:	4619      	mov	r1, r3
 8003744:	486e      	ldr	r0, [pc, #440]	@ (8003900 <_Z21EPD_MainMenuWithQueuev+0xeec>)
 8003746:	f7fe f934 	bl	80019b2 <_ZN6Screen11addDrawableEP8Drawable>
	setPointScreen.addDrawable(&editContainerSetPoint);
 800374a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800374e:	4619      	mov	r1, r3
 8003750:	486b      	ldr	r0, [pc, #428]	@ (8003900 <_Z21EPD_MainMenuWithQueuev+0xeec>)
 8003752:	f7fe f92e 	bl	80019b2 <_ZN6Screen11addDrawableEP8Drawable>
	screenManager.addScreen(ScreenType::HomeScreen, &openingScreen);
 8003756:	f607 2294 	addw	r2, r7, #2708	@ 0xa94
 800375a:	f607 333c 	addw	r3, r7, #2876	@ 0xb3c
 800375e:	2100      	movs	r1, #0
 8003760:	4618      	mov	r0, r3
 8003762:	f001 fec6 	bl	80054f2 <_ZN13ScreenManager9addScreenE10ScreenTypeP6Screen>
	screenManager.addScreen(ScreenType::MainMenuScreen, &mainMenu);
 8003766:	f507 6218 	add.w	r2, r7, #2432	@ 0x980
 800376a:	f607 333c 	addw	r3, r7, #2876	@ 0xb3c
 800376e:	2101      	movs	r1, #1
 8003770:	4618      	mov	r0, r3
 8003772:	f001 febe 	bl	80054f2 <_ZN13ScreenManager9addScreenE10ScreenTypeP6Screen>
	screenManager.addScreen(ScreenType::ScheduleScreen, &scheduleScreen);
 8003776:	f507 62c0 	add.w	r2, r7, #1536	@ 0x600
 800377a:	f607 333c 	addw	r3, r7, #2876	@ 0xb3c
 800377e:	2103      	movs	r1, #3
 8003780:	4618      	mov	r0, r3
 8003782:	f001 feb6 	bl	80054f2 <_ZN13ScreenManager9addScreenE10ScreenTypeP6Screen>
	screenManager.addScreen(ScreenType::SetPointScreen, &setPointScreen);
 8003786:	f607 333c 	addw	r3, r7, #2876	@ 0xb3c
 800378a:	4a5d      	ldr	r2, [pc, #372]	@ (8003900 <_Z21EPD_MainMenuWithQueuev+0xeec>)
 800378c:	2104      	movs	r1, #4
 800378e:	4618      	mov	r0, r3
 8003790:	f001 feaf 	bl	80054f2 <_ZN13ScreenManager9addScreenE10ScreenTypeP6Screen>
	screenManager.addScreen(ScreenType::AlertScreen, &alertScreen);
 8003794:	f607 22cc 	addw	r2, r7, #2764	@ 0xacc
 8003798:	f607 333c 	addw	r3, r7, #2876	@ 0xb3c
 800379c:	2105      	movs	r1, #5
 800379e:	4618      	mov	r0, r3
 80037a0:	f001 fea7 	bl	80054f2 <_ZN13ScreenManager9addScreenE10ScreenTypeP6Screen>
	screenManager.initFirstTime();
 80037a4:	f607 333c 	addw	r3, r7, #2876	@ 0xb3c
 80037a8:	4618      	mov	r0, r3
 80037aa:	f001 fe88 	bl	80054be <_ZN13ScreenManager13initFirstTimeEv>
	screenManager.setNewActiveScreen(ScreenType::ScheduleScreen);
 80037ae:	f607 333c 	addw	r3, r7, #2876	@ 0xb3c
 80037b2:	2103      	movs	r1, #3
 80037b4:	4618      	mov	r0, r3
 80037b6:	f001 ff03 	bl	80055c0 <_ZN13ScreenManager18setNewActiveScreenE10ScreenType>
	openingScreen.setButtonCallback([](Button bt){
 80037ba:	f507 6339 	add.w	r3, r7, #2960	@ 0xb90
 80037be:	4618      	mov	r0, r3
 80037c0:	f7ff f82e 	bl	8002820 <_ZZ21EPD_MainMenuWithQueuevENKUl6ButtonE10_cvPFvS_EEv>
 80037c4:	4602      	mov	r2, r0
 80037c6:	f607 2394 	addw	r3, r7, #2708	@ 0xa94
 80037ca:	4611      	mov	r1, r2
 80037cc:	4618      	mov	r0, r3
 80037ce:	f7fe f99f 	bl	8001b10 <_ZN6Screen17setButtonCallbackEPFv6ButtonE>
	mainMenu.setButtonCallback([](Button bt){
 80037d2:	f607 3394 	addw	r3, r7, #2964	@ 0xb94
 80037d6:	4618      	mov	r0, r3
 80037d8:	f7ff f898 	bl	800290c <_ZZ21EPD_MainMenuWithQueuevENKUl6ButtonE11_cvPFvS_EEv>
 80037dc:	4602      	mov	r2, r0
 80037de:	f507 6318 	add.w	r3, r7, #2432	@ 0x980
 80037e2:	4611      	mov	r1, r2
 80037e4:	4618      	mov	r0, r3
 80037e6:	f7fe f993 	bl	8001b10 <_ZN6Screen17setButtonCallbackEPFv6ButtonE>
	scheduleScreen.setButtonCallback([](Button bt){
 80037ea:	f607 3398 	addw	r3, r7, #2968	@ 0xb98
 80037ee:	4618      	mov	r0, r3
 80037f0:	f7ff f902 	bl	80029f8 <_ZZ21EPD_MainMenuWithQueuevENKUl6ButtonE12_cvPFvS_EEv>
 80037f4:	4602      	mov	r2, r0
 80037f6:	f507 63c0 	add.w	r3, r7, #1536	@ 0x600
 80037fa:	4611      	mov	r1, r2
 80037fc:	4618      	mov	r0, r3
 80037fe:	f7fe f987 	bl	8001b10 <_ZN6Screen17setButtonCallbackEPFv6ButtonE>
	while(1){
//		if (xQueueReceive(daySelectionQueue, &selectedDayIndex, pdMS_TO_TICKS(100)) == pdPASS) {
//		    LOG_INFO("Day Selected: %d", selectedDayIndex);
//		    updateSetPointScreen(setPointScreen, selectedDayIndex);
//		}
		if (xQueueReceive(dataSetPointOperationQueue, &setPointData, 10 ) == pdPASS){
 8003802:	4b43      	ldr	r3, [pc, #268]	@ (8003910 <_Z21EPD_MainMenuWithQueuev+0xefc>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4639      	mov	r1, r7
 8003808:	220a      	movs	r2, #10
 800380a:	4618      	mov	r0, r3
 800380c:	f006 ff98 	bl	800a740 <xQueueReceive>
 8003810:	4603      	mov	r3, r0
 8003812:	2b01      	cmp	r3, #1
//			case read

		}
		if (xQueueReceive(buttonQueue, &buttonReceivedState, 10) == pdPASS) {
 8003814:	4b3f      	ldr	r3, [pc, #252]	@ (8003914 <_Z21EPD_MainMenuWithQueuev+0xf00>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f107 010c 	add.w	r1, r7, #12
 800381c:	220a      	movs	r2, #10
 800381e:	4618      	mov	r0, r3
 8003820:	f006 ff8e 	bl	800a740 <xQueueReceive>
 8003824:	4603      	mov	r3, r0
 8003826:	2b01      	cmp	r3, #1
 8003828:	bf0c      	ite	eq
 800382a:	2301      	moveq	r3, #1
 800382c:	2300      	movne	r3, #0
 800382e:	b2db      	uxtb	r3, r3
 8003830:	2b00      	cmp	r3, #0
 8003832:	d00a      	beq.n	800384a <_Z21EPD_MainMenuWithQueuev+0xe36>
			screenManager.buttonPress(buttonReceivedState);
 8003834:	f607 33a8 	addw	r3, r7, #2984	@ 0xba8
 8003838:	f6a3 339c 	subw	r3, r3, #2972	@ 0xb9c
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	f607 333c 	addw	r3, r7, #2876	@ 0xb3c
 8003842:	4611      	mov	r1, r2
 8003844:	4618      	mov	r0, r3
 8003846:	f001 ff27 	bl	8005698 <_ZN13ScreenManager11buttonPressE6Button>
		}
		if (xQueueReceive(stateQueue, &state, 10) == pdPASS) {
 800384a:	4b33      	ldr	r3, [pc, #204]	@ (8003918 <_Z21EPD_MainMenuWithQueuev+0xf04>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f107 0108 	add.w	r1, r7, #8
 8003852:	220a      	movs	r2, #10
 8003854:	4618      	mov	r0, r3
 8003856:	f006 ff73 	bl	800a740 <xQueueReceive>
 800385a:	4603      	mov	r3, r0
 800385c:	2b01      	cmp	r3, #1
 800385e:	bf0c      	ite	eq
 8003860:	2301      	moveq	r3, #1
 8003862:	2300      	movne	r3, #0
 8003864:	b2db      	uxtb	r3, r3
 8003866:	2b00      	cmp	r3, #0
 8003868:	d0cb      	beq.n	8003802 <_Z21EPD_MainMenuWithQueuev+0xdee>
			switch(state){
 800386a:	f607 33a8 	addw	r3, r7, #2984	@ 0xba8
 800386e:	f5a3 633a 	sub.w	r3, r3, #2976	@ 0xba0
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	2b0d      	cmp	r3, #13
 8003876:	f200 8096 	bhi.w	80039a6 <_Z21EPD_MainMenuWithQueuev+0xf92>
 800387a:	a201      	add	r2, pc, #4	@ (adr r2, 8003880 <_Z21EPD_MainMenuWithQueuev+0xe6c>)
 800387c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003880:	080038b9 	.word	0x080038b9
 8003884:	080038cf 	.word	0x080038cf
 8003888:	080039a7 	.word	0x080039a7
 800388c:	080038e5 	.word	0x080038e5
 8003890:	080039a7 	.word	0x080039a7
 8003894:	080039a7 	.word	0x080039a7
 8003898:	08003925 	.word	0x08003925
 800389c:	080039a7 	.word	0x080039a7
 80038a0:	080039a7 	.word	0x080039a7
 80038a4:	08003993 	.word	0x08003993
 80038a8:	080039a7 	.word	0x080039a7
 80038ac:	08003943 	.word	0x08003943
 80038b0:	08003961 	.word	0x08003961
 80038b4:	0800397f 	.word	0x0800397f
			case State::HomeScreen:
				LOG_INFO("Opening Screen");
 80038b8:	4918      	ldr	r1, [pc, #96]	@ (800391c <_Z21EPD_MainMenuWithQueuev+0xf08>)
 80038ba:	2003      	movs	r0, #3
 80038bc:	f7fd fac4 	bl	8000e48 <_Z12log_message2hPKcz>
				screenManager.setNewActiveScreen(ScreenType::HomeScreen);
 80038c0:	f607 333c 	addw	r3, r7, #2876	@ 0xb3c
 80038c4:	2100      	movs	r1, #0
 80038c6:	4618      	mov	r0, r3
 80038c8:	f001 fe7a 	bl	80055c0 <_ZN13ScreenManager18setNewActiveScreenE10ScreenType>
				break;
 80038cc:	e06c      	b.n	80039a8 <_Z21EPD_MainMenuWithQueuev+0xf94>
			case State::MainMenuScreen:
				LOG_INFO("Main Menu Screen");
 80038ce:	4914      	ldr	r1, [pc, #80]	@ (8003920 <_Z21EPD_MainMenuWithQueuev+0xf0c>)
 80038d0:	2003      	movs	r0, #3
 80038d2:	f7fd fab9 	bl	8000e48 <_Z12log_message2hPKcz>
				screenManager.setNewActiveScreen(ScreenType::MainMenuScreen);
 80038d6:	f607 333c 	addw	r3, r7, #2876	@ 0xb3c
 80038da:	2101      	movs	r1, #1
 80038dc:	4618      	mov	r0, r3
 80038de:	f001 fe6f 	bl	80055c0 <_ZN13ScreenManager18setNewActiveScreenE10ScreenType>
				break;
 80038e2:	e061      	b.n	80039a8 <_Z21EPD_MainMenuWithQueuev+0xf94>
			case State::ScheduleScreen:
				LOG_INFO("Main Menu Screen");
 80038e4:	490e      	ldr	r1, [pc, #56]	@ (8003920 <_Z21EPD_MainMenuWithQueuev+0xf0c>)
 80038e6:	2003      	movs	r0, #3
 80038e8:	f7fd faae 	bl	8000e48 <_Z12log_message2hPKcz>
				screenManager.setNewActiveScreen(ScreenType::ScheduleScreen);
 80038ec:	f607 333c 	addw	r3, r7, #2876	@ 0xb3c
 80038f0:	2103      	movs	r1, #3
 80038f2:	4618      	mov	r0, r3
 80038f4:	f001 fe64 	bl	80055c0 <_ZN13ScreenManager18setNewActiveScreenE10ScreenType>
				break;
 80038f8:	e056      	b.n	80039a8 <_Z21EPD_MainMenuWithQueuev+0xf94>
 80038fa:	bf00      	nop
 80038fc:	0800fab4 	.word	0x0800fab4
 8003900:	2000061c 	.word	0x2000061c
 8003904:	20000008 	.word	0x20000008
 8003908:	0800fabc 	.word	0x0800fabc
 800390c:	0800fac4 	.word	0x0800fac4
 8003910:	2000070c 	.word	0x2000070c
 8003914:	20000708 	.word	0x20000708
 8003918:	20000704 	.word	0x20000704
 800391c:	0800facc 	.word	0x0800facc
 8003920:	0800fae4 	.word	0x0800fae4
			case State::SetPointScreen:
				LOG_INFO("Main Menu Screen");
 8003924:	4921      	ldr	r1, [pc, #132]	@ (80039ac <_Z21EPD_MainMenuWithQueuev+0xf98>)
 8003926:	2003      	movs	r0, #3
 8003928:	f7fd fa8e 	bl	8000e48 <_Z12log_message2hPKcz>
				screenManager.setNewActiveScreen(ScreenType::SetPointScreen);
 800392c:	f607 333c 	addw	r3, r7, #2876	@ 0xb3c
 8003930:	2104      	movs	r1, #4
 8003932:	4618      	mov	r0, r3
 8003934:	f001 fe44 	bl	80055c0 <_ZN13ScreenManager18setNewActiveScreenE10ScreenType>
				setPointScreen.setButtonCallback(setPointScreenCallback1);
 8003938:	491d      	ldr	r1, [pc, #116]	@ (80039b0 <_Z21EPD_MainMenuWithQueuev+0xf9c>)
 800393a:	481e      	ldr	r0, [pc, #120]	@ (80039b4 <_Z21EPD_MainMenuWithQueuev+0xfa0>)
 800393c:	f7fe f8e8 	bl	8001b10 <_ZN6Screen17setButtonCallbackEPFv6ButtonE>
				break;
 8003940:	e032      	b.n	80039a8 <_Z21EPD_MainMenuWithQueuev+0xf94>
			case State::PrevElement:
				LOG_INFO("Prev Element");
 8003942:	491d      	ldr	r1, [pc, #116]	@ (80039b8 <_Z21EPD_MainMenuWithQueuev+0xfa4>)
 8003944:	2003      	movs	r0, #3
 8003946:	f7fd fa7f 	bl	8000e48 <_Z12log_message2hPKcz>

				screenManager.prevInteractable();
 800394a:	f607 333c 	addw	r3, r7, #2876	@ 0xb3c
 800394e:	4618      	mov	r0, r3
 8003950:	f001 fe91 	bl	8005676 <_ZN13ScreenManager16prevInteractableEv>
				screenManager.updateActiveScreen();
 8003954:	f607 333c 	addw	r3, r7, #2876	@ 0xb3c
 8003958:	4618      	mov	r0, r3
 800395a:	f001 fde3 	bl	8005524 <_ZN13ScreenManager18updateActiveScreenEv>
				break;
 800395e:	e023      	b.n	80039a8 <_Z21EPD_MainMenuWithQueuev+0xf94>
			case State::NextElement:
				LOG_INFO("Next Element");
 8003960:	4916      	ldr	r1, [pc, #88]	@ (80039bc <_Z21EPD_MainMenuWithQueuev+0xfa8>)
 8003962:	2003      	movs	r0, #3
 8003964:	f7fd fa70 	bl	8000e48 <_Z12log_message2hPKcz>

				screenManager.nextInteractable();
 8003968:	f607 333c 	addw	r3, r7, #2876	@ 0xb3c
 800396c:	4618      	mov	r0, r3
 800396e:	f001 fe71 	bl	8005654 <_ZN13ScreenManager16nextInteractableEv>
				screenManager.updateActiveScreen();
 8003972:	f607 333c 	addw	r3, r7, #2876	@ 0xb3c
 8003976:	4618      	mov	r0, r3
 8003978:	f001 fdd4 	bl	8005524 <_ZN13ScreenManager18updateActiveScreenEv>
				break;
 800397c:	e014      	b.n	80039a8 <_Z21EPD_MainMenuWithQueuev+0xf94>
			case State::Interact:
				LOG_INFO("Interact");
 800397e:	4910      	ldr	r1, [pc, #64]	@ (80039c0 <_Z21EPD_MainMenuWithQueuev+0xfac>)
 8003980:	2003      	movs	r0, #3
 8003982:	f7fd fa61 	bl	8000e48 <_Z12log_message2hPKcz>

				screenManager.onInteract();
 8003986:	f607 333c 	addw	r3, r7, #2876	@ 0xb3c
 800398a:	4618      	mov	r0, r3
 800398c:	f001 fe51 	bl	8005632 <_ZN13ScreenManager10onInteractEv>
				break;
 8003990:	e00a      	b.n	80039a8 <_Z21EPD_MainMenuWithQueuev+0xf94>



			case State::PrevScreen:

				LOG_INFO("Prev Screen");
 8003992:	490c      	ldr	r1, [pc, #48]	@ (80039c4 <_Z21EPD_MainMenuWithQueuev+0xfb0>)
 8003994:	2003      	movs	r0, #3
 8003996:	f7fd fa57 	bl	8000e48 <_Z12log_message2hPKcz>
				screenManager.setPrevScreen();
 800399a:	f607 333c 	addw	r3, r7, #2876	@ 0xb3c
 800399e:	4618      	mov	r0, r3
 80039a0:	f001 fe8e 	bl	80056c0 <_ZN13ScreenManager13setPrevScreenEv>
				break;
 80039a4:	e000      	b.n	80039a8 <_Z21EPD_MainMenuWithQueuev+0xf94>
			default:
				break;
 80039a6:	bf00      	nop
		if (xQueueReceive(dataSetPointOperationQueue, &setPointData, 10 ) == pdPASS){
 80039a8:	e72b      	b.n	8003802 <_Z21EPD_MainMenuWithQueuev+0xdee>
 80039aa:	bf00      	nop
 80039ac:	0800fae4 	.word	0x0800fae4
 80039b0:	08002391 	.word	0x08002391
 80039b4:	2000061c 	.word	0x2000061c
 80039b8:	0800fb00 	.word	0x0800fb00
 80039bc:	0800fb18 	.word	0x0800fb18
 80039c0:	0800fb30 	.word	0x0800fb30
 80039c4:	0800fb44 	.word	0x0800fb44

080039c8 <_ZNKSt10unique_ptrI11FrameBuffer15FreeRTOSDeleterEcvbEv>:
      get_deleter() const noexcept
      { return _M_t._M_deleter(); }

      /// Return @c true if the stored pointer is not null.
      _GLIBCXX23_CONSTEXPR
      explicit operator bool() const noexcept
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b082      	sub	sp, #8
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f000 f846 	bl	8003a62 <_ZNKSt10unique_ptrI11FrameBuffer15FreeRTOSDeleterE3getEv>
 80039d6:	4603      	mov	r3, r0
 80039d8:	2b00      	cmp	r3, #0
 80039da:	bf14      	ite	ne
 80039dc:	2301      	movne	r3, #1
 80039de:	2300      	moveq	r3, #0
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	4618      	mov	r0, r3
 80039e4:	3708      	adds	r7, #8
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}

080039ea <_ZNSt10unique_ptrI11FrameBuffer15FreeRTOSDeleterE5resetEPS0_>:
       *
       * The deleter will be invoked if a pointer is already owned.
       */
      _GLIBCXX23_CONSTEXPR
      void
      reset(pointer __p = pointer()) noexcept
 80039ea:	b590      	push	{r4, r7, lr}
 80039ec:	b083      	sub	sp, #12
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	6078      	str	r0, [r7, #4]
 80039f2:	6039      	str	r1, [r7, #0]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	_M_t.reset(std::move(__p));
 80039f4:	687c      	ldr	r4, [r7, #4]
 80039f6:	463b      	mov	r3, r7
 80039f8:	4618      	mov	r0, r3
 80039fa:	f000 f83f 	bl	8003a7c <_ZSt4moveIRP11FrameBufferEONSt16remove_referenceIT_E4typeEOS4_>
 80039fe:	4603      	mov	r3, r0
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4619      	mov	r1, r3
 8003a04:	4620      	mov	r0, r4
 8003a06:	f000 f844 	bl	8003a92 <_ZNSt15__uniq_ptr_implI11FrameBuffer15FreeRTOSDeleterE5resetEPS0_>
      }
 8003a0a:	bf00      	nop
 8003a0c:	370c      	adds	r7, #12
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd90      	pop	{r4, r7, pc}

08003a12 <_ZNKSt10unique_ptrI11FrameBuffer15FreeRTOSDeleterEdeEv>:
      operator*() const noexcept(noexcept(*std::declval<pointer>()))
 8003a12:	b580      	push	{r7, lr}
 8003a14:	b082      	sub	sp, #8
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	6078      	str	r0, [r7, #4]
	__glibcxx_assert(get() != pointer());
 8003a1a:	f7fd fd59 	bl	80014d0 <_ZSt23__is_constant_evaluatedv>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d007      	beq.n	8003a34 <_ZNKSt10unique_ptrI11FrameBuffer15FreeRTOSDeleterEdeEv+0x22>
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f000 f81c 	bl	8003a62 <_ZNKSt10unique_ptrI11FrameBuffer15FreeRTOSDeleterE3getEv>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d101      	bne.n	8003a34 <_ZNKSt10unique_ptrI11FrameBuffer15FreeRTOSDeleterEdeEv+0x22>
 8003a30:	2301      	movs	r3, #1
 8003a32:	e000      	b.n	8003a36 <_ZNKSt10unique_ptrI11FrameBuffer15FreeRTOSDeleterEdeEv+0x24>
 8003a34:	2300      	movs	r3, #0
 8003a36:	2b00      	cmp	r3, #0
	return *get();
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	f000 f812 	bl	8003a62 <_ZNKSt10unique_ptrI11FrameBuffer15FreeRTOSDeleterE3getEv>
 8003a3e:	4603      	mov	r3, r0
      }
 8003a40:	4618      	mov	r0, r3
 8003a42:	3708      	adds	r7, #8
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}

08003a48 <_ZNKSt10unique_ptrIA_h15FreeRTOSDeleterE3getEv>:
      }

      /// Return the stored pointer.
      _GLIBCXX23_CONSTEXPR
      pointer
      get() const noexcept
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b082      	sub	sp, #8
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	4618      	mov	r0, r3
 8003a54:	f000 f83d 	bl	8003ad2 <_ZNKSt15__uniq_ptr_implIh15FreeRTOSDeleterE6_M_ptrEv>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3708      	adds	r7, #8
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}

08003a62 <_ZNKSt10unique_ptrI11FrameBuffer15FreeRTOSDeleterE3getEv>:
      get() const noexcept
 8003a62:	b580      	push	{r7, lr}
 8003a64:	b082      	sub	sp, #8
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f000 f83e 	bl	8003aee <_ZNKSt15__uniq_ptr_implI11FrameBuffer15FreeRTOSDeleterE6_M_ptrEv>
 8003a72:	4603      	mov	r3, r0
 8003a74:	4618      	mov	r0, r3
 8003a76:	3708      	adds	r7, #8
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}

08003a7c <_ZSt4moveIRP11FrameBufferEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8003a7c:	b480      	push	{r7}
 8003a7e:	b083      	sub	sp, #12
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	4618      	mov	r0, r3
 8003a88:	370c      	adds	r7, #12
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr

08003a92 <_ZNSt15__uniq_ptr_implI11FrameBuffer15FreeRTOSDeleterE5resetEPS0_>:
      void reset(pointer __p) noexcept
 8003a92:	b580      	push	{r7, lr}
 8003a94:	b084      	sub	sp, #16
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	6078      	str	r0, [r7, #4]
 8003a9a:	6039      	str	r1, [r7, #0]
	const pointer __old_p = _M_ptr();
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f000 f834 	bl	8003b0a <_ZNSt15__uniq_ptr_implI11FrameBuffer15FreeRTOSDeleterE6_M_ptrEv>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	60fb      	str	r3, [r7, #12]
	_M_ptr() = __p;
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f000 f82e 	bl	8003b0a <_ZNSt15__uniq_ptr_implI11FrameBuffer15FreeRTOSDeleterE6_M_ptrEv>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	6013      	str	r3, [r2, #0]
	if (__old_p)
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d007      	beq.n	8003aca <_ZNSt15__uniq_ptr_implI11FrameBuffer15FreeRTOSDeleterE5resetEPS0_+0x38>
	  _M_deleter()(__old_p);
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f000 f832 	bl	8003b24 <_ZNSt15__uniq_ptr_implI11FrameBuffer15FreeRTOSDeleterE10_M_deleterEv>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	68f9      	ldr	r1, [r7, #12]
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f7fd fd17 	bl	80014f8 <_ZNK15FreeRTOSDeleterclEPv>
      }
 8003aca:	bf00      	nop
 8003acc:	3710      	adds	r7, #16
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}

08003ad2 <_ZNKSt15__uniq_ptr_implIh15FreeRTOSDeleterE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 8003ad2:	b580      	push	{r7, lr}
 8003ad4:	b082      	sub	sp, #8
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	6078      	str	r0, [r7, #4]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	4618      	mov	r0, r3
 8003ade:	f000 f82e 	bl	8003b3e <_ZSt3getILj0EJPh15FreeRTOSDeleterEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS6_>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3708      	adds	r7, #8
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}

08003aee <_ZNKSt15__uniq_ptr_implI11FrameBuffer15FreeRTOSDeleterE6_M_ptrEv>:
 8003aee:	b580      	push	{r7, lr}
 8003af0:	b082      	sub	sp, #8
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	6078      	str	r0, [r7, #4]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4618      	mov	r0, r3
 8003afa:	f000 f82d 	bl	8003b58 <_ZSt3getILj0EJP11FrameBuffer15FreeRTOSDeleterEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS7_>
 8003afe:	4603      	mov	r3, r0
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4618      	mov	r0, r3
 8003b04:	3708      	adds	r7, #8
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}

08003b0a <_ZNSt15__uniq_ptr_implI11FrameBuffer15FreeRTOSDeleterE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 8003b0a:	b580      	push	{r7, lr}
 8003b0c:	b082      	sub	sp, #8
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	6078      	str	r0, [r7, #4]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	4618      	mov	r0, r3
 8003b16:	f000 f82c 	bl	8003b72 <_ZSt3getILj0EJP11FrameBuffer15FreeRTOSDeleterEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3708      	adds	r7, #8
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}

08003b24 <_ZNSt15__uniq_ptr_implI11FrameBuffer15FreeRTOSDeleterE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b082      	sub	sp, #8
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f000 f82c 	bl	8003b8c <_ZSt3getILj1EJP11FrameBuffer15FreeRTOSDeleterEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>
 8003b34:	4603      	mov	r3, r0
 8003b36:	4618      	mov	r0, r3
 8003b38:	3708      	adds	r7, #8
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}

08003b3e <_ZSt3getILj0EJPh15FreeRTOSDeleterEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS6_>:
    { return std::__get_helper<__i>(__t); }

  /// Return a const reference to the ith element of a const tuple.
  template<size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 8003b3e:	b580      	push	{r7, lr}
 8003b40:	b082      	sub	sp, #8
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f000 f82b 	bl	8003ba4 <_ZSt12__get_helperILj0EPhJ15FreeRTOSDeleterEERKT0_RKSt11_Tuple_implIXT_EJS2_DpT1_EE>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	4618      	mov	r0, r3
 8003b52:	3708      	adds	r7, #8
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}

08003b58 <_ZSt3getILj0EJP11FrameBuffer15FreeRTOSDeleterEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS7_>:
    get(const tuple<_Elements...>& __t) noexcept
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b082      	sub	sp, #8
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	4618      	mov	r0, r3
 8003b64:	f000 f82a 	bl	8003bbc <_ZSt12__get_helperILj0EP11FrameBufferJ15FreeRTOSDeleterEERKT0_RKSt11_Tuple_implIXT_EJS3_DpT1_EE>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3708      	adds	r7, #8
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}

08003b72 <_ZSt3getILj0EJP11FrameBuffer15FreeRTOSDeleterEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>:
    get(tuple<_Elements...>& __t) noexcept
 8003b72:	b580      	push	{r7, lr}
 8003b74:	b082      	sub	sp, #8
 8003b76:	af00      	add	r7, sp, #0
 8003b78:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f000 f829 	bl	8003bd4 <_ZSt12__get_helperILj0EP11FrameBufferJ15FreeRTOSDeleterEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 8003b82:	4603      	mov	r3, r0
 8003b84:	4618      	mov	r0, r3
 8003b86:	3708      	adds	r7, #8
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}

08003b8c <_ZSt3getILj1EJP11FrameBuffer15FreeRTOSDeleterEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>:
    get(tuple<_Elements...>& __t) noexcept
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b082      	sub	sp, #8
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	f000 f829 	bl	8003bec <_ZSt12__get_helperILj1E15FreeRTOSDeleterJEERT0_RSt11_Tuple_implIXT_EJS1_DpT1_EE>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3708      	adds	r7, #8
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}

08003ba4 <_ZSt12__get_helperILj0EPhJ15FreeRTOSDeleterEERKT0_RKSt11_Tuple_implIXT_EJS2_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b082      	sub	sp, #8
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f000 f829 	bl	8003c04 <_ZNSt11_Tuple_implILj0EJPh15FreeRTOSDeleterEE7_M_headERKS2_>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3708      	adds	r7, #8
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}

08003bbc <_ZSt12__get_helperILj0EP11FrameBufferJ15FreeRTOSDeleterEERKT0_RKSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b082      	sub	sp, #8
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	f000 f82a 	bl	8003c1e <_ZNSt11_Tuple_implILj0EJP11FrameBuffer15FreeRTOSDeleterEE7_M_headERKS3_>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3708      	adds	r7, #8
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <_ZSt12__get_helperILj0EP11FrameBufferJ15FreeRTOSDeleterEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b082      	sub	sp, #8
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f000 f82b 	bl	8003c38 <_ZNSt11_Tuple_implILj0EJP11FrameBuffer15FreeRTOSDeleterEE7_M_headERS3_>
 8003be2:	4603      	mov	r3, r0
 8003be4:	4618      	mov	r0, r3
 8003be6:	3708      	adds	r7, #8
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}

08003bec <_ZSt12__get_helperILj1E15FreeRTOSDeleterJEERT0_RSt11_Tuple_implIXT_EJS1_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b082      	sub	sp, #8
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	f000 f82c 	bl	8003c52 <_ZNSt11_Tuple_implILj1EJ15FreeRTOSDeleterEE7_M_headERS1_>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3708      	adds	r7, #8
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}

08003c04 <_ZNSt11_Tuple_implILj0EJPh15FreeRTOSDeleterEE7_M_headERKS2_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b082      	sub	sp, #8
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f000 f82b 	bl	8003c6a <_ZNSt10_Head_baseILj0EPhLb0EE7_M_headERKS1_>
 8003c14:	4603      	mov	r3, r0
 8003c16:	4618      	mov	r0, r3
 8003c18:	3708      	adds	r7, #8
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}

08003c1e <_ZNSt11_Tuple_implILj0EJP11FrameBuffer15FreeRTOSDeleterEE7_M_headERKS3_>:
 8003c1e:	b580      	push	{r7, lr}
 8003c20:	b082      	sub	sp, #8
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	6078      	str	r0, [r7, #4]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f000 f829 	bl	8003c80 <_ZNSt10_Head_baseILj0EP11FrameBufferLb0EE7_M_headERKS2_>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	4618      	mov	r0, r3
 8003c32:	3708      	adds	r7, #8
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}

08003c38 <_ZNSt11_Tuple_implILj0EJP11FrameBuffer15FreeRTOSDeleterEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b082      	sub	sp, #8
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	4618      	mov	r0, r3
 8003c44:	f000 f827 	bl	8003c96 <_ZNSt10_Head_baseILj0EP11FrameBufferLb0EE7_M_headERS2_>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3708      	adds	r7, #8
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}

08003c52 <_ZNSt11_Tuple_implILj1EJ15FreeRTOSDeleterEE7_M_headERS1_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8003c52:	b580      	push	{r7, lr}
 8003c54:	b082      	sub	sp, #8
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	6078      	str	r0, [r7, #4]
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f000 f826 	bl	8003cac <_ZNSt10_Head_baseILj1E15FreeRTOSDeleterLb1EE7_M_headERS1_>
 8003c60:	4603      	mov	r3, r0
 8003c62:	4618      	mov	r0, r3
 8003c64:	3708      	adds	r7, #8
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}

08003c6a <_ZNSt10_Head_baseILj0EPhLb0EE7_M_headERKS1_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 8003c6a:	b480      	push	{r7}
 8003c6c:	b083      	sub	sp, #12
 8003c6e:	af00      	add	r7, sp, #0
 8003c70:	6078      	str	r0, [r7, #4]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	4618      	mov	r0, r3
 8003c76:	370c      	adds	r7, #12
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr

08003c80 <_ZNSt10_Head_baseILj0EP11FrameBufferLb0EE7_M_headERKS2_>:
 8003c80:	b480      	push	{r7}
 8003c82:	b083      	sub	sp, #12
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	370c      	adds	r7, #12
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr

08003c96 <_ZNSt10_Head_baseILj0EP11FrameBufferLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8003c96:	b480      	push	{r7}
 8003c98:	b083      	sub	sp, #12
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	6078      	str	r0, [r7, #4]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	370c      	adds	r7, #12
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr

08003cac <_ZNSt10_Head_baseILj1E15FreeRTOSDeleterLb1EE7_M_headERS1_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8003cac:	b480      	push	{r7}
 8003cae:	b083      	sub	sp, #12
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	370c      	adds	r7, #12
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr
	...

08003cc4 <_ZN21HighlightableDrawTextD1Ev>:
class HighlightableDrawText: public DrawText {
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b082      	sub	sp, #8
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	4a05      	ldr	r2, [pc, #20]	@ (8003ce4 <_ZN21HighlightableDrawTextD1Ev+0x20>)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	601a      	str	r2, [r3, #0]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f7fe f97f 	bl	8001fd8 <_ZN8DrawTextD1Ev>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3708      	adds	r7, #8
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}
 8003ce4:	08012eec 	.word	0x08012eec

08003ce8 <_ZN21HighlightableDrawTextD0Ev>:
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b082      	sub	sp, #8
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	f7ff ffe7 	bl	8003cc4 <_ZN21HighlightableDrawTextD1Ev>
 8003cf6:	2128      	movs	r1, #40	@ 0x28
 8003cf8:	6878      	ldr	r0, [r7, #4]
 8003cfa:	f008 fed3 	bl	800caa4 <_ZdlPvj>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4618      	mov	r0, r3
 8003d02:	3708      	adds	r7, #8
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}

08003d08 <_ZN6BitMapD1Ev>:
class BitMap: public Drawable{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b082      	sub	sp, #8
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	4a05      	ldr	r2, [pc, #20]	@ (8003d28 <_ZN6BitMapD1Ev+0x20>)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	601a      	str	r2, [r3, #0]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f7fd fcd5 	bl	80016c8 <_ZN8DrawableD1Ev>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4618      	mov	r0, r3
 8003d22:	3708      	adds	r7, #8
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}
 8003d28:	08012f34 	.word	0x08012f34

08003d2c <_ZN6BitMapD0Ev>:
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b082      	sub	sp, #8
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	6878      	ldr	r0, [r7, #4]
 8003d36:	f7ff ffe7 	bl	8003d08 <_ZN6BitMapD1Ev>
 8003d3a:	2124      	movs	r1, #36	@ 0x24
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f008 feb1 	bl	800caa4 <_ZdlPvj>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	4618      	mov	r0, r3
 8003d46:	3708      	adds	r7, #8
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}

08003d4c <_ZN28HighLightOnInteractRectangleD1Ev>:
class HighLightOnInteractRectangle: public Rectangle {
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b082      	sub	sp, #8
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	4a05      	ldr	r2, [pc, #20]	@ (8003d6c <_ZN28HighLightOnInteractRectangleD1Ev+0x20>)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	601a      	str	r2, [r3, #0]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f7fd ff8f 	bl	8001c80 <_ZN9RectangleD1Ev>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	4618      	mov	r0, r3
 8003d66:	3708      	adds	r7, #8
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	08012f58 	.word	0x08012f58

08003d70 <_ZN28HighLightOnInteractRectangleD0Ev>:
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b082      	sub	sp, #8
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f7ff ffe7 	bl	8003d4c <_ZN28HighLightOnInteractRectangleD1Ev>
 8003d7e:	2120      	movs	r1, #32
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f008 fe8f 	bl	800caa4 <_ZdlPvj>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3708      	adds	r7, #8
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}

08003d90 <_ZN9ContainerD1Ev>:
class Container: public Drawable {
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b082      	sub	sp, #8
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
 8003d98:	4a05      	ldr	r2, [pc, #20]	@ (8003db0 <_ZN9ContainerD1Ev+0x20>)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	601a      	str	r2, [r3, #0]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	4618      	mov	r0, r3
 8003da2:	f7fd fc91 	bl	80016c8 <_ZN8DrawableD1Ev>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	4618      	mov	r0, r3
 8003daa:	3708      	adds	r7, #8
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}
 8003db0:	08012fa0 	.word	0x08012fa0

08003db4 <_ZN9ContainerD0Ev>:
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b082      	sub	sp, #8
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f7ff ffe7 	bl	8003d90 <_ZN9ContainerD1Ev>
 8003dc2:	2148      	movs	r1, #72	@ 0x48
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	f008 fe6d 	bl	800caa4 <_ZdlPvj>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3708      	adds	r7, #8
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}

08003dd4 <_ZN17SetPointContainerD1Ev>:
} SetPointContainer;
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b082      	sub	sp, #8
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	339c      	adds	r3, #156	@ 0x9c
 8003de0:	4618      	mov	r0, r3
 8003de2:	f7ff ff6f 	bl	8003cc4 <_ZN21HighlightableDrawTextD1Ev>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	337c      	adds	r3, #124	@ 0x7c
 8003dea:	4618      	mov	r0, r3
 8003dec:	f7ff ffae 	bl	8003d4c <_ZN28HighLightOnInteractRectangleD1Ev>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	3334      	adds	r3, #52	@ 0x34
 8003df4:	4618      	mov	r0, r3
 8003df6:	f7ff ffcb 	bl	8003d90 <_ZN9ContainerD1Ev>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3708      	adds	r7, #8
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}

08003e04 <_Z41__static_initialization_and_destruction_0ii>:
	printf("close 5V, Module enters 0 power consumption ...\r\n");
	ePaper.pinExit();
    //finishes init


}
 8003e04:	b5b0      	push	{r4, r5, r7, lr}
 8003e06:	b08a      	sub	sp, #40	@ 0x28
 8003e08:	af08      	add	r7, sp, #32
 8003e0a:	6078      	str	r0, [r7, #4]
 8003e0c:	6039      	str	r1, [r7, #0]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d165      	bne.n	8003ee0 <_Z41__static_initialization_and_destruction_0ii+0xdc>
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d160      	bne.n	8003ee0 <_Z41__static_initialization_and_destruction_0ii+0xdc>
static SetPointContainer setPointOptions[MAX_SETPOINTS_PER_DAY];
 8003e1e:	4b41      	ldr	r3, [pc, #260]	@ (8003f24 <_Z41__static_initialization_and_destruction_0ii+0x120>)
 8003e20:	2402      	movs	r4, #2
 8003e22:	461d      	mov	r5, r3
 8003e24:	e004      	b.n	8003e30 <_Z41__static_initialization_and_destruction_0ii+0x2c>
 8003e26:	4628      	mov	r0, r5
 8003e28:	f7fe f938 	bl	800209c <_ZN17SetPointContainerC1Ev>
 8003e2c:	3c01      	subs	r4, #1
 8003e2e:	35c4      	adds	r5, #196	@ 0xc4
 8003e30:	2c00      	cmp	r4, #0
 8003e32:	daf8      	bge.n	8003e26 <_Z41__static_initialization_and_destruction_0ii+0x22>
UWORD containerYStart = EPD_4in26_HEIGHT - containerYLength;
 8003e34:	4b3c      	ldr	r3, [pc, #240]	@ (8003f28 <_Z41__static_initialization_and_destruction_0ii+0x124>)
 8003e36:	881b      	ldrh	r3, [r3, #0]
 8003e38:	f5c3 73f0 	rsb	r3, r3, #480	@ 0x1e0
 8003e3c:	b29a      	uxth	r2, r3
 8003e3e:	4b3b      	ldr	r3, [pc, #236]	@ (8003f2c <_Z41__static_initialization_and_destruction_0ii+0x128>)
 8003e40:	801a      	strh	r2, [r3, #0]
DrawText timeText = DrawText(338,36,&time,&Font24, WHITE, BLACK);
 8003e42:	2300      	movs	r3, #0
 8003e44:	9302      	str	r3, [sp, #8]
 8003e46:	23ff      	movs	r3, #255	@ 0xff
 8003e48:	9301      	str	r3, [sp, #4]
 8003e4a:	4b39      	ldr	r3, [pc, #228]	@ (8003f30 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
 8003e4c:	9300      	str	r3, [sp, #0]
 8003e4e:	4b39      	ldr	r3, [pc, #228]	@ (8003f34 <_Z41__static_initialization_and_destruction_0ii+0x130>)
 8003e50:	2224      	movs	r2, #36	@ 0x24
 8003e52:	f44f 71a9 	mov.w	r1, #338	@ 0x152
 8003e56:	4838      	ldr	r0, [pc, #224]	@ (8003f38 <_Z41__static_initialization_and_destruction_0ii+0x134>)
 8003e58:	f7fe f88e 	bl	8001f78 <_ZN8DrawTextC1EttP10PAINT_TIMEP6_tFonttt>
BitMap battery = BitMap(gImage_battery, 0, 0, 64, 64, WHITE);
 8003e5c:	23ff      	movs	r3, #255	@ 0xff
 8003e5e:	9302      	str	r3, [sp, #8]
 8003e60:	2340      	movs	r3, #64	@ 0x40
 8003e62:	9301      	str	r3, [sp, #4]
 8003e64:	2340      	movs	r3, #64	@ 0x40
 8003e66:	9300      	str	r3, [sp, #0]
 8003e68:	2300      	movs	r3, #0
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	4933      	ldr	r1, [pc, #204]	@ (8003f3c <_Z41__static_initialization_and_destruction_0ii+0x138>)
 8003e6e:	4834      	ldr	r0, [pc, #208]	@ (8003f40 <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 8003e70:	f7fd ff86 	bl	8001d80 <_ZN6BitMapC1EPKhttttt>
BitMap wifi = BitMap(gImage_wifi,730,0, 64,64,WHITE);
 8003e74:	23ff      	movs	r3, #255	@ 0xff
 8003e76:	9302      	str	r3, [sp, #8]
 8003e78:	2340      	movs	r3, #64	@ 0x40
 8003e7a:	9301      	str	r3, [sp, #4]
 8003e7c:	2340      	movs	r3, #64	@ 0x40
 8003e7e:	9300      	str	r3, [sp, #0]
 8003e80:	2300      	movs	r3, #0
 8003e82:	f240 22da 	movw	r2, #730	@ 0x2da
 8003e86:	492f      	ldr	r1, [pc, #188]	@ (8003f44 <_Z41__static_initialization_and_destruction_0ii+0x140>)
 8003e88:	482f      	ldr	r0, [pc, #188]	@ (8003f48 <_Z41__static_initialization_and_destruction_0ii+0x144>)
 8003e8a:	f7fd ff79 	bl	8001d80 <_ZN6BitMapC1EPKhttttt>
Screen setPointScreen = Screen();
 8003e8e:	2300      	movs	r3, #0
 8003e90:	9301      	str	r3, [sp, #4]
 8003e92:	23ff      	movs	r3, #255	@ 0xff
 8003e94:	9300      	str	r3, [sp, #0]
 8003e96:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8003e9a:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8003e9e:	2100      	movs	r1, #0
 8003ea0:	482a      	ldr	r0, [pc, #168]	@ (8003f4c <_Z41__static_initialization_and_destruction_0ii+0x148>)
 8003ea2:	f7fd fd5c 	bl	800195e <_ZN6ScreenC1EPFv6ButtonEtttt>
									);
 8003ea6:	4b2a      	ldr	r3, [pc, #168]	@ (8003f50 <_Z41__static_initialization_and_destruction_0ii+0x14c>)
 8003ea8:	9307      	str	r3, [sp, #28]
 8003eaa:	2340      	movs	r3, #64	@ 0x40
 8003eac:	9306      	str	r3, [sp, #24]
 8003eae:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003eb2:	9305      	str	r3, [sp, #20]
 8003eb4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003eb8:	9304      	str	r3, [sp, #16]
 8003eba:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003ebe:	9303      	str	r3, [sp, #12]
 8003ec0:	2308      	movs	r3, #8
 8003ec2:	9302      	str	r3, [sp, #8]
 8003ec4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003ec8:	9301      	str	r3, [sp, #4]
 8003eca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003ece:	9300      	str	r3, [sp, #0]
 8003ed0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003ed4:	2220      	movs	r2, #32
 8003ed6:	f04f 4190 	mov.w	r1, #1207959552	@ 0x48000000
 8003eda:	481e      	ldr	r0, [pc, #120]	@ (8003f54 <_Z41__static_initialization_and_destruction_0ii+0x150>)
 8003edc:	f7fc ffd8 	bl	8000e90 <_ZN9EPD_4in26C1EP12GPIO_TypeDeftS1_tS1_tS1_tS1_tP19__SPI_HandleTypeDef>
EPD_4in26 ePaperGlobal(RST_GPIO_Port, RST_Pin,
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d119      	bne.n	8003f1a <_Z41__static_initialization_and_destruction_0ii+0x116>
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d114      	bne.n	8003f1a <_Z41__static_initialization_and_destruction_0ii+0x116>
Screen setPointScreen = Screen();
 8003ef0:	4816      	ldr	r0, [pc, #88]	@ (8003f4c <_Z41__static_initialization_and_destruction_0ii+0x148>)
 8003ef2:	f7fd fd53 	bl	800199c <_ZN6ScreenD1Ev>
BitMap wifi = BitMap(gImage_wifi,730,0, 64,64,WHITE);
 8003ef6:	4814      	ldr	r0, [pc, #80]	@ (8003f48 <_Z41__static_initialization_and_destruction_0ii+0x144>)
 8003ef8:	f7ff ff06 	bl	8003d08 <_ZN6BitMapD1Ev>
BitMap battery = BitMap(gImage_battery, 0, 0, 64, 64, WHITE);
 8003efc:	4810      	ldr	r0, [pc, #64]	@ (8003f40 <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 8003efe:	f7ff ff03 	bl	8003d08 <_ZN6BitMapD1Ev>
DrawText timeText = DrawText(338,36,&time,&Font24, WHITE, BLACK);
 8003f02:	480d      	ldr	r0, [pc, #52]	@ (8003f38 <_Z41__static_initialization_and_destruction_0ii+0x134>)
 8003f04:	f7fe f868 	bl	8001fd8 <_ZN8DrawTextD1Ev>
static SetPointContainer setPointOptions[MAX_SETPOINTS_PER_DAY];
 8003f08:	4c13      	ldr	r4, [pc, #76]	@ (8003f58 <_Z41__static_initialization_and_destruction_0ii+0x154>)
 8003f0a:	4b06      	ldr	r3, [pc, #24]	@ (8003f24 <_Z41__static_initialization_and_destruction_0ii+0x120>)
 8003f0c:	429c      	cmp	r4, r3
 8003f0e:	d004      	beq.n	8003f1a <_Z41__static_initialization_and_destruction_0ii+0x116>
 8003f10:	3cc4      	subs	r4, #196	@ 0xc4
 8003f12:	4620      	mov	r0, r4
 8003f14:	f7ff ff5e 	bl	8003dd4 <_ZN17SetPointContainerD1Ev>
 8003f18:	e7f7      	b.n	8003f0a <_Z41__static_initialization_and_destruction_0ii+0x106>
}
 8003f1a:	bf00      	nop
 8003f1c:	3708      	adds	r7, #8
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bdb0      	pop	{r4, r5, r7, pc}
 8003f22:	bf00      	nop
 8003f24:	200002f8 	.word	0x200002f8
 8003f28:	200000f8 	.word	0x200000f8
 8003f2c:	200005aa 	.word	0x200005aa
 8003f30:	20000010 	.word	0x20000010
 8003f34:	200000e4 	.word	0x200000e4
 8003f38:	200005ac 	.word	0x200005ac
 8003f3c:	08012864 	.word	0x08012864
 8003f40:	200005d4 	.word	0x200005d4
 8003f44:	08012664 	.word	0x08012664
 8003f48:	200005f8 	.word	0x200005f8
 8003f4c:	2000061c 	.word	0x2000061c
 8003f50:	20000694 	.word	0x20000694
 8003f54:	20000654 	.word	0x20000654
 8003f58:	20000544 	.word	0x20000544

08003f5c <_GLOBAL__sub_I_setPointContainerHeightIndent>:
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8003f64:	2001      	movs	r0, #1
 8003f66:	f7ff ff4d 	bl	8003e04 <_Z41__static_initialization_and_destruction_0ii>
 8003f6a:	bd80      	pop	{r7, pc}

08003f6c <_GLOBAL__sub_D_setPointContainerHeightIndent>:
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8003f74:	2000      	movs	r0, #0
 8003f76:	f7ff ff45 	bl	8003e04 <_Z41__static_initialization_and_destruction_0ii>
 8003f7a:	bd80      	pop	{r7, pc}

08003f7c <_ZNSt11_Tuple_implILj1EJ15FreeRTOSDeleterEEC2Ev>:
      _Tuple_impl()
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b082      	sub	sp, #8
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	f000 f805 	bl	8003f94 <_ZNSt10_Head_baseILj1E15FreeRTOSDeleterLb1EEC2Ev>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3708      	adds	r7, #8
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}

08003f94 <_ZNSt10_Head_baseILj1E15FreeRTOSDeleterLb1EEC2Ev>:
      constexpr _Head_base()
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	370c      	adds	r7, #12
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr

08003faa <_ZN11FrameBufferC1Etttt>:
//#define Imagesize (((EPD_4in26_WIDTH % 8 == 0)? (EPD_4in26_WIDTH / 8 ): (EPD_4in26_WIDTH / 8 + 1)) * EPD_4in26_HEIGHT)

std::unique_ptr<FrameBuffer, FreeRTOSDeleter> FrameBuffer::instance = nullptr;
// !!!!!!!!!!!!!!!!! IMPORTANT -> this width and height dont correlate to the width and height of image it correlates to the
// width and height of the partial iamge you want to draw (usefull when you only want to draw one part of the screen
FrameBuffer::FrameBuffer(UWORD Width, UWORD Height, UWORD Rotate, UWORD Color){
 8003faa:	b580      	push	{r7, lr}
 8003fac:	b086      	sub	sp, #24
 8003fae:	af02      	add	r7, sp, #8
 8003fb0:	60f8      	str	r0, [r7, #12]
 8003fb2:	4608      	mov	r0, r1
 8003fb4:	4611      	mov	r1, r2
 8003fb6:	461a      	mov	r2, r3
 8003fb8:	4603      	mov	r3, r0
 8003fba:	817b      	strh	r3, [r7, #10]
 8003fbc:	460b      	mov	r3, r1
 8003fbe:	813b      	strh	r3, [r7, #8]
 8003fc0:	4613      	mov	r3, r2
 8003fc2:	80fb      	strh	r3, [r7, #6]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f000 ffb6 	bl	8004f38 <_ZNSt10unique_ptrIA_h15FreeRTOSDeleterEC1IS1_vEEv>
	Paint_initImage(Width,Height,Rotate,Color);
 8003fcc:	88f8      	ldrh	r0, [r7, #6]
 8003fce:	893a      	ldrh	r2, [r7, #8]
 8003fd0:	8979      	ldrh	r1, [r7, #10]
 8003fd2:	8b3b      	ldrh	r3, [r7, #24]
 8003fd4:	9300      	str	r3, [sp, #0]
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	68f8      	ldr	r0, [r7, #12]
 8003fda:	f000 f825 	bl	8004028 <_ZN11FrameBuffer15Paint_initImageEtttt>
}
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3710      	adds	r7, #16
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}

08003fe8 <_ZNSt15__uniq_ptr_dataIh15FreeRTOSDeleterLb1ELb1EEaSEOS1_>:
      __uniq_ptr_data& operator=(__uniq_ptr_data&&) = default;
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b082      	sub	sp, #8
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
 8003ff0:	6039      	str	r1, [r7, #0]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	683a      	ldr	r2, [r7, #0]
 8003ff6:	4611      	mov	r1, r2
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f000 ffcc 	bl	8004f96 <_ZNSt15__uniq_ptr_implIh15FreeRTOSDeleterEaSEOS1_>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4618      	mov	r0, r3
 8004002:	3708      	adds	r7, #8
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}

08004008 <_ZNSt10unique_ptrIA_h15FreeRTOSDeleterEaSEOS2_>:
      operator=(unique_ptr&&) = default;
 8004008:	b580      	push	{r7, lr}
 800400a:	b082      	sub	sp, #8
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
 8004010:	6039      	str	r1, [r7, #0]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	683a      	ldr	r2, [r7, #0]
 8004016:	4611      	mov	r1, r2
 8004018:	4618      	mov	r0, r3
 800401a:	f7ff ffe5 	bl	8003fe8 <_ZNSt15__uniq_ptr_dataIh15FreeRTOSDeleterLb1ELb1EEaSEOS1_>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4618      	mov	r0, r3
 8004022:	3708      	adds	r7, #8
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}

08004028 <_ZN11FrameBuffer15Paint_initImageEtttt>:
    Color   :   Whether the picture is inverted
******************************************************************************/



void FrameBuffer::Paint_initImage(UWORD Width, UWORD Height, UWORD Rotate, UWORD Color){
 8004028:	b590      	push	{r4, r7, lr}
 800402a:	b087      	sub	sp, #28
 800402c:	af00      	add	r7, sp, #0
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	4608      	mov	r0, r1
 8004032:	4611      	mov	r1, r2
 8004034:	461a      	mov	r2, r3
 8004036:	4603      	mov	r3, r0
 8004038:	817b      	strh	r3, [r7, #10]
 800403a:	460b      	mov	r3, r1
 800403c:	813b      	strh	r3, [r7, #8]
 800403e:	4613      	mov	r3, r2
 8004040:	80fb      	strh	r3, [r7, #6]
	UWORD Imagesize  =(((Width % 8 == 0)? (Width / 8 ): (Width / 8 + 1)) * Height);
 8004042:	897b      	ldrh	r3, [r7, #10]
 8004044:	f003 0307 	and.w	r3, r3, #7
 8004048:	2b00      	cmp	r3, #0
 800404a:	d103      	bne.n	8004054 <_ZN11FrameBuffer15Paint_initImageEtttt+0x2c>
 800404c:	897b      	ldrh	r3, [r7, #10]
 800404e:	08db      	lsrs	r3, r3, #3
 8004050:	b29b      	uxth	r3, r3
 8004052:	e004      	b.n	800405e <_ZN11FrameBuffer15Paint_initImageEtttt+0x36>
 8004054:	897b      	ldrh	r3, [r7, #10]
 8004056:	08db      	lsrs	r3, r3, #3
 8004058:	b29b      	uxth	r3, r3
 800405a:	3301      	adds	r3, #1
 800405c:	b29b      	uxth	r3, r3
 800405e:	893a      	ldrh	r2, [r7, #8]
 8004060:	fb12 f303 	smulbb	r3, r2, r3
 8004064:	82fb      	strh	r3, [r7, #22]


    this->Image = make_unique_freertos_array(Imagesize);
 8004066:	68fc      	ldr	r4, [r7, #12]
 8004068:	8afa      	ldrh	r2, [r7, #22]
 800406a:	f107 0310 	add.w	r3, r7, #16
 800406e:	4611      	mov	r1, r2
 8004070:	4618      	mov	r0, r3
 8004072:	f001 f8dd 	bl	8005230 <_Z26make_unique_freertos_arrayj>
 8004076:	f107 0310 	add.w	r3, r7, #16
 800407a:	4619      	mov	r1, r3
 800407c:	4620      	mov	r0, r4
 800407e:	f7ff ffc3 	bl	8004008 <_ZNSt10unique_ptrIA_h15FreeRTOSDeleterEaSEOS2_>
 8004082:	f107 0310 	add.w	r3, r7, #16
 8004086:	4618      	mov	r0, r3
 8004088:	f000 ff66 	bl	8004f58 <_ZNSt10unique_ptrIA_h15FreeRTOSDeleterED1Ev>
    if (!this->Image) {
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	4618      	mov	r0, r3
 8004090:	f000 ff9d 	bl	8004fce <_ZNKSt10unique_ptrIA_h15FreeRTOSDeleterEcvbEv>
 8004094:	4603      	mov	r3, r0
 8004096:	f083 0301 	eor.w	r3, r3, #1
 800409a:	b2db      	uxtb	r3, r3
 800409c:	2b00      	cmp	r3, #0
 800409e:	d002      	beq.n	80040a6 <_ZN11FrameBuffer15Paint_initImageEtttt+0x7e>
		printf("FrameBuffer allocation failed!\n");
 80040a0:	481f      	ldr	r0, [pc, #124]	@ (8004120 <_ZN11FrameBuffer15Paint_initImageEtttt+0xf8>)
 80040a2:	f009 fb4b 	bl	800d73c <puts>
    }
	this->WidthMemory = Width;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	897a      	ldrh	r2, [r7, #10]
 80040aa:	811a      	strh	r2, [r3, #8]
    this->HeightMemory = Height;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	893a      	ldrh	r2, [r7, #8]
 80040b0:	815a      	strh	r2, [r3, #10]
    this->Color = Color;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80040b6:	819a      	strh	r2, [r3, #12]
	this->Scale = 2;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2202      	movs	r2, #2
 80040bc:	82da      	strh	r2, [r3, #22]

    this->WidthByte = (Width % 8 == 0)? (Width / 8 ): (Width / 8 + 1);
 80040be:	897b      	ldrh	r3, [r7, #10]
 80040c0:	f003 0307 	and.w	r3, r3, #7
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d103      	bne.n	80040d0 <_ZN11FrameBuffer15Paint_initImageEtttt+0xa8>
 80040c8:	897b      	ldrh	r3, [r7, #10]
 80040ca:	08db      	lsrs	r3, r3, #3
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	e004      	b.n	80040da <_ZN11FrameBuffer15Paint_initImageEtttt+0xb2>
 80040d0:	897b      	ldrh	r3, [r7, #10]
 80040d2:	08db      	lsrs	r3, r3, #3
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	3301      	adds	r3, #1
 80040d8:	b29b      	uxth	r3, r3
 80040da:	68fa      	ldr	r2, [r7, #12]
 80040dc:	8253      	strh	r3, [r2, #18]
    this->HeightByte = Height;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	893a      	ldrh	r2, [r7, #8]
 80040e2:	829a      	strh	r2, [r3, #20]
//    printf("WidthByte = %d, HeightByte = %d\r\n", this->WidthByte, this->HeightByte);
//    printf(" EPD_WIDTH / 8 = %d\r\n",  122 / 8);

    this->Rotate = Rotate;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	88fa      	ldrh	r2, [r7, #6]
 80040e8:	81da      	strh	r2, [r3, #14]
    this->Mirror = MIRROR_NONE;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2200      	movs	r2, #0
 80040ee:	821a      	strh	r2, [r3, #16]

    if(Rotate == ROTATE_0 || Rotate == ROTATE_180) {
 80040f0:	88fb      	ldrh	r3, [r7, #6]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d002      	beq.n	80040fc <_ZN11FrameBuffer15Paint_initImageEtttt+0xd4>
 80040f6:	88fb      	ldrh	r3, [r7, #6]
 80040f8:	2bb4      	cmp	r3, #180	@ 0xb4
 80040fa:	d106      	bne.n	800410a <_ZN11FrameBuffer15Paint_initImageEtttt+0xe2>
        this->Width = Width;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	897a      	ldrh	r2, [r7, #10]
 8004100:	809a      	strh	r2, [r3, #4]
        this->Height = Height;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	893a      	ldrh	r2, [r7, #8]
 8004106:	80da      	strh	r2, [r3, #6]
 8004108:	e006      	b.n	8004118 <_ZN11FrameBuffer15Paint_initImageEtttt+0xf0>
    } else {
        this->Width = Height;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	893a      	ldrh	r2, [r7, #8]
 800410e:	809a      	strh	r2, [r3, #4]
        this->Height = Width;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	897a      	ldrh	r2, [r7, #10]
 8004114:	80da      	strh	r2, [r3, #6]
    }
}
 8004116:	bf00      	nop
 8004118:	bf00      	nop
 800411a:	371c      	adds	r7, #28
 800411c:	46bd      	mov	sp, r7
 800411e:	bd90      	pop	{r4, r7, pc}
 8004120:	0800fbac 	.word	0x0800fbac

08004124 <_ZN11FrameBuffer14Paint_SetPixelEttt>:
    Xpoint : At point X
    Ypoint : At point Y
    Color  : Painted colors
******************************************************************************/
void FrameBuffer::Paint_SetPixel(UWORD Xpoint, UWORD Ypoint, UWORD Color)
{
 8004124:	b590      	push	{r4, r7, lr}
 8004126:	b08d      	sub	sp, #52	@ 0x34
 8004128:	af00      	add	r7, sp, #0
 800412a:	60f8      	str	r0, [r7, #12]
 800412c:	4608      	mov	r0, r1
 800412e:	4611      	mov	r1, r2
 8004130:	461a      	mov	r2, r3
 8004132:	4603      	mov	r3, r0
 8004134:	817b      	strh	r3, [r7, #10]
 8004136:	460b      	mov	r3, r1
 8004138:	813b      	strh	r3, [r7, #8]
 800413a:	4613      	mov	r3, r2
 800413c:	80fb      	strh	r3, [r7, #6]
    if(Xpoint > this->Width || Ypoint > this->Height){
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	889b      	ldrh	r3, [r3, #4]
 8004142:	897a      	ldrh	r2, [r7, #10]
 8004144:	429a      	cmp	r2, r3
 8004146:	d804      	bhi.n	8004152 <_ZN11FrameBuffer14Paint_SetPixelEttt+0x2e>
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	88db      	ldrh	r3, [r3, #6]
 800414c:	893a      	ldrh	r2, [r7, #8]
 800414e:	429a      	cmp	r2, r3
 8004150:	d904      	bls.n	800415c <_ZN11FrameBuffer14Paint_SetPixelEttt+0x38>
        Debug("Exceeding display boundaries\r\n");
 8004152:	49a6      	ldr	r1, [pc, #664]	@ (80043ec <_ZN11FrameBuffer14Paint_SetPixelEttt+0x2c8>)
 8004154:	2004      	movs	r0, #4
 8004156:	f7fc fe77 	bl	8000e48 <_Z12log_message2hPKcz>
        return;
 800415a:	e143      	b.n	80043e4 <_ZN11FrameBuffer14Paint_SetPixelEttt+0x2c0>
    }
    UWORD X, Y;

    switch(this->Rotate) {
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	89db      	ldrh	r3, [r3, #14]
 8004160:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8004164:	d02b      	beq.n	80041be <_ZN11FrameBuffer14Paint_SetPixelEttt+0x9a>
 8004166:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 800416a:	f300 8138 	bgt.w	80043de <_ZN11FrameBuffer14Paint_SetPixelEttt+0x2ba>
 800416e:	2bb4      	cmp	r3, #180	@ 0xb4
 8004170:	d016      	beq.n	80041a0 <_ZN11FrameBuffer14Paint_SetPixelEttt+0x7c>
 8004172:	2bb4      	cmp	r3, #180	@ 0xb4
 8004174:	f300 8133 	bgt.w	80043de <_ZN11FrameBuffer14Paint_SetPixelEttt+0x2ba>
 8004178:	2b00      	cmp	r3, #0
 800417a:	d002      	beq.n	8004182 <_ZN11FrameBuffer14Paint_SetPixelEttt+0x5e>
 800417c:	2b5a      	cmp	r3, #90	@ 0x5a
 800417e:	d005      	beq.n	800418c <_ZN11FrameBuffer14Paint_SetPixelEttt+0x68>
    case 270:
        X = Ypoint;
        Y = this->HeightMemory - Xpoint - 1;
        break;
    default:
        return;
 8004180:	e12d      	b.n	80043de <_ZN11FrameBuffer14Paint_SetPixelEttt+0x2ba>
        X = Xpoint;
 8004182:	897b      	ldrh	r3, [r7, #10]
 8004184:	85fb      	strh	r3, [r7, #46]	@ 0x2e
        Y = Ypoint;
 8004186:	893b      	ldrh	r3, [r7, #8]
 8004188:	85bb      	strh	r3, [r7, #44]	@ 0x2c
        break;
 800418a:	e022      	b.n	80041d2 <_ZN11FrameBuffer14Paint_SetPixelEttt+0xae>
        X = this->WidthMemory - Ypoint - 1;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	891a      	ldrh	r2, [r3, #8]
 8004190:	893b      	ldrh	r3, [r7, #8]
 8004192:	1ad3      	subs	r3, r2, r3
 8004194:	b29b      	uxth	r3, r3
 8004196:	3b01      	subs	r3, #1
 8004198:	85fb      	strh	r3, [r7, #46]	@ 0x2e
        Y = Xpoint;
 800419a:	897b      	ldrh	r3, [r7, #10]
 800419c:	85bb      	strh	r3, [r7, #44]	@ 0x2c
        break;
 800419e:	e018      	b.n	80041d2 <_ZN11FrameBuffer14Paint_SetPixelEttt+0xae>
        X = this->WidthMemory - Xpoint - 1;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	891a      	ldrh	r2, [r3, #8]
 80041a4:	897b      	ldrh	r3, [r7, #10]
 80041a6:	1ad3      	subs	r3, r2, r3
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	3b01      	subs	r3, #1
 80041ac:	85fb      	strh	r3, [r7, #46]	@ 0x2e
        Y = this->HeightMemory - Ypoint - 1;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	895a      	ldrh	r2, [r3, #10]
 80041b2:	893b      	ldrh	r3, [r7, #8]
 80041b4:	1ad3      	subs	r3, r2, r3
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	3b01      	subs	r3, #1
 80041ba:	85bb      	strh	r3, [r7, #44]	@ 0x2c
        break;
 80041bc:	e009      	b.n	80041d2 <_ZN11FrameBuffer14Paint_SetPixelEttt+0xae>
        X = Ypoint;
 80041be:	893b      	ldrh	r3, [r7, #8]
 80041c0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
        Y = this->HeightMemory - Xpoint - 1;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	895a      	ldrh	r2, [r3, #10]
 80041c6:	897b      	ldrh	r3, [r7, #10]
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	3b01      	subs	r3, #1
 80041ce:	85bb      	strh	r3, [r7, #44]	@ 0x2c
        break;
 80041d0:	bf00      	nop
    }

    switch(this->Mirror) {
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	8a1b      	ldrh	r3, [r3, #16]
 80041d6:	2b03      	cmp	r3, #3
 80041d8:	f200 8103 	bhi.w	80043e2 <_ZN11FrameBuffer14Paint_SetPixelEttt+0x2be>
 80041dc:	a201      	add	r2, pc, #4	@ (adr r2, 80041e4 <_ZN11FrameBuffer14Paint_SetPixelEttt+0xc0>)
 80041de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041e2:	bf00      	nop
 80041e4:	08004233 	.word	0x08004233
 80041e8:	080041f5 	.word	0x080041f5
 80041ec:	08004205 	.word	0x08004205
 80041f0:	08004215 	.word	0x08004215
    case MIRROR_NONE:
        break;
    case MIRROR_HORIZONTAL:
        X = this->WidthMemory - X - 1;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	891a      	ldrh	r2, [r3, #8]
 80041f8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80041fa:	1ad3      	subs	r3, r2, r3
 80041fc:	b29b      	uxth	r3, r3
 80041fe:	3b01      	subs	r3, #1
 8004200:	85fb      	strh	r3, [r7, #46]	@ 0x2e
        break;
 8004202:	e017      	b.n	8004234 <_ZN11FrameBuffer14Paint_SetPixelEttt+0x110>
    case MIRROR_VERTICAL:
        Y = this->HeightMemory - Y - 1;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	895a      	ldrh	r2, [r3, #10]
 8004208:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800420a:	1ad3      	subs	r3, r2, r3
 800420c:	b29b      	uxth	r3, r3
 800420e:	3b01      	subs	r3, #1
 8004210:	85bb      	strh	r3, [r7, #44]	@ 0x2c
        break;
 8004212:	e00f      	b.n	8004234 <_ZN11FrameBuffer14Paint_SetPixelEttt+0x110>
    case MIRROR_ORIGIN:
        X = this->WidthMemory - X - 1;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	891a      	ldrh	r2, [r3, #8]
 8004218:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800421a:	1ad3      	subs	r3, r2, r3
 800421c:	b29b      	uxth	r3, r3
 800421e:	3b01      	subs	r3, #1
 8004220:	85fb      	strh	r3, [r7, #46]	@ 0x2e
        Y = this->HeightMemory - Y - 1;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	895a      	ldrh	r2, [r3, #10]
 8004226:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	b29b      	uxth	r3, r3
 800422c:	3b01      	subs	r3, #1
 800422e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
        break;
 8004230:	e000      	b.n	8004234 <_ZN11FrameBuffer14Paint_SetPixelEttt+0x110>
        break;
 8004232:	bf00      	nop
    default:
        return;
    }

    if(X > this->WidthMemory || Y > this->HeightMemory){
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	891b      	ldrh	r3, [r3, #8]
 8004238:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800423a:	429a      	cmp	r2, r3
 800423c:	d804      	bhi.n	8004248 <_ZN11FrameBuffer14Paint_SetPixelEttt+0x124>
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	895b      	ldrh	r3, [r3, #10]
 8004242:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8004244:	429a      	cmp	r2, r3
 8004246:	d904      	bls.n	8004252 <_ZN11FrameBuffer14Paint_SetPixelEttt+0x12e>
        Debug("Exceeding display boundaries\r\n");
 8004248:	4968      	ldr	r1, [pc, #416]	@ (80043ec <_ZN11FrameBuffer14Paint_SetPixelEttt+0x2c8>)
 800424a:	2004      	movs	r0, #4
 800424c:	f7fc fdfc 	bl	8000e48 <_Z12log_message2hPKcz>
        return;
 8004250:	e0c8      	b.n	80043e4 <_ZN11FrameBuffer14Paint_SetPixelEttt+0x2c0>
    }

    if(this->Scale == 2){
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	8adb      	ldrh	r3, [r3, #22]
 8004256:	2b02      	cmp	r3, #2
 8004258:	d13f      	bne.n	80042da <_ZN11FrameBuffer14Paint_SetPixelEttt+0x1b6>
        UDOUBLE Addr = X / 8 + Y * this->WidthByte;
 800425a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800425c:	08db      	lsrs	r3, r3, #3
 800425e:	b29b      	uxth	r3, r3
 8004260:	4619      	mov	r1, r3
 8004262:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8004264:	68fa      	ldr	r2, [r7, #12]
 8004266:	8a52      	ldrh	r2, [r2, #18]
 8004268:	fb02 f303 	mul.w	r3, r2, r3
 800426c:	440b      	add	r3, r1
 800426e:	61bb      	str	r3, [r7, #24]
        UBYTE Rdata = this->Image[Addr];
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	69b9      	ldr	r1, [r7, #24]
 8004274:	4618      	mov	r0, r3
 8004276:	f000 febb 	bl	8004ff0 <_ZNKSt10unique_ptrIA_h15FreeRTOSDeleterEixEj>
 800427a:	4603      	mov	r3, r0
 800427c:	781b      	ldrb	r3, [r3, #0]
 800427e:	75fb      	strb	r3, [r7, #23]
        if(Color == BLACK)
 8004280:	88fb      	ldrh	r3, [r7, #6]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d115      	bne.n	80042b2 <_ZN11FrameBuffer14Paint_SetPixelEttt+0x18e>
            this->Image[Addr] = Rdata & ~(0x80 >> (X % 8));
 8004286:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8004288:	f003 0307 	and.w	r3, r3, #7
 800428c:	2280      	movs	r2, #128	@ 0x80
 800428e:	fa42 f303 	asr.w	r3, r2, r3
 8004292:	b25b      	sxtb	r3, r3
 8004294:	43db      	mvns	r3, r3
 8004296:	b25a      	sxtb	r2, r3
 8004298:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800429c:	4013      	ands	r3, r2
 800429e:	b25c      	sxtb	r4, r3
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	69b9      	ldr	r1, [r7, #24]
 80042a4:	4618      	mov	r0, r3
 80042a6:	f000 fea3 	bl	8004ff0 <_ZNKSt10unique_ptrIA_h15FreeRTOSDeleterEixEj>
 80042aa:	4603      	mov	r3, r0
 80042ac:	b2e2      	uxtb	r2, r4
 80042ae:	701a      	strb	r2, [r3, #0]
 80042b0:	e098      	b.n	80043e4 <_ZN11FrameBuffer14Paint_SetPixelEttt+0x2c0>
        else
            this->Image[Addr] = Rdata | (0x80 >> (X % 8));
 80042b2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80042b4:	f003 0307 	and.w	r3, r3, #7
 80042b8:	2280      	movs	r2, #128	@ 0x80
 80042ba:	fa42 f303 	asr.w	r3, r2, r3
 80042be:	b25a      	sxtb	r2, r3
 80042c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80042c4:	4313      	orrs	r3, r2
 80042c6:	b25c      	sxtb	r4, r3
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	69b9      	ldr	r1, [r7, #24]
 80042cc:	4618      	mov	r0, r3
 80042ce:	f000 fe8f 	bl	8004ff0 <_ZNKSt10unique_ptrIA_h15FreeRTOSDeleterEixEj>
 80042d2:	4603      	mov	r3, r0
 80042d4:	b2e2      	uxtb	r2, r4
 80042d6:	701a      	strb	r2, [r3, #0]
 80042d8:	e084      	b.n	80043e4 <_ZN11FrameBuffer14Paint_SetPixelEttt+0x2c0>
    }else if(this->Scale == 4){
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	8adb      	ldrh	r3, [r3, #22]
 80042de:	2b04      	cmp	r3, #4
 80042e0:	d13b      	bne.n	800435a <_ZN11FrameBuffer14Paint_SetPixelEttt+0x236>
        UDOUBLE Addr = X / 4 + Y * this->WidthByte;
 80042e2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80042e4:	089b      	lsrs	r3, r3, #2
 80042e6:	b29b      	uxth	r3, r3
 80042e8:	4619      	mov	r1, r3
 80042ea:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80042ec:	68fa      	ldr	r2, [r7, #12]
 80042ee:	8a52      	ldrh	r2, [r2, #18]
 80042f0:	fb02 f303 	mul.w	r3, r2, r3
 80042f4:	440b      	add	r3, r1
 80042f6:	623b      	str	r3, [r7, #32]
        Color = Color % 4;//Guaranteed color scale is 4  --- 0~3
 80042f8:	88fb      	ldrh	r3, [r7, #6]
 80042fa:	f003 0303 	and.w	r3, r3, #3
 80042fe:	80fb      	strh	r3, [r7, #6]
        UBYTE Rdata = this->Image[Addr];
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	6a39      	ldr	r1, [r7, #32]
 8004304:	4618      	mov	r0, r3
 8004306:	f000 fe73 	bl	8004ff0 <_ZNKSt10unique_ptrIA_h15FreeRTOSDeleterEixEj>
 800430a:	4603      	mov	r3, r0
 800430c:	781b      	ldrb	r3, [r3, #0]
 800430e:	77fb      	strb	r3, [r7, #31]

        Rdata = Rdata & (~(0xC0 >> ((X % 4)*2)));
 8004310:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8004312:	f003 0303 	and.w	r3, r3, #3
 8004316:	005b      	lsls	r3, r3, #1
 8004318:	22c0      	movs	r2, #192	@ 0xc0
 800431a:	fa42 f303 	asr.w	r3, r2, r3
 800431e:	b25b      	sxtb	r3, r3
 8004320:	43db      	mvns	r3, r3
 8004322:	b25a      	sxtb	r2, r3
 8004324:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004328:	4013      	ands	r3, r2
 800432a:	b25b      	sxtb	r3, r3
 800432c:	77fb      	strb	r3, [r7, #31]
        this->Image[Addr] = Rdata | ((Color << 6) >> ((X % 4)*2));
 800432e:	88fb      	ldrh	r3, [r7, #6]
 8004330:	019a      	lsls	r2, r3, #6
 8004332:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8004334:	f003 0303 	and.w	r3, r3, #3
 8004338:	005b      	lsls	r3, r3, #1
 800433a:	fa42 f303 	asr.w	r3, r2, r3
 800433e:	b25a      	sxtb	r2, r3
 8004340:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004344:	4313      	orrs	r3, r2
 8004346:	b25c      	sxtb	r4, r3
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6a39      	ldr	r1, [r7, #32]
 800434c:	4618      	mov	r0, r3
 800434e:	f000 fe4f 	bl	8004ff0 <_ZNKSt10unique_ptrIA_h15FreeRTOSDeleterEixEj>
 8004352:	4603      	mov	r3, r0
 8004354:	b2e2      	uxtb	r2, r4
 8004356:	701a      	strb	r2, [r3, #0]
 8004358:	e044      	b.n	80043e4 <_ZN11FrameBuffer14Paint_SetPixelEttt+0x2c0>
    }else if(this->Scale == 6 || this->Scale == 7){
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	8adb      	ldrh	r3, [r3, #22]
 800435e:	2b06      	cmp	r3, #6
 8004360:	d003      	beq.n	800436a <_ZN11FrameBuffer14Paint_SetPixelEttt+0x246>
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	8adb      	ldrh	r3, [r3, #22]
 8004366:	2b07      	cmp	r3, #7
 8004368:	d13c      	bne.n	80043e4 <_ZN11FrameBuffer14Paint_SetPixelEttt+0x2c0>
		UDOUBLE Addr = X / 2  + Y * this->WidthByte;
 800436a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800436c:	085b      	lsrs	r3, r3, #1
 800436e:	b29b      	uxth	r3, r3
 8004370:	4619      	mov	r1, r3
 8004372:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8004374:	68fa      	ldr	r2, [r7, #12]
 8004376:	8a52      	ldrh	r2, [r2, #18]
 8004378:	fb02 f303 	mul.w	r3, r2, r3
 800437c:	440b      	add	r3, r1
 800437e:	62bb      	str	r3, [r7, #40]	@ 0x28
		UBYTE Rdata = this->Image[Addr];
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004384:	4618      	mov	r0, r3
 8004386:	f000 fe33 	bl	8004ff0 <_ZNKSt10unique_ptrIA_h15FreeRTOSDeleterEixEj>
 800438a:	4603      	mov	r3, r0
 800438c:	781b      	ldrb	r3, [r3, #0]
 800438e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		Rdata = Rdata & (~(0xF0 >> ((X % 2)*4)));//Clear first, then set value
 8004392:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8004394:	f003 0301 	and.w	r3, r3, #1
 8004398:	009b      	lsls	r3, r3, #2
 800439a:	22f0      	movs	r2, #240	@ 0xf0
 800439c:	fa42 f303 	asr.w	r3, r2, r3
 80043a0:	b25b      	sxtb	r3, r3
 80043a2:	43db      	mvns	r3, r3
 80043a4:	b25a      	sxtb	r2, r3
 80043a6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80043aa:	4013      	ands	r3, r2
 80043ac:	b25b      	sxtb	r3, r3
 80043ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		this->Image[Addr] = Rdata | ((Color << 4) >> ((X % 2)*4));
 80043b2:	88fb      	ldrh	r3, [r7, #6]
 80043b4:	011a      	lsls	r2, r3, #4
 80043b6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80043b8:	f003 0301 	and.w	r3, r3, #1
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	fa42 f303 	asr.w	r3, r2, r3
 80043c2:	b25a      	sxtb	r2, r3
 80043c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80043c8:	4313      	orrs	r3, r2
 80043ca:	b25c      	sxtb	r4, r3
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80043d0:	4618      	mov	r0, r3
 80043d2:	f000 fe0d 	bl	8004ff0 <_ZNKSt10unique_ptrIA_h15FreeRTOSDeleterEixEj>
 80043d6:	4603      	mov	r3, r0
 80043d8:	b2e2      	uxtb	r2, r4
 80043da:	701a      	strb	r2, [r3, #0]
 80043dc:	e002      	b.n	80043e4 <_ZN11FrameBuffer14Paint_SetPixelEttt+0x2c0>
        return;
 80043de:	bf00      	nop
 80043e0:	e000      	b.n	80043e4 <_ZN11FrameBuffer14Paint_SetPixelEttt+0x2c0>
        return;
 80043e2:	bf00      	nop
		//printf("Add =  %d ,data = %d\r\n",Addr,Rdata);
		}
}
 80043e4:	3734      	adds	r7, #52	@ 0x34
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd90      	pop	{r4, r7, pc}
 80043ea:	bf00      	nop
 80043ec:	0800fd04 	.word	0x0800fd04

080043f0 <_ZN11FrameBuffer11Paint_ClearEt>:
function: Clear the color of the picture
parameter:
    Color : Painted colors
******************************************************************************/
void FrameBuffer::Paint_Clear(UWORD Color)
{
 80043f0:	b590      	push	{r4, r7, lr}
 80043f2:	b089      	sub	sp, #36	@ 0x24
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	460b      	mov	r3, r1
 80043fa:	807b      	strh	r3, [r7, #2]
	if(this->Scale == 2) {
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	8adb      	ldrh	r3, [r3, #22]
 8004400:	2b02      	cmp	r3, #2
 8004402:	d127      	bne.n	8004454 <_ZN11FrameBuffer11Paint_ClearEt+0x64>
		for (UWORD Y = 0; Y < this->HeightByte; Y++) {
 8004404:	2300      	movs	r3, #0
 8004406:	83fb      	strh	r3, [r7, #30]
 8004408:	e01e      	b.n	8004448 <_ZN11FrameBuffer11Paint_ClearEt+0x58>
			for (UWORD X = 0; X < this->WidthByte; X++ ) {//8 pixel =  1 byte
 800440a:	2300      	movs	r3, #0
 800440c:	83bb      	strh	r3, [r7, #28]
 800440e:	e013      	b.n	8004438 <_ZN11FrameBuffer11Paint_ClearEt+0x48>
				UDOUBLE Addr = X + Y*this->WidthByte;
 8004410:	8bba      	ldrh	r2, [r7, #28]
 8004412:	8bfb      	ldrh	r3, [r7, #30]
 8004414:	6879      	ldr	r1, [r7, #4]
 8004416:	8a49      	ldrh	r1, [r1, #18]
 8004418:	fb01 f303 	mul.w	r3, r1, r3
 800441c:	4413      	add	r3, r2
 800441e:	60bb      	str	r3, [r7, #8]
				this->Image[Addr] = Color;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	68b9      	ldr	r1, [r7, #8]
 8004424:	4618      	mov	r0, r3
 8004426:	f000 fde3 	bl	8004ff0 <_ZNKSt10unique_ptrIA_h15FreeRTOSDeleterEixEj>
 800442a:	4603      	mov	r3, r0
 800442c:	887a      	ldrh	r2, [r7, #2]
 800442e:	b2d2      	uxtb	r2, r2
 8004430:	701a      	strb	r2, [r3, #0]
			for (UWORD X = 0; X < this->WidthByte; X++ ) {//8 pixel =  1 byte
 8004432:	8bbb      	ldrh	r3, [r7, #28]
 8004434:	3301      	adds	r3, #1
 8004436:	83bb      	strh	r3, [r7, #28]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	8a5b      	ldrh	r3, [r3, #18]
 800443c:	8bba      	ldrh	r2, [r7, #28]
 800443e:	429a      	cmp	r2, r3
 8004440:	d3e6      	bcc.n	8004410 <_ZN11FrameBuffer11Paint_ClearEt+0x20>
		for (UWORD Y = 0; Y < this->HeightByte; Y++) {
 8004442:	8bfb      	ldrh	r3, [r7, #30]
 8004444:	3301      	adds	r3, #1
 8004446:	83fb      	strh	r3, [r7, #30]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	8a9b      	ldrh	r3, [r3, #20]
 800444c:	8bfa      	ldrh	r2, [r7, #30]
 800444e:	429a      	cmp	r2, r3
 8004450:	d3db      	bcc.n	800440a <_ZN11FrameBuffer11Paint_ClearEt+0x1a>
				UDOUBLE Addr = X + Y*this->WidthByte;
				this->Image[Addr] = (Color<<4)|Color;
			}
		}
	}
}
 8004452:	e070      	b.n	8004536 <_ZN11FrameBuffer11Paint_ClearEt+0x146>
    }else if(this->Scale == 4) {
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	8adb      	ldrh	r3, [r3, #22]
 8004458:	2b04      	cmp	r3, #4
 800445a:	d137      	bne.n	80044cc <_ZN11FrameBuffer11Paint_ClearEt+0xdc>
        for (UWORD Y = 0; Y < this->HeightByte; Y++) {
 800445c:	2300      	movs	r3, #0
 800445e:	837b      	strh	r3, [r7, #26]
 8004460:	e02e      	b.n	80044c0 <_ZN11FrameBuffer11Paint_ClearEt+0xd0>
			for (UWORD X = 0; X < this->WidthByte; X++ ) {
 8004462:	2300      	movs	r3, #0
 8004464:	833b      	strh	r3, [r7, #24]
 8004466:	e023      	b.n	80044b0 <_ZN11FrameBuffer11Paint_ClearEt+0xc0>
				UDOUBLE Addr = X + Y*this->WidthByte;
 8004468:	8b3a      	ldrh	r2, [r7, #24]
 800446a:	8b7b      	ldrh	r3, [r7, #26]
 800446c:	6879      	ldr	r1, [r7, #4]
 800446e:	8a49      	ldrh	r1, [r1, #18]
 8004470:	fb01 f303 	mul.w	r3, r1, r3
 8004474:	4413      	add	r3, r2
 8004476:	60fb      	str	r3, [r7, #12]
				this->Image[Addr] = (Color<<6)|(Color<<4)|(Color<<2)|Color;
 8004478:	887b      	ldrh	r3, [r7, #2]
 800447a:	019b      	lsls	r3, r3, #6
 800447c:	b25a      	sxtb	r2, r3
 800447e:	887b      	ldrh	r3, [r7, #2]
 8004480:	011b      	lsls	r3, r3, #4
 8004482:	b25b      	sxtb	r3, r3
 8004484:	4313      	orrs	r3, r2
 8004486:	b25a      	sxtb	r2, r3
 8004488:	887b      	ldrh	r3, [r7, #2]
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	b25b      	sxtb	r3, r3
 800448e:	4313      	orrs	r3, r2
 8004490:	b25a      	sxtb	r2, r3
 8004492:	887b      	ldrh	r3, [r7, #2]
 8004494:	b25b      	sxtb	r3, r3
 8004496:	4313      	orrs	r3, r2
 8004498:	b25c      	sxtb	r4, r3
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	68f9      	ldr	r1, [r7, #12]
 800449e:	4618      	mov	r0, r3
 80044a0:	f000 fda6 	bl	8004ff0 <_ZNKSt10unique_ptrIA_h15FreeRTOSDeleterEixEj>
 80044a4:	4603      	mov	r3, r0
 80044a6:	b2e2      	uxtb	r2, r4
 80044a8:	701a      	strb	r2, [r3, #0]
			for (UWORD X = 0; X < this->WidthByte; X++ ) {
 80044aa:	8b3b      	ldrh	r3, [r7, #24]
 80044ac:	3301      	adds	r3, #1
 80044ae:	833b      	strh	r3, [r7, #24]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	8a5b      	ldrh	r3, [r3, #18]
 80044b4:	8b3a      	ldrh	r2, [r7, #24]
 80044b6:	429a      	cmp	r2, r3
 80044b8:	d3d6      	bcc.n	8004468 <_ZN11FrameBuffer11Paint_ClearEt+0x78>
        for (UWORD Y = 0; Y < this->HeightByte; Y++) {
 80044ba:	8b7b      	ldrh	r3, [r7, #26]
 80044bc:	3301      	adds	r3, #1
 80044be:	837b      	strh	r3, [r7, #26]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	8a9b      	ldrh	r3, [r3, #20]
 80044c4:	8b7a      	ldrh	r2, [r7, #26]
 80044c6:	429a      	cmp	r2, r3
 80044c8:	d3cb      	bcc.n	8004462 <_ZN11FrameBuffer11Paint_ClearEt+0x72>
}
 80044ca:	e034      	b.n	8004536 <_ZN11FrameBuffer11Paint_ClearEt+0x146>
	}else if(this->Scale == 6 || this->Scale == 7) {
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	8adb      	ldrh	r3, [r3, #22]
 80044d0:	2b06      	cmp	r3, #6
 80044d2:	d003      	beq.n	80044dc <_ZN11FrameBuffer11Paint_ClearEt+0xec>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	8adb      	ldrh	r3, [r3, #22]
 80044d8:	2b07      	cmp	r3, #7
 80044da:	d12c      	bne.n	8004536 <_ZN11FrameBuffer11Paint_ClearEt+0x146>
		for (UWORD Y = 0; Y < this->HeightByte; Y++) {
 80044dc:	2300      	movs	r3, #0
 80044de:	82fb      	strh	r3, [r7, #22]
 80044e0:	e024      	b.n	800452c <_ZN11FrameBuffer11Paint_ClearEt+0x13c>
			for (UWORD X = 0; X < this->WidthByte; X++ ) {
 80044e2:	2300      	movs	r3, #0
 80044e4:	82bb      	strh	r3, [r7, #20]
 80044e6:	e019      	b.n	800451c <_ZN11FrameBuffer11Paint_ClearEt+0x12c>
				UDOUBLE Addr = X + Y*this->WidthByte;
 80044e8:	8aba      	ldrh	r2, [r7, #20]
 80044ea:	8afb      	ldrh	r3, [r7, #22]
 80044ec:	6879      	ldr	r1, [r7, #4]
 80044ee:	8a49      	ldrh	r1, [r1, #18]
 80044f0:	fb01 f303 	mul.w	r3, r1, r3
 80044f4:	4413      	add	r3, r2
 80044f6:	613b      	str	r3, [r7, #16]
				this->Image[Addr] = (Color<<4)|Color;
 80044f8:	887b      	ldrh	r3, [r7, #2]
 80044fa:	011b      	lsls	r3, r3, #4
 80044fc:	b25a      	sxtb	r2, r3
 80044fe:	887b      	ldrh	r3, [r7, #2]
 8004500:	b25b      	sxtb	r3, r3
 8004502:	4313      	orrs	r3, r2
 8004504:	b25c      	sxtb	r4, r3
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6939      	ldr	r1, [r7, #16]
 800450a:	4618      	mov	r0, r3
 800450c:	f000 fd70 	bl	8004ff0 <_ZNKSt10unique_ptrIA_h15FreeRTOSDeleterEixEj>
 8004510:	4603      	mov	r3, r0
 8004512:	b2e2      	uxtb	r2, r4
 8004514:	701a      	strb	r2, [r3, #0]
			for (UWORD X = 0; X < this->WidthByte; X++ ) {
 8004516:	8abb      	ldrh	r3, [r7, #20]
 8004518:	3301      	adds	r3, #1
 800451a:	82bb      	strh	r3, [r7, #20]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	8a5b      	ldrh	r3, [r3, #18]
 8004520:	8aba      	ldrh	r2, [r7, #20]
 8004522:	429a      	cmp	r2, r3
 8004524:	d3e0      	bcc.n	80044e8 <_ZN11FrameBuffer11Paint_ClearEt+0xf8>
		for (UWORD Y = 0; Y < this->HeightByte; Y++) {
 8004526:	8afb      	ldrh	r3, [r7, #22]
 8004528:	3301      	adds	r3, #1
 800452a:	82fb      	strh	r3, [r7, #22]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	8a9b      	ldrh	r3, [r3, #20]
 8004530:	8afa      	ldrh	r2, [r7, #22]
 8004532:	429a      	cmp	r2, r3
 8004534:	d3d5      	bcc.n	80044e2 <_ZN11FrameBuffer11Paint_ClearEt+0xf2>
}
 8004536:	bf00      	nop
 8004538:	3724      	adds	r7, #36	@ 0x24
 800453a:	46bd      	mov	sp, r7
 800453c:	bd90      	pop	{r4, r7, pc}

0800453e <_ZN11FrameBuffer18Paint_ClearWindowsEttttt>:
    Xend   : x end point
    Yend   : y end point
    Color  : Painted colors
******************************************************************************/
void FrameBuffer::Paint_ClearWindows(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend, UWORD Color)
{
 800453e:	b580      	push	{r7, lr}
 8004540:	b086      	sub	sp, #24
 8004542:	af00      	add	r7, sp, #0
 8004544:	60f8      	str	r0, [r7, #12]
 8004546:	4608      	mov	r0, r1
 8004548:	4611      	mov	r1, r2
 800454a:	461a      	mov	r2, r3
 800454c:	4603      	mov	r3, r0
 800454e:	817b      	strh	r3, [r7, #10]
 8004550:	460b      	mov	r3, r1
 8004552:	813b      	strh	r3, [r7, #8]
 8004554:	4613      	mov	r3, r2
 8004556:	80fb      	strh	r3, [r7, #6]
    UWORD X, Y;
    for (Y = Ystart; Y < Yend; Y++) {
 8004558:	893b      	ldrh	r3, [r7, #8]
 800455a:	82bb      	strh	r3, [r7, #20]
 800455c:	e012      	b.n	8004584 <_ZN11FrameBuffer18Paint_ClearWindowsEttttt+0x46>
        for (X = Xstart; X < Xend; X++) {//8 pixel =  1 byte
 800455e:	897b      	ldrh	r3, [r7, #10]
 8004560:	82fb      	strh	r3, [r7, #22]
 8004562:	e008      	b.n	8004576 <_ZN11FrameBuffer18Paint_ClearWindowsEttttt+0x38>
            Paint_SetPixel(X, Y, Color);
 8004564:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004566:	8aba      	ldrh	r2, [r7, #20]
 8004568:	8af9      	ldrh	r1, [r7, #22]
 800456a:	68f8      	ldr	r0, [r7, #12]
 800456c:	f7ff fdda 	bl	8004124 <_ZN11FrameBuffer14Paint_SetPixelEttt>
        for (X = Xstart; X < Xend; X++) {//8 pixel =  1 byte
 8004570:	8afb      	ldrh	r3, [r7, #22]
 8004572:	3301      	adds	r3, #1
 8004574:	82fb      	strh	r3, [r7, #22]
 8004576:	8afa      	ldrh	r2, [r7, #22]
 8004578:	88fb      	ldrh	r3, [r7, #6]
 800457a:	429a      	cmp	r2, r3
 800457c:	d3f2      	bcc.n	8004564 <_ZN11FrameBuffer18Paint_ClearWindowsEttttt+0x26>
    for (Y = Ystart; Y < Yend; Y++) {
 800457e:	8abb      	ldrh	r3, [r7, #20]
 8004580:	3301      	adds	r3, #1
 8004582:	82bb      	strh	r3, [r7, #20]
 8004584:	8aba      	ldrh	r2, [r7, #20]
 8004586:	8c3b      	ldrh	r3, [r7, #32]
 8004588:	429a      	cmp	r2, r3
 800458a:	d3e8      	bcc.n	800455e <_ZN11FrameBuffer18Paint_ClearWindowsEttttt+0x20>
        }
    }
}
 800458c:	bf00      	nop
 800458e:	bf00      	nop
 8004590:	3718      	adds	r7, #24
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}

08004596 <_ZN11FrameBuffer15Paint_DrawPointEttt9DOT_PIXEL9DOT_STYLE>:
    Dot_Pixel	: point size
    Dot_Style	: point Style
******************************************************************************/
void FrameBuffer::Paint_DrawPoint(UWORD Xpoint, UWORD Ypoint, UWORD Color,
                     DOT_PIXEL Dot_Pixel, DOT_STYLE Dot_Style)
{
 8004596:	b580      	push	{r7, lr}
 8004598:	b086      	sub	sp, #24
 800459a:	af00      	add	r7, sp, #0
 800459c:	60f8      	str	r0, [r7, #12]
 800459e:	4608      	mov	r0, r1
 80045a0:	4611      	mov	r1, r2
 80045a2:	461a      	mov	r2, r3
 80045a4:	4603      	mov	r3, r0
 80045a6:	817b      	strh	r3, [r7, #10]
 80045a8:	460b      	mov	r3, r1
 80045aa:	813b      	strh	r3, [r7, #8]
 80045ac:	4613      	mov	r3, r2
 80045ae:	80fb      	strh	r3, [r7, #6]
    if (Xpoint > this->Width || Ypoint > this->Height) {
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	889b      	ldrh	r3, [r3, #4]
 80045b4:	897a      	ldrh	r2, [r7, #10]
 80045b6:	429a      	cmp	r2, r3
 80045b8:	f200 8083 	bhi.w	80046c2 <_ZN11FrameBuffer15Paint_DrawPointEttt9DOT_PIXEL9DOT_STYLE+0x12c>
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	88db      	ldrh	r3, [r3, #6]
 80045c0:	893a      	ldrh	r2, [r7, #8]
 80045c2:	429a      	cmp	r2, r3
 80045c4:	d87d      	bhi.n	80046c2 <_ZN11FrameBuffer15Paint_DrawPointEttt9DOT_PIXEL9DOT_STYLE+0x12c>
//				printf("Ypoint = %d , this->Height = %d  \r\n ",Ypoint,this->Height);
        return;
    }

    int16_t XDir_Num , YDir_Num;
    if (Dot_Style == DOT_FILL_AROUND) {
 80045c6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d14a      	bne.n	8004664 <_ZN11FrameBuffer15Paint_DrawPointEttt9DOT_PIXEL9DOT_STYLE+0xce>
        for (XDir_Num = 0; XDir_Num < 2 * Dot_Pixel - 1; XDir_Num++) {
 80045ce:	2300      	movs	r3, #0
 80045d0:	82fb      	strh	r3, [r7, #22]
 80045d2:	e03e      	b.n	8004652 <_ZN11FrameBuffer15Paint_DrawPointEttt9DOT_PIXEL9DOT_STYLE+0xbc>
            for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 80045d4:	2300      	movs	r3, #0
 80045d6:	82bb      	strh	r3, [r7, #20]
 80045d8:	e02d      	b.n	8004636 <_ZN11FrameBuffer15Paint_DrawPointEttt9DOT_PIXEL9DOT_STYLE+0xa0>
                if(Xpoint + XDir_Num - Dot_Pixel < 0 || Ypoint + YDir_Num - Dot_Pixel < 0)
 80045da:	897a      	ldrh	r2, [r7, #10]
 80045dc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80045e0:	441a      	add	r2, r3
 80045e2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80045e6:	1ad3      	subs	r3, r2, r3
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	db2c      	blt.n	8004646 <_ZN11FrameBuffer15Paint_DrawPointEttt9DOT_PIXEL9DOT_STYLE+0xb0>
 80045ec:	893a      	ldrh	r2, [r7, #8]
 80045ee:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80045f2:	441a      	add	r2, r3
 80045f4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80045f8:	1ad3      	subs	r3, r2, r3
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	db23      	blt.n	8004646 <_ZN11FrameBuffer15Paint_DrawPointEttt9DOT_PIXEL9DOT_STYLE+0xb0>
                    break;
                // printf("x = %d, y = %d\r\n", Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel);
                Paint_SetPixel(Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel, Color);
 80045fe:	8afa      	ldrh	r2, [r7, #22]
 8004600:	897b      	ldrh	r3, [r7, #10]
 8004602:	4413      	add	r3, r2
 8004604:	b29a      	uxth	r2, r3
 8004606:	f897 3020 	ldrb.w	r3, [r7, #32]
 800460a:	b29b      	uxth	r3, r3
 800460c:	1ad3      	subs	r3, r2, r3
 800460e:	b299      	uxth	r1, r3
 8004610:	8aba      	ldrh	r2, [r7, #20]
 8004612:	893b      	ldrh	r3, [r7, #8]
 8004614:	4413      	add	r3, r2
 8004616:	b29a      	uxth	r2, r3
 8004618:	f897 3020 	ldrb.w	r3, [r7, #32]
 800461c:	b29b      	uxth	r3, r3
 800461e:	1ad3      	subs	r3, r2, r3
 8004620:	b29a      	uxth	r2, r3
 8004622:	88fb      	ldrh	r3, [r7, #6]
 8004624:	68f8      	ldr	r0, [r7, #12]
 8004626:	f7ff fd7d 	bl	8004124 <_ZN11FrameBuffer14Paint_SetPixelEttt>
            for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 800462a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800462e:	b29b      	uxth	r3, r3
 8004630:	3301      	adds	r3, #1
 8004632:	b29b      	uxth	r3, r3
 8004634:	82bb      	strh	r3, [r7, #20]
 8004636:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800463a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800463e:	005b      	lsls	r3, r3, #1
 8004640:	3b01      	subs	r3, #1
 8004642:	429a      	cmp	r2, r3
 8004644:	dbc9      	blt.n	80045da <_ZN11FrameBuffer15Paint_DrawPointEttt9DOT_PIXEL9DOT_STYLE+0x44>
        for (XDir_Num = 0; XDir_Num < 2 * Dot_Pixel - 1; XDir_Num++) {
 8004646:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800464a:	b29b      	uxth	r3, r3
 800464c:	3301      	adds	r3, #1
 800464e:	b29b      	uxth	r3, r3
 8004650:	82fb      	strh	r3, [r7, #22]
 8004652:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8004656:	f897 3020 	ldrb.w	r3, [r7, #32]
 800465a:	005b      	lsls	r3, r3, #1
 800465c:	3b01      	subs	r3, #1
 800465e:	429a      	cmp	r2, r3
 8004660:	dbb8      	blt.n	80045d4 <_ZN11FrameBuffer15Paint_DrawPointEttt9DOT_PIXEL9DOT_STYLE+0x3e>
 8004662:	e02f      	b.n	80046c4 <_ZN11FrameBuffer15Paint_DrawPointEttt9DOT_PIXEL9DOT_STYLE+0x12e>
            }
        }
    } else {
        for (XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++) {
 8004664:	2300      	movs	r3, #0
 8004666:	82fb      	strh	r3, [r7, #22]
 8004668:	e024      	b.n	80046b4 <_ZN11FrameBuffer15Paint_DrawPointEttt9DOT_PIXEL9DOT_STYLE+0x11e>
            for (YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++) {
 800466a:	2300      	movs	r3, #0
 800466c:	82bb      	strh	r3, [r7, #20]
 800466e:	e015      	b.n	800469c <_ZN11FrameBuffer15Paint_DrawPointEttt9DOT_PIXEL9DOT_STYLE+0x106>
                Paint_SetPixel(Xpoint + XDir_Num - 1, Ypoint + YDir_Num - 1, Color);
 8004670:	8afa      	ldrh	r2, [r7, #22]
 8004672:	897b      	ldrh	r3, [r7, #10]
 8004674:	4413      	add	r3, r2
 8004676:	b29b      	uxth	r3, r3
 8004678:	3b01      	subs	r3, #1
 800467a:	b299      	uxth	r1, r3
 800467c:	8aba      	ldrh	r2, [r7, #20]
 800467e:	893b      	ldrh	r3, [r7, #8]
 8004680:	4413      	add	r3, r2
 8004682:	b29b      	uxth	r3, r3
 8004684:	3b01      	subs	r3, #1
 8004686:	b29a      	uxth	r2, r3
 8004688:	88fb      	ldrh	r3, [r7, #6]
 800468a:	68f8      	ldr	r0, [r7, #12]
 800468c:	f7ff fd4a 	bl	8004124 <_ZN11FrameBuffer14Paint_SetPixelEttt>
            for (YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++) {
 8004690:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004694:	b29b      	uxth	r3, r3
 8004696:	3301      	adds	r3, #1
 8004698:	b29b      	uxth	r3, r3
 800469a:	82bb      	strh	r3, [r7, #20]
 800469c:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80046a0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80046a4:	429a      	cmp	r2, r3
 80046a6:	dbe3      	blt.n	8004670 <_ZN11FrameBuffer15Paint_DrawPointEttt9DOT_PIXEL9DOT_STYLE+0xda>
        for (XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++) {
 80046a8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80046ac:	b29b      	uxth	r3, r3
 80046ae:	3301      	adds	r3, #1
 80046b0:	b29b      	uxth	r3, r3
 80046b2:	82fb      	strh	r3, [r7, #22]
 80046b4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80046b8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80046bc:	429a      	cmp	r2, r3
 80046be:	dbd4      	blt.n	800466a <_ZN11FrameBuffer15Paint_DrawPointEttt9DOT_PIXEL9DOT_STYLE+0xd4>
 80046c0:	e000      	b.n	80046c4 <_ZN11FrameBuffer15Paint_DrawPointEttt9DOT_PIXEL9DOT_STYLE+0x12e>
        return;
 80046c2:	bf00      	nop
            }
        }
    }
}
 80046c4:	3718      	adds	r7, #24
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}
	...

080046cc <_ZN11FrameBuffer14Paint_DrawLineEttttt9DOT_PIXEL10LINE_STYLE>:
    Line_width : Line width
    Line_Style: Solid and dotted lines
******************************************************************************/
void FrameBuffer::Paint_DrawLine(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend,
                    UWORD Color, DOT_PIXEL Line_width, LINE_STYLE Line_Style)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b08e      	sub	sp, #56	@ 0x38
 80046d0:	af02      	add	r7, sp, #8
 80046d2:	60f8      	str	r0, [r7, #12]
 80046d4:	4608      	mov	r0, r1
 80046d6:	4611      	mov	r1, r2
 80046d8:	461a      	mov	r2, r3
 80046da:	4603      	mov	r3, r0
 80046dc:	817b      	strh	r3, [r7, #10]
 80046de:	460b      	mov	r3, r1
 80046e0:	813b      	strh	r3, [r7, #8]
 80046e2:	4613      	mov	r3, r2
 80046e4:	80fb      	strh	r3, [r7, #6]
    if (Xstart > this->Width || Ystart > this->Height ||
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	889b      	ldrh	r3, [r3, #4]
 80046ea:	897a      	ldrh	r2, [r7, #10]
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d80e      	bhi.n	800470e <_ZN11FrameBuffer14Paint_DrawLineEttttt9DOT_PIXEL10LINE_STYLE+0x42>
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	88db      	ldrh	r3, [r3, #6]
 80046f4:	893a      	ldrh	r2, [r7, #8]
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d809      	bhi.n	800470e <_ZN11FrameBuffer14Paint_DrawLineEttttt9DOT_PIXEL10LINE_STYLE+0x42>
        Xend > this->Width || Yend > this->Height) {
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	889b      	ldrh	r3, [r3, #4]
    if (Xstart > this->Width || Ystart > this->Height ||
 80046fe:	88fa      	ldrh	r2, [r7, #6]
 8004700:	429a      	cmp	r2, r3
 8004702:	d804      	bhi.n	800470e <_ZN11FrameBuffer14Paint_DrawLineEttttt9DOT_PIXEL10LINE_STYLE+0x42>
        Xend > this->Width || Yend > this->Height) {
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	88db      	ldrh	r3, [r3, #6]
 8004708:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 800470a:	429a      	cmp	r2, r3
 800470c:	d904      	bls.n	8004718 <_ZN11FrameBuffer14Paint_DrawLineEttttt9DOT_PIXEL10LINE_STYLE+0x4c>
        Debug("Paint_DrawLine Input exceeds the normal display range\r\n");
 800470e:	4946      	ldr	r1, [pc, #280]	@ (8004828 <_ZN11FrameBuffer14Paint_DrawLineEttttt9DOT_PIXEL10LINE_STYLE+0x15c>)
 8004710:	2004      	movs	r0, #4
 8004712:	f7fc fb99 	bl	8000e48 <_Z12log_message2hPKcz>
        return;
 8004716:	e084      	b.n	8004822 <_ZN11FrameBuffer14Paint_DrawLineEttttt9DOT_PIXEL10LINE_STYLE+0x156>
    }

    UWORD Xpoint = Xstart;
 8004718:	897b      	ldrh	r3, [r7, #10]
 800471a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    UWORD Ypoint = Ystart;
 800471c:	893b      	ldrh	r3, [r7, #8]
 800471e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    int dx = (int)Xend - (int)Xstart >= 0 ? Xend - Xstart : Xstart - Xend;
 8004720:	88fa      	ldrh	r2, [r7, #6]
 8004722:	897b      	ldrh	r3, [r7, #10]
 8004724:	1ad3      	subs	r3, r2, r3
 8004726:	2b00      	cmp	r3, #0
 8004728:	bfb8      	it	lt
 800472a:	425b      	neglt	r3, r3
 800472c:	623b      	str	r3, [r7, #32]
    int dy = (int)Yend - (int)Ystart <= 0 ? Yend - Ystart : Ystart - Yend;
 800472e:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8004730:	893b      	ldrh	r3, [r7, #8]
 8004732:	1ad3      	subs	r3, r2, r3
 8004734:	2b00      	cmp	r3, #0
 8004736:	bfb8      	it	lt
 8004738:	425b      	neglt	r3, r3
 800473a:	425b      	negs	r3, r3
 800473c:	61fb      	str	r3, [r7, #28]

    // Increment direction, 1 is positive, -1 is counter;
    int XAddway = Xstart < Xend ? 1 : -1;
 800473e:	897a      	ldrh	r2, [r7, #10]
 8004740:	88fb      	ldrh	r3, [r7, #6]
 8004742:	429a      	cmp	r2, r3
 8004744:	d201      	bcs.n	800474a <_ZN11FrameBuffer14Paint_DrawLineEttttt9DOT_PIXEL10LINE_STYLE+0x7e>
 8004746:	2301      	movs	r3, #1
 8004748:	e001      	b.n	800474e <_ZN11FrameBuffer14Paint_DrawLineEttttt9DOT_PIXEL10LINE_STYLE+0x82>
 800474a:	f04f 33ff 	mov.w	r3, #4294967295
 800474e:	61bb      	str	r3, [r7, #24]
    int YAddway = Ystart < Yend ? 1 : -1;
 8004750:	893a      	ldrh	r2, [r7, #8]
 8004752:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004754:	429a      	cmp	r2, r3
 8004756:	d201      	bcs.n	800475c <_ZN11FrameBuffer14Paint_DrawLineEttttt9DOT_PIXEL10LINE_STYLE+0x90>
 8004758:	2301      	movs	r3, #1
 800475a:	e001      	b.n	8004760 <_ZN11FrameBuffer14Paint_DrawLineEttttt9DOT_PIXEL10LINE_STYLE+0x94>
 800475c:	f04f 33ff 	mov.w	r3, #4294967295
 8004760:	617b      	str	r3, [r7, #20]

    //Cumulative error
    int Esp = dx + dy;
 8004762:	6a3a      	ldr	r2, [r7, #32]
 8004764:	69fb      	ldr	r3, [r7, #28]
 8004766:	4413      	add	r3, r2
 8004768:	62bb      	str	r3, [r7, #40]	@ 0x28
    char Dotted_Len = 0;
 800476a:	2300      	movs	r3, #0
 800476c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    for (;;) {
        Dotted_Len++;
 8004770:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004774:	3301      	adds	r3, #1
 8004776:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        //Painted dotted line, 2 point is really virtual
        if (Line_Style == LINE_STYLE_DOTTED && Dotted_Len % 3 == 0) {
 800477a:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800477e:	2b01      	cmp	r3, #1
 8004780:	d11b      	bne.n	80047ba <_ZN11FrameBuffer14Paint_DrawLineEttttt9DOT_PIXEL10LINE_STYLE+0xee>
 8004782:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8004786:	4b29      	ldr	r3, [pc, #164]	@ (800482c <_ZN11FrameBuffer14Paint_DrawLineEttttt9DOT_PIXEL10LINE_STYLE+0x160>)
 8004788:	fba3 1302 	umull	r1, r3, r3, r2
 800478c:	0859      	lsrs	r1, r3, #1
 800478e:	460b      	mov	r3, r1
 8004790:	005b      	lsls	r3, r3, #1
 8004792:	440b      	add	r3, r1
 8004794:	1ad3      	subs	r3, r2, r3
 8004796:	b2db      	uxtb	r3, r3
 8004798:	2b00      	cmp	r3, #0
 800479a:	d10e      	bne.n	80047ba <_ZN11FrameBuffer14Paint_DrawLineEttttt9DOT_PIXEL10LINE_STYLE+0xee>
            //Debug("LINE_DOTTED\r\n");
            Paint_DrawPoint(Xpoint, Ypoint, IMAGE_BACKGROUND, Line_width, DOT_STYLE_DFT);
 800479c:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800479e:	8df9      	ldrh	r1, [r7, #46]	@ 0x2e
 80047a0:	2301      	movs	r3, #1
 80047a2:	9301      	str	r3, [sp, #4]
 80047a4:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80047a8:	9300      	str	r3, [sp, #0]
 80047aa:	23ff      	movs	r3, #255	@ 0xff
 80047ac:	68f8      	ldr	r0, [r7, #12]
 80047ae:	f7ff fef2 	bl	8004596 <_ZN11FrameBuffer15Paint_DrawPointEttt9DOT_PIXEL9DOT_STYLE>
            Dotted_Len = 0;
 80047b2:	2300      	movs	r3, #0
 80047b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80047b8:	e00b      	b.n	80047d2 <_ZN11FrameBuffer14Paint_DrawLineEttttt9DOT_PIXEL10LINE_STYLE+0x106>
        } else {
            Paint_DrawPoint(Xpoint, Ypoint, Color, Line_width, DOT_STYLE_DFT);
 80047ba:	8fb8      	ldrh	r0, [r7, #60]	@ 0x3c
 80047bc:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 80047be:	8df9      	ldrh	r1, [r7, #46]	@ 0x2e
 80047c0:	2301      	movs	r3, #1
 80047c2:	9301      	str	r3, [sp, #4]
 80047c4:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80047c8:	9300      	str	r3, [sp, #0]
 80047ca:	4603      	mov	r3, r0
 80047cc:	68f8      	ldr	r0, [r7, #12]
 80047ce:	f7ff fee2 	bl	8004596 <_ZN11FrameBuffer15Paint_DrawPointEttt9DOT_PIXEL9DOT_STYLE>
        }
        if (2 * Esp >= dy) {
 80047d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047d4:	005b      	lsls	r3, r3, #1
 80047d6:	69fa      	ldr	r2, [r7, #28]
 80047d8:	429a      	cmp	r2, r3
 80047da:	dc0c      	bgt.n	80047f6 <_ZN11FrameBuffer14Paint_DrawLineEttttt9DOT_PIXEL10LINE_STYLE+0x12a>
            if (Xpoint == Xend)
 80047dc:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80047de:	88fb      	ldrh	r3, [r7, #6]
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d01b      	beq.n	800481c <_ZN11FrameBuffer14Paint_DrawLineEttttt9DOT_PIXEL10LINE_STYLE+0x150>
                break;
            Esp += dy;
 80047e4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80047e6:	69fb      	ldr	r3, [r7, #28]
 80047e8:	4413      	add	r3, r2
 80047ea:	62bb      	str	r3, [r7, #40]	@ 0x28
            Xpoint += XAddway;
 80047ec:	69bb      	ldr	r3, [r7, #24]
 80047ee:	b29a      	uxth	r2, r3
 80047f0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80047f2:	4413      	add	r3, r2
 80047f4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
        }
        if (2 * Esp <= dx) {
 80047f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047f8:	005b      	lsls	r3, r3, #1
 80047fa:	6a3a      	ldr	r2, [r7, #32]
 80047fc:	429a      	cmp	r2, r3
 80047fe:	dbb7      	blt.n	8004770 <_ZN11FrameBuffer14Paint_DrawLineEttttt9DOT_PIXEL10LINE_STYLE+0xa4>
            if (Ypoint == Yend)
 8004800:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8004802:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004804:	429a      	cmp	r2, r3
 8004806:	d00b      	beq.n	8004820 <_ZN11FrameBuffer14Paint_DrawLineEttttt9DOT_PIXEL10LINE_STYLE+0x154>
                break;
            Esp += dx;
 8004808:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800480a:	6a3b      	ldr	r3, [r7, #32]
 800480c:	4413      	add	r3, r2
 800480e:	62bb      	str	r3, [r7, #40]	@ 0x28
            Ypoint += YAddway;
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	b29a      	uxth	r2, r3
 8004814:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8004816:	4413      	add	r3, r2
 8004818:	85bb      	strh	r3, [r7, #44]	@ 0x2c
        Dotted_Len++;
 800481a:	e7a9      	b.n	8004770 <_ZN11FrameBuffer14Paint_DrawLineEttttt9DOT_PIXEL10LINE_STYLE+0xa4>
                break;
 800481c:	bf00      	nop
 800481e:	e000      	b.n	8004822 <_ZN11FrameBuffer14Paint_DrawLineEttttt9DOT_PIXEL10LINE_STYLE+0x156>
                break;
 8004820:	bf00      	nop
        }
    }
}
 8004822:	3730      	adds	r7, #48	@ 0x30
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}
 8004828:	0800fd30 	.word	0x0800fd30
 800482c:	aaaaaaab 	.word	0xaaaaaaab

08004830 <_ZN11FrameBuffer19Paint_DrawRectangleEttttt9DOT_PIXEL9DRAW_FILL>:
    Line_width: Line width
    Draw_Fill : Whether to fill the inside of the rectangle
******************************************************************************/
void FrameBuffer::Paint_DrawRectangle(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend,
                         UWORD Color, DOT_PIXEL Line_width, DRAW_FILL Draw_Fill)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b08a      	sub	sp, #40	@ 0x28
 8004834:	af04      	add	r7, sp, #16
 8004836:	60f8      	str	r0, [r7, #12]
 8004838:	4608      	mov	r0, r1
 800483a:	4611      	mov	r1, r2
 800483c:	461a      	mov	r2, r3
 800483e:	4603      	mov	r3, r0
 8004840:	817b      	strh	r3, [r7, #10]
 8004842:	460b      	mov	r3, r1
 8004844:	813b      	strh	r3, [r7, #8]
 8004846:	4613      	mov	r3, r2
 8004848:	80fb      	strh	r3, [r7, #6]
    if (Xstart > this->Width || Ystart > this->Height ||
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	889b      	ldrh	r3, [r3, #4]
 800484e:	897a      	ldrh	r2, [r7, #10]
 8004850:	429a      	cmp	r2, r3
 8004852:	d80e      	bhi.n	8004872 <_ZN11FrameBuffer19Paint_DrawRectangleEttttt9DOT_PIXEL9DRAW_FILL+0x42>
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	88db      	ldrh	r3, [r3, #6]
 8004858:	893a      	ldrh	r2, [r7, #8]
 800485a:	429a      	cmp	r2, r3
 800485c:	d809      	bhi.n	8004872 <_ZN11FrameBuffer19Paint_DrawRectangleEttttt9DOT_PIXEL9DRAW_FILL+0x42>
        Xend > this->Width || Yend > this->Height) {
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	889b      	ldrh	r3, [r3, #4]
    if (Xstart > this->Width || Ystart > this->Height ||
 8004862:	88fa      	ldrh	r2, [r7, #6]
 8004864:	429a      	cmp	r2, r3
 8004866:	d804      	bhi.n	8004872 <_ZN11FrameBuffer19Paint_DrawRectangleEttttt9DOT_PIXEL9DRAW_FILL+0x42>
        Xend > this->Width || Yend > this->Height) {
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	88db      	ldrh	r3, [r3, #6]
 800486c:	8c3a      	ldrh	r2, [r7, #32]
 800486e:	429a      	cmp	r2, r3
 8004870:	d904      	bls.n	800487c <_ZN11FrameBuffer19Paint_DrawRectangleEttttt9DOT_PIXEL9DRAW_FILL+0x4c>
        Debug("Input exceeds the normal display range\r\n");
 8004872:	4933      	ldr	r1, [pc, #204]	@ (8004940 <_ZN11FrameBuffer19Paint_DrawRectangleEttttt9DOT_PIXEL9DRAW_FILL+0x110>)
 8004874:	2004      	movs	r0, #4
 8004876:	f7fc fae7 	bl	8000e48 <_Z12log_message2hPKcz>
        return;
 800487a:	e05e      	b.n	800493a <_ZN11FrameBuffer19Paint_DrawRectangleEttttt9DOT_PIXEL9DRAW_FILL+0x10a>
    }

    if (Draw_Fill) {
 800487c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8004880:	2b00      	cmp	r3, #0
 8004882:	d01a      	beq.n	80048ba <_ZN11FrameBuffer19Paint_DrawRectangleEttttt9DOT_PIXEL9DRAW_FILL+0x8a>
        UWORD Ypoint;
        for(Ypoint = Ystart; Ypoint < Yend; Ypoint++) {
 8004884:	893b      	ldrh	r3, [r7, #8]
 8004886:	82fb      	strh	r3, [r7, #22]
 8004888:	e012      	b.n	80048b0 <_ZN11FrameBuffer19Paint_DrawRectangleEttttt9DOT_PIXEL9DRAW_FILL+0x80>
            Paint_DrawLine(Xstart, Ypoint, Xend, Ypoint, Color , Line_width, LINE_STYLE_SOLID);
 800488a:	88f8      	ldrh	r0, [r7, #6]
 800488c:	8afa      	ldrh	r2, [r7, #22]
 800488e:	8979      	ldrh	r1, [r7, #10]
 8004890:	2300      	movs	r3, #0
 8004892:	9303      	str	r3, [sp, #12]
 8004894:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004898:	9302      	str	r3, [sp, #8]
 800489a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800489c:	9301      	str	r3, [sp, #4]
 800489e:	8afb      	ldrh	r3, [r7, #22]
 80048a0:	9300      	str	r3, [sp, #0]
 80048a2:	4603      	mov	r3, r0
 80048a4:	68f8      	ldr	r0, [r7, #12]
 80048a6:	f7ff ff11 	bl	80046cc <_ZN11FrameBuffer14Paint_DrawLineEttttt9DOT_PIXEL10LINE_STYLE>
        for(Ypoint = Ystart; Ypoint < Yend; Ypoint++) {
 80048aa:	8afb      	ldrh	r3, [r7, #22]
 80048ac:	3301      	adds	r3, #1
 80048ae:	82fb      	strh	r3, [r7, #22]
 80048b0:	8afa      	ldrh	r2, [r7, #22]
 80048b2:	8c3b      	ldrh	r3, [r7, #32]
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d3e8      	bcc.n	800488a <_ZN11FrameBuffer19Paint_DrawRectangleEttttt9DOT_PIXEL9DRAW_FILL+0x5a>
 80048b8:	e03f      	b.n	800493a <_ZN11FrameBuffer19Paint_DrawRectangleEttttt9DOT_PIXEL9DRAW_FILL+0x10a>
        }
    } else {
        Paint_DrawLine(Xstart, Ystart, Xend, Ystart, Color, Line_width, LINE_STYLE_SOLID);
 80048ba:	88f8      	ldrh	r0, [r7, #6]
 80048bc:	893a      	ldrh	r2, [r7, #8]
 80048be:	8979      	ldrh	r1, [r7, #10]
 80048c0:	2300      	movs	r3, #0
 80048c2:	9303      	str	r3, [sp, #12]
 80048c4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80048c8:	9302      	str	r3, [sp, #8]
 80048ca:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80048cc:	9301      	str	r3, [sp, #4]
 80048ce:	893b      	ldrh	r3, [r7, #8]
 80048d0:	9300      	str	r3, [sp, #0]
 80048d2:	4603      	mov	r3, r0
 80048d4:	68f8      	ldr	r0, [r7, #12]
 80048d6:	f7ff fef9 	bl	80046cc <_ZN11FrameBuffer14Paint_DrawLineEttttt9DOT_PIXEL10LINE_STYLE>
        Paint_DrawLine(Xstart, Ystart, Xstart, Yend, Color, Line_width, LINE_STYLE_SOLID);
 80048da:	8978      	ldrh	r0, [r7, #10]
 80048dc:	893a      	ldrh	r2, [r7, #8]
 80048de:	8979      	ldrh	r1, [r7, #10]
 80048e0:	2300      	movs	r3, #0
 80048e2:	9303      	str	r3, [sp, #12]
 80048e4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80048e8:	9302      	str	r3, [sp, #8]
 80048ea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80048ec:	9301      	str	r3, [sp, #4]
 80048ee:	8c3b      	ldrh	r3, [r7, #32]
 80048f0:	9300      	str	r3, [sp, #0]
 80048f2:	4603      	mov	r3, r0
 80048f4:	68f8      	ldr	r0, [r7, #12]
 80048f6:	f7ff fee9 	bl	80046cc <_ZN11FrameBuffer14Paint_DrawLineEttttt9DOT_PIXEL10LINE_STYLE>
        Paint_DrawLine(Xend, Yend, Xend, Ystart, Color, Line_width, LINE_STYLE_SOLID);
 80048fa:	88f8      	ldrh	r0, [r7, #6]
 80048fc:	8c3a      	ldrh	r2, [r7, #32]
 80048fe:	88f9      	ldrh	r1, [r7, #6]
 8004900:	2300      	movs	r3, #0
 8004902:	9303      	str	r3, [sp, #12]
 8004904:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004908:	9302      	str	r3, [sp, #8]
 800490a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800490c:	9301      	str	r3, [sp, #4]
 800490e:	893b      	ldrh	r3, [r7, #8]
 8004910:	9300      	str	r3, [sp, #0]
 8004912:	4603      	mov	r3, r0
 8004914:	68f8      	ldr	r0, [r7, #12]
 8004916:	f7ff fed9 	bl	80046cc <_ZN11FrameBuffer14Paint_DrawLineEttttt9DOT_PIXEL10LINE_STYLE>
        Paint_DrawLine(Xend, Yend, Xstart, Yend, Color, Line_width, LINE_STYLE_SOLID);
 800491a:	8978      	ldrh	r0, [r7, #10]
 800491c:	8c3a      	ldrh	r2, [r7, #32]
 800491e:	88f9      	ldrh	r1, [r7, #6]
 8004920:	2300      	movs	r3, #0
 8004922:	9303      	str	r3, [sp, #12]
 8004924:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004928:	9302      	str	r3, [sp, #8]
 800492a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800492c:	9301      	str	r3, [sp, #4]
 800492e:	8c3b      	ldrh	r3, [r7, #32]
 8004930:	9300      	str	r3, [sp, #0]
 8004932:	4603      	mov	r3, r0
 8004934:	68f8      	ldr	r0, [r7, #12]
 8004936:	f7ff fec9 	bl	80046cc <_ZN11FrameBuffer14Paint_DrawLineEttttt9DOT_PIXEL10LINE_STYLE>
    }
}
 800493a:	3718      	adds	r7, #24
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}
 8004940:	0800fd74 	.word	0x0800fd74

08004944 <_ZN11FrameBuffer14Paint_DrawCharEttcP6_tFonttt>:
    Color_Foreground : Select the foreground color
    Color_Background : Select the background color
******************************************************************************/
void FrameBuffer::Paint_DrawChar(UWORD Xpoint, UWORD Ypoint, const char Acsii_Char,
                    sFONT* Font, UWORD Color_Foreground, UWORD Color_Background)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b088      	sub	sp, #32
 8004948:	af00      	add	r7, sp, #0
 800494a:	60f8      	str	r0, [r7, #12]
 800494c:	4608      	mov	r0, r1
 800494e:	4611      	mov	r1, r2
 8004950:	461a      	mov	r2, r3
 8004952:	4603      	mov	r3, r0
 8004954:	817b      	strh	r3, [r7, #10]
 8004956:	460b      	mov	r3, r1
 8004958:	813b      	strh	r3, [r7, #8]
 800495a:	4613      	mov	r3, r2
 800495c:	71fb      	strb	r3, [r7, #7]
    UWORD Page, Column;

    if (Xpoint > this->Width || Ypoint > this->Height) {
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	889b      	ldrh	r3, [r3, #4]
 8004962:	897a      	ldrh	r2, [r7, #10]
 8004964:	429a      	cmp	r2, r3
 8004966:	d804      	bhi.n	8004972 <_ZN11FrameBuffer14Paint_DrawCharEttcP6_tFonttt+0x2e>
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	88db      	ldrh	r3, [r3, #6]
 800496c:	893a      	ldrh	r2, [r7, #8]
 800496e:	429a      	cmp	r2, r3
 8004970:	d904      	bls.n	800497c <_ZN11FrameBuffer14Paint_DrawCharEttcP6_tFonttt+0x38>
        Debug("Paint_DrawChar Input exceeds the normal display range\r\n");
 8004972:	4946      	ldr	r1, [pc, #280]	@ (8004a8c <_ZN11FrameBuffer14Paint_DrawCharEttcP6_tFonttt+0x148>)
 8004974:	2004      	movs	r0, #4
 8004976:	f7fc fa67 	bl	8000e48 <_Z12log_message2hPKcz>
        return;
 800497a:	e084      	b.n	8004a86 <_ZN11FrameBuffer14Paint_DrawCharEttcP6_tFonttt+0x142>
    }

    uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 800497c:	79fb      	ldrb	r3, [r7, #7]
 800497e:	3b20      	subs	r3, #32
 8004980:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004982:	88d2      	ldrh	r2, [r2, #6]
 8004984:	fb02 f303 	mul.w	r3, r2, r3
 8004988:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800498a:	8892      	ldrh	r2, [r2, #4]
 800498c:	08d2      	lsrs	r2, r2, #3
 800498e:	b292      	uxth	r2, r2
 8004990:	4611      	mov	r1, r2
 8004992:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004994:	8892      	ldrh	r2, [r2, #4]
 8004996:	f002 0207 	and.w	r2, r2, #7
 800499a:	2a00      	cmp	r2, #0
 800499c:	d001      	beq.n	80049a2 <_ZN11FrameBuffer14Paint_DrawCharEttcP6_tFonttt+0x5e>
 800499e:	2201      	movs	r2, #1
 80049a0:	e000      	b.n	80049a4 <_ZN11FrameBuffer14Paint_DrawCharEttcP6_tFonttt+0x60>
 80049a2:	2200      	movs	r2, #0
 80049a4:	440a      	add	r2, r1
 80049a6:	fb02 f303 	mul.w	r3, r2, r3
 80049aa:	617b      	str	r3, [r7, #20]
    const unsigned char *ptr = &Font->table[Char_Offset];
 80049ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	4413      	add	r3, r2
 80049b4:	61bb      	str	r3, [r7, #24]

    for (Page = 0; Page < Font->Height; Page ++ ) {
 80049b6:	2300      	movs	r3, #0
 80049b8:	83fb      	strh	r3, [r7, #30]
 80049ba:	e05f      	b.n	8004a7c <_ZN11FrameBuffer14Paint_DrawCharEttcP6_tFonttt+0x138>
        for (Column = 0; Column < Font->Width; Column ++ ) {
 80049bc:	2300      	movs	r3, #0
 80049be:	83bb      	strh	r3, [r7, #28]
 80049c0:	e04b      	b.n	8004a5a <_ZN11FrameBuffer14Paint_DrawCharEttcP6_tFonttt+0x116>

            //To determine whether the font background color and screen background color is consistent
            if (FONT_BACKGROUND == Color_Background) { //this process is to speed up the scan
 80049c2:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80049c4:	2bff      	cmp	r3, #255	@ 0xff
 80049c6:	d118      	bne.n	80049fa <_ZN11FrameBuffer14Paint_DrawCharEttcP6_tFonttt+0xb6>
                if (*ptr & (0x80 >> (Column % 8)))
 80049c8:	69bb      	ldr	r3, [r7, #24]
 80049ca:	781b      	ldrb	r3, [r3, #0]
 80049cc:	4619      	mov	r1, r3
 80049ce:	8bbb      	ldrh	r3, [r7, #28]
 80049d0:	f003 0307 	and.w	r3, r3, #7
 80049d4:	2280      	movs	r2, #128	@ 0x80
 80049d6:	fa42 f303 	asr.w	r3, r2, r3
 80049da:	400b      	ands	r3, r1
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d031      	beq.n	8004a44 <_ZN11FrameBuffer14Paint_DrawCharEttcP6_tFonttt+0x100>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 80049e0:	897a      	ldrh	r2, [r7, #10]
 80049e2:	8bbb      	ldrh	r3, [r7, #28]
 80049e4:	4413      	add	r3, r2
 80049e6:	b299      	uxth	r1, r3
 80049e8:	893a      	ldrh	r2, [r7, #8]
 80049ea:	8bfb      	ldrh	r3, [r7, #30]
 80049ec:	4413      	add	r3, r2
 80049ee:	b29a      	uxth	r2, r3
 80049f0:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80049f2:	68f8      	ldr	r0, [r7, #12]
 80049f4:	f7ff fb96 	bl	8004124 <_ZN11FrameBuffer14Paint_SetPixelEttt>
 80049f8:	e024      	b.n	8004a44 <_ZN11FrameBuffer14Paint_DrawCharEttcP6_tFonttt+0x100>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
            } else {
                if (*ptr & (0x80 >> (Column % 8))) {
 80049fa:	69bb      	ldr	r3, [r7, #24]
 80049fc:	781b      	ldrb	r3, [r3, #0]
 80049fe:	4619      	mov	r1, r3
 8004a00:	8bbb      	ldrh	r3, [r7, #28]
 8004a02:	f003 0307 	and.w	r3, r3, #7
 8004a06:	2280      	movs	r2, #128	@ 0x80
 8004a08:	fa42 f303 	asr.w	r3, r2, r3
 8004a0c:	400b      	ands	r3, r1
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d00c      	beq.n	8004a2c <_ZN11FrameBuffer14Paint_DrawCharEttcP6_tFonttt+0xe8>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 8004a12:	897a      	ldrh	r2, [r7, #10]
 8004a14:	8bbb      	ldrh	r3, [r7, #28]
 8004a16:	4413      	add	r3, r2
 8004a18:	b299      	uxth	r1, r3
 8004a1a:	893a      	ldrh	r2, [r7, #8]
 8004a1c:	8bfb      	ldrh	r3, [r7, #30]
 8004a1e:	4413      	add	r3, r2
 8004a20:	b29a      	uxth	r2, r3
 8004a22:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8004a24:	68f8      	ldr	r0, [r7, #12]
 8004a26:	f7ff fb7d 	bl	8004124 <_ZN11FrameBuffer14Paint_SetPixelEttt>
 8004a2a:	e00b      	b.n	8004a44 <_ZN11FrameBuffer14Paint_DrawCharEttcP6_tFonttt+0x100>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                } else {
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Background);
 8004a2c:	897a      	ldrh	r2, [r7, #10]
 8004a2e:	8bbb      	ldrh	r3, [r7, #28]
 8004a30:	4413      	add	r3, r2
 8004a32:	b299      	uxth	r1, r3
 8004a34:	893a      	ldrh	r2, [r7, #8]
 8004a36:	8bfb      	ldrh	r3, [r7, #30]
 8004a38:	4413      	add	r3, r2
 8004a3a:	b29a      	uxth	r2, r3
 8004a3c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8004a3e:	68f8      	ldr	r0, [r7, #12]
 8004a40:	f7ff fb70 	bl	8004124 <_ZN11FrameBuffer14Paint_SetPixelEttt>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                }
            }
            //One pixel is 8 bits
            if (Column % 8 == 7)
 8004a44:	8bbb      	ldrh	r3, [r7, #28]
 8004a46:	f003 0307 	and.w	r3, r3, #7
 8004a4a:	2b07      	cmp	r3, #7
 8004a4c:	d102      	bne.n	8004a54 <_ZN11FrameBuffer14Paint_DrawCharEttcP6_tFonttt+0x110>
                ptr++;
 8004a4e:	69bb      	ldr	r3, [r7, #24]
 8004a50:	3301      	adds	r3, #1
 8004a52:	61bb      	str	r3, [r7, #24]
        for (Column = 0; Column < Font->Width; Column ++ ) {
 8004a54:	8bbb      	ldrh	r3, [r7, #28]
 8004a56:	3301      	adds	r3, #1
 8004a58:	83bb      	strh	r3, [r7, #28]
 8004a5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a5c:	889b      	ldrh	r3, [r3, #4]
 8004a5e:	8bba      	ldrh	r2, [r7, #28]
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d3ae      	bcc.n	80049c2 <_ZN11FrameBuffer14Paint_DrawCharEttcP6_tFonttt+0x7e>
        }// Write a line
        if (Font->Width % 8 != 0)
 8004a64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a66:	889b      	ldrh	r3, [r3, #4]
 8004a68:	f003 0307 	and.w	r3, r3, #7
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d002      	beq.n	8004a76 <_ZN11FrameBuffer14Paint_DrawCharEttcP6_tFonttt+0x132>
            ptr++;
 8004a70:	69bb      	ldr	r3, [r7, #24]
 8004a72:	3301      	adds	r3, #1
 8004a74:	61bb      	str	r3, [r7, #24]
    for (Page = 0; Page < Font->Height; Page ++ ) {
 8004a76:	8bfb      	ldrh	r3, [r7, #30]
 8004a78:	3301      	adds	r3, #1
 8004a7a:	83fb      	strh	r3, [r7, #30]
 8004a7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a7e:	88db      	ldrh	r3, [r3, #6]
 8004a80:	8bfa      	ldrh	r2, [r7, #30]
 8004a82:	429a      	cmp	r2, r3
 8004a84:	d39a      	bcc.n	80049bc <_ZN11FrameBuffer14Paint_DrawCharEttcP6_tFonttt+0x78>
    }// Write all
}
 8004a86:	3720      	adds	r7, #32
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}
 8004a8c:	0800fdec 	.word	0x0800fdec

08004a90 <_ZN11FrameBuffer19Paint_DrawString_ENEttPKcP6_tFonttt>:
    Color_Foreground : Select the foreground color
    Color_Background : Select the background color
******************************************************************************/
void FrameBuffer::Paint_DrawString_EN(UWORD Xstart, UWORD Ystart, const char * pString,
                         sFONT* Font, UWORD Color_Foreground, UWORD Color_Background)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b08a      	sub	sp, #40	@ 0x28
 8004a94:	af04      	add	r7, sp, #16
 8004a96:	60f8      	str	r0, [r7, #12]
 8004a98:	607b      	str	r3, [r7, #4]
 8004a9a:	460b      	mov	r3, r1
 8004a9c:	817b      	strh	r3, [r7, #10]
 8004a9e:	4613      	mov	r3, r2
 8004aa0:	813b      	strh	r3, [r7, #8]
    UWORD Xpoint = Xstart;
 8004aa2:	897b      	ldrh	r3, [r7, #10]
 8004aa4:	82fb      	strh	r3, [r7, #22]
    UWORD Ypoint = Ystart;
 8004aa6:	893b      	ldrh	r3, [r7, #8]
 8004aa8:	82bb      	strh	r3, [r7, #20]

    if (Xstart > this->Width || Ystart > this->Height) {
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	889b      	ldrh	r3, [r3, #4]
 8004aae:	897a      	ldrh	r2, [r7, #10]
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d804      	bhi.n	8004abe <_ZN11FrameBuffer19Paint_DrawString_ENEttPKcP6_tFonttt+0x2e>
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	88db      	ldrh	r3, [r3, #6]
 8004ab8:	893a      	ldrh	r2, [r7, #8]
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d935      	bls.n	8004b2a <_ZN11FrameBuffer19Paint_DrawString_ENEttPKcP6_tFonttt+0x9a>
        Debug("Paint_DrawString_EN Input exceeds the normal display range\r\n");
 8004abe:	491e      	ldr	r1, [pc, #120]	@ (8004b38 <_ZN11FrameBuffer19Paint_DrawString_ENEttPKcP6_tFonttt+0xa8>)
 8004ac0:	2004      	movs	r0, #4
 8004ac2:	f7fc f9c1 	bl	8000e48 <_Z12log_message2hPKcz>
        return;
 8004ac6:	e034      	b.n	8004b32 <_ZN11FrameBuffer19Paint_DrawString_ENEttPKcP6_tFonttt+0xa2>
    }

    while (* pString != '\0') {
        //if X direction filled , reposition to(Xstart,Ypoint),Ypoint is Y direction plus the Height of the character
        if ((Xpoint + Font->Width ) > this->Width ) {
 8004ac8:	8afb      	ldrh	r3, [r7, #22]
 8004aca:	6a3a      	ldr	r2, [r7, #32]
 8004acc:	8892      	ldrh	r2, [r2, #4]
 8004ace:	4413      	add	r3, r2
 8004ad0:	68fa      	ldr	r2, [r7, #12]
 8004ad2:	8892      	ldrh	r2, [r2, #4]
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	dd06      	ble.n	8004ae6 <_ZN11FrameBuffer19Paint_DrawString_ENEttPKcP6_tFonttt+0x56>
            Xpoint = Xstart;
 8004ad8:	897b      	ldrh	r3, [r7, #10]
 8004ada:	82fb      	strh	r3, [r7, #22]
            Ypoint += Font->Height;
 8004adc:	6a3b      	ldr	r3, [r7, #32]
 8004ade:	88da      	ldrh	r2, [r3, #6]
 8004ae0:	8abb      	ldrh	r3, [r7, #20]
 8004ae2:	4413      	add	r3, r2
 8004ae4:	82bb      	strh	r3, [r7, #20]
        }

        // If the Y direction is full, reposition to(Xstart, Ystart)
        if ((Ypoint  + Font->Height ) > this->Height ) {
 8004ae6:	8abb      	ldrh	r3, [r7, #20]
 8004ae8:	6a3a      	ldr	r2, [r7, #32]
 8004aea:	88d2      	ldrh	r2, [r2, #6]
 8004aec:	4413      	add	r3, r2
 8004aee:	68fa      	ldr	r2, [r7, #12]
 8004af0:	88d2      	ldrh	r2, [r2, #6]
 8004af2:	4293      	cmp	r3, r2
 8004af4:	dd03      	ble.n	8004afe <_ZN11FrameBuffer19Paint_DrawString_ENEttPKcP6_tFonttt+0x6e>
            Xpoint = Xstart;
 8004af6:	897b      	ldrh	r3, [r7, #10]
 8004af8:	82fb      	strh	r3, [r7, #22]
            Ypoint = Ystart;
 8004afa:	893b      	ldrh	r3, [r7, #8]
 8004afc:	82bb      	strh	r3, [r7, #20]
        }
        Paint_DrawChar(Xpoint, Ypoint, * pString, Font, Color_Background, Color_Foreground);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	7818      	ldrb	r0, [r3, #0]
 8004b02:	8aba      	ldrh	r2, [r7, #20]
 8004b04:	8af9      	ldrh	r1, [r7, #22]
 8004b06:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004b08:	9302      	str	r3, [sp, #8]
 8004b0a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004b0c:	9301      	str	r3, [sp, #4]
 8004b0e:	6a3b      	ldr	r3, [r7, #32]
 8004b10:	9300      	str	r3, [sp, #0]
 8004b12:	4603      	mov	r3, r0
 8004b14:	68f8      	ldr	r0, [r7, #12]
 8004b16:	f7ff ff15 	bl	8004944 <_ZN11FrameBuffer14Paint_DrawCharEttcP6_tFonttt>

        //The next character of the address
        pString ++;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	3301      	adds	r3, #1
 8004b1e:	607b      	str	r3, [r7, #4]

        //The next word of the abscissa increases the font of the broadband
        Xpoint += Font->Width;
 8004b20:	6a3b      	ldr	r3, [r7, #32]
 8004b22:	889a      	ldrh	r2, [r3, #4]
 8004b24:	8afb      	ldrh	r3, [r7, #22]
 8004b26:	4413      	add	r3, r2
 8004b28:	82fb      	strh	r3, [r7, #22]
    while (* pString != '\0') {
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	781b      	ldrb	r3, [r3, #0]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d1ca      	bne.n	8004ac8 <_ZN11FrameBuffer19Paint_DrawString_ENEttPKcP6_tFonttt+0x38>
    }
}
 8004b32:	3718      	adds	r7, #24
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}
 8004b38:	0800fe30 	.word	0x0800fe30

08004b3c <_ZN11FrameBuffer14Paint_DrawTimeEttP10PAINT_TIMEP6_tFonttt>:
    Color_Foreground : Select the foreground color
    Color_Background : Select the background color
******************************************************************************/
void FrameBuffer::Paint_DrawTime(UWORD Xstart, UWORD Ystart, PAINT_TIME *pTime, sFONT* Font,
                    UWORD Color_Foreground, UWORD Color_Background)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b08c      	sub	sp, #48	@ 0x30
 8004b40:	af04      	add	r7, sp, #16
 8004b42:	60f8      	str	r0, [r7, #12]
 8004b44:	607b      	str	r3, [r7, #4]
 8004b46:	460b      	mov	r3, r1
 8004b48:	817b      	strh	r3, [r7, #10]
 8004b4a:	4613      	mov	r3, r2
 8004b4c:	813b      	strh	r3, [r7, #8]
    uint8_t value[10] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'};
 8004b4e:	4a8f      	ldr	r2, [pc, #572]	@ (8004d8c <_ZN11FrameBuffer14Paint_DrawTimeEttP10PAINT_TIMEP6_tFonttt+0x250>)
 8004b50:	f107 0310 	add.w	r3, r7, #16
 8004b54:	ca07      	ldmia	r2, {r0, r1, r2}
 8004b56:	c303      	stmia	r3!, {r0, r1}
 8004b58:	801a      	strh	r2, [r3, #0]
//    LOG_WARN("time seconds %d\r\n/r/n",pTime->Sec);
    UWORD Dx = Font->Width;
 8004b5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b5c:	889b      	ldrh	r3, [r3, #4]
 8004b5e:	83bb      	strh	r3, [r7, #28]

    //Write data into the cache
    Paint_DrawChar(Xstart                           , Ystart, value[pTime->Hour / 10], Font, Color_Background, Color_Foreground);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	791b      	ldrb	r3, [r3, #4]
 8004b64:	4a8a      	ldr	r2, [pc, #552]	@ (8004d90 <_ZN11FrameBuffer14Paint_DrawTimeEttP10PAINT_TIMEP6_tFonttt+0x254>)
 8004b66:	fba2 2303 	umull	r2, r3, r2, r3
 8004b6a:	08db      	lsrs	r3, r3, #3
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	3320      	adds	r3, #32
 8004b70:	443b      	add	r3, r7
 8004b72:	f813 0c10 	ldrb.w	r0, [r3, #-16]
 8004b76:	893a      	ldrh	r2, [r7, #8]
 8004b78:	8979      	ldrh	r1, [r7, #10]
 8004b7a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8004b7c:	9302      	str	r3, [sp, #8]
 8004b7e:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8004b80:	9301      	str	r3, [sp, #4]
 8004b82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b84:	9300      	str	r3, [sp, #0]
 8004b86:	4603      	mov	r3, r0
 8004b88:	68f8      	ldr	r0, [r7, #12]
 8004b8a:	f7ff fedb 	bl	8004944 <_ZN11FrameBuffer14Paint_DrawCharEttcP6_tFonttt>
    Paint_DrawChar(Xstart + Dx                      , Ystart, value[pTime->Hour % 10], Font, Color_Background, Color_Foreground);
 8004b8e:	897a      	ldrh	r2, [r7, #10]
 8004b90:	8bbb      	ldrh	r3, [r7, #28]
 8004b92:	4413      	add	r3, r2
 8004b94:	b298      	uxth	r0, r3
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	791a      	ldrb	r2, [r3, #4]
 8004b9a:	4b7d      	ldr	r3, [pc, #500]	@ (8004d90 <_ZN11FrameBuffer14Paint_DrawTimeEttP10PAINT_TIMEP6_tFonttt+0x254>)
 8004b9c:	fba3 1302 	umull	r1, r3, r3, r2
 8004ba0:	08d9      	lsrs	r1, r3, #3
 8004ba2:	460b      	mov	r3, r1
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	440b      	add	r3, r1
 8004ba8:	005b      	lsls	r3, r3, #1
 8004baa:	1ad3      	subs	r3, r2, r3
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	3320      	adds	r3, #32
 8004bb0:	443b      	add	r3, r7
 8004bb2:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 8004bb6:	893a      	ldrh	r2, [r7, #8]
 8004bb8:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8004bba:	9302      	str	r3, [sp, #8]
 8004bbc:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8004bbe:	9301      	str	r3, [sp, #4]
 8004bc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bc2:	9300      	str	r3, [sp, #0]
 8004bc4:	460b      	mov	r3, r1
 8004bc6:	4601      	mov	r1, r0
 8004bc8:	68f8      	ldr	r0, [r7, #12]
 8004bca:	f7ff febb 	bl	8004944 <_ZN11FrameBuffer14Paint_DrawCharEttcP6_tFonttt>
    Paint_DrawChar(Xstart + Dx  + Dx / 4 + Dx / 2   , Ystart, ':'                    , Font, Color_Background, Color_Foreground);
 8004bce:	897a      	ldrh	r2, [r7, #10]
 8004bd0:	8bbb      	ldrh	r3, [r7, #28]
 8004bd2:	4413      	add	r3, r2
 8004bd4:	b29a      	uxth	r2, r3
 8004bd6:	8bbb      	ldrh	r3, [r7, #28]
 8004bd8:	089b      	lsrs	r3, r3, #2
 8004bda:	b29b      	uxth	r3, r3
 8004bdc:	4413      	add	r3, r2
 8004bde:	b29a      	uxth	r2, r3
 8004be0:	8bbb      	ldrh	r3, [r7, #28]
 8004be2:	085b      	lsrs	r3, r3, #1
 8004be4:	b29b      	uxth	r3, r3
 8004be6:	4413      	add	r3, r2
 8004be8:	b299      	uxth	r1, r3
 8004bea:	893a      	ldrh	r2, [r7, #8]
 8004bec:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8004bee:	9302      	str	r3, [sp, #8]
 8004bf0:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8004bf2:	9301      	str	r3, [sp, #4]
 8004bf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bf6:	9300      	str	r3, [sp, #0]
 8004bf8:	233a      	movs	r3, #58	@ 0x3a
 8004bfa:	68f8      	ldr	r0, [r7, #12]
 8004bfc:	f7ff fea2 	bl	8004944 <_ZN11FrameBuffer14Paint_DrawCharEttcP6_tFonttt>
    Paint_DrawChar(Xstart + Dx * 2 + Dx / 2         , Ystart, value[pTime->Min / 10] , Font, Color_Background, Color_Foreground);
 8004c00:	8bbb      	ldrh	r3, [r7, #28]
 8004c02:	005b      	lsls	r3, r3, #1
 8004c04:	b29a      	uxth	r2, r3
 8004c06:	897b      	ldrh	r3, [r7, #10]
 8004c08:	4413      	add	r3, r2
 8004c0a:	b29a      	uxth	r2, r3
 8004c0c:	8bbb      	ldrh	r3, [r7, #28]
 8004c0e:	085b      	lsrs	r3, r3, #1
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	4413      	add	r3, r2
 8004c14:	b299      	uxth	r1, r3
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	795b      	ldrb	r3, [r3, #5]
 8004c1a:	4a5d      	ldr	r2, [pc, #372]	@ (8004d90 <_ZN11FrameBuffer14Paint_DrawTimeEttP10PAINT_TIMEP6_tFonttt+0x254>)
 8004c1c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c20:	08db      	lsrs	r3, r3, #3
 8004c22:	b2db      	uxtb	r3, r3
 8004c24:	3320      	adds	r3, #32
 8004c26:	443b      	add	r3, r7
 8004c28:	f813 0c10 	ldrb.w	r0, [r3, #-16]
 8004c2c:	893a      	ldrh	r2, [r7, #8]
 8004c2e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8004c30:	9302      	str	r3, [sp, #8]
 8004c32:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8004c34:	9301      	str	r3, [sp, #4]
 8004c36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c38:	9300      	str	r3, [sp, #0]
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	68f8      	ldr	r0, [r7, #12]
 8004c3e:	f7ff fe81 	bl	8004944 <_ZN11FrameBuffer14Paint_DrawCharEttcP6_tFonttt>
    Paint_DrawChar(Xstart + Dx * 3 + Dx / 2         , Ystart, value[pTime->Min % 10] , Font, Color_Background, Color_Foreground);
 8004c42:	8bbb      	ldrh	r3, [r7, #28]
 8004c44:	461a      	mov	r2, r3
 8004c46:	0052      	lsls	r2, r2, #1
 8004c48:	4413      	add	r3, r2
 8004c4a:	b29a      	uxth	r2, r3
 8004c4c:	897b      	ldrh	r3, [r7, #10]
 8004c4e:	4413      	add	r3, r2
 8004c50:	b29a      	uxth	r2, r3
 8004c52:	8bbb      	ldrh	r3, [r7, #28]
 8004c54:	085b      	lsrs	r3, r3, #1
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	4413      	add	r3, r2
 8004c5a:	b298      	uxth	r0, r3
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	795a      	ldrb	r2, [r3, #5]
 8004c60:	4b4b      	ldr	r3, [pc, #300]	@ (8004d90 <_ZN11FrameBuffer14Paint_DrawTimeEttP10PAINT_TIMEP6_tFonttt+0x254>)
 8004c62:	fba3 1302 	umull	r1, r3, r3, r2
 8004c66:	08d9      	lsrs	r1, r3, #3
 8004c68:	460b      	mov	r3, r1
 8004c6a:	009b      	lsls	r3, r3, #2
 8004c6c:	440b      	add	r3, r1
 8004c6e:	005b      	lsls	r3, r3, #1
 8004c70:	1ad3      	subs	r3, r2, r3
 8004c72:	b2db      	uxtb	r3, r3
 8004c74:	3320      	adds	r3, #32
 8004c76:	443b      	add	r3, r7
 8004c78:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 8004c7c:	893a      	ldrh	r2, [r7, #8]
 8004c7e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8004c80:	9302      	str	r3, [sp, #8]
 8004c82:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8004c84:	9301      	str	r3, [sp, #4]
 8004c86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c88:	9300      	str	r3, [sp, #0]
 8004c8a:	460b      	mov	r3, r1
 8004c8c:	4601      	mov	r1, r0
 8004c8e:	68f8      	ldr	r0, [r7, #12]
 8004c90:	f7ff fe58 	bl	8004944 <_ZN11FrameBuffer14Paint_DrawCharEttcP6_tFonttt>

    if(pTime->hasSeconds){
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	79db      	ldrb	r3, [r3, #7]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d05d      	beq.n	8004d58 <_ZN11FrameBuffer14Paint_DrawTimeEttP10PAINT_TIMEP6_tFonttt+0x21c>
		Paint_DrawChar(Xstart + Dx * 4 + Dx / 2 - Dx / 4, Ystart, ':'                    , Font, Color_Background, Color_Foreground);
 8004c9c:	8bbb      	ldrh	r3, [r7, #28]
 8004c9e:	009b      	lsls	r3, r3, #2
 8004ca0:	b29a      	uxth	r2, r3
 8004ca2:	897b      	ldrh	r3, [r7, #10]
 8004ca4:	4413      	add	r3, r2
 8004ca6:	b29a      	uxth	r2, r3
 8004ca8:	8bbb      	ldrh	r3, [r7, #28]
 8004caa:	085b      	lsrs	r3, r3, #1
 8004cac:	b29b      	uxth	r3, r3
 8004cae:	4413      	add	r3, r2
 8004cb0:	b29a      	uxth	r2, r3
 8004cb2:	8bbb      	ldrh	r3, [r7, #28]
 8004cb4:	089b      	lsrs	r3, r3, #2
 8004cb6:	b29b      	uxth	r3, r3
 8004cb8:	1ad3      	subs	r3, r2, r3
 8004cba:	b299      	uxth	r1, r3
 8004cbc:	893a      	ldrh	r2, [r7, #8]
 8004cbe:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8004cc0:	9302      	str	r3, [sp, #8]
 8004cc2:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8004cc4:	9301      	str	r3, [sp, #4]
 8004cc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cc8:	9300      	str	r3, [sp, #0]
 8004cca:	233a      	movs	r3, #58	@ 0x3a
 8004ccc:	68f8      	ldr	r0, [r7, #12]
 8004cce:	f7ff fe39 	bl	8004944 <_ZN11FrameBuffer14Paint_DrawCharEttcP6_tFonttt>
		Paint_DrawChar(Xstart + Dx * 5                  , Ystart, value[pTime->Sec / 10] , Font, Color_Background, Color_Foreground);
 8004cd2:	8bbb      	ldrh	r3, [r7, #28]
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	0092      	lsls	r2, r2, #2
 8004cd8:	4413      	add	r3, r2
 8004cda:	b29a      	uxth	r2, r3
 8004cdc:	897b      	ldrh	r3, [r7, #10]
 8004cde:	4413      	add	r3, r2
 8004ce0:	b299      	uxth	r1, r3
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	799b      	ldrb	r3, [r3, #6]
 8004ce6:	4a2a      	ldr	r2, [pc, #168]	@ (8004d90 <_ZN11FrameBuffer14Paint_DrawTimeEttP10PAINT_TIMEP6_tFonttt+0x254>)
 8004ce8:	fba2 2303 	umull	r2, r3, r2, r3
 8004cec:	08db      	lsrs	r3, r3, #3
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	3320      	adds	r3, #32
 8004cf2:	443b      	add	r3, r7
 8004cf4:	f813 0c10 	ldrb.w	r0, [r3, #-16]
 8004cf8:	893a      	ldrh	r2, [r7, #8]
 8004cfa:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8004cfc:	9302      	str	r3, [sp, #8]
 8004cfe:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8004d00:	9301      	str	r3, [sp, #4]
 8004d02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d04:	9300      	str	r3, [sp, #0]
 8004d06:	4603      	mov	r3, r0
 8004d08:	68f8      	ldr	r0, [r7, #12]
 8004d0a:	f7ff fe1b 	bl	8004944 <_ZN11FrameBuffer14Paint_DrawCharEttcP6_tFonttt>
		Paint_DrawChar(Xstart + Dx * 6                  , Ystart, value[pTime->Sec % 10] , Font, Color_Background, Color_Foreground);
 8004d0e:	8bbb      	ldrh	r3, [r7, #28]
 8004d10:	461a      	mov	r2, r3
 8004d12:	0052      	lsls	r2, r2, #1
 8004d14:	4413      	add	r3, r2
 8004d16:	005b      	lsls	r3, r3, #1
 8004d18:	b29a      	uxth	r2, r3
 8004d1a:	897b      	ldrh	r3, [r7, #10]
 8004d1c:	4413      	add	r3, r2
 8004d1e:	b298      	uxth	r0, r3
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	799a      	ldrb	r2, [r3, #6]
 8004d24:	4b1a      	ldr	r3, [pc, #104]	@ (8004d90 <_ZN11FrameBuffer14Paint_DrawTimeEttP10PAINT_TIMEP6_tFonttt+0x254>)
 8004d26:	fba3 1302 	umull	r1, r3, r3, r2
 8004d2a:	08d9      	lsrs	r1, r3, #3
 8004d2c:	460b      	mov	r3, r1
 8004d2e:	009b      	lsls	r3, r3, #2
 8004d30:	440b      	add	r3, r1
 8004d32:	005b      	lsls	r3, r3, #1
 8004d34:	1ad3      	subs	r3, r2, r3
 8004d36:	b2db      	uxtb	r3, r3
 8004d38:	3320      	adds	r3, #32
 8004d3a:	443b      	add	r3, r7
 8004d3c:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 8004d40:	893a      	ldrh	r2, [r7, #8]
 8004d42:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8004d44:	9302      	str	r3, [sp, #8]
 8004d46:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8004d48:	9301      	str	r3, [sp, #4]
 8004d4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d4c:	9300      	str	r3, [sp, #0]
 8004d4e:	460b      	mov	r3, r1
 8004d50:	4601      	mov	r1, r0
 8004d52:	68f8      	ldr	r0, [r7, #12]
 8004d54:	f7ff fdf6 	bl	8004944 <_ZN11FrameBuffer14Paint_DrawCharEttcP6_tFonttt>
    }

    UWORD additionalDX = 0;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	83fb      	strh	r3, [r7, #30]
    if(pTime->hasSeconds){
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	79db      	ldrb	r3, [r3, #7]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d001      	beq.n	8004d68 <_ZN11FrameBuffer14Paint_DrawTimeEttP10PAINT_TIMEP6_tFonttt+0x22c>
    	additionalDX =3;
 8004d64:	2303      	movs	r3, #3
 8004d66:	83fb      	strh	r3, [r7, #30]
    }
	Paint_DrawChar(Xstart + Dx * 5 + additionalDX       , Ystart, pTime->isPM?"P"[0]:"A"[0] , Font, Color_Background, Color_Foreground);
 8004d68:	8bbb      	ldrh	r3, [r7, #28]
 8004d6a:	461a      	mov	r2, r3
 8004d6c:	0092      	lsls	r2, r2, #2
 8004d6e:	4413      	add	r3, r2
 8004d70:	b29a      	uxth	r2, r3
 8004d72:	897b      	ldrh	r3, [r7, #10]
 8004d74:	4413      	add	r3, r2
 8004d76:	b29a      	uxth	r2, r3
 8004d78:	8bfb      	ldrh	r3, [r7, #30]
 8004d7a:	4413      	add	r3, r2
 8004d7c:	b299      	uxth	r1, r3
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	7a1b      	ldrb	r3, [r3, #8]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d006      	beq.n	8004d94 <_ZN11FrameBuffer14Paint_DrawTimeEttP10PAINT_TIMEP6_tFonttt+0x258>
 8004d86:	2050      	movs	r0, #80	@ 0x50
 8004d88:	e005      	b.n	8004d96 <_ZN11FrameBuffer14Paint_DrawTimeEttP10PAINT_TIMEP6_tFonttt+0x25a>
 8004d8a:	bf00      	nop
 8004d8c:	0800feb8 	.word	0x0800feb8
 8004d90:	cccccccd 	.word	0xcccccccd
 8004d94:	2041      	movs	r0, #65	@ 0x41
 8004d96:	893a      	ldrh	r2, [r7, #8]
 8004d98:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8004d9a:	9302      	str	r3, [sp, #8]
 8004d9c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8004d9e:	9301      	str	r3, [sp, #4]
 8004da0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004da2:	9300      	str	r3, [sp, #0]
 8004da4:	4603      	mov	r3, r0
 8004da6:	68f8      	ldr	r0, [r7, #12]
 8004da8:	f7ff fdcc 	bl	8004944 <_ZN11FrameBuffer14Paint_DrawCharEttcP6_tFonttt>
	Paint_DrawChar(Xstart + Dx * 6 + additionalDX       , Ystart, "M"[0] , Font, Color_Background, Color_Foreground);
 8004dac:	8bbb      	ldrh	r3, [r7, #28]
 8004dae:	461a      	mov	r2, r3
 8004db0:	0052      	lsls	r2, r2, #1
 8004db2:	4413      	add	r3, r2
 8004db4:	005b      	lsls	r3, r3, #1
 8004db6:	b29a      	uxth	r2, r3
 8004db8:	897b      	ldrh	r3, [r7, #10]
 8004dba:	4413      	add	r3, r2
 8004dbc:	b29a      	uxth	r2, r3
 8004dbe:	8bfb      	ldrh	r3, [r7, #30]
 8004dc0:	4413      	add	r3, r2
 8004dc2:	b299      	uxth	r1, r3
 8004dc4:	204d      	movs	r0, #77	@ 0x4d
 8004dc6:	893a      	ldrh	r2, [r7, #8]
 8004dc8:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8004dca:	9302      	str	r3, [sp, #8]
 8004dcc:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8004dce:	9301      	str	r3, [sp, #4]
 8004dd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dd2:	9300      	str	r3, [sp, #0]
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	68f8      	ldr	r0, [r7, #12]
 8004dd8:	f7ff fdb4 	bl	8004944 <_ZN11FrameBuffer14Paint_DrawCharEttcP6_tFonttt>

}
 8004ddc:	bf00      	nop
 8004dde:	3720      	adds	r7, #32
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}

08004de4 <_ZN11FrameBuffer22Paint_DrawBitMap_PasteEPKhtttth>:
    flipColor: Whether the color is reversed
info:
    Use this function to paste image data into a buffer
******************************************************************************/
void FrameBuffer::Paint_DrawBitMap_Paste(const unsigned char* image_buffer, UWORD xStart, UWORD yStart, UWORD imageWidth, UWORD imageHeight, UBYTE flipColor)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b088      	sub	sp, #32
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	60f8      	str	r0, [r7, #12]
 8004dec:	60b9      	str	r1, [r7, #8]
 8004dee:	4611      	mov	r1, r2
 8004df0:	461a      	mov	r2, r3
 8004df2:	460b      	mov	r3, r1
 8004df4:	80fb      	strh	r3, [r7, #6]
 8004df6:	4613      	mov	r3, r2
 8004df8:	80bb      	strh	r3, [r7, #4]
    UBYTE color, srcImage;
    UWORD x, y;
    UWORD width = (imageWidth%8==0 ? imageWidth/8 : imageWidth/8+1);
 8004dfa:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004dfc:	f003 0307 	and.w	r3, r3, #7
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d103      	bne.n	8004e0c <_ZN11FrameBuffer22Paint_DrawBitMap_PasteEPKhtttth+0x28>
 8004e04:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004e06:	08db      	lsrs	r3, r3, #3
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	e004      	b.n	8004e16 <_ZN11FrameBuffer22Paint_DrawBitMap_PasteEPKhtttth+0x32>
 8004e0c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004e0e:	08db      	lsrs	r3, r3, #3
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	3301      	adds	r3, #1
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	833b      	strh	r3, [r7, #24]

    for (y = 0; y < imageHeight; y++) {
 8004e18:	2300      	movs	r3, #0
 8004e1a:	837b      	strh	r3, [r7, #26]
 8004e1c:	e047      	b.n	8004eae <_ZN11FrameBuffer22Paint_DrawBitMap_PasteEPKhtttth+0xca>
        for (x = 0; x < imageWidth; x++) {
 8004e1e:	2300      	movs	r3, #0
 8004e20:	83bb      	strh	r3, [r7, #28]
 8004e22:	e03d      	b.n	8004ea0 <_ZN11FrameBuffer22Paint_DrawBitMap_PasteEPKhtttth+0xbc>
            srcImage = image_buffer[y*width + x/8];
 8004e24:	8b7b      	ldrh	r3, [r7, #26]
 8004e26:	8b3a      	ldrh	r2, [r7, #24]
 8004e28:	fb02 f303 	mul.w	r3, r2, r3
 8004e2c:	8bba      	ldrh	r2, [r7, #28]
 8004e2e:	08d2      	lsrs	r2, r2, #3
 8004e30:	b292      	uxth	r2, r2
 8004e32:	4413      	add	r3, r2
 8004e34:	461a      	mov	r2, r3
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	4413      	add	r3, r2
 8004e3a:	781b      	ldrb	r3, [r3, #0]
 8004e3c:	75fb      	strb	r3, [r7, #23]
            if(flipColor)
 8004e3e:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d00e      	beq.n	8004e64 <_ZN11FrameBuffer22Paint_DrawBitMap_PasteEPKhtttth+0x80>
                color = (((srcImage<<(x%8) & 0x80) == 0) ? 1 : 0);
 8004e46:	7dfa      	ldrb	r2, [r7, #23]
 8004e48:	8bbb      	ldrh	r3, [r7, #28]
 8004e4a:	f003 0307 	and.w	r3, r3, #7
 8004e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d101      	bne.n	8004e5e <_ZN11FrameBuffer22Paint_DrawBitMap_PasteEPKhtttth+0x7a>
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e000      	b.n	8004e60 <_ZN11FrameBuffer22Paint_DrawBitMap_PasteEPKhtttth+0x7c>
 8004e5e:	2300      	movs	r3, #0
 8004e60:	77fb      	strb	r3, [r7, #31]
 8004e62:	e00d      	b.n	8004e80 <_ZN11FrameBuffer22Paint_DrawBitMap_PasteEPKhtttth+0x9c>
            else
                color = (((srcImage<<(x%8) & 0x80) == 0) ? 0 : 1);
 8004e64:	7dfa      	ldrb	r2, [r7, #23]
 8004e66:	8bbb      	ldrh	r3, [r7, #28]
 8004e68:	f003 0307 	and.w	r3, r3, #7
 8004e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	bf14      	ite	ne
 8004e78:	2301      	movne	r3, #1
 8004e7a:	2300      	moveq	r3, #0
 8004e7c:	b2db      	uxtb	r3, r3
 8004e7e:	77fb      	strb	r3, [r7, #31]
            Paint_SetPixel(x+xStart, y+yStart, color);
 8004e80:	8bba      	ldrh	r2, [r7, #28]
 8004e82:	88fb      	ldrh	r3, [r7, #6]
 8004e84:	4413      	add	r3, r2
 8004e86:	b299      	uxth	r1, r3
 8004e88:	8b7a      	ldrh	r2, [r7, #26]
 8004e8a:	88bb      	ldrh	r3, [r7, #4]
 8004e8c:	4413      	add	r3, r2
 8004e8e:	b29a      	uxth	r2, r3
 8004e90:	7ffb      	ldrb	r3, [r7, #31]
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	68f8      	ldr	r0, [r7, #12]
 8004e96:	f7ff f945 	bl	8004124 <_ZN11FrameBuffer14Paint_SetPixelEttt>
        for (x = 0; x < imageWidth; x++) {
 8004e9a:	8bbb      	ldrh	r3, [r7, #28]
 8004e9c:	3301      	adds	r3, #1
 8004e9e:	83bb      	strh	r3, [r7, #28]
 8004ea0:	8bba      	ldrh	r2, [r7, #28]
 8004ea2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	d3bd      	bcc.n	8004e24 <_ZN11FrameBuffer22Paint_DrawBitMap_PasteEPKhtttth+0x40>
    for (y = 0; y < imageHeight; y++) {
 8004ea8:	8b7b      	ldrh	r3, [r7, #26]
 8004eaa:	3301      	adds	r3, #1
 8004eac:	837b      	strh	r3, [r7, #26]
 8004eae:	8b7a      	ldrh	r2, [r7, #26]
 8004eb0:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	d3b3      	bcc.n	8004e1e <_ZN11FrameBuffer22Paint_DrawBitMap_PasteEPKhtttth+0x3a>
        }
    }
}
 8004eb6:	bf00      	nop
 8004eb8:	bf00      	nop
 8004eba:	3720      	adds	r7, #32
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}

08004ec0 <_ZNSt10unique_ptrI11FrameBuffer15FreeRTOSDeleterED1Ev>:
      ~unique_ptr() noexcept
 8004ec0:	b590      	push	{r4, r7, lr}
 8004ec2:	b085      	sub	sp, #20
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f7fe fe1d 	bl	8003b0a <_ZNSt15__uniq_ptr_implI11FrameBuffer15FreeRTOSDeleterE6_M_ptrEv>
 8004ed0:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d00c      	beq.n	8004ef4 <_ZNSt10unique_ptrI11FrameBuffer15FreeRTOSDeleterED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f000 f8a6 	bl	800502c <_ZNSt10unique_ptrI11FrameBuffer15FreeRTOSDeleterE11get_deleterEv>
 8004ee0:	4604      	mov	r4, r0
 8004ee2:	68f8      	ldr	r0, [r7, #12]
 8004ee4:	f7fe fdca 	bl	8003a7c <_ZSt4moveIRP11FrameBufferEONSt16remove_referenceIT_E4typeEOS4_>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4619      	mov	r1, r3
 8004eee:	4620      	mov	r0, r4
 8004ef0:	f7fc fb02 	bl	80014f8 <_ZNK15FreeRTOSDeleterclEPv>
	__ptr = pointer();
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	601a      	str	r2, [r3, #0]
      }
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	4618      	mov	r0, r3
 8004efe:	3714      	adds	r7, #20
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd90      	pop	{r4, r7, pc}

08004f04 <_ZNSt15__uniq_ptr_implIh15FreeRTOSDeleterEC1Ev>:
      __uniq_ptr_impl() = default;
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b082      	sub	sp, #8
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f000 f899 	bl	8005046 <_ZNSt5tupleIJPh15FreeRTOSDeleterEEC1ILb1ELb1EEEv>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	4618      	mov	r0, r3
 8004f18:	3708      	adds	r7, #8
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}

08004f1e <_ZNSt15__uniq_ptr_dataIh15FreeRTOSDeleterLb1ELb1EECI1St15__uniq_ptr_implIhS0_EEv>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8004f1e:	b580      	push	{r7, lr}
 8004f20:	b082      	sub	sp, #8
 8004f22:	af00      	add	r7, sp, #0
 8004f24:	6078      	str	r0, [r7, #4]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f7ff ffeb 	bl	8004f04 <_ZNSt15__uniq_ptr_implIh15FreeRTOSDeleterEC1Ev>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	4618      	mov	r0, r3
 8004f32:	3708      	adds	r7, #8
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}

08004f38 <_ZNSt10unique_ptrIA_h15FreeRTOSDeleterEC1IS1_vEEv>:
	constexpr unique_ptr() noexcept
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b082      	sub	sp, #8
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
	: _M_t()
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2200      	movs	r2, #0
 8004f44:	601a      	str	r2, [r3, #0]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	4618      	mov	r0, r3
 8004f4a:	f7ff ffe8 	bl	8004f1e <_ZNSt15__uniq_ptr_dataIh15FreeRTOSDeleterLb1ELb1EECI1St15__uniq_ptr_implIhS0_EEv>
	{ }
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	4618      	mov	r0, r3
 8004f52:	3708      	adds	r7, #8
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}

08004f58 <_ZNSt10unique_ptrIA_h15FreeRTOSDeleterED1Ev>:
      ~unique_ptr()
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b084      	sub	sp, #16
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	4618      	mov	r0, r3
 8004f64:	f000 f87c 	bl	8005060 <_ZNSt15__uniq_ptr_implIh15FreeRTOSDeleterE6_M_ptrEv>
 8004f68:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d009      	beq.n	8004f86 <_ZNSt10unique_ptrIA_h15FreeRTOSDeleterED1Ev+0x2e>
	  get_deleter()(__ptr);
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f000 f881 	bl	800507a <_ZNSt10unique_ptrIA_h15FreeRTOSDeleterE11get_deleterEv>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4619      	mov	r1, r3
 8004f80:	4610      	mov	r0, r2
 8004f82:	f7fc fab9 	bl	80014f8 <_ZNK15FreeRTOSDeleterclEPv>
	__ptr = pointer();
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	601a      	str	r2, [r3, #0]
      }
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3710      	adds	r7, #16
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}

08004f96 <_ZNSt15__uniq_ptr_implIh15FreeRTOSDeleterEaSEOS1_>:
      __uniq_ptr_impl& operator=(__uniq_ptr_impl&& __u) noexcept
 8004f96:	b580      	push	{r7, lr}
 8004f98:	b082      	sub	sp, #8
 8004f9a:	af00      	add	r7, sp, #0
 8004f9c:	6078      	str	r0, [r7, #4]
 8004f9e:	6039      	str	r1, [r7, #0]
	reset(__u.release());
 8004fa0:	6838      	ldr	r0, [r7, #0]
 8004fa2:	f000 f897 	bl	80050d4 <_ZNSt15__uniq_ptr_implIh15FreeRTOSDeleterE7releaseEv>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	4619      	mov	r1, r3
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f000 f872 	bl	8005094 <_ZNSt15__uniq_ptr_implIh15FreeRTOSDeleterE5resetEPh>
	_M_deleter() = std::forward<_Dp>(__u._M_deleter());
 8004fb0:	6838      	ldr	r0, [r7, #0]
 8004fb2:	f000 f8a4 	bl	80050fe <_ZNSt15__uniq_ptr_implIh15FreeRTOSDeleterE10_M_deleterEv>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f000 f8ad 	bl	8005118 <_ZSt7forwardI15FreeRTOSDeleterEOT_RNSt16remove_referenceIS1_E4typeE>
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f000 f89d 	bl	80050fe <_ZNSt15__uniq_ptr_implIh15FreeRTOSDeleterE10_M_deleterEv>
	return *this;
 8004fc4:	687b      	ldr	r3, [r7, #4]
      }
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3708      	adds	r7, #8
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}

08004fce <_ZNKSt10unique_ptrIA_h15FreeRTOSDeleterEcvbEv>:
      get_deleter() const noexcept
      { return _M_t._M_deleter(); }

      /// Return @c true if the stored pointer is not null.
      _GLIBCXX23_CONSTEXPR
      explicit operator bool() const noexcept
 8004fce:	b580      	push	{r7, lr}
 8004fd0:	b082      	sub	sp, #8
 8004fd2:	af00      	add	r7, sp, #0
 8004fd4:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f7fe fd36 	bl	8003a48 <_ZNKSt10unique_ptrIA_h15FreeRTOSDeleterE3getEv>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	bf14      	ite	ne
 8004fe2:	2301      	movne	r3, #1
 8004fe4:	2300      	moveq	r3, #0
 8004fe6:	b2db      	uxtb	r3, r3
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3708      	adds	r7, #8
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}

08004ff0 <_ZNKSt10unique_ptrIA_h15FreeRTOSDeleterEixEj>:
      operator[](size_t __i) const
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b082      	sub	sp, #8
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
 8004ff8:	6039      	str	r1, [r7, #0]
	__glibcxx_assert(get() != pointer());
 8004ffa:	f7fc fa69 	bl	80014d0 <_ZSt23__is_constant_evaluatedv>
 8004ffe:	4603      	mov	r3, r0
 8005000:	2b00      	cmp	r3, #0
 8005002:	d007      	beq.n	8005014 <_ZNKSt10unique_ptrIA_h15FreeRTOSDeleterEixEj+0x24>
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	f7fe fd1f 	bl	8003a48 <_ZNKSt10unique_ptrIA_h15FreeRTOSDeleterE3getEv>
 800500a:	4603      	mov	r3, r0
 800500c:	2b00      	cmp	r3, #0
 800500e:	d101      	bne.n	8005014 <_ZNKSt10unique_ptrIA_h15FreeRTOSDeleterEixEj+0x24>
 8005010:	2301      	movs	r3, #1
 8005012:	e000      	b.n	8005016 <_ZNKSt10unique_ptrIA_h15FreeRTOSDeleterEixEj+0x26>
 8005014:	2300      	movs	r3, #0
 8005016:	2b00      	cmp	r3, #0
	return get()[__i];
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	f7fe fd15 	bl	8003a48 <_ZNKSt10unique_ptrIA_h15FreeRTOSDeleterE3getEv>
 800501e:	4602      	mov	r2, r0
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	4413      	add	r3, r2
      }
 8005024:	4618      	mov	r0, r3
 8005026:	3708      	adds	r7, #8
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}

0800502c <_ZNSt10unique_ptrI11FrameBuffer15FreeRTOSDeleterE11get_deleterEv>:
      get_deleter() noexcept
 800502c:	b580      	push	{r7, lr}
 800502e:	b082      	sub	sp, #8
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	4618      	mov	r0, r3
 8005038:	f7fe fd74 	bl	8003b24 <_ZNSt15__uniq_ptr_implI11FrameBuffer15FreeRTOSDeleterE10_M_deleterEv>
 800503c:	4603      	mov	r3, r0
 800503e:	4618      	mov	r0, r3
 8005040:	3708      	adds	r7, #8
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}

08005046 <_ZNSt5tupleIJPh15FreeRTOSDeleterEEC1ILb1ELb1EEEv>:
	tuple()
 8005046:	b580      	push	{r7, lr}
 8005048:	b082      	sub	sp, #8
 800504a:	af00      	add	r7, sp, #0
 800504c:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4618      	mov	r0, r3
 8005052:	f000 f86c 	bl	800512e <_ZNSt11_Tuple_implILj0EJPh15FreeRTOSDeleterEEC1Ev>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	4618      	mov	r0, r3
 800505a:	3708      	adds	r7, #8
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}

08005060 <_ZNSt15__uniq_ptr_implIh15FreeRTOSDeleterE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 8005060:	b580      	push	{r7, lr}
 8005062:	b082      	sub	sp, #8
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	4618      	mov	r0, r3
 800506c:	f000 f86f 	bl	800514e <_ZSt3getILj0EJPh15FreeRTOSDeleterEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>
 8005070:	4603      	mov	r3, r0
 8005072:	4618      	mov	r0, r3
 8005074:	3708      	adds	r7, #8
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}

0800507a <_ZNSt10unique_ptrIA_h15FreeRTOSDeleterE11get_deleterEv>:
      get_deleter() noexcept
 800507a:	b580      	push	{r7, lr}
 800507c:	b082      	sub	sp, #8
 800507e:	af00      	add	r7, sp, #0
 8005080:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	4618      	mov	r0, r3
 8005086:	f000 f83a 	bl	80050fe <_ZNSt15__uniq_ptr_implIh15FreeRTOSDeleterE10_M_deleterEv>
 800508a:	4603      	mov	r3, r0
 800508c:	4618      	mov	r0, r3
 800508e:	3708      	adds	r7, #8
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}

08005094 <_ZNSt15__uniq_ptr_implIh15FreeRTOSDeleterE5resetEPh>:
      void reset(pointer __p) noexcept
 8005094:	b580      	push	{r7, lr}
 8005096:	b084      	sub	sp, #16
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
 800509c:	6039      	str	r1, [r7, #0]
	const pointer __old_p = _M_ptr();
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f7ff ffde 	bl	8005060 <_ZNSt15__uniq_ptr_implIh15FreeRTOSDeleterE6_M_ptrEv>
 80050a4:	4603      	mov	r3, r0
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	60fb      	str	r3, [r7, #12]
	_M_ptr() = __p;
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f7ff ffd8 	bl	8005060 <_ZNSt15__uniq_ptr_implIh15FreeRTOSDeleterE6_M_ptrEv>
 80050b0:	4602      	mov	r2, r0
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	6013      	str	r3, [r2, #0]
	if (__old_p)
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d007      	beq.n	80050cc <_ZNSt15__uniq_ptr_implIh15FreeRTOSDeleterE5resetEPh+0x38>
	  _M_deleter()(__old_p);
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	f000 f81e 	bl	80050fe <_ZNSt15__uniq_ptr_implIh15FreeRTOSDeleterE10_M_deleterEv>
 80050c2:	4603      	mov	r3, r0
 80050c4:	68f9      	ldr	r1, [r7, #12]
 80050c6:	4618      	mov	r0, r3
 80050c8:	f7fc fa16 	bl	80014f8 <_ZNK15FreeRTOSDeleterclEPv>
      }
 80050cc:	bf00      	nop
 80050ce:	3710      	adds	r7, #16
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}

080050d4 <_ZNSt15__uniq_ptr_implIh15FreeRTOSDeleterE7releaseEv>:
      pointer release() noexcept
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b084      	sub	sp, #16
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	f7ff ffbf 	bl	8005060 <_ZNSt15__uniq_ptr_implIh15FreeRTOSDeleterE6_M_ptrEv>
 80050e2:	4603      	mov	r3, r0
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	f7ff ffb9 	bl	8005060 <_ZNSt15__uniq_ptr_implIh15FreeRTOSDeleterE6_M_ptrEv>
 80050ee:	4603      	mov	r3, r0
 80050f0:	2200      	movs	r2, #0
 80050f2:	601a      	str	r2, [r3, #0]
	return __p;
 80050f4:	68fb      	ldr	r3, [r7, #12]
      }
 80050f6:	4618      	mov	r0, r3
 80050f8:	3710      	adds	r7, #16
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}

080050fe <_ZNSt15__uniq_ptr_implIh15FreeRTOSDeleterE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 80050fe:	b580      	push	{r7, lr}
 8005100:	b082      	sub	sp, #8
 8005102:	af00      	add	r7, sp, #0
 8005104:	6078      	str	r0, [r7, #4]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	4618      	mov	r0, r3
 800510a:	f000 f82d 	bl	8005168 <_ZSt3getILj1EJPh15FreeRTOSDeleterEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>
 800510e:	4603      	mov	r3, r0
 8005110:	4618      	mov	r0, r3
 8005112:	3708      	adds	r7, #8
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}

08005118 <_ZSt7forwardI15FreeRTOSDeleterEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005118:	b480      	push	{r7}
 800511a:	b083      	sub	sp, #12
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	4618      	mov	r0, r3
 8005124:	370c      	adds	r7, #12
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr

0800512e <_ZNSt11_Tuple_implILj0EJPh15FreeRTOSDeleterEEC1Ev>:
      constexpr _Tuple_impl()
 800512e:	b580      	push	{r7, lr}
 8005130:	b082      	sub	sp, #8
 8005132:	af00      	add	r7, sp, #0
 8005134:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f7fe ff20 	bl	8003f7c <_ZNSt11_Tuple_implILj1EJ15FreeRTOSDeleterEEC2Ev>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	4618      	mov	r0, r3
 8005140:	f000 f81e 	bl	8005180 <_ZNSt10_Head_baseILj0EPhLb0EEC1Ev>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	4618      	mov	r0, r3
 8005148:	3708      	adds	r7, #8
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}

0800514e <_ZSt3getILj0EJPh15FreeRTOSDeleterEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>:
    get(tuple<_Elements...>& __t) noexcept
 800514e:	b580      	push	{r7, lr}
 8005150:	b082      	sub	sp, #8
 8005152:	af00      	add	r7, sp, #0
 8005154:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	4618      	mov	r0, r3
 800515a:	f000 f81f 	bl	800519c <_ZSt12__get_helperILj0EPhJ15FreeRTOSDeleterEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>
 800515e:	4603      	mov	r3, r0
 8005160:	4618      	mov	r0, r3
 8005162:	3708      	adds	r7, #8
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}

08005168 <_ZSt3getILj1EJPh15FreeRTOSDeleterEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>:
    get(tuple<_Elements...>& __t) noexcept
 8005168:	b580      	push	{r7, lr}
 800516a:	b082      	sub	sp, #8
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	f7fe fd3b 	bl	8003bec <_ZSt12__get_helperILj1E15FreeRTOSDeleterJEERT0_RSt11_Tuple_implIXT_EJS1_DpT1_EE>
 8005176:	4603      	mov	r3, r0
 8005178:	4618      	mov	r0, r3
 800517a:	3708      	adds	r7, #8
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}

08005180 <_ZNSt10_Head_baseILj0EPhLb0EEC1Ev>:
      constexpr _Head_base()
 8005180:	b480      	push	{r7}
 8005182:	b083      	sub	sp, #12
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2200      	movs	r2, #0
 800518c:	601a      	str	r2, [r3, #0]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	4618      	mov	r0, r3
 8005192:	370c      	adds	r7, #12
 8005194:	46bd      	mov	sp, r7
 8005196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519a:	4770      	bx	lr

0800519c <_ZSt12__get_helperILj0EPhJ15FreeRTOSDeleterEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800519c:	b580      	push	{r7, lr}
 800519e:	b082      	sub	sp, #8
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f000 f805 	bl	80051b4 <_ZNSt11_Tuple_implILj0EJPh15FreeRTOSDeleterEE7_M_headERS2_>
 80051aa:	4603      	mov	r3, r0
 80051ac:	4618      	mov	r0, r3
 80051ae:	3708      	adds	r7, #8
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}

080051b4 <_ZNSt11_Tuple_implILj0EJPh15FreeRTOSDeleterEE7_M_headERS2_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b082      	sub	sp, #8
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	4618      	mov	r0, r3
 80051c0:	f000 f805 	bl	80051ce <_ZNSt10_Head_baseILj0EPhLb0EE7_M_headERS1_>
 80051c4:	4603      	mov	r3, r0
 80051c6:	4618      	mov	r0, r3
 80051c8:	3708      	adds	r7, #8
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}

080051ce <_ZNSt10_Head_baseILj0EPhLb0EE7_M_headERS1_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80051ce:	b480      	push	{r7}
 80051d0:	b083      	sub	sp, #12
 80051d2:	af00      	add	r7, sp, #0
 80051d4:	6078      	str	r0, [r7, #4]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	4618      	mov	r0, r3
 80051da:	370c      	adds	r7, #12
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr

080051e4 <_Z41__static_initialization_and_destruction_0ii>:
						Addr = x + y * this->WidthByte ;
						this->Image[Addr] = \
						(unsigned char)image_buffer[Addr+ (this->HeightByte)*this->WidthByte*(Region - 1)];
				}
		}
}
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b082      	sub	sp, #8
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	6039      	str	r1, [r7, #0]
std::unique_ptr<FrameBuffer, FreeRTOSDeleter> FrameBuffer::instance = nullptr;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d107      	bne.n	8005204 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d102      	bne.n	8005204 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80051fe:	4803      	ldr	r0, [pc, #12]	@ (800520c <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8005200:	f7ff fe5e 	bl	8004ec0 <_ZNSt10unique_ptrI11FrameBuffer15FreeRTOSDeleterED1Ev>
}
 8005204:	bf00      	nop
 8005206:	3708      	adds	r7, #8
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}
 800520c:	20000680 	.word	0x20000680

08005210 <_GLOBAL__sub_I__ZN11FrameBuffer8instanceE>:
 8005210:	b580      	push	{r7, lr}
 8005212:	af00      	add	r7, sp, #0
 8005214:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8005218:	2001      	movs	r0, #1
 800521a:	f7ff ffe3 	bl	80051e4 <_Z41__static_initialization_and_destruction_0ii>
 800521e:	bd80      	pop	{r7, pc}

08005220 <_GLOBAL__sub_D__ZN11FrameBuffer8instanceE>:
 8005220:	b580      	push	{r7, lr}
 8005222:	af00      	add	r7, sp, #0
 8005224:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8005228:	2000      	movs	r0, #0
 800522a:	f7ff ffdb 	bl	80051e4 <_Z41__static_initialization_and_destruction_0ii>
 800522e:	bd80      	pop	{r7, pc}

08005230 <_Z26make_unique_freertos_arrayj>:
 *      Author: kobru
 */
#include "FreeRTOSMemory.hpp"
#include "main.h"

std::unique_ptr<UBYTE[], FreeRTOSDeleter> make_unique_freertos_array(size_t size) {
 8005230:	b580      	push	{r7, lr}
 8005232:	b082      	sub	sp, #8
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	6039      	str	r1, [r7, #0]
    return std::unique_ptr<uint8_t[], FreeRTOSDeleter>(
        static_cast<UBYTE*>(pvPortMalloc(size))
 800523a:	6838      	ldr	r0, [r7, #0]
 800523c:	f007 fa3e 	bl	800c6bc <pvPortMalloc>
 8005240:	4603      	mov	r3, r0
    );
 8005242:	4619      	mov	r1, r3
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f000 f814 	bl	8005272 <_ZNSt10unique_ptrIA_h15FreeRTOSDeleterEC1IPhS1_vbEET_>
}
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	3708      	adds	r7, #8
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}

08005252 <_ZNSt15__uniq_ptr_dataIh15FreeRTOSDeleterLb1ELb1EECI1St15__uniq_ptr_implIhS0_EEPh>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8005252:	b580      	push	{r7, lr}
 8005254:	b082      	sub	sp, #8
 8005256:	af00      	add	r7, sp, #0
 8005258:	6078      	str	r0, [r7, #4]
 800525a:	6039      	str	r1, [r7, #0]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	683a      	ldr	r2, [r7, #0]
 8005260:	4611      	mov	r1, r2
 8005262:	4618      	mov	r0, r3
 8005264:	f000 f814 	bl	8005290 <_ZNSt15__uniq_ptr_implIh15FreeRTOSDeleterEC1EPh>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	4618      	mov	r0, r3
 800526c:	3708      	adds	r7, #8
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}

08005272 <_ZNSt10unique_ptrIA_h15FreeRTOSDeleterEC1IPhS1_vbEET_>:
	unique_ptr(_Up __p) noexcept
 8005272:	b580      	push	{r7, lr}
 8005274:	b082      	sub	sp, #8
 8005276:	af00      	add	r7, sp, #0
 8005278:	6078      	str	r0, [r7, #4]
 800527a:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6839      	ldr	r1, [r7, #0]
 8005280:	4618      	mov	r0, r3
 8005282:	f7ff ffe6 	bl	8005252 <_ZNSt15__uniq_ptr_dataIh15FreeRTOSDeleterLb1ELb1EECI1St15__uniq_ptr_implIhS0_EEPh>
        { }
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	4618      	mov	r0, r3
 800528a:	3708      	adds	r7, #8
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}

08005290 <_ZNSt15__uniq_ptr_implIh15FreeRTOSDeleterEC1EPh>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 8005290:	b580      	push	{r7, lr}
 8005292:	b082      	sub	sp, #8
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
 8005298:	6039      	str	r1, [r7, #0]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	4618      	mov	r0, r3
 800529e:	f7ff fed2 	bl	8005046 <_ZNSt5tupleIJPh15FreeRTOSDeleterEEC1ILb1ELb1EEEv>
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f7ff fedc 	bl	8005060 <_ZNSt15__uniq_ptr_implIh15FreeRTOSDeleterE6_M_ptrEv>
 80052a8:	4602      	mov	r2, r0
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	6013      	str	r3, [r2, #0]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	4618      	mov	r0, r3
 80052b2:	3708      	adds	r7, #8
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}

080052b8 <_ZN8Drawable13triggerActionEv>:
    void triggerAction() {
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b082      	sub	sp, #8
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
    	if (onSelect)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	68db      	ldr	r3, [r3, #12]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d002      	beq.n	80052ce <_ZN8Drawable13triggerActionEv+0x16>
    		onSelect();
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	68db      	ldr	r3, [r3, #12]
 80052cc:	4798      	blx	r3
    }
 80052ce:	bf00      	nop
 80052d0:	3708      	adds	r7, #8
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}

080052d6 <_ZN6Screen15optimizedRenderEv>:
    void optimizedRender() {
 80052d6:	b590      	push	{r4, r7, lr}
 80052d8:	b085      	sub	sp, #20
 80052da:	af00      	add	r7, sp, #0
 80052dc:	6078      	str	r0, [r7, #4]
    	FrameBuffer& fb = FrameBuffer::getInstance();
 80052de:	23ff      	movs	r3, #255	@ 0xff
 80052e0:	2200      	movs	r2, #0
 80052e2:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 80052e6:	f44f 7048 	mov.w	r0, #800	@ 0x320
 80052ea:	f7fc f911 	bl	8001510 <_ZN11FrameBuffer11getInstanceEtttt>
 80052ee:	60b8      	str	r0, [r7, #8]
        for (int i = 0; i < elementCount; i++) {
 80052f0:	2300      	movs	r3, #0
 80052f2:	60fb      	str	r3, [r7, #12]
 80052f4:	e012      	b.n	800531c <_ZN6Screen15optimizedRenderEv+0x46>
            elements[i]->draw(fb);
 80052f6:	687a      	ldr	r2, [r7, #4]
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	009b      	lsls	r3, r3, #2
 80052fc:	4413      	add	r3, r2
 80052fe:	6858      	ldr	r0, [r3, #4]
 8005300:	687a      	ldr	r2, [r7, #4]
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	009b      	lsls	r3, r3, #2
 8005306:	4413      	add	r3, r2
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	681c      	ldr	r4, [r3, #0]
 800530e:	2300      	movs	r3, #0
 8005310:	2200      	movs	r2, #0
 8005312:	68b9      	ldr	r1, [r7, #8]
 8005314:	47a0      	blx	r4
        for (int i = 0; i < elementCount; i++) {
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	3301      	adds	r3, #1
 800531a:	60fb      	str	r3, [r7, #12]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005320:	68fa      	ldr	r2, [r7, #12]
 8005322:	429a      	cmp	r2, r3
 8005324:	dbe7      	blt.n	80052f6 <_ZN6Screen15optimizedRenderEv+0x20>
    }
 8005326:	bf00      	nop
 8005328:	bf00      	nop
 800532a:	3714      	adds	r7, #20
 800532c:	46bd      	mov	sp, r7
 800532e:	bd90      	pop	{r4, r7, pc}

08005330 <_ZN6Screen10selectNextEv>:
    void selectNext() {
 8005330:	b580      	push	{r7, lr}
 8005332:	b084      	sub	sp, #16
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
    	if (currentSelection > -1){
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	2b00      	cmp	r3, #0
 800533e:	db43      	blt.n	80053c8 <_ZN6Screen10selectNextEv+0x98>
    		elements[currentSelection]->highlight(false);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	687a      	ldr	r2, [r7, #4]
 8005346:	009b      	lsls	r3, r3, #2
 8005348:	4413      	add	r3, r2
 800534a:	6858      	ldr	r0, [r3, #4]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	687a      	ldr	r2, [r7, #4]
 8005352:	009b      	lsls	r3, r3, #2
 8005354:	4413      	add	r3, r2
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	330c      	adds	r3, #12
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	2100      	movs	r1, #0
 8005360:	4798      	blx	r3
            int previousSelection = currentSelection;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	60fb      	str	r3, [r7, #12]
                currentSelection = (currentSelection + 1) % elementCount;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	3301      	adds	r3, #1
 800536e:	687a      	ldr	r2, [r7, #4]
 8005370:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005372:	fb93 f1f2 	sdiv	r1, r3, r2
 8005376:	fb01 f202 	mul.w	r2, r1, r2
 800537a:	1a9a      	subs	r2, r3, r2
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	601a      	str	r2, [r3, #0]
                if(elements[currentSelection]->interactable()){
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	687a      	ldr	r2, [r7, #4]
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	4413      	add	r3, r2
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	4618      	mov	r0, r3
 800538e:	f7fc f97c 	bl	800168a <_ZN8Drawable12interactableEv>
 8005392:	4603      	mov	r3, r0
 8005394:	2b00      	cmp	r3, #0
 8005396:	d105      	bne.n	80053a4 <_ZN6Screen10selectNextEv+0x74>
            }while(currentSelection !=  previousSelection);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	68fa      	ldr	r2, [r7, #12]
 800539e:	429a      	cmp	r2, r3
 80053a0:	d1e2      	bne.n	8005368 <_ZN6Screen10selectNextEv+0x38>
 80053a2:	e000      	b.n	80053a6 <_ZN6Screen10selectNextEv+0x76>
                	break;
 80053a4:	bf00      	nop
            elements[currentSelection]->highlight(true);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	687a      	ldr	r2, [r7, #4]
 80053ac:	009b      	lsls	r3, r3, #2
 80053ae:	4413      	add	r3, r2
 80053b0:	6858      	ldr	r0, [r3, #4]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	687a      	ldr	r2, [r7, #4]
 80053b8:	009b      	lsls	r3, r3, #2
 80053ba:	4413      	add	r3, r2
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	330c      	adds	r3, #12
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	2101      	movs	r1, #1
 80053c6:	4798      	blx	r3
    }
 80053c8:	bf00      	nop
 80053ca:	3710      	adds	r7, #16
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}

080053d0 <_ZN6Screen10selectPrevEv>:
    void selectPrev() {
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b084      	sub	sp, #16
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
    	if (currentSelection > -1)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	db44      	blt.n	800546a <_ZN6Screen10selectPrevEv+0x9a>
    		elements[currentSelection]->highlight(false);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	687a      	ldr	r2, [r7, #4]
 80053e6:	009b      	lsls	r3, r3, #2
 80053e8:	4413      	add	r3, r2
 80053ea:	6858      	ldr	r0, [r3, #4]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	687a      	ldr	r2, [r7, #4]
 80053f2:	009b      	lsls	r3, r3, #2
 80053f4:	4413      	add	r3, r2
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	330c      	adds	r3, #12
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	2100      	movs	r1, #0
 8005400:	4798      	blx	r3
            int previousSelection = currentSelection;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	60fb      	str	r3, [r7, #12]
                currentSelection = (currentSelection == 0) ? elementCount - 1 : currentSelection - 1;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d103      	bne.n	8005418 <_ZN6Screen10selectPrevEv+0x48>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005414:	3b01      	subs	r3, #1
 8005416:	e002      	b.n	800541e <_ZN6Screen10selectPrevEv+0x4e>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	3b01      	subs	r3, #1
 800541e:	687a      	ldr	r2, [r7, #4]
 8005420:	6013      	str	r3, [r2, #0]
                if(elements[currentSelection]->interactable()){
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	687a      	ldr	r2, [r7, #4]
 8005428:	009b      	lsls	r3, r3, #2
 800542a:	4413      	add	r3, r2
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	4618      	mov	r0, r3
 8005430:	f7fc f92b 	bl	800168a <_ZN8Drawable12interactableEv>
 8005434:	4603      	mov	r3, r0
 8005436:	2b00      	cmp	r3, #0
 8005438:	d105      	bne.n	8005446 <_ZN6Screen10selectPrevEv+0x76>
            }while(currentSelection !=  previousSelection);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	68fa      	ldr	r2, [r7, #12]
 8005440:	429a      	cmp	r2, r3
 8005442:	d1e1      	bne.n	8005408 <_ZN6Screen10selectPrevEv+0x38>
 8005444:	e000      	b.n	8005448 <_ZN6Screen10selectPrevEv+0x78>
                	break;
 8005446:	bf00      	nop
            elements[currentSelection]->highlight(true);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	687a      	ldr	r2, [r7, #4]
 800544e:	009b      	lsls	r3, r3, #2
 8005450:	4413      	add	r3, r2
 8005452:	6858      	ldr	r0, [r3, #4]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	687a      	ldr	r2, [r7, #4]
 800545a:	009b      	lsls	r3, r3, #2
 800545c:	4413      	add	r3, r2
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	330c      	adds	r3, #12
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	2101      	movs	r1, #1
 8005468:	4798      	blx	r3
    }
 800546a:	bf00      	nop
 800546c:	3710      	adds	r7, #16
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}

08005472 <_ZN6Screen8interactEv>:
    void interact() {
 8005472:	b580      	push	{r7, lr}
 8005474:	b082      	sub	sp, #8
 8005476:	af00      	add	r7, sp, #0
 8005478:	6078      	str	r0, [r7, #4]
    	if (currentSelection > -1)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	2b00      	cmp	r3, #0
 8005480:	db08      	blt.n	8005494 <_ZN6Screen8interactEv+0x22>
    		elements[currentSelection]->triggerAction();
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	687a      	ldr	r2, [r7, #4]
 8005488:	009b      	lsls	r3, r3, #2
 800548a:	4413      	add	r3, r2
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	4618      	mov	r0, r3
 8005490:	f7ff ff12 	bl	80052b8 <_ZN8Drawable13triggerActionEv>
    }
 8005494:	bf00      	nop
 8005496:	3708      	adds	r7, #8
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}

0800549c <_ZN6Screen11buttonPressE6Button>:
    void buttonPress(Button bt){
 800549c:	b580      	push	{r7, lr}
 800549e:	b082      	sub	sp, #8
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	6039      	str	r1, [r7, #0]
    	if(buttonCb){
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d003      	beq.n	80054b6 <_ZN6Screen11buttonPressE6Button+0x1a>
    		buttonCb(bt);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054b2:	6838      	ldr	r0, [r7, #0]
 80054b4:	4798      	blx	r3
    }
 80054b6:	bf00      	nop
 80054b8:	3708      	adds	r7, #8
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}

080054be <_ZN13ScreenManager13initFirstTimeEv>:
#include "ScreenManager.h"
#include "FreeRTOS.h"
#include "task.h"


void ScreenManager::initFirstTime(){
 80054be:	b580      	push	{r7, lr}
 80054c0:	b082      	sub	sp, #8
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	6078      	str	r0, [r7, #4]
	if (EPDController){
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d00d      	beq.n	80054ea <_ZN13ScreenManager13initFirstTimeEv+0x2c>
		EPDController->pinInit();
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4618      	mov	r0, r3
 80054d4:	f7fb fd0c 	bl	8000ef0 <_ZN9EPD_4in267pinInitEv>
		EPDController->EPD_4in26_Init();
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4618      	mov	r0, r3
 80054de:	f7fb fee3 	bl	80012a8 <_ZN9EPD_4in2614EPD_4in26_InitEv>

		vTaskDelay(500);
 80054e2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80054e6:	f005 fd87 	bl	800aff8 <vTaskDelay>

	}
}
 80054ea:	bf00      	nop
 80054ec:	3708      	adds	r7, #8
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}

080054f2 <_ZN13ScreenManager9addScreenE10ScreenTypeP6Screen>:

void ScreenManager::addScreen(ScreenType screentype, Screen* scr) {
 80054f2:	b580      	push	{r7, lr}
 80054f4:	b086      	sub	sp, #24
 80054f6:	af00      	add	r7, sp, #0
 80054f8:	60f8      	str	r0, [r7, #12]
 80054fa:	60b9      	str	r1, [r7, #8]
 80054fc:	607a      	str	r2, [r7, #4]
    size_t index = static_cast<size_t>(screentype);
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	617b      	str	r3, [r7, #20]
    if (index < static_cast<size_t>(ScreenType::MaxScreens)) {
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	2b06      	cmp	r3, #6
 8005506:	d809      	bhi.n	800551c <_ZN13ScreenManager9addScreenE10ScreenTypeP6Screen+0x2a>
        screens[index] = scr;
 8005508:	68fa      	ldr	r2, [r7, #12]
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	3302      	adds	r3, #2
 800550e:	009b      	lsls	r3, r3, #2
 8005510:	4413      	add	r3, r2
 8005512:	687a      	ldr	r2, [r7, #4]
 8005514:	605a      	str	r2, [r3, #4]
        displayActiveScreen();
 8005516:	68f8      	ldr	r0, [r7, #12]
 8005518:	f000 f86e 	bl	80055f8 <_ZN13ScreenManager19displayActiveScreenEv>
    }
}
 800551c:	bf00      	nop
 800551e:	3718      	adds	r7, #24
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}

08005524 <_ZN13ScreenManager18updateActiveScreenEv>:

void ScreenManager::updateActiveScreen(){
 8005524:	b580      	push	{r7, lr}
 8005526:	b08e      	sub	sp, #56	@ 0x38
 8005528:	af02      	add	r7, sp, #8
 800552a:	6078      	str	r0, [r7, #4]
	if(currentScreen){
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d03f      	beq.n	80055b4 <_ZN13ScreenManager18updateActiveScreenEv+0x90>


		uint32_t start_render_time = xTaskGetTickCount();
 8005534:	f005 feb2 	bl	800b29c <xTaskGetTickCount>
 8005538:	62f8      	str	r0, [r7, #44]	@ 0x2c

		currentScreen->optimizedRender();
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	4618      	mov	r0, r3
 8005540:	f7ff fec9 	bl	80052d6 <_ZN6Screen15optimizedRenderEv>

		uint32_t end_render_time = xTaskGetTickCount();
 8005544:	f005 feaa 	bl	800b29c <xTaskGetTickCount>
 8005548:	62b8      	str	r0, [r7, #40]	@ 0x28

		uint32_t difference_render = end_render_time - start_render_time;
 800554a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800554c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800554e:	1ad3      	subs	r3, r2, r3
 8005550:	627b      	str	r3, [r7, #36]	@ 0x24



		const UBYTE* Image = currentScreen->getImage();
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	4618      	mov	r0, r3
 8005558:	f7fc fa56 	bl	8001a08 <_ZN6Screen8getImageEv>
 800555c:	6238      	str	r0, [r7, #32]

		//writes the image to the full back buffer

		uint32_t start = xTaskGetTickCount();
 800555e:	f005 fe9d 	bl	800b29c <xTaskGetTickCount>
 8005562:	61f8      	str	r0, [r7, #28]
		EPDController->EPD_4in26_WriteToBuffer(Image, 0, 0,  EPD_4in26_WIDTH,EPD_4in26_HEIGHT);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6818      	ldr	r0, [r3, #0]
 8005568:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 800556c:	9301      	str	r3, [sp, #4]
 800556e:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8005572:	9300      	str	r3, [sp, #0]
 8005574:	2300      	movs	r3, #0
 8005576:	2200      	movs	r2, #0
 8005578:	6a39      	ldr	r1, [r7, #32]
 800557a:	f7fb ff44 	bl	8001406 <_ZN9EPD_4in2623EPD_4in26_WriteToBufferEPKhtttt>
		uint32_t end_time_spi = xTaskGetTickCount();
 800557e:	f005 fe8d 	bl	800b29c <xTaskGetTickCount>
 8005582:	61b8      	str	r0, [r7, #24]
		//updates the screen witht eh back buffer
		EPDController->EPD_4in26_TurnOnDisplay_Part();
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4618      	mov	r0, r3
 800558a:	f7fb fde3 	bl	8001154 <_ZN9EPD_4in2628EPD_4in26_TurnOnDisplay_PartEv>
		uint32_t endTimeAfterRefresh = xTaskGetTickCount();
 800558e:	f005 fe85 	bl	800b29c <xTaskGetTickCount>
 8005592:	6178      	str	r0, [r7, #20]

		uint32_t spi_communication = end_time_spi - start;
 8005594:	69ba      	ldr	r2, [r7, #24]
 8005596:	69fb      	ldr	r3, [r7, #28]
 8005598:	1ad3      	subs	r3, r2, r3
 800559a:	613b      	str	r3, [r7, #16]
		uint32_t refresh_time = endTimeAfterRefresh - start;
 800559c:	697a      	ldr	r2, [r7, #20]
 800559e:	69fb      	ldr	r3, [r7, #28]
 80055a0:	1ad3      	subs	r3, r2, r3
 80055a2:	60fb      	str	r3, [r7, #12]

//		LOG_INFO("render time: %d",difference_render);
		LOG_INFO("render time: %d SPI communication: %d, refresh %d",difference_render, spi_communication, refresh_time);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	9300      	str	r3, [sp, #0]
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055ac:	4903      	ldr	r1, [pc, #12]	@ (80055bc <_ZN13ScreenManager18updateActiveScreenEv+0x98>)
 80055ae:	2003      	movs	r0, #3
 80055b0:	f7fb fc4a 	bl	8000e48 <_Z12log_message2hPKcz>

	}
}
 80055b4:	bf00      	nop
 80055b6:	3730      	adds	r7, #48	@ 0x30
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}
 80055bc:	0800ff04 	.word	0x0800ff04

080055c0 <_ZN13ScreenManager18setNewActiveScreenE10ScreenType>:
void ScreenManager::setNewActiveScreen(ScreenType scr_type){
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b084      	sub	sp, #16
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
 80055c8:	6039      	str	r1, [r7, #0]
    size_t index = static_cast<size_t>(scr_type);
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	60fb      	str	r3, [r7, #12]
    if (index < static_cast<size_t>(ScreenType::MaxScreens)) {
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2b06      	cmp	r3, #6
 80055d2:	d80d      	bhi.n	80055f0 <_ZN13ScreenManager18setNewActiveScreenE10ScreenType+0x30>
//    	prevScreen = currentScreen;
		currentScreen = screens[index];
 80055d4:	687a      	ldr	r2, [r7, #4]
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	3302      	adds	r3, #2
 80055da:	009b      	lsls	r3, r3, #2
 80055dc:	4413      	add	r3, r2
 80055de:	685a      	ldr	r2, [r3, #4]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	605a      	str	r2, [r3, #4]
		screentype = scr_type;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	683a      	ldr	r2, [r7, #0]
 80055e8:	609a      	str	r2, [r3, #8]
		displayActiveScreen();
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f000 f804 	bl	80055f8 <_ZN13ScreenManager19displayActiveScreenEv>

//		if(prevScreen == nullptr){
//			currentScreen = prevScreen;
//		}
	}
}
 80055f0:	bf00      	nop
 80055f2:	3710      	adds	r7, #16
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}

080055f8 <_ZN13ScreenManager19displayActiveScreenEv>:

void ScreenManager::displayActiveScreen(){
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b084      	sub	sp, #16
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
	if(currentScreen){
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d010      	beq.n	800562a <_ZN13ScreenManager19displayActiveScreenEv+0x32>
		currentScreen->cleanRender();
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	4618      	mov	r0, r3
 800560e:	f7fc fa10 	bl	8001a32 <_ZN6Screen11cleanRenderEv>
//		currentScreen->OptimizedRender();
		UBYTE* img = currentScreen->getImage();
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	4618      	mov	r0, r3
 8005618:	f7fc f9f6 	bl	8001a08 <_ZN6Screen8getImageEv>
 800561c:	60f8      	str	r0, [r7, #12]
		EPDController->EPD_4in26_Display_Base(img);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	68f9      	ldr	r1, [r7, #12]
 8005624:	4618      	mov	r0, r3
 8005626:	f7fb fea9 	bl	800137c <_ZN9EPD_4in2622EPD_4in26_Display_BaseEPKh>
	}
}
 800562a:	bf00      	nop
 800562c:	3710      	adds	r7, #16
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}

08005632 <_ZN13ScreenManager10onInteractEv>:

void ScreenManager::onInteract(){
 8005632:	b580      	push	{r7, lr}
 8005634:	b082      	sub	sp, #8
 8005636:	af00      	add	r7, sp, #0
 8005638:	6078      	str	r0, [r7, #4]
	if(currentScreen){
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d004      	beq.n	800564c <_ZN13ScreenManager10onInteractEv+0x1a>
		currentScreen->interact();
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	4618      	mov	r0, r3
 8005648:	f7ff ff13 	bl	8005472 <_ZN6Screen8interactEv>
	}
}
 800564c:	bf00      	nop
 800564e:	3708      	adds	r7, #8
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}

08005654 <_ZN13ScreenManager16nextInteractableEv>:


void ScreenManager::nextInteractable(){
 8005654:	b580      	push	{r7, lr}
 8005656:	b082      	sub	sp, #8
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
	if(currentScreen){
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d004      	beq.n	800566e <_ZN13ScreenManager16nextInteractableEv+0x1a>
		currentScreen->selectNext();
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	4618      	mov	r0, r3
 800566a:	f7ff fe61 	bl	8005330 <_ZN6Screen10selectNextEv>
	}
}
 800566e:	bf00      	nop
 8005670:	3708      	adds	r7, #8
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}

08005676 <_ZN13ScreenManager16prevInteractableEv>:

void ScreenManager::prevInteractable(){
 8005676:	b580      	push	{r7, lr}
 8005678:	b082      	sub	sp, #8
 800567a:	af00      	add	r7, sp, #0
 800567c:	6078      	str	r0, [r7, #4]
	if(currentScreen){
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d004      	beq.n	8005690 <_ZN13ScreenManager16prevInteractableEv+0x1a>
		currentScreen->selectPrev();
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	4618      	mov	r0, r3
 800568c:	f7ff fea0 	bl	80053d0 <_ZN6Screen10selectPrevEv>
	}
}
 8005690:	bf00      	nop
 8005692:	3708      	adds	r7, #8
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}

08005698 <_ZN13ScreenManager11buttonPressE6Button>:

void ScreenManager::buttonPress(Button bt){
 8005698:	b580      	push	{r7, lr}
 800569a:	b082      	sub	sp, #8
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
 80056a0:	6039      	str	r1, [r7, #0]
	if(currentScreen){
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d005      	beq.n	80056b6 <_ZN13ScreenManager11buttonPressE6Button+0x1e>
		currentScreen->buttonPress(bt);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	6839      	ldr	r1, [r7, #0]
 80056b0:	4618      	mov	r0, r3
 80056b2:	f7ff fef3 	bl	800549c <_ZN6Screen11buttonPressE6Button>
	}
}
 80056b6:	bf00      	nop
 80056b8:	3708      	adds	r7, #8
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}
	...

080056c0 <_ZN13ScreenManager13setPrevScreenEv>:

void ScreenManager::setPrevScreen(){
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b082      	sub	sp, #8
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
	switch(screentype){
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	3b01      	subs	r3, #1
 80056ce:	2b05      	cmp	r3, #5
 80056d0:	d81c      	bhi.n	800570c <_ZN13ScreenManager13setPrevScreenEv+0x4c>
 80056d2:	a201      	add	r2, pc, #4	@ (adr r2, 80056d8 <_ZN13ScreenManager13setPrevScreenEv+0x18>)
 80056d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056d8:	080056f1 	.word	0x080056f1
 80056dc:	0800570d 	.word	0x0800570d
 80056e0:	080056fb 	.word	0x080056fb
 80056e4:	08005705 	.word	0x08005705
 80056e8:	080056fb 	.word	0x080056fb
 80056ec:	080056fb 	.word	0x080056fb
	case ScreenType::MainMenuScreen:
		setNewActiveScreen(ScreenType::HomeScreen);
 80056f0:	2100      	movs	r1, #0
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f7ff ff64 	bl	80055c0 <_ZN13ScreenManager18setNewActiveScreenE10ScreenType>
		break;
 80056f8:	e009      	b.n	800570e <_ZN13ScreenManager13setPrevScreenEv+0x4e>
	case ScreenType::ScheduleScreen:
	case ScreenType::AlertScreen:
	case ScreenType::ClockDateScreen:
		setNewActiveScreen(ScreenType::MainMenuScreen);
 80056fa:	2101      	movs	r1, #1
 80056fc:	6878      	ldr	r0, [r7, #4]
 80056fe:	f7ff ff5f 	bl	80055c0 <_ZN13ScreenManager18setNewActiveScreenE10ScreenType>
		break;
 8005702:	e004      	b.n	800570e <_ZN13ScreenManager13setPrevScreenEv+0x4e>
	case ScreenType::SetPointScreen:
		setNewActiveScreen(ScreenType::ScheduleScreen);
 8005704:	2103      	movs	r1, #3
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f7ff ff5a 	bl	80055c0 <_ZN13ScreenManager18setNewActiveScreenE10ScreenType>
	default:
		break;
 800570c:	bf00      	nop
	}
}
 800570e:	bf00      	nop
 8005710:	3708      	adds	r7, #8
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}
 8005716:	bf00      	nop

08005718 <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8005718:	b480      	push	{r7}
 800571a:	b083      	sub	sp, #12
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
 8005720:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8005722:	bf00      	nop
 8005724:	370c      	adds	r7, #12
 8005726:	46bd      	mov	sp, r7
 8005728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572c:	4770      	bx	lr

0800572e <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
void vApplicationMallocFailedHook(void)
{
 800572e:	b480      	push	{r7}
 8005730:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8005732:	bf00      	nop
 8005734:	46bd      	mov	sp, r7
 8005736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573a:	4770      	bx	lr

0800573c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800573c:	b480      	push	{r7}
 800573e:	b085      	sub	sp, #20
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8005744:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005748:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800574a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	4313      	orrs	r3, r2
 8005752:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8005754:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005758:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	4013      	ands	r3, r2
 800575e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005760:	68fb      	ldr	r3, [r7, #12]
}
 8005762:	bf00      	nop
 8005764:	3714      	adds	r7, #20
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr
	...

08005770 <HAL_GPIO_EXTI_Callback>:
void EPaperEntry(void *argument);

/* USER CODE BEGIN PFP */

#define DEBOUNCE_DELAY_MS 200  // Adjust debounce time as needed
void HAL_GPIO_EXTI_Callback(uint16_t pin){
 8005770:	b580      	push	{r7, lr}
 8005772:	b086      	sub	sp, #24
 8005774:	af00      	add	r7, sp, #0
 8005776:	4603      	mov	r3, r0
 8005778:	80fb      	strh	r3, [r7, #6]


    static uint32_t lastPressTime = 0;  // Store last press time
    uint32_t currentTime = xTaskGetTickCountFromISR();  // Get system time (ticks)
 800577a:	f005 fd9f 	bl	800b2bc <xTaskGetTickCountFromISR>
 800577e:	6178      	str	r0, [r7, #20]

    if ((currentTime - lastPressTime) < pdMS_TO_TICKS(DEBOUNCE_DELAY_MS)) {
 8005780:	4b2e      	ldr	r3, [pc, #184]	@ (800583c <HAL_GPIO_EXTI_Callback+0xcc>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	697a      	ldr	r2, [r7, #20]
 8005786:	1ad3      	subs	r3, r2, r3
 8005788:	2bc7      	cmp	r3, #199	@ 0xc7
 800578a:	d952      	bls.n	8005832 <HAL_GPIO_EXTI_Callback+0xc2>
        return;  // Ignore if press happens too soon
    }
    lastPressTime = currentTime;  // Update last press time
 800578c:	4a2b      	ldr	r2, [pc, #172]	@ (800583c <HAL_GPIO_EXTI_Callback+0xcc>)
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	6013      	str	r3, [r2, #0]

    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8005792:	2300      	movs	r3, #0
 8005794:	613b      	str	r3, [r7, #16]
    Button stateToSend = Button::Error;
 8005796:	2305      	movs	r3, #5
 8005798:	60fb      	str	r3, [r7, #12]

	switch(pin){
 800579a:	88fb      	ldrh	r3, [r7, #6]
 800579c:	3b01      	subs	r3, #1
 800579e:	2b0f      	cmp	r3, #15
 80057a0:	d831      	bhi.n	8005806 <HAL_GPIO_EXTI_Callback+0x96>
 80057a2:	a201      	add	r2, pc, #4	@ (adr r2, 80057a8 <HAL_GPIO_EXTI_Callback+0x38>)
 80057a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057a8:	080057e9 	.word	0x080057e9
 80057ac:	080057ef 	.word	0x080057ef
 80057b0:	08005807 	.word	0x08005807
 80057b4:	080057f5 	.word	0x080057f5
 80057b8:	08005807 	.word	0x08005807
 80057bc:	08005807 	.word	0x08005807
 80057c0:	08005807 	.word	0x08005807
 80057c4:	080057fb 	.word	0x080057fb
 80057c8:	08005807 	.word	0x08005807
 80057cc:	08005807 	.word	0x08005807
 80057d0:	08005807 	.word	0x08005807
 80057d4:	08005807 	.word	0x08005807
 80057d8:	08005807 	.word	0x08005807
 80057dc:	08005807 	.word	0x08005807
 80057e0:	08005807 	.word	0x08005807
 80057e4:	08005801 	.word	0x08005801
	case(Button_1_Pin):
		stateToSend = Button::Up;
 80057e8:	2300      	movs	r3, #0
 80057ea:	60fb      	str	r3, [r7, #12]
		break;
 80057ec:	e00c      	b.n	8005808 <HAL_GPIO_EXTI_Callback+0x98>
	case(Button_2_Pin):
		stateToSend = Button::Right;
 80057ee:	2304      	movs	r3, #4
 80057f0:	60fb      	str	r3, [r7, #12]
		break;
 80057f2:	e009      	b.n	8005808 <HAL_GPIO_EXTI_Callback+0x98>
	case(Button_3_Pin):
		stateToSend = Button::Middle;
 80057f4:	2303      	movs	r3, #3
 80057f6:	60fb      	str	r3, [r7, #12]
		break;
 80057f8:	e006      	b.n	8005808 <HAL_GPIO_EXTI_Callback+0x98>
	case(Button_4_Pin):
		stateToSend = Button::Left;
 80057fa:	2302      	movs	r3, #2
 80057fc:	60fb      	str	r3, [r7, #12]
		break;
 80057fe:	e003      	b.n	8005808 <HAL_GPIO_EXTI_Callback+0x98>
	case(Button_5_Pin):
		stateToSend = Button::Down;
 8005800:	2301      	movs	r3, #1
 8005802:	60fb      	str	r3, [r7, #12]
		break;
 8005804:	e000      	b.n	8005808 <HAL_GPIO_EXTI_Callback+0x98>

	default:
		break;
 8005806:	bf00      	nop
	}

	xQueueSendFromISR(buttonQueue, &stateToSend, &xHigherPriorityTaskWoken);
 8005808:	4b0d      	ldr	r3, [pc, #52]	@ (8005840 <HAL_GPIO_EXTI_Callback+0xd0>)
 800580a:	6818      	ldr	r0, [r3, #0]
 800580c:	f107 0210 	add.w	r2, r7, #16
 8005810:	f107 010c 	add.w	r1, r7, #12
 8005814:	2300      	movs	r3, #0
 8005816:	f004 fef5 	bl	800a604 <xQueueGenericSendFromISR>


    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d009      	beq.n	8005834 <HAL_GPIO_EXTI_Callback+0xc4>
 8005820:	4b08      	ldr	r3, [pc, #32]	@ (8005844 <HAL_GPIO_EXTI_Callback+0xd4>)
 8005822:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005826:	601a      	str	r2, [r3, #0]
 8005828:	f3bf 8f4f 	dsb	sy
 800582c:	f3bf 8f6f 	isb	sy
 8005830:	e000      	b.n	8005834 <HAL_GPIO_EXTI_Callback+0xc4>
        return;  // Ignore if press happens too soon
 8005832:	bf00      	nop
}
 8005834:	3718      	adds	r7, #24
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}
 800583a:	bf00      	nop
 800583c:	20000710 	.word	0x20000710
 8005840:	20000708 	.word	0x20000708
 8005844:	e000ed04 	.word	0xe000ed04

08005848 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800584c:	f000 fd2c 	bl	80062a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005850:	f000 f888 	bl	8005964 <_Z18SystemClock_Configv>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8005854:	f000 f8e8 	bl	8005a28 <_Z24PeriphCommonClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005858:	f000 f94a 	bl	8005af0 <_ZL12MX_GPIO_Initv>
  MX_SPI1_Init();
 800585c:	f000 f906 	bl	8005a6c <_ZL12MX_SPI1_Initv>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8005860:	f004 f9b2 	bl	8009bc8 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of xEPaperBusySemaphore */
  xEPaperBusySemaphoreHandle = osSemaphoreNew(1, 1, &xEPaperBusySemaphore_attributes);
 8005864:	4a33      	ldr	r2, [pc, #204]	@ (8005934 <main+0xec>)
 8005866:	2101      	movs	r1, #1
 8005868:	2001      	movs	r0, #1
 800586a:	f004 faa4 	bl	8009db6 <osSemaphoreNew>
 800586e:	4603      	mov	r3, r0
 8005870:	4a31      	ldr	r2, [pc, #196]	@ (8005938 <main+0xf0>)
 8005872:	6013      	str	r3, [r2, #0]

  /* creation of myBinarySem02 */
  myBinarySem02Handle = osSemaphoreNew(1, 1, &myBinarySem02_attributes);
 8005874:	4a31      	ldr	r2, [pc, #196]	@ (800593c <main+0xf4>)
 8005876:	2101      	movs	r1, #1
 8005878:	2001      	movs	r0, #1
 800587a:	f004 fa9c 	bl	8009db6 <osSemaphoreNew>
 800587e:	4603      	mov	r3, r0
 8005880:	4a2f      	ldr	r2, [pc, #188]	@ (8005940 <main+0xf8>)
 8005882:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  stateQueue  = xQueueCreate(5, sizeof(Button));  // Queue can hold 5 events
 8005884:	2200      	movs	r2, #0
 8005886:	2104      	movs	r1, #4
 8005888:	2005      	movs	r0, #5
 800588a:	f004 fcec 	bl	800a266 <xQueueGenericCreate>
 800588e:	4603      	mov	r3, r0
 8005890:	4a2c      	ldr	r2, [pc, #176]	@ (8005944 <main+0xfc>)
 8005892:	6013      	str	r3, [r2, #0]
  if (stateQueue == NULL) {
 8005894:	4b2b      	ldr	r3, [pc, #172]	@ (8005944 <main+0xfc>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d102      	bne.n	80058a2 <main+0x5a>
      printf("Failed to create queue!\n");
 800589c:	482a      	ldr	r0, [pc, #168]	@ (8005948 <main+0x100>)
 800589e:	f007 ff4d 	bl	800d73c <puts>
  }

  buttonQueue  = xQueueCreate(5, sizeof(State));  // Queue can hold 5 events
 80058a2:	2200      	movs	r2, #0
 80058a4:	2104      	movs	r1, #4
 80058a6:	2005      	movs	r0, #5
 80058a8:	f004 fcdd 	bl	800a266 <xQueueGenericCreate>
 80058ac:	4603      	mov	r3, r0
 80058ae:	4a27      	ldr	r2, [pc, #156]	@ (800594c <main+0x104>)
 80058b0:	6013      	str	r3, [r2, #0]
  if (buttonQueue == NULL) {
 80058b2:	4b26      	ldr	r3, [pc, #152]	@ (800594c <main+0x104>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d102      	bne.n	80058c0 <main+0x78>
      printf("Failed to create queue!\n");
 80058ba:	4823      	ldr	r0, [pc, #140]	@ (8005948 <main+0x100>)
 80058bc:	f007 ff3e 	bl	800d73c <puts>
  }

  dataSetPointOperationQueue  = xQueueCreate(5, sizeof(SetPointData));  // Queue can hold 5 events
 80058c0:	2200      	movs	r2, #0
 80058c2:	2108      	movs	r1, #8
 80058c4:	2005      	movs	r0, #5
 80058c6:	f004 fcce 	bl	800a266 <xQueueGenericCreate>
 80058ca:	4603      	mov	r3, r0
 80058cc:	4a20      	ldr	r2, [pc, #128]	@ (8005950 <main+0x108>)
 80058ce:	6013      	str	r3, [r2, #0]
  if (dataSetPointOperationQueue == NULL) {
 80058d0:	4b1f      	ldr	r3, [pc, #124]	@ (8005950 <main+0x108>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d102      	bne.n	80058de <main+0x96>
      printf("Failed to create queue!\n");
 80058d8:	481b      	ldr	r0, [pc, #108]	@ (8005948 <main+0x100>)
 80058da:	f007 ff2f 	bl	800d73c <puts>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of EPaper */
  EPaperHandle = osThreadNew(EPaperEntry, NULL, &EPaper_attributes);
 80058de:	4a1d      	ldr	r2, [pc, #116]	@ (8005954 <main+0x10c>)
 80058e0:	2100      	movs	r1, #0
 80058e2:	481d      	ldr	r0, [pc, #116]	@ (8005958 <main+0x110>)
 80058e4:	f004 f9ba 	bl	8009c5c <osThreadNew>
 80058e8:	4603      	mov	r3, r0
 80058ea:	4a1c      	ldr	r2, [pc, #112]	@ (800595c <main+0x114>)
 80058ec:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 80058ee:	4b1c      	ldr	r3, [pc, #112]	@ (8005960 <main+0x118>)
 80058f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80058f4:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 80058f6:	4b1a      	ldr	r3, [pc, #104]	@ (8005960 <main+0x118>)
 80058f8:	2200      	movs	r2, #0
 80058fa:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 80058fc:	4b18      	ldr	r3, [pc, #96]	@ (8005960 <main+0x118>)
 80058fe:	2200      	movs	r2, #0
 8005900:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8005902:	4b17      	ldr	r3, [pc, #92]	@ (8005960 <main+0x118>)
 8005904:	2200      	movs	r2, #0
 8005906:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8005908:	4b15      	ldr	r3, [pc, #84]	@ (8005960 <main+0x118>)
 800590a:	2200      	movs	r2, #0
 800590c:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 800590e:	4914      	ldr	r1, [pc, #80]	@ (8005960 <main+0x118>)
 8005910:	2000      	movs	r0, #0
 8005912:	f000 fc1b 	bl	800614c <BSP_COM_Init>
 8005916:	4603      	mov	r3, r0
 8005918:	2b00      	cmp	r3, #0
 800591a:	bf14      	ite	ne
 800591c:	2301      	movne	r3, #1
 800591e:	2300      	moveq	r3, #0
 8005920:	b2db      	uxtb	r3, r3
 8005922:	2b00      	cmp	r3, #0
 8005924:	d001      	beq.n	800592a <main+0xe2>
  {
    Error_Handler();
 8005926:	f000 f96d 	bl	8005c04 <Error_Handler>
  }

  /* Start scheduler */
  osKernelStart();
 800592a:	f004 f971 	bl	8009c10 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800592e:	bf00      	nop
 8005930:	e7fd      	b.n	800592e <main+0xe6>
 8005932:	bf00      	nop
 8005934:	08013004 	.word	0x08013004
 8005938:	200006fc 	.word	0x200006fc
 800593c:	08013014 	.word	0x08013014
 8005940:	20000700 	.word	0x20000700
 8005944:	20000704 	.word	0x20000704
 8005948:	0800ff70 	.word	0x0800ff70
 800594c:	20000708 	.word	0x20000708
 8005950:	2000070c 	.word	0x2000070c
 8005954:	08012fe0 	.word	0x08012fe0
 8005958:	08005bcd 	.word	0x08005bcd
 800595c:	200006f8 	.word	0x200006f8
 8005960:	20000684 	.word	0x20000684

08005964 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b09a      	sub	sp, #104	@ 0x68
 8005968:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800596a:	f107 0320 	add.w	r3, r7, #32
 800596e:	2248      	movs	r2, #72	@ 0x48
 8005970:	2100      	movs	r1, #0
 8005972:	4618      	mov	r0, r3
 8005974:	f008 f82e 	bl	800d9d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005978:	1d3b      	adds	r3, r7, #4
 800597a:	2200      	movs	r2, #0
 800597c:	601a      	str	r2, [r3, #0]
 800597e:	605a      	str	r2, [r3, #4]
 8005980:	609a      	str	r2, [r3, #8]
 8005982:	60da      	str	r2, [r3, #12]
 8005984:	611a      	str	r2, [r3, #16]
 8005986:	615a      	str	r2, [r3, #20]
 8005988:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800598a:	4b26      	ldr	r3, [pc, #152]	@ (8005a24 <_Z18SystemClock_Configv+0xc0>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005992:	4a24      	ldr	r2, [pc, #144]	@ (8005a24 <_Z18SystemClock_Configv+0xc0>)
 8005994:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005998:	6013      	str	r3, [r2, #0]
 800599a:	4b22      	ldr	r3, [pc, #136]	@ (8005a24 <_Z18SystemClock_Configv+0xc0>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80059a2:	603b      	str	r3, [r7, #0]
 80059a4:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 80059a6:	2322      	movs	r3, #34	@ 0x22
 80059a8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80059aa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80059ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80059b0:	2301      	movs	r3, #1
 80059b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80059b4:	2340      	movs	r3, #64	@ 0x40
 80059b6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80059b8:	2300      	movs	r3, #0
 80059ba:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 80059bc:	23a0      	movs	r3, #160	@ 0xa0
 80059be:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80059c0:	2300      	movs	r3, #0
 80059c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80059c4:	f107 0320 	add.w	r3, r7, #32
 80059c8:	4618      	mov	r0, r3
 80059ca:	f001 fb15 	bl	8006ff8 <HAL_RCC_OscConfig>
 80059ce:	4603      	mov	r3, r0
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	bf14      	ite	ne
 80059d4:	2301      	movne	r3, #1
 80059d6:	2300      	moveq	r3, #0
 80059d8:	b2db      	uxtb	r3, r3
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d001      	beq.n	80059e2 <_Z18SystemClock_Configv+0x7e>
  {
    Error_Handler();
 80059de:	f000 f911 	bl	8005c04 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80059e2:	236f      	movs	r3, #111	@ 0x6f
 80059e4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80059e6:	2300      	movs	r3, #0
 80059e8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80059ea:	2300      	movs	r3, #0
 80059ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80059ee:	2300      	movs	r3, #0
 80059f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80059f2:	2300      	movs	r3, #0
 80059f4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80059f6:	2300      	movs	r3, #0
 80059f8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80059fa:	2300      	movs	r3, #0
 80059fc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80059fe:	1d3b      	adds	r3, r7, #4
 8005a00:	2101      	movs	r1, #1
 8005a02:	4618      	mov	r0, r3
 8005a04:	f001 fe6c 	bl	80076e0 <HAL_RCC_ClockConfig>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	bf14      	ite	ne
 8005a0e:	2301      	movne	r3, #1
 8005a10:	2300      	moveq	r3, #0
 8005a12:	b2db      	uxtb	r3, r3
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d001      	beq.n	8005a1c <_Z18SystemClock_Configv+0xb8>
  {
    Error_Handler();
 8005a18:	f000 f8f4 	bl	8005c04 <Error_Handler>
  }
}
 8005a1c:	bf00      	nop
 8005a1e:	3768      	adds	r7, #104	@ 0x68
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}
 8005a24:	58000400 	.word	0x58000400

08005a28 <_Z24PeriphCommonClock_Configv>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b094      	sub	sp, #80	@ 0x50
 8005a2c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005a2e:	463b      	mov	r3, r7
 8005a30:	2250      	movs	r2, #80	@ 0x50
 8005a32:	2100      	movs	r1, #0
 8005a34:	4618      	mov	r0, r3
 8005a36:	f007 ffcd 	bl	800d9d4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 8005a3a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005a3e:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8005a40:	2300      	movs	r3, #0
 8005a42:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8005a44:	2300      	movs	r3, #0
 8005a46:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005a48:	463b      	mov	r3, r7
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f002 fab7 	bl	8007fbe <HAL_RCCEx_PeriphCLKConfig>
 8005a50:	4603      	mov	r3, r0
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	bf14      	ite	ne
 8005a56:	2301      	movne	r3, #1
 8005a58:	2300      	moveq	r3, #0
 8005a5a:	b2db      	uxtb	r3, r3
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d001      	beq.n	8005a64 <_Z24PeriphCommonClock_Configv+0x3c>
  {
    Error_Handler();
 8005a60:	f000 f8d0 	bl	8005c04 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8005a64:	bf00      	nop
 8005a66:	3750      	adds	r7, #80	@ 0x50
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}

08005a6c <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8005a70:	4b1d      	ldr	r3, [pc, #116]	@ (8005ae8 <_ZL12MX_SPI1_Initv+0x7c>)
 8005a72:	4a1e      	ldr	r2, [pc, #120]	@ (8005aec <_ZL12MX_SPI1_Initv+0x80>)
 8005a74:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8005a76:	4b1c      	ldr	r3, [pc, #112]	@ (8005ae8 <_ZL12MX_SPI1_Initv+0x7c>)
 8005a78:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8005a7c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8005a7e:	4b1a      	ldr	r3, [pc, #104]	@ (8005ae8 <_ZL12MX_SPI1_Initv+0x7c>)
 8005a80:	2200      	movs	r2, #0
 8005a82:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8005a84:	4b18      	ldr	r3, [pc, #96]	@ (8005ae8 <_ZL12MX_SPI1_Initv+0x7c>)
 8005a86:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8005a8a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005a8c:	4b16      	ldr	r3, [pc, #88]	@ (8005ae8 <_ZL12MX_SPI1_Initv+0x7c>)
 8005a8e:	2200      	movs	r2, #0
 8005a90:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005a92:	4b15      	ldr	r3, [pc, #84]	@ (8005ae8 <_ZL12MX_SPI1_Initv+0x7c>)
 8005a94:	2200      	movs	r2, #0
 8005a96:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8005a98:	4b13      	ldr	r3, [pc, #76]	@ (8005ae8 <_ZL12MX_SPI1_Initv+0x7c>)
 8005a9a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005a9e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8005aa0:	4b11      	ldr	r3, [pc, #68]	@ (8005ae8 <_ZL12MX_SPI1_Initv+0x7c>)
 8005aa2:	2208      	movs	r2, #8
 8005aa4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005aa6:	4b10      	ldr	r3, [pc, #64]	@ (8005ae8 <_ZL12MX_SPI1_Initv+0x7c>)
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005aac:	4b0e      	ldr	r3, [pc, #56]	@ (8005ae8 <_ZL12MX_SPI1_Initv+0x7c>)
 8005aae:	2200      	movs	r2, #0
 8005ab0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ab2:	4b0d      	ldr	r3, [pc, #52]	@ (8005ae8 <_ZL12MX_SPI1_Initv+0x7c>)
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8005ab8:	4b0b      	ldr	r3, [pc, #44]	@ (8005ae8 <_ZL12MX_SPI1_Initv+0x7c>)
 8005aba:	2207      	movs	r2, #7
 8005abc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8005abe:	4b0a      	ldr	r3, [pc, #40]	@ (8005ae8 <_ZL12MX_SPI1_Initv+0x7c>)
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8005ac4:	4b08      	ldr	r3, [pc, #32]	@ (8005ae8 <_ZL12MX_SPI1_Initv+0x7c>)
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8005aca:	4807      	ldr	r0, [pc, #28]	@ (8005ae8 <_ZL12MX_SPI1_Initv+0x7c>)
 8005acc:	f002 fcfe 	bl	80084cc <HAL_SPI_Init>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	bf14      	ite	ne
 8005ad6:	2301      	movne	r3, #1
 8005ad8:	2300      	moveq	r3, #0
 8005ada:	b2db      	uxtb	r3, r3
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d001      	beq.n	8005ae4 <_ZL12MX_SPI1_Initv+0x78>
  {
    Error_Handler();
 8005ae0:	f000 f890 	bl	8005c04 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8005ae4:	bf00      	nop
 8005ae6:	bd80      	pop	{r7, pc}
 8005ae8:	20000694 	.word	0x20000694
 8005aec:	40013000 	.word	0x40013000

08005af0 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b086      	sub	sp, #24
 8005af4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005af6:	1d3b      	adds	r3, r7, #4
 8005af8:	2200      	movs	r2, #0
 8005afa:	601a      	str	r2, [r3, #0]
 8005afc:	605a      	str	r2, [r3, #4]
 8005afe:	609a      	str	r2, [r3, #8]
 8005b00:	60da      	str	r2, [r3, #12]
 8005b02:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005b04:	2004      	movs	r0, #4
 8005b06:	f7ff fe19 	bl	800573c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b0a:	2001      	movs	r0, #1
 8005b0c:	f7ff fe16 	bl	800573c <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_9, GPIO_PIN_RESET);
 8005b10:	2200      	movs	r2, #0
 8005b12:	f44f 711a 	mov.w	r1, #616	@ 0x268
 8005b16:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005b1a:	f000 fe9d 	bl	8006858 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Button_1_Pin Button_2_Pin Button_3_Pin Button_4_Pin
						   Button_5_Pin */
  GPIO_InitStruct.Pin = Button_1_Pin|Button_2_Pin|Button_3_Pin|Button_4_Pin
 8005b1e:	231f      	movs	r3, #31
 8005b20:	607b      	str	r3, [r7, #4]
						  |Button_5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8005b22:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8005b26:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005b2c:	1d3b      	adds	r3, r7, #4
 8005b2e:	4619      	mov	r1, r3
 8005b30:	4825      	ldr	r0, [pc, #148]	@ (8005bc8 <_ZL12MX_GPIO_Initv+0xd8>)
 8005b32:	f000 fd09 	bl	8006548 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA5 PA6 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_9;
 8005b36:	f44f 731a 	mov.w	r3, #616	@ 0x268
 8005b3a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b40:	2300      	movs	r3, #0
 8005b42:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b44:	2300      	movs	r3, #0
 8005b46:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b48:	1d3b      	adds	r3, r7, #4
 8005b4a:	4619      	mov	r1, r3
 8005b4c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005b50:	f000 fcfa 	bl	8006548 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8005b54:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005b58:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b62:	1d3b      	adds	r3, r7, #4
 8005b64:	4619      	mov	r1, r3
 8005b66:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005b6a:	f000 fced 	bl	8006548 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8005b6e:	2200      	movs	r2, #0
 8005b70:	2105      	movs	r1, #5
 8005b72:	2006      	movs	r0, #6
 8005b74:	f000 fcc0 	bl	80064f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8005b78:	2006      	movs	r0, #6
 8005b7a:	f000 fcd7 	bl	800652c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8005b7e:	2200      	movs	r2, #0
 8005b80:	2105      	movs	r1, #5
 8005b82:	2007      	movs	r0, #7
 8005b84:	f000 fcb8 	bl	80064f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8005b88:	2007      	movs	r0, #7
 8005b8a:	f000 fccf 	bl	800652c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8005b8e:	2200      	movs	r2, #0
 8005b90:	2105      	movs	r1, #5
 8005b92:	2008      	movs	r0, #8
 8005b94:	f000 fcb0 	bl	80064f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8005b98:	2008      	movs	r0, #8
 8005b9a:	f000 fcc7 	bl	800652c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	2105      	movs	r1, #5
 8005ba2:	2009      	movs	r0, #9
 8005ba4:	f000 fca8 	bl	80064f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8005ba8:	2009      	movs	r0, #9
 8005baa:	f000 fcbf 	bl	800652c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8005bae:	2200      	movs	r2, #0
 8005bb0:	2105      	movs	r1, #5
 8005bb2:	200a      	movs	r0, #10
 8005bb4:	f000 fca0 	bl	80064f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8005bb8:	200a      	movs	r0, #10
 8005bba:	f000 fcb7 	bl	800652c <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8005bbe:	bf00      	nop
 8005bc0:	3718      	adds	r7, #24
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}
 8005bc6:	bf00      	nop
 8005bc8:	48000800 	.word	0x48000800

08005bcc <_Z11EPaperEntryPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_EPaperEntry */
void EPaperEntry(void *argument)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b082      	sub	sp, #8
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	EPD_MainMenuWithQueue();
 8005bd4:	f7fc ff1e 	bl	8002a14 <_Z21EPD_MainMenuWithQueuev>
  for(;;)
  {
    osDelay(1);
 8005bd8:	2001      	movs	r0, #1
 8005bda:	f004 f8d1 	bl	8009d80 <osDelay>
 8005bde:	e7fb      	b.n	8005bd8 <_Z11EPaperEntryPv+0xc>

08005be0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b082      	sub	sp, #8
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a04      	ldr	r2, [pc, #16]	@ (8005c00 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d101      	bne.n	8005bf6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8005bf2:	f000 fb79 	bl	80062e8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8005bf6:	bf00      	nop
 8005bf8:	3708      	adds	r7, #8
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}
 8005bfe:	bf00      	nop
 8005c00:	40014800 	.word	0x40014800

08005c04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005c04:	b480      	push	{r7}
 8005c06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005c08:	b672      	cpsid	i
}
 8005c0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005c0c:	bf00      	nop
 8005c0e:	e7fd      	b.n	8005c0c <Error_Handler+0x8>

08005c10 <LL_AHB2_GRP1_EnableClock>:
{
 8005c10:	b480      	push	{r7}
 8005c12:	b085      	sub	sp, #20
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8005c18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c1c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005c1e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	4313      	orrs	r3, r2
 8005c26:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8005c28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c2c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	4013      	ands	r3, r2
 8005c32:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005c34:	68fb      	ldr	r3, [r7, #12]
}
 8005c36:	bf00      	nop
 8005c38:	3714      	adds	r7, #20
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c40:	4770      	bx	lr

08005c42 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8005c42:	b480      	push	{r7}
 8005c44:	b085      	sub	sp, #20
 8005c46:	af00      	add	r7, sp, #0
 8005c48:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8005c4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c4e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005c50:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	4313      	orrs	r3, r2
 8005c58:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8005c5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c5e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	4013      	ands	r3, r2
 8005c64:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005c66:	68fb      	ldr	r3, [r7, #12]
}
 8005c68:	bf00      	nop
 8005c6a:	3714      	adds	r7, #20
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c72:	4770      	bx	lr

08005c74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8005c78:	2200      	movs	r2, #0
 8005c7a:	210f      	movs	r1, #15
 8005c7c:	f06f 0001 	mvn.w	r0, #1
 8005c80:	f000 fc3a 	bl	80064f8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005c84:	bf00      	nop
 8005c86:	bd80      	pop	{r7, pc}

08005c88 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b088      	sub	sp, #32
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c90:	f107 030c 	add.w	r3, r7, #12
 8005c94:	2200      	movs	r2, #0
 8005c96:	601a      	str	r2, [r3, #0]
 8005c98:	605a      	str	r2, [r3, #4]
 8005c9a:	609a      	str	r2, [r3, #8]
 8005c9c:	60da      	str	r2, [r3, #12]
 8005c9e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a0f      	ldr	r2, [pc, #60]	@ (8005ce4 <HAL_SPI_MspInit+0x5c>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d118      	bne.n	8005cdc <HAL_SPI_MspInit+0x54>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005caa:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8005cae:	f7ff ffc8 	bl	8005c42 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005cb2:	2001      	movs	r0, #1
 8005cb4:	f7ff ffac 	bl	8005c10 <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PA11     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7|GPIO_PIN_11;
 8005cb8:	f640 0382 	movw	r3, #2178	@ 0x882
 8005cbc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005cbe:	2302      	movs	r3, #2
 8005cc0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005cca:	2305      	movs	r3, #5
 8005ccc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005cce:	f107 030c 	add.w	r3, r7, #12
 8005cd2:	4619      	mov	r1, r3
 8005cd4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005cd8:	f000 fc36 	bl	8006548 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8005cdc:	bf00      	nop
 8005cde:	3720      	adds	r7, #32
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}
 8005ce4:	40013000 	.word	0x40013000

08005ce8 <LL_APB2_GRP1_EnableClock>:
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b085      	sub	sp, #20
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8005cf0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005cf4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005cf6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8005d00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d04:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	4013      	ands	r3, r2
 8005d0a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
}
 8005d0e:	bf00      	nop
 8005d10:	3714      	adds	r7, #20
 8005d12:	46bd      	mov	sp, r7
 8005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d18:	4770      	bx	lr
	...

08005d1c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b08c      	sub	sp, #48	@ 0x30
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8005d24:	2300      	movs	r3, #0
 8005d26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              uwPrescalerValue = 0;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  /*Configure the TIM17 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority ,0);
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	6879      	ldr	r1, [r7, #4]
 8005d30:	201a      	movs	r0, #26
 8005d32:	f000 fbe1 	bl	80064f8 <HAL_NVIC_SetPriority>
  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8005d36:	201a      	movs	r0, #26
 8005d38:	f000 fbf8 	bl	800652c <HAL_NVIC_EnableIRQ>

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8005d3c:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8005d40:	f7ff ffd2 	bl	8005ce8 <LL_APB2_GRP1_EnableClock>
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005d44:	f107 0208 	add.w	r2, r7, #8
 8005d48:	f107 030c 	add.w	r3, r7, #12
 8005d4c:	4611      	mov	r1, r2
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f001 feb2 	bl	8007ab8 <HAL_RCC_GetClockConfig>
  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8005d54:	f001 fe9a 	bl	8007a8c <HAL_RCC_GetPCLK2Freq>
 8005d58:	62f8      	str	r0, [r7, #44]	@ 0x2c

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8005d5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d5c:	4a12      	ldr	r2, [pc, #72]	@ (8005da8 <HAL_InitTick+0x8c>)
 8005d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8005d62:	0c9b      	lsrs	r3, r3, #18
 8005d64:	3b01      	subs	r3, #1
 8005d66:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8005d68:	4b10      	ldr	r3, [pc, #64]	@ (8005dac <HAL_InitTick+0x90>)
 8005d6a:	4a11      	ldr	r2, [pc, #68]	@ (8005db0 <HAL_InitTick+0x94>)
 8005d6c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8005d6e:	4b0f      	ldr	r3, [pc, #60]	@ (8005dac <HAL_InitTick+0x90>)
 8005d70:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8005d74:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8005d76:	4a0d      	ldr	r2, [pc, #52]	@ (8005dac <HAL_InitTick+0x90>)
 8005d78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d7a:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8005d7c:	4b0b      	ldr	r3, [pc, #44]	@ (8005dac <HAL_InitTick+0x90>)
 8005d7e:	2200      	movs	r2, #0
 8005d80:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005d82:	4b0a      	ldr	r3, [pc, #40]	@ (8005dac <HAL_InitTick+0x90>)
 8005d84:	2200      	movs	r2, #0
 8005d86:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 8005d88:	4808      	ldr	r0, [pc, #32]	@ (8005dac <HAL_InitTick+0x90>)
 8005d8a:	f002 ff1b 	bl	8008bc4 <HAL_TIM_Base_Init>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d104      	bne.n	8005d9e <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 8005d94:	4805      	ldr	r0, [pc, #20]	@ (8005dac <HAL_InitTick+0x90>)
 8005d96:	f002 ff77 	bl	8008c88 <HAL_TIM_Base_Start_IT>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	e000      	b.n	8005da0 <HAL_InitTick+0x84>
  }

  /* Return function status */
  return HAL_ERROR;
 8005d9e:	2301      	movs	r3, #1
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	3730      	adds	r7, #48	@ 0x30
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}
 8005da8:	431bde83 	.word	0x431bde83
 8005dac:	20000714 	.word	0x20000714
 8005db0:	40014800 	.word	0x40014800

08005db4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005db4:	b480      	push	{r7}
 8005db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005db8:	bf00      	nop
 8005dba:	e7fd      	b.n	8005db8 <NMI_Handler+0x4>

08005dbc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005dc0:	bf00      	nop
 8005dc2:	e7fd      	b.n	8005dc0 <HardFault_Handler+0x4>

08005dc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005dc8:	bf00      	nop
 8005dca:	e7fd      	b.n	8005dc8 <MemManage_Handler+0x4>

08005dcc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005dd0:	bf00      	nop
 8005dd2:	e7fd      	b.n	8005dd0 <BusFault_Handler+0x4>

08005dd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005dd8:	bf00      	nop
 8005dda:	e7fd      	b.n	8005dd8 <UsageFault_Handler+0x4>

08005ddc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005de0:	bf00      	nop
 8005de2:	46bd      	mov	sp, r7
 8005de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de8:	4770      	bx	lr

08005dea <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8005dea:	b580      	push	{r7, lr}
 8005dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_1_Pin);
 8005dee:	2001      	movs	r0, #1
 8005df0:	f000 fd4a 	bl	8006888 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8005df4:	bf00      	nop
 8005df6:	bd80      	pop	{r7, pc}

08005df8 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_2_Pin);
 8005dfc:	2002      	movs	r0, #2
 8005dfe:	f000 fd43 	bl	8006888 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8005e02:	bf00      	nop
 8005e04:	bd80      	pop	{r7, pc}

08005e06 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8005e06:	b580      	push	{r7, lr}
 8005e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_3_Pin);
 8005e0a:	2004      	movs	r0, #4
 8005e0c:	f000 fd3c 	bl	8006888 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8005e10:	bf00      	nop
 8005e12:	bd80      	pop	{r7, pc}

08005e14 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_4_Pin);
 8005e18:	2008      	movs	r0, #8
 8005e1a:	f000 fd35 	bl	8006888 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8005e1e:	bf00      	nop
 8005e20:	bd80      	pop	{r7, pc}

08005e22 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8005e22:	b580      	push	{r7, lr}
 8005e24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_5_Pin);
 8005e26:	2010      	movs	r0, #16
 8005e28:	f000 fd2e 	bl	8006888 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8005e2c:	bf00      	nop
 8005e2e:	bd80      	pop	{r7, pc}

08005e30 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8005e34:	4802      	ldr	r0, [pc, #8]	@ (8005e40 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8005e36:	f002 ff75 	bl	8008d24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8005e3a:	bf00      	nop
 8005e3c:	bd80      	pop	{r7, pc}
 8005e3e:	bf00      	nop
 8005e40:	20000714 	.word	0x20000714

08005e44 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005e44:	b480      	push	{r7}
 8005e46:	af00      	add	r7, sp, #0
  return 1;
 8005e48:	2301      	movs	r3, #1
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e52:	4770      	bx	lr

08005e54 <_kill>:

int _kill(int pid, int sig)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b082      	sub	sp, #8
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
 8005e5c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005e5e:	f007 feb5 	bl	800dbcc <__errno>
 8005e62:	4603      	mov	r3, r0
 8005e64:	2216      	movs	r2, #22
 8005e66:	601a      	str	r2, [r3, #0]
  return -1;
 8005e68:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	3708      	adds	r7, #8
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd80      	pop	{r7, pc}

08005e74 <_exit>:

void _exit (int status)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b082      	sub	sp, #8
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005e7c:	f04f 31ff 	mov.w	r1, #4294967295
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f7ff ffe7 	bl	8005e54 <_kill>
  while (1) {}    /* Make sure we hang here */
 8005e86:	bf00      	nop
 8005e88:	e7fd      	b.n	8005e86 <_exit+0x12>

08005e8a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005e8a:	b580      	push	{r7, lr}
 8005e8c:	b086      	sub	sp, #24
 8005e8e:	af00      	add	r7, sp, #0
 8005e90:	60f8      	str	r0, [r7, #12]
 8005e92:	60b9      	str	r1, [r7, #8]
 8005e94:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005e96:	2300      	movs	r3, #0
 8005e98:	617b      	str	r3, [r7, #20]
 8005e9a:	e00a      	b.n	8005eb2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005e9c:	f3af 8000 	nop.w
 8005ea0:	4601      	mov	r1, r0
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	1c5a      	adds	r2, r3, #1
 8005ea6:	60ba      	str	r2, [r7, #8]
 8005ea8:	b2ca      	uxtb	r2, r1
 8005eaa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	3301      	adds	r3, #1
 8005eb0:	617b      	str	r3, [r7, #20]
 8005eb2:	697a      	ldr	r2, [r7, #20]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	429a      	cmp	r2, r3
 8005eb8:	dbf0      	blt.n	8005e9c <_read+0x12>
  }

  return len;
 8005eba:	687b      	ldr	r3, [r7, #4]
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	3718      	adds	r7, #24
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}

08005ec4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b086      	sub	sp, #24
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	60f8      	str	r0, [r7, #12]
 8005ecc:	60b9      	str	r1, [r7, #8]
 8005ece:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	617b      	str	r3, [r7, #20]
 8005ed4:	e009      	b.n	8005eea <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	1c5a      	adds	r2, r3, #1
 8005eda:	60ba      	str	r2, [r7, #8]
 8005edc:	781b      	ldrb	r3, [r3, #0]
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f000 f996 	bl	8006210 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	3301      	adds	r3, #1
 8005ee8:	617b      	str	r3, [r7, #20]
 8005eea:	697a      	ldr	r2, [r7, #20]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	429a      	cmp	r2, r3
 8005ef0:	dbf1      	blt.n	8005ed6 <_write+0x12>
  }
  return len;
 8005ef2:	687b      	ldr	r3, [r7, #4]
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	3718      	adds	r7, #24
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}

08005efc <_close>:

int _close(int file)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b083      	sub	sp, #12
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005f04:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	370c      	adds	r7, #12
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr

08005f14 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b083      	sub	sp, #12
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
 8005f1c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005f24:	605a      	str	r2, [r3, #4]
  return 0;
 8005f26:	2300      	movs	r3, #0
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	370c      	adds	r7, #12
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f32:	4770      	bx	lr

08005f34 <_isatty>:

int _isatty(int file)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b083      	sub	sp, #12
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005f3c:	2301      	movs	r3, #1
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	370c      	adds	r7, #12
 8005f42:	46bd      	mov	sp, r7
 8005f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f48:	4770      	bx	lr

08005f4a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005f4a:	b480      	push	{r7}
 8005f4c:	b085      	sub	sp, #20
 8005f4e:	af00      	add	r7, sp, #0
 8005f50:	60f8      	str	r0, [r7, #12]
 8005f52:	60b9      	str	r1, [r7, #8]
 8005f54:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005f56:	2300      	movs	r3, #0
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	3714      	adds	r7, #20
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f62:	4770      	bx	lr

08005f64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b086      	sub	sp, #24
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005f6c:	4a14      	ldr	r2, [pc, #80]	@ (8005fc0 <_sbrk+0x5c>)
 8005f6e:	4b15      	ldr	r3, [pc, #84]	@ (8005fc4 <_sbrk+0x60>)
 8005f70:	1ad3      	subs	r3, r2, r3
 8005f72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005f78:	4b13      	ldr	r3, [pc, #76]	@ (8005fc8 <_sbrk+0x64>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d102      	bne.n	8005f86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005f80:	4b11      	ldr	r3, [pc, #68]	@ (8005fc8 <_sbrk+0x64>)
 8005f82:	4a12      	ldr	r2, [pc, #72]	@ (8005fcc <_sbrk+0x68>)
 8005f84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005f86:	4b10      	ldr	r3, [pc, #64]	@ (8005fc8 <_sbrk+0x64>)
 8005f88:	681a      	ldr	r2, [r3, #0]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	4413      	add	r3, r2
 8005f8e:	693a      	ldr	r2, [r7, #16]
 8005f90:	429a      	cmp	r2, r3
 8005f92:	d207      	bcs.n	8005fa4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005f94:	f007 fe1a 	bl	800dbcc <__errno>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	220c      	movs	r2, #12
 8005f9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8005fa2:	e009      	b.n	8005fb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005fa4:	4b08      	ldr	r3, [pc, #32]	@ (8005fc8 <_sbrk+0x64>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005faa:	4b07      	ldr	r3, [pc, #28]	@ (8005fc8 <_sbrk+0x64>)
 8005fac:	681a      	ldr	r2, [r3, #0]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	4413      	add	r3, r2
 8005fb2:	4a05      	ldr	r2, [pc, #20]	@ (8005fc8 <_sbrk+0x64>)
 8005fb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3718      	adds	r7, #24
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}
 8005fc0:	20030000 	.word	0x20030000
 8005fc4:	00000400 	.word	0x00000400
 8005fc8:	20000760 	.word	0x20000760
 8005fcc:	20011738 	.word	0x20011738

08005fd0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8005fd4:	4b24      	ldr	r3, [pc, #144]	@ (8006068 <SystemInit+0x98>)
 8005fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fda:	4a23      	ldr	r2, [pc, #140]	@ (8006068 <SystemInit+0x98>)
 8005fdc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005fe0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8005fe4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005fee:	f043 0301 	orr.w	r3, r3, #1
 8005ff2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8005ff4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ff8:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8005ffc:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8005ffe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006002:	681a      	ldr	r2, [r3, #0]
 8006004:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006008:	4b18      	ldr	r3, [pc, #96]	@ (800606c <SystemInit+0x9c>)
 800600a:	4013      	ands	r3, r2
 800600c:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800600e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006012:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006016:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800601a:	f023 0305 	bic.w	r3, r3, #5
 800601e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8006022:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006026:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800602a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800602e:	f023 0301 	bic.w	r3, r3, #1
 8006032:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8006036:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800603a:	4a0d      	ldr	r2, [pc, #52]	@ (8006070 <SystemInit+0xa0>)
 800603c:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 800603e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006042:	4a0b      	ldr	r2, [pc, #44]	@ (8006070 <SystemInit+0xa0>)
 8006044:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8006046:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006050:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006054:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8006056:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800605a:	2200      	movs	r2, #0
 800605c:	619a      	str	r2, [r3, #24]
}
 800605e:	bf00      	nop
 8006060:	46bd      	mov	sp, r7
 8006062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006066:	4770      	bx	lr
 8006068:	e000ed00 	.word	0xe000ed00
 800606c:	faf6fefb 	.word	0xfaf6fefb
 8006070:	22041000 	.word	0x22041000

08006074 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8006074:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006076:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006078:	3304      	adds	r3, #4

0800607a <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800607a:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800607c:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800607e:	d3f9      	bcc.n	8006074 <CopyDataInit>
  bx lr
 8006080:	4770      	bx	lr

08006082 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8006082:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8006084:	3004      	adds	r0, #4

08006086 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8006086:	4288      	cmp	r0, r1
  bcc FillZerobss
 8006088:	d3fb      	bcc.n	8006082 <FillZerobss>
  bx lr
 800608a:	4770      	bx	lr

0800608c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800608c:	480c      	ldr	r0, [pc, #48]	@ (80060c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800608e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8006090:	f7ff ff9e 	bl	8005fd0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8006094:	480b      	ldr	r0, [pc, #44]	@ (80060c4 <LoopForever+0x6>)
 8006096:	490c      	ldr	r1, [pc, #48]	@ (80060c8 <LoopForever+0xa>)
 8006098:	4a0c      	ldr	r2, [pc, #48]	@ (80060cc <LoopForever+0xe>)
 800609a:	2300      	movs	r3, #0
 800609c:	f7ff ffed 	bl	800607a <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80060a0:	480b      	ldr	r0, [pc, #44]	@ (80060d0 <LoopForever+0x12>)
 80060a2:	490c      	ldr	r1, [pc, #48]	@ (80060d4 <LoopForever+0x16>)
 80060a4:	4a0c      	ldr	r2, [pc, #48]	@ (80060d8 <LoopForever+0x1a>)
 80060a6:	2300      	movs	r3, #0
 80060a8:	f7ff ffe7 	bl	800607a <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80060ac:	480b      	ldr	r0, [pc, #44]	@ (80060dc <LoopForever+0x1e>)
 80060ae:	490c      	ldr	r1, [pc, #48]	@ (80060e0 <LoopForever+0x22>)
 80060b0:	2300      	movs	r3, #0
 80060b2:	f7ff ffe8 	bl	8006086 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80060b6:	f007 fd8f 	bl	800dbd8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80060ba:	f7ff fbc5 	bl	8005848 <main>

080060be <LoopForever>:

LoopForever:
  b LoopForever
 80060be:	e7fe      	b.n	80060be <LoopForever>
  ldr   r0, =_estack
 80060c0:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80060c4:	20000008 	.word	0x20000008
 80060c8:	200002dc 	.word	0x200002dc
 80060cc:	08013470 	.word	0x08013470
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80060d0:	20030000 	.word	0x20030000
 80060d4:	20030000 	.word	0x20030000
 80060d8:	08013744 	.word	0x08013744
  INIT_BSS _sbss, _ebss
 80060dc:	200002dc 	.word	0x200002dc
 80060e0:	20011734 	.word	0x20011734

080060e4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80060e4:	e7fe      	b.n	80060e4 <ADC1_IRQHandler>

080060e6 <LL_AHB2_GRP1_EnableClock>:
{
 80060e6:	b480      	push	{r7}
 80060e8:	b085      	sub	sp, #20
 80060ea:	af00      	add	r7, sp, #0
 80060ec:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80060ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80060f2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80060f4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	4313      	orrs	r3, r2
 80060fc:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80060fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006102:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	4013      	ands	r3, r2
 8006108:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800610a:	68fb      	ldr	r3, [r7, #12]
}
 800610c:	bf00      	nop
 800610e:	3714      	adds	r7, #20
 8006110:	46bd      	mov	sp, r7
 8006112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006116:	4770      	bx	lr

08006118 <LL_APB2_GRP1_EnableClock>:
{
 8006118:	b480      	push	{r7}
 800611a:	b085      	sub	sp, #20
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8006120:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006124:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006126:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	4313      	orrs	r3, r2
 800612e:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8006130:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006134:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	4013      	ands	r3, r2
 800613a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800613c:	68fb      	ldr	r3, [r7, #12]
}
 800613e:	bf00      	nop
 8006140:	3714      	adds	r7, #20
 8006142:	46bd      	mov	sp, r7
 8006144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006148:	4770      	bx	lr
	...

0800614c <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b084      	sub	sp, #16
 8006150:	af00      	add	r7, sp, #0
 8006152:	4603      	mov	r3, r0
 8006154:	6039      	str	r1, [r7, #0]
 8006156:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8006158:	2300      	movs	r3, #0
 800615a:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 800615c:	79fb      	ldrb	r3, [r7, #7]
 800615e:	2b01      	cmp	r3, #1
 8006160:	d903      	bls.n	800616a <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8006162:	f06f 0301 	mvn.w	r3, #1
 8006166:	60fb      	str	r3, [r7, #12]
 8006168:	e018      	b.n	800619c <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 800616a:	79fb      	ldrb	r3, [r7, #7]
 800616c:	2294      	movs	r2, #148	@ 0x94
 800616e:	fb02 f303 	mul.w	r3, r2, r3
 8006172:	4a0d      	ldr	r2, [pc, #52]	@ (80061a8 <BSP_COM_Init+0x5c>)
 8006174:	4413      	add	r3, r2
 8006176:	4618      	mov	r0, r3
 8006178:	f000 f866 	bl	8006248 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_LPUART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 800617c:	79fb      	ldrb	r3, [r7, #7]
 800617e:	2294      	movs	r2, #148	@ 0x94
 8006180:	fb02 f303 	mul.w	r3, r2, r3
 8006184:	4a08      	ldr	r2, [pc, #32]	@ (80061a8 <BSP_COM_Init+0x5c>)
 8006186:	4413      	add	r3, r2
 8006188:	6839      	ldr	r1, [r7, #0]
 800618a:	4618      	mov	r0, r3
 800618c:	f000 f80e 	bl	80061ac <MX_LPUART1_Init>
 8006190:	4603      	mov	r3, r0
 8006192:	2b00      	cmp	r3, #0
 8006194:	d002      	beq.n	800619c <BSP_COM_Init+0x50>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 8006196:	f06f 0303 	mvn.w	r3, #3
 800619a:	e000      	b.n	800619e <BSP_COM_Init+0x52>
    }
  }

  return ret;
 800619c:	68fb      	ldr	r3, [r7, #12]
}
 800619e:	4618      	mov	r0, r3
 80061a0:	3710      	adds	r7, #16
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}
 80061a6:	bf00      	nop
 80061a8:	20000764 	.word	0x20000764

080061ac <MX_LPUART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_LPUART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b082      	sub	sp, #8
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
 80061b4:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 80061b6:	4b15      	ldr	r3, [pc, #84]	@ (800620c <MX_LPUART1_Init+0x60>)
 80061b8:	681a      	ldr	r2, [r3, #0]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	681a      	ldr	r2, [r3, #0]
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	220c      	movs	r2, #12
 80061ca:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	895b      	ldrh	r3, [r3, #10]
 80061d0:	461a      	mov	r2, r3
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = COM_Init->WordLength;
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	685a      	ldr	r2, [r3, #4]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	891b      	ldrh	r3, [r3, #8]
 80061e2:	461a      	mov	r2, r3
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	899b      	ldrh	r3, [r3, #12]
 80061ec:	461a      	mov	r2, r3
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80061f8:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f002 ff70 	bl	80090e0 <HAL_UART_Init>
 8006200:	4603      	mov	r3, r0
}
 8006202:	4618      	mov	r0, r3
 8006204:	3708      	adds	r7, #8
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}
 800620a:	bf00      	nop
 800620c:	20000104 	.word	0x20000104

08006210 <__io_putchar>:

/**
  * @brief  Redirect console output to COM
  */
PUTCHAR_PROTOTYPE
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b082      	sub	sp, #8
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
  (void) HAL_UART_Transmit(&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8006218:	4b09      	ldr	r3, [pc, #36]	@ (8006240 <__io_putchar+0x30>)
 800621a:	781b      	ldrb	r3, [r3, #0]
 800621c:	461a      	mov	r2, r3
 800621e:	2394      	movs	r3, #148	@ 0x94
 8006220:	fb02 f303 	mul.w	r3, r2, r3
 8006224:	4a07      	ldr	r2, [pc, #28]	@ (8006244 <__io_putchar+0x34>)
 8006226:	1898      	adds	r0, r3, r2
 8006228:	1d39      	adds	r1, r7, #4
 800622a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800622e:	2201      	movs	r2, #1
 8006230:	f002 ffb0 	bl	8009194 <HAL_UART_Transmit>
  return ch;
 8006234:	687b      	ldr	r3, [r7, #4]
}
 8006236:	4618      	mov	r0, r3
 8006238:	3708      	adds	r7, #8
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}
 800623e:	bf00      	nop
 8006240:	200007f8 	.word	0x200007f8
 8006244:	20000764 	.word	0x20000764

08006248 <COM1_MspInit>:
  * @brief  Initializes COM1 MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b088      	sub	sp, #32
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8006250:	2002      	movs	r0, #2
 8006252:	f7ff ff48 	bl	80060e6 <LL_AHB2_GRP1_EnableClock>
  COM1_RX_GPIO_CLK_ENABLE();
 8006256:	2002      	movs	r0, #2
 8006258:	f7ff ff45 	bl	80060e6 <LL_AHB2_GRP1_EnableClock>

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 800625c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8006260:	f7ff ff5a 	bl	8006118 <LL_APB2_GRP1_EnableClock>

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8006264:	2340      	movs	r3, #64	@ 0x40
 8006266:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8006268:	2302      	movs	r3, #2
 800626a:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800626c:	2302      	movs	r3, #2
 800626e:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8006270:	2301      	movs	r3, #1
 8006272:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8006274:	2307      	movs	r3, #7
 8006276:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8006278:	f107 030c 	add.w	r3, r7, #12
 800627c:	4619      	mov	r1, r3
 800627e:	4809      	ldr	r0, [pc, #36]	@ (80062a4 <COM1_MspInit+0x5c>)
 8006280:	f000 f962 	bl	8006548 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8006284:	2380      	movs	r3, #128	@ 0x80
 8006286:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8006288:	2302      	movs	r3, #2
 800628a:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Alternate = COM1_RX_AF;
 800628c:	2307      	movs	r3, #7
 800628e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8006290:	f107 030c 	add.w	r3, r7, #12
 8006294:	4619      	mov	r1, r3
 8006296:	4803      	ldr	r0, [pc, #12]	@ (80062a4 <COM1_MspInit+0x5c>)
 8006298:	f000 f956 	bl	8006548 <HAL_GPIO_Init>
}
 800629c:	bf00      	nop
 800629e:	3720      	adds	r7, #32
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}
 80062a4:	48000400 	.word	0x48000400

080062a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b082      	sub	sp, #8
 80062ac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80062ae:	2300      	movs	r3, #0
 80062b0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80062b2:	4b0c      	ldr	r3, [pc, #48]	@ (80062e4 <HAL_Init+0x3c>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a0b      	ldr	r2, [pc, #44]	@ (80062e4 <HAL_Init+0x3c>)
 80062b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80062bc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80062be:	2003      	movs	r0, #3
 80062c0:	f000 f90f 	bl	80064e2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80062c4:	200f      	movs	r0, #15
 80062c6:	f7ff fd29 	bl	8005d1c <HAL_InitTick>
 80062ca:	4603      	mov	r3, r0
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d002      	beq.n	80062d6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80062d0:	2301      	movs	r3, #1
 80062d2:	71fb      	strb	r3, [r7, #7]
 80062d4:	e001      	b.n	80062da <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80062d6:	f7ff fccd 	bl	8005c74 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80062da:	79fb      	ldrb	r3, [r7, #7]
}
 80062dc:	4618      	mov	r0, r3
 80062de:	3708      	adds	r7, #8
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}
 80062e4:	58004000 	.word	0x58004000

080062e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80062e8:	b480      	push	{r7}
 80062ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80062ec:	4b06      	ldr	r3, [pc, #24]	@ (8006308 <HAL_IncTick+0x20>)
 80062ee:	781b      	ldrb	r3, [r3, #0]
 80062f0:	461a      	mov	r2, r3
 80062f2:	4b06      	ldr	r3, [pc, #24]	@ (800630c <HAL_IncTick+0x24>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4413      	add	r3, r2
 80062f8:	4a04      	ldr	r2, [pc, #16]	@ (800630c <HAL_IncTick+0x24>)
 80062fa:	6013      	str	r3, [r2, #0]
}
 80062fc:	bf00      	nop
 80062fe:	46bd      	mov	sp, r7
 8006300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006304:	4770      	bx	lr
 8006306:	bf00      	nop
 8006308:	2000010c 	.word	0x2000010c
 800630c:	200007fc 	.word	0x200007fc

08006310 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006310:	b480      	push	{r7}
 8006312:	af00      	add	r7, sp, #0
  return uwTick;
 8006314:	4b03      	ldr	r3, [pc, #12]	@ (8006324 <HAL_GetTick+0x14>)
 8006316:	681b      	ldr	r3, [r3, #0]
}
 8006318:	4618      	mov	r0, r3
 800631a:	46bd      	mov	sp, r7
 800631c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006320:	4770      	bx	lr
 8006322:	bf00      	nop
 8006324:	200007fc 	.word	0x200007fc

08006328 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8006328:	b480      	push	{r7}
 800632a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 800632c:	4b03      	ldr	r3, [pc, #12]	@ (800633c <HAL_GetTickPrio+0x14>)
 800632e:	681b      	ldr	r3, [r3, #0]
}
 8006330:	4618      	mov	r0, r3
 8006332:	46bd      	mov	sp, r7
 8006334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006338:	4770      	bx	lr
 800633a:	bf00      	nop
 800633c:	20000108 	.word	0x20000108

08006340 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b084      	sub	sp, #16
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006348:	f7ff ffe2 	bl	8006310 <HAL_GetTick>
 800634c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006358:	d005      	beq.n	8006366 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800635a:	4b0a      	ldr	r3, [pc, #40]	@ (8006384 <HAL_Delay+0x44>)
 800635c:	781b      	ldrb	r3, [r3, #0]
 800635e:	461a      	mov	r2, r3
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	4413      	add	r3, r2
 8006364:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006366:	bf00      	nop
 8006368:	f7ff ffd2 	bl	8006310 <HAL_GetTick>
 800636c:	4602      	mov	r2, r0
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	1ad3      	subs	r3, r2, r3
 8006372:	68fa      	ldr	r2, [r7, #12]
 8006374:	429a      	cmp	r2, r3
 8006376:	d8f7      	bhi.n	8006368 <HAL_Delay+0x28>
  {
  }
}
 8006378:	bf00      	nop
 800637a:	bf00      	nop
 800637c:	3710      	adds	r7, #16
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}
 8006382:	bf00      	nop
 8006384:	2000010c 	.word	0x2000010c

08006388 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006388:	b480      	push	{r7}
 800638a:	b085      	sub	sp, #20
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	f003 0307 	and.w	r3, r3, #7
 8006396:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006398:	4b0c      	ldr	r3, [pc, #48]	@ (80063cc <__NVIC_SetPriorityGrouping+0x44>)
 800639a:	68db      	ldr	r3, [r3, #12]
 800639c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800639e:	68ba      	ldr	r2, [r7, #8]
 80063a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80063a4:	4013      	ands	r3, r2
 80063a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80063b0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80063b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80063b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80063ba:	4a04      	ldr	r2, [pc, #16]	@ (80063cc <__NVIC_SetPriorityGrouping+0x44>)
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	60d3      	str	r3, [r2, #12]
}
 80063c0:	bf00      	nop
 80063c2:	3714      	adds	r7, #20
 80063c4:	46bd      	mov	sp, r7
 80063c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ca:	4770      	bx	lr
 80063cc:	e000ed00 	.word	0xe000ed00

080063d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80063d0:	b480      	push	{r7}
 80063d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80063d4:	4b04      	ldr	r3, [pc, #16]	@ (80063e8 <__NVIC_GetPriorityGrouping+0x18>)
 80063d6:	68db      	ldr	r3, [r3, #12]
 80063d8:	0a1b      	lsrs	r3, r3, #8
 80063da:	f003 0307 	and.w	r3, r3, #7
}
 80063de:	4618      	mov	r0, r3
 80063e0:	46bd      	mov	sp, r7
 80063e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e6:	4770      	bx	lr
 80063e8:	e000ed00 	.word	0xe000ed00

080063ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b083      	sub	sp, #12
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	4603      	mov	r3, r0
 80063f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80063f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	db0b      	blt.n	8006416 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80063fe:	79fb      	ldrb	r3, [r7, #7]
 8006400:	f003 021f 	and.w	r2, r3, #31
 8006404:	4907      	ldr	r1, [pc, #28]	@ (8006424 <__NVIC_EnableIRQ+0x38>)
 8006406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800640a:	095b      	lsrs	r3, r3, #5
 800640c:	2001      	movs	r0, #1
 800640e:	fa00 f202 	lsl.w	r2, r0, r2
 8006412:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006416:	bf00      	nop
 8006418:	370c      	adds	r7, #12
 800641a:	46bd      	mov	sp, r7
 800641c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006420:	4770      	bx	lr
 8006422:	bf00      	nop
 8006424:	e000e100 	.word	0xe000e100

08006428 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006428:	b480      	push	{r7}
 800642a:	b083      	sub	sp, #12
 800642c:	af00      	add	r7, sp, #0
 800642e:	4603      	mov	r3, r0
 8006430:	6039      	str	r1, [r7, #0]
 8006432:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006434:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006438:	2b00      	cmp	r3, #0
 800643a:	db0a      	blt.n	8006452 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	b2da      	uxtb	r2, r3
 8006440:	490c      	ldr	r1, [pc, #48]	@ (8006474 <__NVIC_SetPriority+0x4c>)
 8006442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006446:	0112      	lsls	r2, r2, #4
 8006448:	b2d2      	uxtb	r2, r2
 800644a:	440b      	add	r3, r1
 800644c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006450:	e00a      	b.n	8006468 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	b2da      	uxtb	r2, r3
 8006456:	4908      	ldr	r1, [pc, #32]	@ (8006478 <__NVIC_SetPriority+0x50>)
 8006458:	79fb      	ldrb	r3, [r7, #7]
 800645a:	f003 030f 	and.w	r3, r3, #15
 800645e:	3b04      	subs	r3, #4
 8006460:	0112      	lsls	r2, r2, #4
 8006462:	b2d2      	uxtb	r2, r2
 8006464:	440b      	add	r3, r1
 8006466:	761a      	strb	r2, [r3, #24]
}
 8006468:	bf00      	nop
 800646a:	370c      	adds	r7, #12
 800646c:	46bd      	mov	sp, r7
 800646e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006472:	4770      	bx	lr
 8006474:	e000e100 	.word	0xe000e100
 8006478:	e000ed00 	.word	0xe000ed00

0800647c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800647c:	b480      	push	{r7}
 800647e:	b089      	sub	sp, #36	@ 0x24
 8006480:	af00      	add	r7, sp, #0
 8006482:	60f8      	str	r0, [r7, #12]
 8006484:	60b9      	str	r1, [r7, #8]
 8006486:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	f003 0307 	and.w	r3, r3, #7
 800648e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006490:	69fb      	ldr	r3, [r7, #28]
 8006492:	f1c3 0307 	rsb	r3, r3, #7
 8006496:	2b04      	cmp	r3, #4
 8006498:	bf28      	it	cs
 800649a:	2304      	movcs	r3, #4
 800649c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800649e:	69fb      	ldr	r3, [r7, #28]
 80064a0:	3304      	adds	r3, #4
 80064a2:	2b06      	cmp	r3, #6
 80064a4:	d902      	bls.n	80064ac <NVIC_EncodePriority+0x30>
 80064a6:	69fb      	ldr	r3, [r7, #28]
 80064a8:	3b03      	subs	r3, #3
 80064aa:	e000      	b.n	80064ae <NVIC_EncodePriority+0x32>
 80064ac:	2300      	movs	r3, #0
 80064ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80064b0:	f04f 32ff 	mov.w	r2, #4294967295
 80064b4:	69bb      	ldr	r3, [r7, #24]
 80064b6:	fa02 f303 	lsl.w	r3, r2, r3
 80064ba:	43da      	mvns	r2, r3
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	401a      	ands	r2, r3
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80064c4:	f04f 31ff 	mov.w	r1, #4294967295
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	fa01 f303 	lsl.w	r3, r1, r3
 80064ce:	43d9      	mvns	r1, r3
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80064d4:	4313      	orrs	r3, r2
         );
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	3724      	adds	r7, #36	@ 0x24
 80064da:	46bd      	mov	sp, r7
 80064dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e0:	4770      	bx	lr

080064e2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80064e2:	b580      	push	{r7, lr}
 80064e4:	b082      	sub	sp, #8
 80064e6:	af00      	add	r7, sp, #0
 80064e8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f7ff ff4c 	bl	8006388 <__NVIC_SetPriorityGrouping>
}
 80064f0:	bf00      	nop
 80064f2:	3708      	adds	r7, #8
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}

080064f8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b086      	sub	sp, #24
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	4603      	mov	r3, r0
 8006500:	60b9      	str	r1, [r7, #8]
 8006502:	607a      	str	r2, [r7, #4]
 8006504:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006506:	f7ff ff63 	bl	80063d0 <__NVIC_GetPriorityGrouping>
 800650a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800650c:	687a      	ldr	r2, [r7, #4]
 800650e:	68b9      	ldr	r1, [r7, #8]
 8006510:	6978      	ldr	r0, [r7, #20]
 8006512:	f7ff ffb3 	bl	800647c <NVIC_EncodePriority>
 8006516:	4602      	mov	r2, r0
 8006518:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800651c:	4611      	mov	r1, r2
 800651e:	4618      	mov	r0, r3
 8006520:	f7ff ff82 	bl	8006428 <__NVIC_SetPriority>
}
 8006524:	bf00      	nop
 8006526:	3718      	adds	r7, #24
 8006528:	46bd      	mov	sp, r7
 800652a:	bd80      	pop	{r7, pc}

0800652c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b082      	sub	sp, #8
 8006530:	af00      	add	r7, sp, #0
 8006532:	4603      	mov	r3, r0
 8006534:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006536:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800653a:	4618      	mov	r0, r3
 800653c:	f7ff ff56 	bl	80063ec <__NVIC_EnableIRQ>
}
 8006540:	bf00      	nop
 8006542:	3708      	adds	r7, #8
 8006544:	46bd      	mov	sp, r7
 8006546:	bd80      	pop	{r7, pc}

08006548 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006548:	b480      	push	{r7}
 800654a:	b087      	sub	sp, #28
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
 8006550:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006552:	2300      	movs	r3, #0
 8006554:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006556:	e14c      	b.n	80067f2 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	681a      	ldr	r2, [r3, #0]
 800655c:	2101      	movs	r1, #1
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	fa01 f303 	lsl.w	r3, r1, r3
 8006564:	4013      	ands	r3, r2
 8006566:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	2b00      	cmp	r3, #0
 800656c:	f000 813e 	beq.w	80067ec <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	f003 0303 	and.w	r3, r3, #3
 8006578:	2b01      	cmp	r3, #1
 800657a:	d005      	beq.n	8006588 <HAL_GPIO_Init+0x40>
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	f003 0303 	and.w	r3, r3, #3
 8006584:	2b02      	cmp	r3, #2
 8006586:	d130      	bne.n	80065ea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	689b      	ldr	r3, [r3, #8]
 800658c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	005b      	lsls	r3, r3, #1
 8006592:	2203      	movs	r2, #3
 8006594:	fa02 f303 	lsl.w	r3, r2, r3
 8006598:	43db      	mvns	r3, r3
 800659a:	693a      	ldr	r2, [r7, #16]
 800659c:	4013      	ands	r3, r2
 800659e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	68da      	ldr	r2, [r3, #12]
 80065a4:	697b      	ldr	r3, [r7, #20]
 80065a6:	005b      	lsls	r3, r3, #1
 80065a8:	fa02 f303 	lsl.w	r3, r2, r3
 80065ac:	693a      	ldr	r2, [r7, #16]
 80065ae:	4313      	orrs	r3, r2
 80065b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	693a      	ldr	r2, [r7, #16]
 80065b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80065be:	2201      	movs	r2, #1
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	fa02 f303 	lsl.w	r3, r2, r3
 80065c6:	43db      	mvns	r3, r3
 80065c8:	693a      	ldr	r2, [r7, #16]
 80065ca:	4013      	ands	r3, r2
 80065cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	091b      	lsrs	r3, r3, #4
 80065d4:	f003 0201 	and.w	r2, r3, #1
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	fa02 f303 	lsl.w	r3, r2, r3
 80065de:	693a      	ldr	r2, [r7, #16]
 80065e0:	4313      	orrs	r3, r2
 80065e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	693a      	ldr	r2, [r7, #16]
 80065e8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	f003 0303 	and.w	r3, r3, #3
 80065f2:	2b03      	cmp	r3, #3
 80065f4:	d017      	beq.n	8006626 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	68db      	ldr	r3, [r3, #12]
 80065fa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	005b      	lsls	r3, r3, #1
 8006600:	2203      	movs	r2, #3
 8006602:	fa02 f303 	lsl.w	r3, r2, r3
 8006606:	43db      	mvns	r3, r3
 8006608:	693a      	ldr	r2, [r7, #16]
 800660a:	4013      	ands	r3, r2
 800660c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	689a      	ldr	r2, [r3, #8]
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	005b      	lsls	r3, r3, #1
 8006616:	fa02 f303 	lsl.w	r3, r2, r3
 800661a:	693a      	ldr	r2, [r7, #16]
 800661c:	4313      	orrs	r3, r2
 800661e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	693a      	ldr	r2, [r7, #16]
 8006624:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	f003 0303 	and.w	r3, r3, #3
 800662e:	2b02      	cmp	r3, #2
 8006630:	d123      	bne.n	800667a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	08da      	lsrs	r2, r3, #3
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	3208      	adds	r2, #8
 800663a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800663e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006640:	697b      	ldr	r3, [r7, #20]
 8006642:	f003 0307 	and.w	r3, r3, #7
 8006646:	009b      	lsls	r3, r3, #2
 8006648:	220f      	movs	r2, #15
 800664a:	fa02 f303 	lsl.w	r3, r2, r3
 800664e:	43db      	mvns	r3, r3
 8006650:	693a      	ldr	r2, [r7, #16]
 8006652:	4013      	ands	r3, r2
 8006654:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	691a      	ldr	r2, [r3, #16]
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	f003 0307 	and.w	r3, r3, #7
 8006660:	009b      	lsls	r3, r3, #2
 8006662:	fa02 f303 	lsl.w	r3, r2, r3
 8006666:	693a      	ldr	r2, [r7, #16]
 8006668:	4313      	orrs	r3, r2
 800666a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	08da      	lsrs	r2, r3, #3
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	3208      	adds	r2, #8
 8006674:	6939      	ldr	r1, [r7, #16]
 8006676:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	005b      	lsls	r3, r3, #1
 8006684:	2203      	movs	r2, #3
 8006686:	fa02 f303 	lsl.w	r3, r2, r3
 800668a:	43db      	mvns	r3, r3
 800668c:	693a      	ldr	r2, [r7, #16]
 800668e:	4013      	ands	r3, r2
 8006690:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	f003 0203 	and.w	r2, r3, #3
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	005b      	lsls	r3, r3, #1
 800669e:	fa02 f303 	lsl.w	r3, r2, r3
 80066a2:	693a      	ldr	r2, [r7, #16]
 80066a4:	4313      	orrs	r3, r2
 80066a6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	693a      	ldr	r2, [r7, #16]
 80066ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	685b      	ldr	r3, [r3, #4]
 80066b2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	f000 8098 	beq.w	80067ec <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80066bc:	4a54      	ldr	r2, [pc, #336]	@ (8006810 <HAL_GPIO_Init+0x2c8>)
 80066be:	697b      	ldr	r3, [r7, #20]
 80066c0:	089b      	lsrs	r3, r3, #2
 80066c2:	3302      	adds	r3, #2
 80066c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	f003 0303 	and.w	r3, r3, #3
 80066d0:	009b      	lsls	r3, r3, #2
 80066d2:	220f      	movs	r2, #15
 80066d4:	fa02 f303 	lsl.w	r3, r2, r3
 80066d8:	43db      	mvns	r3, r3
 80066da:	693a      	ldr	r2, [r7, #16]
 80066dc:	4013      	ands	r3, r2
 80066de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80066e6:	d019      	beq.n	800671c <HAL_GPIO_Init+0x1d4>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	4a4a      	ldr	r2, [pc, #296]	@ (8006814 <HAL_GPIO_Init+0x2cc>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d013      	beq.n	8006718 <HAL_GPIO_Init+0x1d0>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	4a49      	ldr	r2, [pc, #292]	@ (8006818 <HAL_GPIO_Init+0x2d0>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d00d      	beq.n	8006714 <HAL_GPIO_Init+0x1cc>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	4a48      	ldr	r2, [pc, #288]	@ (800681c <HAL_GPIO_Init+0x2d4>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d007      	beq.n	8006710 <HAL_GPIO_Init+0x1c8>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	4a47      	ldr	r2, [pc, #284]	@ (8006820 <HAL_GPIO_Init+0x2d8>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d101      	bne.n	800670c <HAL_GPIO_Init+0x1c4>
 8006708:	2304      	movs	r3, #4
 800670a:	e008      	b.n	800671e <HAL_GPIO_Init+0x1d6>
 800670c:	2307      	movs	r3, #7
 800670e:	e006      	b.n	800671e <HAL_GPIO_Init+0x1d6>
 8006710:	2303      	movs	r3, #3
 8006712:	e004      	b.n	800671e <HAL_GPIO_Init+0x1d6>
 8006714:	2302      	movs	r3, #2
 8006716:	e002      	b.n	800671e <HAL_GPIO_Init+0x1d6>
 8006718:	2301      	movs	r3, #1
 800671a:	e000      	b.n	800671e <HAL_GPIO_Init+0x1d6>
 800671c:	2300      	movs	r3, #0
 800671e:	697a      	ldr	r2, [r7, #20]
 8006720:	f002 0203 	and.w	r2, r2, #3
 8006724:	0092      	lsls	r2, r2, #2
 8006726:	4093      	lsls	r3, r2
 8006728:	693a      	ldr	r2, [r7, #16]
 800672a:	4313      	orrs	r3, r2
 800672c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800672e:	4938      	ldr	r1, [pc, #224]	@ (8006810 <HAL_GPIO_Init+0x2c8>)
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	089b      	lsrs	r3, r3, #2
 8006734:	3302      	adds	r3, #2
 8006736:	693a      	ldr	r2, [r7, #16]
 8006738:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800673c:	4b39      	ldr	r3, [pc, #228]	@ (8006824 <HAL_GPIO_Init+0x2dc>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	43db      	mvns	r3, r3
 8006746:	693a      	ldr	r2, [r7, #16]
 8006748:	4013      	ands	r3, r2
 800674a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	685b      	ldr	r3, [r3, #4]
 8006750:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006754:	2b00      	cmp	r3, #0
 8006756:	d003      	beq.n	8006760 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8006758:	693a      	ldr	r2, [r7, #16]
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	4313      	orrs	r3, r2
 800675e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006760:	4a30      	ldr	r2, [pc, #192]	@ (8006824 <HAL_GPIO_Init+0x2dc>)
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006766:	4b2f      	ldr	r3, [pc, #188]	@ (8006824 <HAL_GPIO_Init+0x2dc>)
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	43db      	mvns	r3, r3
 8006770:	693a      	ldr	r2, [r7, #16]
 8006772:	4013      	ands	r3, r2
 8006774:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	685b      	ldr	r3, [r3, #4]
 800677a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800677e:	2b00      	cmp	r3, #0
 8006780:	d003      	beq.n	800678a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8006782:	693a      	ldr	r2, [r7, #16]
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	4313      	orrs	r3, r2
 8006788:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800678a:	4a26      	ldr	r2, [pc, #152]	@ (8006824 <HAL_GPIO_Init+0x2dc>)
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006790:	4b24      	ldr	r3, [pc, #144]	@ (8006824 <HAL_GPIO_Init+0x2dc>)
 8006792:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006796:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	43db      	mvns	r3, r3
 800679c:	693a      	ldr	r2, [r7, #16]
 800679e:	4013      	ands	r3, r2
 80067a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d003      	beq.n	80067b6 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80067ae:	693a      	ldr	r2, [r7, #16]
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	4313      	orrs	r3, r2
 80067b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80067b6:	4a1b      	ldr	r2, [pc, #108]	@ (8006824 <HAL_GPIO_Init+0x2dc>)
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 80067be:	4b19      	ldr	r3, [pc, #100]	@ (8006824 <HAL_GPIO_Init+0x2dc>)
 80067c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80067c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	43db      	mvns	r3, r3
 80067ca:	693a      	ldr	r2, [r7, #16]
 80067cc:	4013      	ands	r3, r2
 80067ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d003      	beq.n	80067e4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80067dc:	693a      	ldr	r2, [r7, #16]
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	4313      	orrs	r3, r2
 80067e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80067e4:	4a0f      	ldr	r2, [pc, #60]	@ (8006824 <HAL_GPIO_Init+0x2dc>)
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 80067ec:	697b      	ldr	r3, [r7, #20]
 80067ee:	3301      	adds	r3, #1
 80067f0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	681a      	ldr	r2, [r3, #0]
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	fa22 f303 	lsr.w	r3, r2, r3
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	f47f aeab 	bne.w	8006558 <HAL_GPIO_Init+0x10>
  }
}
 8006802:	bf00      	nop
 8006804:	bf00      	nop
 8006806:	371c      	adds	r7, #28
 8006808:	46bd      	mov	sp, r7
 800680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680e:	4770      	bx	lr
 8006810:	40010000 	.word	0x40010000
 8006814:	48000400 	.word	0x48000400
 8006818:	48000800 	.word	0x48000800
 800681c:	48000c00 	.word	0x48000c00
 8006820:	48001000 	.word	0x48001000
 8006824:	58000800 	.word	0x58000800

08006828 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006828:	b480      	push	{r7}
 800682a:	b085      	sub	sp, #20
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
 8006830:	460b      	mov	r3, r1
 8006832:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	691a      	ldr	r2, [r3, #16]
 8006838:	887b      	ldrh	r3, [r7, #2]
 800683a:	4013      	ands	r3, r2
 800683c:	2b00      	cmp	r3, #0
 800683e:	d002      	beq.n	8006846 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006840:	2301      	movs	r3, #1
 8006842:	73fb      	strb	r3, [r7, #15]
 8006844:	e001      	b.n	800684a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006846:	2300      	movs	r3, #0
 8006848:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800684a:	7bfb      	ldrb	r3, [r7, #15]
}
 800684c:	4618      	mov	r0, r3
 800684e:	3714      	adds	r7, #20
 8006850:	46bd      	mov	sp, r7
 8006852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006856:	4770      	bx	lr

08006858 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006858:	b480      	push	{r7}
 800685a:	b083      	sub	sp, #12
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
 8006860:	460b      	mov	r3, r1
 8006862:	807b      	strh	r3, [r7, #2]
 8006864:	4613      	mov	r3, r2
 8006866:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006868:	787b      	ldrb	r3, [r7, #1]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d003      	beq.n	8006876 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800686e:	887a      	ldrh	r2, [r7, #2]
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006874:	e002      	b.n	800687c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006876:	887a      	ldrh	r2, [r7, #2]
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800687c:	bf00      	nop
 800687e:	370c      	adds	r7, #12
 8006880:	46bd      	mov	sp, r7
 8006882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006886:	4770      	bx	lr

08006888 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b082      	sub	sp, #8
 800688c:	af00      	add	r7, sp, #0
 800688e:	4603      	mov	r3, r0
 8006890:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006892:	4b08      	ldr	r3, [pc, #32]	@ (80068b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006894:	68da      	ldr	r2, [r3, #12]
 8006896:	88fb      	ldrh	r3, [r7, #6]
 8006898:	4013      	ands	r3, r2
 800689a:	2b00      	cmp	r3, #0
 800689c:	d006      	beq.n	80068ac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800689e:	4a05      	ldr	r2, [pc, #20]	@ (80068b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80068a0:	88fb      	ldrh	r3, [r7, #6]
 80068a2:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80068a4:	88fb      	ldrh	r3, [r7, #6]
 80068a6:	4618      	mov	r0, r3
 80068a8:	f7fe ff62 	bl	8005770 <HAL_GPIO_EXTI_Callback>
  }
}
 80068ac:	bf00      	nop
 80068ae:	3708      	adds	r7, #8
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}
 80068b4:	58000800 	.word	0x58000800

080068b8 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80068b8:	b480      	push	{r7}
 80068ba:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80068bc:	4b05      	ldr	r3, [pc, #20]	@ (80068d4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a04      	ldr	r2, [pc, #16]	@ (80068d4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80068c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80068c6:	6013      	str	r3, [r2, #0]
}
 80068c8:	bf00      	nop
 80068ca:	46bd      	mov	sp, r7
 80068cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d0:	4770      	bx	lr
 80068d2:	bf00      	nop
 80068d4:	58000400 	.word	0x58000400

080068d8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80068d8:	b480      	push	{r7}
 80068da:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80068dc:	4b04      	ldr	r3, [pc, #16]	@ (80068f0 <HAL_PWREx_GetVoltageRange+0x18>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 80068e4:	4618      	mov	r0, r3
 80068e6:	46bd      	mov	sp, r7
 80068e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ec:	4770      	bx	lr
 80068ee:	bf00      	nop
 80068f0:	58000400 	.word	0x58000400

080068f4 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 80068f4:	b480      	push	{r7}
 80068f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80068f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006902:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006906:	d101      	bne.n	800690c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8006908:	2301      	movs	r3, #1
 800690a:	e000      	b.n	800690e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800690c:	2300      	movs	r3, #0
}
 800690e:	4618      	mov	r0, r3
 8006910:	46bd      	mov	sp, r7
 8006912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006916:	4770      	bx	lr

08006918 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8006918:	b480      	push	{r7}
 800691a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800691c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006926:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800692a:	6013      	str	r3, [r2, #0]
}
 800692c:	bf00      	nop
 800692e:	46bd      	mov	sp, r7
 8006930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006934:	4770      	bx	lr

08006936 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8006936:	b480      	push	{r7}
 8006938:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800693a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006944:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006948:	6013      	str	r3, [r2, #0]
}
 800694a:	bf00      	nop
 800694c:	46bd      	mov	sp, r7
 800694e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006952:	4770      	bx	lr

08006954 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8006954:	b480      	push	{r7}
 8006956:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8006958:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006962:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006966:	d101      	bne.n	800696c <LL_RCC_HSE_IsReady+0x18>
 8006968:	2301      	movs	r3, #1
 800696a:	e000      	b.n	800696e <LL_RCC_HSE_IsReady+0x1a>
 800696c:	2300      	movs	r3, #0
}
 800696e:	4618      	mov	r0, r3
 8006970:	46bd      	mov	sp, r7
 8006972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006976:	4770      	bx	lr

08006978 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8006978:	b480      	push	{r7}
 800697a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800697c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006986:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800698a:	6013      	str	r3, [r2, #0]
}
 800698c:	bf00      	nop
 800698e:	46bd      	mov	sp, r7
 8006990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006994:	4770      	bx	lr

08006996 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8006996:	b480      	push	{r7}
 8006998:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800699a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80069a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80069a8:	6013      	str	r3, [r2, #0]
}
 80069aa:	bf00      	nop
 80069ac:	46bd      	mov	sp, r7
 80069ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b2:	4770      	bx	lr

080069b4 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80069b4:	b480      	push	{r7}
 80069b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80069b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80069c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80069c6:	d101      	bne.n	80069cc <LL_RCC_HSI_IsReady+0x18>
 80069c8:	2301      	movs	r3, #1
 80069ca:	e000      	b.n	80069ce <LL_RCC_HSI_IsReady+0x1a>
 80069cc:	2300      	movs	r3, #0
}
 80069ce:	4618      	mov	r0, r3
 80069d0:	46bd      	mov	sp, r7
 80069d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d6:	4770      	bx	lr

080069d8 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80069d8:	b480      	push	{r7}
 80069da:	b083      	sub	sp, #12
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80069e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	061b      	lsls	r3, r3, #24
 80069ee:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80069f2:	4313      	orrs	r3, r2
 80069f4:	604b      	str	r3, [r1, #4]
}
 80069f6:	bf00      	nop
 80069f8:	370c      	adds	r7, #12
 80069fa:	46bd      	mov	sp, r7
 80069fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a00:	4770      	bx	lr

08006a02 <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8006a02:	b480      	push	{r7}
 8006a04:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8006a06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006a0e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006a12:	f043 0301 	orr.w	r3, r3, #1
 8006a16:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8006a1a:	bf00      	nop
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a22:	4770      	bx	lr

08006a24 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8006a24:	b480      	push	{r7}
 8006a26:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8006a28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a2c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006a30:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006a34:	f023 0301 	bic.w	r3, r3, #1
 8006a38:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8006a3c:	bf00      	nop
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a44:	4770      	bx	lr

08006a46 <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8006a46:	b480      	push	{r7}
 8006a48:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8006a4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006a52:	f003 0302 	and.w	r3, r3, #2
 8006a56:	2b02      	cmp	r3, #2
 8006a58:	d101      	bne.n	8006a5e <LL_RCC_HSI48_IsReady+0x18>
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	e000      	b.n	8006a60 <LL_RCC_HSI48_IsReady+0x1a>
 8006a5e:	2300      	movs	r3, #0
}
 8006a60:	4618      	mov	r0, r3
 8006a62:	46bd      	mov	sp, r7
 8006a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a68:	4770      	bx	lr

08006a6a <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8006a6a:	b480      	push	{r7}
 8006a6c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006a6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a76:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006a7a:	f043 0301 	orr.w	r3, r3, #1
 8006a7e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006a82:	bf00      	nop
 8006a84:	46bd      	mov	sp, r7
 8006a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8a:	4770      	bx	lr

08006a8c <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006a90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a98:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006a9c:	f023 0301 	bic.w	r3, r3, #1
 8006aa0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006aa4:	bf00      	nop
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aac:	4770      	bx	lr

08006aae <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8006aae:	b480      	push	{r7}
 8006ab0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006ab2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006aba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006abe:	f043 0304 	orr.w	r3, r3, #4
 8006ac2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006ac6:	bf00      	nop
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ace:	4770      	bx	lr

08006ad0 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006ad4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006adc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006ae0:	f023 0304 	bic.w	r3, r3, #4
 8006ae4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006ae8:	bf00      	nop
 8006aea:	46bd      	mov	sp, r7
 8006aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af0:	4770      	bx	lr

08006af2 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8006af2:	b480      	push	{r7}
 8006af4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006af6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006afe:	f003 0302 	and.w	r3, r3, #2
 8006b02:	2b02      	cmp	r3, #2
 8006b04:	d101      	bne.n	8006b0a <LL_RCC_LSE_IsReady+0x18>
 8006b06:	2301      	movs	r3, #1
 8006b08:	e000      	b.n	8006b0c <LL_RCC_LSE_IsReady+0x1a>
 8006b0a:	2300      	movs	r3, #0
}
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b14:	4770      	bx	lr

08006b16 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8006b16:	b480      	push	{r7}
 8006b18:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8006b1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b22:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006b26:	f043 0301 	orr.w	r3, r3, #1
 8006b2a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8006b2e:	bf00      	nop
 8006b30:	46bd      	mov	sp, r7
 8006b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b36:	4770      	bx	lr

08006b38 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8006b3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b40:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b44:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006b48:	f023 0301 	bic.w	r3, r3, #1
 8006b4c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8006b50:	bf00      	nop
 8006b52:	46bd      	mov	sp, r7
 8006b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b58:	4770      	bx	lr

08006b5a <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8006b5a:	b480      	push	{r7}
 8006b5c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8006b5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b62:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b66:	f003 0302 	and.w	r3, r3, #2
 8006b6a:	2b02      	cmp	r3, #2
 8006b6c:	d101      	bne.n	8006b72 <LL_RCC_LSI1_IsReady+0x18>
 8006b6e:	2301      	movs	r3, #1
 8006b70:	e000      	b.n	8006b74 <LL_RCC_LSI1_IsReady+0x1a>
 8006b72:	2300      	movs	r3, #0
}
 8006b74:	4618      	mov	r0, r3
 8006b76:	46bd      	mov	sp, r7
 8006b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7c:	4770      	bx	lr

08006b7e <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8006b7e:	b480      	push	{r7}
 8006b80:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8006b82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b86:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b8a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006b8e:	f043 0304 	orr.w	r3, r3, #4
 8006b92:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8006b96:	bf00      	nop
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9e:	4770      	bx	lr

08006ba0 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8006ba4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ba8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006bac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006bb0:	f023 0304 	bic.w	r3, r3, #4
 8006bb4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8006bb8:	bf00      	nop
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc0:	4770      	bx	lr

08006bc2 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8006bc2:	b480      	push	{r7}
 8006bc4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8006bc6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006bca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006bce:	f003 0308 	and.w	r3, r3, #8
 8006bd2:	2b08      	cmp	r3, #8
 8006bd4:	d101      	bne.n	8006bda <LL_RCC_LSI2_IsReady+0x18>
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	e000      	b.n	8006bdc <LL_RCC_LSI2_IsReady+0x1a>
 8006bda:	2300      	movs	r3, #0
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	46bd      	mov	sp, r7
 8006be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be4:	4770      	bx	lr

08006be6 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8006be6:	b480      	push	{r7}
 8006be8:	b083      	sub	sp, #12
 8006bea:	af00      	add	r7, sp, #0
 8006bec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8006bee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006bf2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006bf6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	021b      	lsls	r3, r3, #8
 8006bfe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006c02:	4313      	orrs	r3, r2
 8006c04:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8006c08:	bf00      	nop
 8006c0a:	370c      	adds	r7, #12
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c12:	4770      	bx	lr

08006c14 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8006c14:	b480      	push	{r7}
 8006c16:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8006c18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006c22:	f043 0301 	orr.w	r3, r3, #1
 8006c26:	6013      	str	r3, [r2, #0]
}
 8006c28:	bf00      	nop
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c30:	4770      	bx	lr

08006c32 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8006c32:	b480      	push	{r7}
 8006c34:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8006c36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006c40:	f023 0301 	bic.w	r3, r3, #1
 8006c44:	6013      	str	r3, [r2, #0]
}
 8006c46:	bf00      	nop
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4e:	4770      	bx	lr

08006c50 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8006c50:	b480      	push	{r7}
 8006c52:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8006c54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f003 0302 	and.w	r3, r3, #2
 8006c5e:	2b02      	cmp	r3, #2
 8006c60:	d101      	bne.n	8006c66 <LL_RCC_MSI_IsReady+0x16>
 8006c62:	2301      	movs	r3, #1
 8006c64:	e000      	b.n	8006c68 <LL_RCC_MSI_IsReady+0x18>
 8006c66:	2300      	movs	r3, #0
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c70:	4770      	bx	lr

08006c72 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8006c72:	b480      	push	{r7}
 8006c74:	b083      	sub	sp, #12
 8006c76:	af00      	add	r7, sp, #0
 8006c78:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8006c7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006c84:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	600b      	str	r3, [r1, #0]
}
 8006c8e:	bf00      	nop
 8006c90:	370c      	adds	r7, #12
 8006c92:	46bd      	mov	sp, r7
 8006c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c98:	4770      	bx	lr

08006c9a <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8006c9a:	b480      	push	{r7}
 8006c9c:	b083      	sub	sp, #12
 8006c9e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8006ca0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006caa:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2bb0      	cmp	r3, #176	@ 0xb0
 8006cb0:	d901      	bls.n	8006cb6 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8006cb2:	23b0      	movs	r3, #176	@ 0xb0
 8006cb4:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8006cb6:	687b      	ldr	r3, [r7, #4]
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	370c      	adds	r7, #12
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc2:	4770      	bx	lr

08006cc4 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b083      	sub	sp, #12
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8006ccc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006cd0:	685b      	ldr	r3, [r3, #4]
 8006cd2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	021b      	lsls	r3, r3, #8
 8006cda:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	604b      	str	r3, [r1, #4]
}
 8006ce2:	bf00      	nop
 8006ce4:	370c      	adds	r7, #12
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cec:	4770      	bx	lr

08006cee <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8006cee:	b480      	push	{r7}
 8006cf0:	b083      	sub	sp, #12
 8006cf2:	af00      	add	r7, sp, #0
 8006cf4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8006cf6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006cfa:	689b      	ldr	r3, [r3, #8]
 8006cfc:	f023 0203 	bic.w	r2, r3, #3
 8006d00:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	4313      	orrs	r3, r2
 8006d08:	608b      	str	r3, [r1, #8]
}
 8006d0a:	bf00      	nop
 8006d0c:	370c      	adds	r7, #12
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d14:	4770      	bx	lr

08006d16 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8006d16:	b480      	push	{r7}
 8006d18:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8006d1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d1e:	689b      	ldr	r3, [r3, #8]
 8006d20:	f003 030c 	and.w	r3, r3, #12
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	46bd      	mov	sp, r7
 8006d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2c:	4770      	bx	lr

08006d2e <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8006d2e:	b480      	push	{r7}
 8006d30:	b083      	sub	sp, #12
 8006d32:	af00      	add	r7, sp, #0
 8006d34:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8006d36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d3a:	689b      	ldr	r3, [r3, #8]
 8006d3c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006d40:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	4313      	orrs	r3, r2
 8006d48:	608b      	str	r3, [r1, #8]
}
 8006d4a:	bf00      	nop
 8006d4c:	370c      	adds	r7, #12
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d54:	4770      	bx	lr

08006d56 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8006d56:	b480      	push	{r7}
 8006d58:	b083      	sub	sp, #12
 8006d5a:	af00      	add	r7, sp, #0
 8006d5c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8006d5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d62:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006d66:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006d6a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	4313      	orrs	r3, r2
 8006d72:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8006d76:	bf00      	nop
 8006d78:	370c      	adds	r7, #12
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d80:	4770      	bx	lr

08006d82 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8006d82:	b480      	push	{r7}
 8006d84:	b083      	sub	sp, #12
 8006d86:	af00      	add	r7, sp, #0
 8006d88:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8006d8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d8e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006d92:	f023 020f 	bic.w	r2, r3, #15
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	091b      	lsrs	r3, r3, #4
 8006d9a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8006da4:	bf00      	nop
 8006da6:	370c      	adds	r7, #12
 8006da8:	46bd      	mov	sp, r7
 8006daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dae:	4770      	bx	lr

08006db0 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b083      	sub	sp, #12
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8006db8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006dbc:	689b      	ldr	r3, [r3, #8]
 8006dbe:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006dc2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	4313      	orrs	r3, r2
 8006dca:	608b      	str	r3, [r1, #8]
}
 8006dcc:	bf00      	nop
 8006dce:	370c      	adds	r7, #12
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd6:	4770      	bx	lr

08006dd8 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b083      	sub	sp, #12
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8006de0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006de4:	689b      	ldr	r3, [r3, #8]
 8006de6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006dea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	4313      	orrs	r3, r2
 8006df2:	608b      	str	r3, [r1, #8]
}
 8006df4:	bf00      	nop
 8006df6:	370c      	adds	r7, #12
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfe:	4770      	bx	lr

08006e00 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8006e00:	b480      	push	{r7}
 8006e02:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8006e04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e08:	689b      	ldr	r3, [r3, #8]
 8006e0a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8006e0e:	4618      	mov	r0, r3
 8006e10:	46bd      	mov	sp, r7
 8006e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e16:	4770      	bx	lr

08006e18 <LL_C2_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_C2_RCC_GetAHBPrescaler(void)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 8006e1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e20:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006e24:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e30:	4770      	bx	lr

08006e32 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8006e32:	b480      	push	{r7}
 8006e34:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8006e36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e3a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006e3e:	011b      	lsls	r3, r3, #4
 8006e40:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	46bd      	mov	sp, r7
 8006e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4c:	4770      	bx	lr

08006e4e <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8006e4e:	b480      	push	{r7}
 8006e50:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8006e52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e56:	689b      	ldr	r3, [r3, #8]
 8006e58:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e64:	4770      	bx	lr

08006e66 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8006e66:	b480      	push	{r7}
 8006e68:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8006e6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e6e:	689b      	ldr	r3, [r3, #8]
 8006e70:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8006e74:	4618      	mov	r0, r3
 8006e76:	46bd      	mov	sp, r7
 8006e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7c:	4770      	bx	lr

08006e7e <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8006e7e:	b480      	push	{r7}
 8006e80:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8006e82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006e8c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006e90:	6013      	str	r3, [r2, #0]
}
 8006e92:	bf00      	nop
 8006e94:	46bd      	mov	sp, r7
 8006e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9a:	4770      	bx	lr

08006e9c <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8006ea0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006eaa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006eae:	6013      	str	r3, [r2, #0]
}
 8006eb0:	bf00      	nop
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb8:	4770      	bx	lr

08006eba <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8006eba:	b480      	push	{r7}
 8006ebc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8006ebe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ec8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006ecc:	d101      	bne.n	8006ed2 <LL_RCC_PLL_IsReady+0x18>
 8006ece:	2301      	movs	r3, #1
 8006ed0:	e000      	b.n	8006ed4 <LL_RCC_PLL_IsReady+0x1a>
 8006ed2:	2300      	movs	r3, #0
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006edc:	4770      	bx	lr

08006ede <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8006ede:	b480      	push	{r7}
 8006ee0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8006ee2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ee6:	68db      	ldr	r3, [r3, #12]
 8006ee8:	0a1b      	lsrs	r3, r3, #8
 8006eea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef6:	4770      	bx	lr

08006ef8 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8006ef8:	b480      	push	{r7}
 8006efa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8006efc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f00:	68db      	ldr	r3, [r3, #12]
 8006f02:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0e:	4770      	bx	lr

08006f10 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8006f10:	b480      	push	{r7}
 8006f12:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8006f14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f18:	68db      	ldr	r3, [r3, #12]
 8006f1a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	46bd      	mov	sp, r7
 8006f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f26:	4770      	bx	lr

08006f28 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8006f2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f30:	68db      	ldr	r3, [r3, #12]
 8006f32:	f003 0303 	and.w	r3, r3, #3
}
 8006f36:	4618      	mov	r0, r3
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3e:	4770      	bx	lr

08006f40 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8006f40:	b480      	push	{r7}
 8006f42:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8006f44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f48:	689b      	ldr	r3, [r3, #8]
 8006f4a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006f4e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f52:	d101      	bne.n	8006f58 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8006f54:	2301      	movs	r3, #1
 8006f56:	e000      	b.n	8006f5a <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8006f58:	2300      	movs	r3, #0
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f62:	4770      	bx	lr

08006f64 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8006f64:	b480      	push	{r7}
 8006f66:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8006f68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f6c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006f70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f74:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f78:	d101      	bne.n	8006f7e <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	e000      	b.n	8006f80 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8006f7e:	2300      	movs	r3, #0
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	46bd      	mov	sp, r7
 8006f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f88:	4770      	bx	lr

08006f8a <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8006f8a:	b480      	push	{r7}
 8006f8c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8006f8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f92:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006f96:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006f9a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f9e:	d101      	bne.n	8006fa4 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	e000      	b.n	8006fa6 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8006fa4:	2300      	movs	r3, #0
}
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fae:	4770      	bx	lr

08006fb0 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8006fb4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006fb8:	689b      	ldr	r3, [r3, #8]
 8006fba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006fbe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006fc2:	d101      	bne.n	8006fc8 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	e000      	b.n	8006fca <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8006fc8:	2300      	movs	r3, #0
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd2:	4770      	bx	lr

08006fd4 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8006fd8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006fdc:	689b      	ldr	r3, [r3, #8]
 8006fde:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006fe2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006fe6:	d101      	bne.n	8006fec <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8006fe8:	2301      	movs	r3, #1
 8006fea:	e000      	b.n	8006fee <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8006fec:	2300      	movs	r3, #0
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff6:	4770      	bx	lr

08006ff8 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006ff8:	b590      	push	{r4, r7, lr}
 8006ffa:	b08d      	sub	sp, #52	@ 0x34
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d101      	bne.n	800700a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007006:	2301      	movs	r3, #1
 8007008:	e363      	b.n	80076d2 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f003 0320 	and.w	r3, r3, #32
 8007012:	2b00      	cmp	r3, #0
 8007014:	f000 808d 	beq.w	8007132 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007018:	f7ff fe7d 	bl	8006d16 <LL_RCC_GetSysClkSource>
 800701c:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800701e:	f7ff ff83 	bl	8006f28 <LL_RCC_PLL_GetMainSource>
 8007022:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8007024:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007026:	2b00      	cmp	r3, #0
 8007028:	d005      	beq.n	8007036 <HAL_RCC_OscConfig+0x3e>
 800702a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800702c:	2b0c      	cmp	r3, #12
 800702e:	d147      	bne.n	80070c0 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8007030:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007032:	2b01      	cmp	r3, #1
 8007034:	d144      	bne.n	80070c0 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	69db      	ldr	r3, [r3, #28]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d101      	bne.n	8007042 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800703e:	2301      	movs	r3, #1
 8007040:	e347      	b.n	80076d2 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8007046:	f7ff fe28 	bl	8006c9a <LL_RCC_MSI_GetRange>
 800704a:	4603      	mov	r3, r0
 800704c:	429c      	cmp	r4, r3
 800704e:	d914      	bls.n	800707a <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007054:	4618      	mov	r0, r3
 8007056:	f000 fd61 	bl	8007b1c <RCC_SetFlashLatencyFromMSIRange>
 800705a:	4603      	mov	r3, r0
 800705c:	2b00      	cmp	r3, #0
 800705e:	d001      	beq.n	8007064 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8007060:	2301      	movs	r3, #1
 8007062:	e336      	b.n	80076d2 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007068:	4618      	mov	r0, r3
 800706a:	f7ff fe02 	bl	8006c72 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6a1b      	ldr	r3, [r3, #32]
 8007072:	4618      	mov	r0, r3
 8007074:	f7ff fe26 	bl	8006cc4 <LL_RCC_MSI_SetCalibTrimming>
 8007078:	e013      	b.n	80070a2 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800707e:	4618      	mov	r0, r3
 8007080:	f7ff fdf7 	bl	8006c72 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6a1b      	ldr	r3, [r3, #32]
 8007088:	4618      	mov	r0, r3
 800708a:	f7ff fe1b 	bl	8006cc4 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007092:	4618      	mov	r0, r3
 8007094:	f000 fd42 	bl	8007b1c <RCC_SetFlashLatencyFromMSIRange>
 8007098:	4603      	mov	r3, r0
 800709a:	2b00      	cmp	r3, #0
 800709c:	d001      	beq.n	80070a2 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800709e:	2301      	movs	r3, #1
 80070a0:	e317      	b.n	80076d2 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80070a2:	f000 fcc9 	bl	8007a38 <HAL_RCC_GetHCLKFreq>
 80070a6:	4603      	mov	r3, r0
 80070a8:	4aa4      	ldr	r2, [pc, #656]	@ (800733c <HAL_RCC_OscConfig+0x344>)
 80070aa:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80070ac:	4ba4      	ldr	r3, [pc, #656]	@ (8007340 <HAL_RCC_OscConfig+0x348>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4618      	mov	r0, r3
 80070b2:	f7fe fe33 	bl	8005d1c <HAL_InitTick>
 80070b6:	4603      	mov	r3, r0
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d039      	beq.n	8007130 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 80070bc:	2301      	movs	r3, #1
 80070be:	e308      	b.n	80076d2 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	69db      	ldr	r3, [r3, #28]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d01e      	beq.n	8007106 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80070c8:	f7ff fda4 	bl	8006c14 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80070cc:	f7ff f920 	bl	8006310 <HAL_GetTick>
 80070d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80070d2:	e008      	b.n	80070e6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80070d4:	f7ff f91c 	bl	8006310 <HAL_GetTick>
 80070d8:	4602      	mov	r2, r0
 80070da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070dc:	1ad3      	subs	r3, r2, r3
 80070de:	2b02      	cmp	r3, #2
 80070e0:	d901      	bls.n	80070e6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80070e2:	2303      	movs	r3, #3
 80070e4:	e2f5      	b.n	80076d2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 80070e6:	f7ff fdb3 	bl	8006c50 <LL_RCC_MSI_IsReady>
 80070ea:	4603      	mov	r3, r0
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d0f1      	beq.n	80070d4 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070f4:	4618      	mov	r0, r3
 80070f6:	f7ff fdbc 	bl	8006c72 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6a1b      	ldr	r3, [r3, #32]
 80070fe:	4618      	mov	r0, r3
 8007100:	f7ff fde0 	bl	8006cc4 <LL_RCC_MSI_SetCalibTrimming>
 8007104:	e015      	b.n	8007132 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8007106:	f7ff fd94 	bl	8006c32 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800710a:	f7ff f901 	bl	8006310 <HAL_GetTick>
 800710e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8007110:	e008      	b.n	8007124 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007112:	f7ff f8fd 	bl	8006310 <HAL_GetTick>
 8007116:	4602      	mov	r2, r0
 8007118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800711a:	1ad3      	subs	r3, r2, r3
 800711c:	2b02      	cmp	r3, #2
 800711e:	d901      	bls.n	8007124 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8007120:	2303      	movs	r3, #3
 8007122:	e2d6      	b.n	80076d2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8007124:	f7ff fd94 	bl	8006c50 <LL_RCC_MSI_IsReady>
 8007128:	4603      	mov	r3, r0
 800712a:	2b00      	cmp	r3, #0
 800712c:	d1f1      	bne.n	8007112 <HAL_RCC_OscConfig+0x11a>
 800712e:	e000      	b.n	8007132 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8007130:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f003 0301 	and.w	r3, r3, #1
 800713a:	2b00      	cmp	r3, #0
 800713c:	d047      	beq.n	80071ce <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800713e:	f7ff fdea 	bl	8006d16 <LL_RCC_GetSysClkSource>
 8007142:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007144:	f7ff fef0 	bl	8006f28 <LL_RCC_PLL_GetMainSource>
 8007148:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800714a:	6a3b      	ldr	r3, [r7, #32]
 800714c:	2b08      	cmp	r3, #8
 800714e:	d005      	beq.n	800715c <HAL_RCC_OscConfig+0x164>
 8007150:	6a3b      	ldr	r3, [r7, #32]
 8007152:	2b0c      	cmp	r3, #12
 8007154:	d108      	bne.n	8007168 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8007156:	69fb      	ldr	r3, [r7, #28]
 8007158:	2b03      	cmp	r3, #3
 800715a:	d105      	bne.n	8007168 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	685b      	ldr	r3, [r3, #4]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d134      	bne.n	80071ce <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8007164:	2301      	movs	r3, #1
 8007166:	e2b4      	b.n	80076d2 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	685b      	ldr	r3, [r3, #4]
 800716c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007170:	d102      	bne.n	8007178 <HAL_RCC_OscConfig+0x180>
 8007172:	f7ff fbd1 	bl	8006918 <LL_RCC_HSE_Enable>
 8007176:	e001      	b.n	800717c <HAL_RCC_OscConfig+0x184>
 8007178:	f7ff fbdd 	bl	8006936 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	685b      	ldr	r3, [r3, #4]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d012      	beq.n	80071aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007184:	f7ff f8c4 	bl	8006310 <HAL_GetTick>
 8007188:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800718a:	e008      	b.n	800719e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800718c:	f7ff f8c0 	bl	8006310 <HAL_GetTick>
 8007190:	4602      	mov	r2, r0
 8007192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007194:	1ad3      	subs	r3, r2, r3
 8007196:	2b64      	cmp	r3, #100	@ 0x64
 8007198:	d901      	bls.n	800719e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800719a:	2303      	movs	r3, #3
 800719c:	e299      	b.n	80076d2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800719e:	f7ff fbd9 	bl	8006954 <LL_RCC_HSE_IsReady>
 80071a2:	4603      	mov	r3, r0
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d0f1      	beq.n	800718c <HAL_RCC_OscConfig+0x194>
 80071a8:	e011      	b.n	80071ce <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071aa:	f7ff f8b1 	bl	8006310 <HAL_GetTick>
 80071ae:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80071b0:	e008      	b.n	80071c4 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80071b2:	f7ff f8ad 	bl	8006310 <HAL_GetTick>
 80071b6:	4602      	mov	r2, r0
 80071b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071ba:	1ad3      	subs	r3, r2, r3
 80071bc:	2b64      	cmp	r3, #100	@ 0x64
 80071be:	d901      	bls.n	80071c4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80071c0:	2303      	movs	r3, #3
 80071c2:	e286      	b.n	80076d2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 80071c4:	f7ff fbc6 	bl	8006954 <LL_RCC_HSE_IsReady>
 80071c8:	4603      	mov	r3, r0
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d1f1      	bne.n	80071b2 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f003 0302 	and.w	r3, r3, #2
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d04c      	beq.n	8007274 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80071da:	f7ff fd9c 	bl	8006d16 <LL_RCC_GetSysClkSource>
 80071de:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80071e0:	f7ff fea2 	bl	8006f28 <LL_RCC_PLL_GetMainSource>
 80071e4:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80071e6:	69bb      	ldr	r3, [r7, #24]
 80071e8:	2b04      	cmp	r3, #4
 80071ea:	d005      	beq.n	80071f8 <HAL_RCC_OscConfig+0x200>
 80071ec:	69bb      	ldr	r3, [r7, #24]
 80071ee:	2b0c      	cmp	r3, #12
 80071f0:	d10e      	bne.n	8007210 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80071f2:	697b      	ldr	r3, [r7, #20]
 80071f4:	2b02      	cmp	r3, #2
 80071f6:	d10b      	bne.n	8007210 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	68db      	ldr	r3, [r3, #12]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d101      	bne.n	8007204 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8007200:	2301      	movs	r3, #1
 8007202:	e266      	b.n	80076d2 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	691b      	ldr	r3, [r3, #16]
 8007208:	4618      	mov	r0, r3
 800720a:	f7ff fbe5 	bl	80069d8 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800720e:	e031      	b.n	8007274 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	68db      	ldr	r3, [r3, #12]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d019      	beq.n	800724c <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007218:	f7ff fbae 	bl	8006978 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800721c:	f7ff f878 	bl	8006310 <HAL_GetTick>
 8007220:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8007222:	e008      	b.n	8007236 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007224:	f7ff f874 	bl	8006310 <HAL_GetTick>
 8007228:	4602      	mov	r2, r0
 800722a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800722c:	1ad3      	subs	r3, r2, r3
 800722e:	2b02      	cmp	r3, #2
 8007230:	d901      	bls.n	8007236 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8007232:	2303      	movs	r3, #3
 8007234:	e24d      	b.n	80076d2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8007236:	f7ff fbbd 	bl	80069b4 <LL_RCC_HSI_IsReady>
 800723a:	4603      	mov	r3, r0
 800723c:	2b00      	cmp	r3, #0
 800723e:	d0f1      	beq.n	8007224 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	691b      	ldr	r3, [r3, #16]
 8007244:	4618      	mov	r0, r3
 8007246:	f7ff fbc7 	bl	80069d8 <LL_RCC_HSI_SetCalibTrimming>
 800724a:	e013      	b.n	8007274 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800724c:	f7ff fba3 	bl	8006996 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007250:	f7ff f85e 	bl	8006310 <HAL_GetTick>
 8007254:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8007256:	e008      	b.n	800726a <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007258:	f7ff f85a 	bl	8006310 <HAL_GetTick>
 800725c:	4602      	mov	r2, r0
 800725e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007260:	1ad3      	subs	r3, r2, r3
 8007262:	2b02      	cmp	r3, #2
 8007264:	d901      	bls.n	800726a <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8007266:	2303      	movs	r3, #3
 8007268:	e233      	b.n	80076d2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800726a:	f7ff fba3 	bl	80069b4 <LL_RCC_HSI_IsReady>
 800726e:	4603      	mov	r3, r0
 8007270:	2b00      	cmp	r3, #0
 8007272:	d1f1      	bne.n	8007258 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f003 0308 	and.w	r3, r3, #8
 800727c:	2b00      	cmp	r3, #0
 800727e:	d106      	bne.n	800728e <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8007288:	2b00      	cmp	r3, #0
 800728a:	f000 80a3 	beq.w	80073d4 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	695b      	ldr	r3, [r3, #20]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d076      	beq.n	8007384 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f003 0310 	and.w	r3, r3, #16
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d046      	beq.n	8007330 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80072a2:	f7ff fc5a 	bl	8006b5a <LL_RCC_LSI1_IsReady>
 80072a6:	4603      	mov	r3, r0
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d113      	bne.n	80072d4 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80072ac:	f7ff fc33 	bl	8006b16 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80072b0:	f7ff f82e 	bl	8006310 <HAL_GetTick>
 80072b4:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80072b6:	e008      	b.n	80072ca <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80072b8:	f7ff f82a 	bl	8006310 <HAL_GetTick>
 80072bc:	4602      	mov	r2, r0
 80072be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072c0:	1ad3      	subs	r3, r2, r3
 80072c2:	2b02      	cmp	r3, #2
 80072c4:	d901      	bls.n	80072ca <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 80072c6:	2303      	movs	r3, #3
 80072c8:	e203      	b.n	80076d2 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80072ca:	f7ff fc46 	bl	8006b5a <LL_RCC_LSI1_IsReady>
 80072ce:	4603      	mov	r3, r0
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d0f1      	beq.n	80072b8 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80072d4:	f7ff fc53 	bl	8006b7e <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072d8:	f7ff f81a 	bl	8006310 <HAL_GetTick>
 80072dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80072de:	e008      	b.n	80072f2 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80072e0:	f7ff f816 	bl	8006310 <HAL_GetTick>
 80072e4:	4602      	mov	r2, r0
 80072e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072e8:	1ad3      	subs	r3, r2, r3
 80072ea:	2b03      	cmp	r3, #3
 80072ec:	d901      	bls.n	80072f2 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 80072ee:	2303      	movs	r3, #3
 80072f0:	e1ef      	b.n	80076d2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80072f2:	f7ff fc66 	bl	8006bc2 <LL_RCC_LSI2_IsReady>
 80072f6:	4603      	mov	r3, r0
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d0f1      	beq.n	80072e0 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	699b      	ldr	r3, [r3, #24]
 8007300:	4618      	mov	r0, r3
 8007302:	f7ff fc70 	bl	8006be6 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8007306:	f7ff fc17 	bl	8006b38 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800730a:	f7ff f801 	bl	8006310 <HAL_GetTick>
 800730e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8007310:	e008      	b.n	8007324 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8007312:	f7fe fffd 	bl	8006310 <HAL_GetTick>
 8007316:	4602      	mov	r2, r0
 8007318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800731a:	1ad3      	subs	r3, r2, r3
 800731c:	2b02      	cmp	r3, #2
 800731e:	d901      	bls.n	8007324 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8007320:	2303      	movs	r3, #3
 8007322:	e1d6      	b.n	80076d2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8007324:	f7ff fc19 	bl	8006b5a <LL_RCC_LSI1_IsReady>
 8007328:	4603      	mov	r3, r0
 800732a:	2b00      	cmp	r3, #0
 800732c:	d1f1      	bne.n	8007312 <HAL_RCC_OscConfig+0x31a>
 800732e:	e051      	b.n	80073d4 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8007330:	f7ff fbf1 	bl	8006b16 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007334:	f7fe ffec 	bl	8006310 <HAL_GetTick>
 8007338:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800733a:	e00c      	b.n	8007356 <HAL_RCC_OscConfig+0x35e>
 800733c:	20000100 	.word	0x20000100
 8007340:	20000108 	.word	0x20000108
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8007344:	f7fe ffe4 	bl	8006310 <HAL_GetTick>
 8007348:	4602      	mov	r2, r0
 800734a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800734c:	1ad3      	subs	r3, r2, r3
 800734e:	2b02      	cmp	r3, #2
 8007350:	d901      	bls.n	8007356 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8007352:	2303      	movs	r3, #3
 8007354:	e1bd      	b.n	80076d2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8007356:	f7ff fc00 	bl	8006b5a <LL_RCC_LSI1_IsReady>
 800735a:	4603      	mov	r3, r0
 800735c:	2b00      	cmp	r3, #0
 800735e:	d0f1      	beq.n	8007344 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8007360:	f7ff fc1e 	bl	8006ba0 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8007364:	e008      	b.n	8007378 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8007366:	f7fe ffd3 	bl	8006310 <HAL_GetTick>
 800736a:	4602      	mov	r2, r0
 800736c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800736e:	1ad3      	subs	r3, r2, r3
 8007370:	2b03      	cmp	r3, #3
 8007372:	d901      	bls.n	8007378 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8007374:	2303      	movs	r3, #3
 8007376:	e1ac      	b.n	80076d2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8007378:	f7ff fc23 	bl	8006bc2 <LL_RCC_LSI2_IsReady>
 800737c:	4603      	mov	r3, r0
 800737e:	2b00      	cmp	r3, #0
 8007380:	d1f1      	bne.n	8007366 <HAL_RCC_OscConfig+0x36e>
 8007382:	e027      	b.n	80073d4 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8007384:	f7ff fc0c 	bl	8006ba0 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007388:	f7fe ffc2 	bl	8006310 <HAL_GetTick>
 800738c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800738e:	e008      	b.n	80073a2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8007390:	f7fe ffbe 	bl	8006310 <HAL_GetTick>
 8007394:	4602      	mov	r2, r0
 8007396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007398:	1ad3      	subs	r3, r2, r3
 800739a:	2b03      	cmp	r3, #3
 800739c:	d901      	bls.n	80073a2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800739e:	2303      	movs	r3, #3
 80073a0:	e197      	b.n	80076d2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80073a2:	f7ff fc0e 	bl	8006bc2 <LL_RCC_LSI2_IsReady>
 80073a6:	4603      	mov	r3, r0
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d1f1      	bne.n	8007390 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80073ac:	f7ff fbc4 	bl	8006b38 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073b0:	f7fe ffae 	bl	8006310 <HAL_GetTick>
 80073b4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80073b6:	e008      	b.n	80073ca <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80073b8:	f7fe ffaa 	bl	8006310 <HAL_GetTick>
 80073bc:	4602      	mov	r2, r0
 80073be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073c0:	1ad3      	subs	r3, r2, r3
 80073c2:	2b02      	cmp	r3, #2
 80073c4:	d901      	bls.n	80073ca <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80073c6:	2303      	movs	r3, #3
 80073c8:	e183      	b.n	80076d2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80073ca:	f7ff fbc6 	bl	8006b5a <LL_RCC_LSI1_IsReady>
 80073ce:	4603      	mov	r3, r0
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d1f1      	bne.n	80073b8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f003 0304 	and.w	r3, r3, #4
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d05b      	beq.n	8007498 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80073e0:	4ba7      	ldr	r3, [pc, #668]	@ (8007680 <HAL_RCC_OscConfig+0x688>)
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d114      	bne.n	8007416 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80073ec:	f7ff fa64 	bl	80068b8 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80073f0:	f7fe ff8e 	bl	8006310 <HAL_GetTick>
 80073f4:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80073f6:	e008      	b.n	800740a <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80073f8:	f7fe ff8a 	bl	8006310 <HAL_GetTick>
 80073fc:	4602      	mov	r2, r0
 80073fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007400:	1ad3      	subs	r3, r2, r3
 8007402:	2b02      	cmp	r3, #2
 8007404:	d901      	bls.n	800740a <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8007406:	2303      	movs	r3, #3
 8007408:	e163      	b.n	80076d2 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800740a:	4b9d      	ldr	r3, [pc, #628]	@ (8007680 <HAL_RCC_OscConfig+0x688>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007412:	2b00      	cmp	r3, #0
 8007414:	d0f0      	beq.n	80073f8 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	689b      	ldr	r3, [r3, #8]
 800741a:	2b01      	cmp	r3, #1
 800741c:	d102      	bne.n	8007424 <HAL_RCC_OscConfig+0x42c>
 800741e:	f7ff fb24 	bl	8006a6a <LL_RCC_LSE_Enable>
 8007422:	e00c      	b.n	800743e <HAL_RCC_OscConfig+0x446>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	689b      	ldr	r3, [r3, #8]
 8007428:	2b05      	cmp	r3, #5
 800742a:	d104      	bne.n	8007436 <HAL_RCC_OscConfig+0x43e>
 800742c:	f7ff fb3f 	bl	8006aae <LL_RCC_LSE_EnableBypass>
 8007430:	f7ff fb1b 	bl	8006a6a <LL_RCC_LSE_Enable>
 8007434:	e003      	b.n	800743e <HAL_RCC_OscConfig+0x446>
 8007436:	f7ff fb29 	bl	8006a8c <LL_RCC_LSE_Disable>
 800743a:	f7ff fb49 	bl	8006ad0 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	689b      	ldr	r3, [r3, #8]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d014      	beq.n	8007470 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007446:	f7fe ff63 	bl	8006310 <HAL_GetTick>
 800744a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800744c:	e00a      	b.n	8007464 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800744e:	f7fe ff5f 	bl	8006310 <HAL_GetTick>
 8007452:	4602      	mov	r2, r0
 8007454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007456:	1ad3      	subs	r3, r2, r3
 8007458:	f241 3288 	movw	r2, #5000	@ 0x1388
 800745c:	4293      	cmp	r3, r2
 800745e:	d901      	bls.n	8007464 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8007460:	2303      	movs	r3, #3
 8007462:	e136      	b.n	80076d2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8007464:	f7ff fb45 	bl	8006af2 <LL_RCC_LSE_IsReady>
 8007468:	4603      	mov	r3, r0
 800746a:	2b00      	cmp	r3, #0
 800746c:	d0ef      	beq.n	800744e <HAL_RCC_OscConfig+0x456>
 800746e:	e013      	b.n	8007498 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007470:	f7fe ff4e 	bl	8006310 <HAL_GetTick>
 8007474:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8007476:	e00a      	b.n	800748e <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007478:	f7fe ff4a 	bl	8006310 <HAL_GetTick>
 800747c:	4602      	mov	r2, r0
 800747e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007480:	1ad3      	subs	r3, r2, r3
 8007482:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007486:	4293      	cmp	r3, r2
 8007488:	d901      	bls.n	800748e <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800748a:	2303      	movs	r3, #3
 800748c:	e121      	b.n	80076d2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800748e:	f7ff fb30 	bl	8006af2 <LL_RCC_LSE_IsReady>
 8007492:	4603      	mov	r3, r0
 8007494:	2b00      	cmp	r3, #0
 8007496:	d1ef      	bne.n	8007478 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d02c      	beq.n	80074fe <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d014      	beq.n	80074d6 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80074ac:	f7ff faa9 	bl	8006a02 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074b0:	f7fe ff2e 	bl	8006310 <HAL_GetTick>
 80074b4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80074b6:	e008      	b.n	80074ca <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80074b8:	f7fe ff2a 	bl	8006310 <HAL_GetTick>
 80074bc:	4602      	mov	r2, r0
 80074be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074c0:	1ad3      	subs	r3, r2, r3
 80074c2:	2b02      	cmp	r3, #2
 80074c4:	d901      	bls.n	80074ca <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 80074c6:	2303      	movs	r3, #3
 80074c8:	e103      	b.n	80076d2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80074ca:	f7ff fabc 	bl	8006a46 <LL_RCC_HSI48_IsReady>
 80074ce:	4603      	mov	r3, r0
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d0f1      	beq.n	80074b8 <HAL_RCC_OscConfig+0x4c0>
 80074d4:	e013      	b.n	80074fe <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80074d6:	f7ff faa5 	bl	8006a24 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074da:	f7fe ff19 	bl	8006310 <HAL_GetTick>
 80074de:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80074e0:	e008      	b.n	80074f4 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80074e2:	f7fe ff15 	bl	8006310 <HAL_GetTick>
 80074e6:	4602      	mov	r2, r0
 80074e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074ea:	1ad3      	subs	r3, r2, r3
 80074ec:	2b02      	cmp	r3, #2
 80074ee:	d901      	bls.n	80074f4 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 80074f0:	2303      	movs	r3, #3
 80074f2:	e0ee      	b.n	80076d2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80074f4:	f7ff faa7 	bl	8006a46 <LL_RCC_HSI48_IsReady>
 80074f8:	4603      	mov	r3, r0
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d1f1      	bne.n	80074e2 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007502:	2b00      	cmp	r3, #0
 8007504:	f000 80e4 	beq.w	80076d0 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007508:	f7ff fc05 	bl	8006d16 <LL_RCC_GetSysClkSource>
 800750c:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800750e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007512:	68db      	ldr	r3, [r3, #12]
 8007514:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800751a:	2b02      	cmp	r3, #2
 800751c:	f040 80b4 	bne.w	8007688 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	f003 0203 	and.w	r2, r3, #3
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800752a:	429a      	cmp	r2, r3
 800752c:	d123      	bne.n	8007576 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007538:	429a      	cmp	r2, r3
 800753a:	d11c      	bne.n	8007576 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	0a1b      	lsrs	r3, r3, #8
 8007540:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007548:	429a      	cmp	r2, r3
 800754a:	d114      	bne.n	8007576 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8007556:	429a      	cmp	r2, r3
 8007558:	d10d      	bne.n	8007576 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007564:	429a      	cmp	r2, r3
 8007566:	d106      	bne.n	8007576 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8007572:	429a      	cmp	r2, r3
 8007574:	d05d      	beq.n	8007632 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007576:	693b      	ldr	r3, [r7, #16]
 8007578:	2b0c      	cmp	r3, #12
 800757a:	d058      	beq.n	800762e <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800757c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007586:	2b00      	cmp	r3, #0
 8007588:	d001      	beq.n	800758e <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800758a:	2301      	movs	r3, #1
 800758c:	e0a1      	b.n	80076d2 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800758e:	f7ff fc85 	bl	8006e9c <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007592:	f7fe febd 	bl	8006310 <HAL_GetTick>
 8007596:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007598:	e008      	b.n	80075ac <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800759a:	f7fe feb9 	bl	8006310 <HAL_GetTick>
 800759e:	4602      	mov	r2, r0
 80075a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075a2:	1ad3      	subs	r3, r2, r3
 80075a4:	2b02      	cmp	r3, #2
 80075a6:	d901      	bls.n	80075ac <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 80075a8:	2303      	movs	r3, #3
 80075aa:	e092      	b.n	80076d2 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80075ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d1ef      	bne.n	800759a <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80075ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80075be:	68da      	ldr	r2, [r3, #12]
 80075c0:	4b30      	ldr	r3, [pc, #192]	@ (8007684 <HAL_RCC_OscConfig+0x68c>)
 80075c2:	4013      	ands	r3, r2
 80075c4:	687a      	ldr	r2, [r7, #4]
 80075c6:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 80075c8:	687a      	ldr	r2, [r7, #4]
 80075ca:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80075cc:	4311      	orrs	r1, r2
 80075ce:	687a      	ldr	r2, [r7, #4]
 80075d0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80075d2:	0212      	lsls	r2, r2, #8
 80075d4:	4311      	orrs	r1, r2
 80075d6:	687a      	ldr	r2, [r7, #4]
 80075d8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80075da:	4311      	orrs	r1, r2
 80075dc:	687a      	ldr	r2, [r7, #4]
 80075de:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80075e0:	4311      	orrs	r1, r2
 80075e2:	687a      	ldr	r2, [r7, #4]
 80075e4:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80075e6:	430a      	orrs	r2, r1
 80075e8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80075ec:	4313      	orrs	r3, r2
 80075ee:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80075f0:	f7ff fc45 	bl	8006e7e <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80075f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80075f8:	68db      	ldr	r3, [r3, #12]
 80075fa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80075fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007602:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007604:	f7fe fe84 	bl	8006310 <HAL_GetTick>
 8007608:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800760a:	e008      	b.n	800761e <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800760c:	f7fe fe80 	bl	8006310 <HAL_GetTick>
 8007610:	4602      	mov	r2, r0
 8007612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007614:	1ad3      	subs	r3, r2, r3
 8007616:	2b02      	cmp	r3, #2
 8007618:	d901      	bls.n	800761e <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800761a:	2303      	movs	r3, #3
 800761c:	e059      	b.n	80076d2 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800761e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007628:	2b00      	cmp	r3, #0
 800762a:	d0ef      	beq.n	800760c <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800762c:	e050      	b.n	80076d0 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800762e:	2301      	movs	r3, #1
 8007630:	e04f      	b.n	80076d2 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007632:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800763c:	2b00      	cmp	r3, #0
 800763e:	d147      	bne.n	80076d0 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8007640:	f7ff fc1d 	bl	8006e7e <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007644:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007648:	68db      	ldr	r3, [r3, #12]
 800764a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800764e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007652:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007654:	f7fe fe5c 	bl	8006310 <HAL_GetTick>
 8007658:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800765a:	e008      	b.n	800766e <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800765c:	f7fe fe58 	bl	8006310 <HAL_GetTick>
 8007660:	4602      	mov	r2, r0
 8007662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007664:	1ad3      	subs	r3, r2, r3
 8007666:	2b02      	cmp	r3, #2
 8007668:	d901      	bls.n	800766e <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800766a:	2303      	movs	r3, #3
 800766c:	e031      	b.n	80076d2 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800766e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007678:	2b00      	cmp	r3, #0
 800767a:	d0ef      	beq.n	800765c <HAL_RCC_OscConfig+0x664>
 800767c:	e028      	b.n	80076d0 <HAL_RCC_OscConfig+0x6d8>
 800767e:	bf00      	nop
 8007680:	58000400 	.word	0x58000400
 8007684:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007688:	693b      	ldr	r3, [r7, #16]
 800768a:	2b0c      	cmp	r3, #12
 800768c:	d01e      	beq.n	80076cc <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800768e:	f7ff fc05 	bl	8006e9c <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007692:	f7fe fe3d 	bl	8006310 <HAL_GetTick>
 8007696:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007698:	e008      	b.n	80076ac <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800769a:	f7fe fe39 	bl	8006310 <HAL_GetTick>
 800769e:	4602      	mov	r2, r0
 80076a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076a2:	1ad3      	subs	r3, r2, r3
 80076a4:	2b02      	cmp	r3, #2
 80076a6:	d901      	bls.n	80076ac <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 80076a8:	2303      	movs	r3, #3
 80076aa:	e012      	b.n	80076d2 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80076ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d1ef      	bne.n	800769a <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80076ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80076be:	68da      	ldr	r2, [r3, #12]
 80076c0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80076c4:	4b05      	ldr	r3, [pc, #20]	@ (80076dc <HAL_RCC_OscConfig+0x6e4>)
 80076c6:	4013      	ands	r3, r2
 80076c8:	60cb      	str	r3, [r1, #12]
 80076ca:	e001      	b.n	80076d0 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80076cc:	2301      	movs	r3, #1
 80076ce:	e000      	b.n	80076d2 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 80076d0:	2300      	movs	r3, #0
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	3734      	adds	r7, #52	@ 0x34
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd90      	pop	{r4, r7, pc}
 80076da:	bf00      	nop
 80076dc:	eefefffc 	.word	0xeefefffc

080076e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b084      	sub	sp, #16
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
 80076e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d101      	bne.n	80076f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80076f0:	2301      	movs	r3, #1
 80076f2:	e12d      	b.n	8007950 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80076f4:	4b98      	ldr	r3, [pc, #608]	@ (8007958 <HAL_RCC_ClockConfig+0x278>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f003 0307 	and.w	r3, r3, #7
 80076fc:	683a      	ldr	r2, [r7, #0]
 80076fe:	429a      	cmp	r2, r3
 8007700:	d91b      	bls.n	800773a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007702:	4b95      	ldr	r3, [pc, #596]	@ (8007958 <HAL_RCC_ClockConfig+0x278>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f023 0207 	bic.w	r2, r3, #7
 800770a:	4993      	ldr	r1, [pc, #588]	@ (8007958 <HAL_RCC_ClockConfig+0x278>)
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	4313      	orrs	r3, r2
 8007710:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007712:	f7fe fdfd 	bl	8006310 <HAL_GetTick>
 8007716:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007718:	e008      	b.n	800772c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800771a:	f7fe fdf9 	bl	8006310 <HAL_GetTick>
 800771e:	4602      	mov	r2, r0
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	1ad3      	subs	r3, r2, r3
 8007724:	2b02      	cmp	r3, #2
 8007726:	d901      	bls.n	800772c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8007728:	2303      	movs	r3, #3
 800772a:	e111      	b.n	8007950 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800772c:	4b8a      	ldr	r3, [pc, #552]	@ (8007958 <HAL_RCC_ClockConfig+0x278>)
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f003 0307 	and.w	r3, r3, #7
 8007734:	683a      	ldr	r2, [r7, #0]
 8007736:	429a      	cmp	r2, r3
 8007738:	d1ef      	bne.n	800771a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f003 0302 	and.w	r3, r3, #2
 8007742:	2b00      	cmp	r3, #0
 8007744:	d016      	beq.n	8007774 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	689b      	ldr	r3, [r3, #8]
 800774a:	4618      	mov	r0, r3
 800774c:	f7ff faef 	bl	8006d2e <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007750:	f7fe fdde 	bl	8006310 <HAL_GetTick>
 8007754:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8007756:	e008      	b.n	800776a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007758:	f7fe fdda 	bl	8006310 <HAL_GetTick>
 800775c:	4602      	mov	r2, r0
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	1ad3      	subs	r3, r2, r3
 8007762:	2b02      	cmp	r3, #2
 8007764:	d901      	bls.n	800776a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8007766:	2303      	movs	r3, #3
 8007768:	e0f2      	b.n	8007950 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800776a:	f7ff fbe9 	bl	8006f40 <LL_RCC_IsActiveFlag_HPRE>
 800776e:	4603      	mov	r3, r0
 8007770:	2b00      	cmp	r3, #0
 8007772:	d0f1      	beq.n	8007758 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f003 0320 	and.w	r3, r3, #32
 800777c:	2b00      	cmp	r3, #0
 800777e:	d016      	beq.n	80077ae <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	695b      	ldr	r3, [r3, #20]
 8007784:	4618      	mov	r0, r3
 8007786:	f7ff fae6 	bl	8006d56 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800778a:	f7fe fdc1 	bl	8006310 <HAL_GetTick>
 800778e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8007790:	e008      	b.n	80077a4 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007792:	f7fe fdbd 	bl	8006310 <HAL_GetTick>
 8007796:	4602      	mov	r2, r0
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	1ad3      	subs	r3, r2, r3
 800779c:	2b02      	cmp	r3, #2
 800779e:	d901      	bls.n	80077a4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80077a0:	2303      	movs	r3, #3
 80077a2:	e0d5      	b.n	8007950 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80077a4:	f7ff fbde 	bl	8006f64 <LL_RCC_IsActiveFlag_C2HPRE>
 80077a8:	4603      	mov	r3, r0
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d0f1      	beq.n	8007792 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d016      	beq.n	80077e8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	699b      	ldr	r3, [r3, #24]
 80077be:	4618      	mov	r0, r3
 80077c0:	f7ff fadf 	bl	8006d82 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80077c4:	f7fe fda4 	bl	8006310 <HAL_GetTick>
 80077c8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80077ca:	e008      	b.n	80077de <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80077cc:	f7fe fda0 	bl	8006310 <HAL_GetTick>
 80077d0:	4602      	mov	r2, r0
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	1ad3      	subs	r3, r2, r3
 80077d6:	2b02      	cmp	r3, #2
 80077d8:	d901      	bls.n	80077de <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80077da:	2303      	movs	r3, #3
 80077dc:	e0b8      	b.n	8007950 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80077de:	f7ff fbd4 	bl	8006f8a <LL_RCC_IsActiveFlag_SHDHPRE>
 80077e2:	4603      	mov	r3, r0
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d0f1      	beq.n	80077cc <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f003 0304 	and.w	r3, r3, #4
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d016      	beq.n	8007822 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	68db      	ldr	r3, [r3, #12]
 80077f8:	4618      	mov	r0, r3
 80077fa:	f7ff fad9 	bl	8006db0 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80077fe:	f7fe fd87 	bl	8006310 <HAL_GetTick>
 8007802:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8007804:	e008      	b.n	8007818 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007806:	f7fe fd83 	bl	8006310 <HAL_GetTick>
 800780a:	4602      	mov	r2, r0
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	1ad3      	subs	r3, r2, r3
 8007810:	2b02      	cmp	r3, #2
 8007812:	d901      	bls.n	8007818 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8007814:	2303      	movs	r3, #3
 8007816:	e09b      	b.n	8007950 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8007818:	f7ff fbca 	bl	8006fb0 <LL_RCC_IsActiveFlag_PPRE1>
 800781c:	4603      	mov	r3, r0
 800781e:	2b00      	cmp	r3, #0
 8007820:	d0f1      	beq.n	8007806 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f003 0308 	and.w	r3, r3, #8
 800782a:	2b00      	cmp	r3, #0
 800782c:	d017      	beq.n	800785e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	691b      	ldr	r3, [r3, #16]
 8007832:	00db      	lsls	r3, r3, #3
 8007834:	4618      	mov	r0, r3
 8007836:	f7ff facf 	bl	8006dd8 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800783a:	f7fe fd69 	bl	8006310 <HAL_GetTick>
 800783e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8007840:	e008      	b.n	8007854 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007842:	f7fe fd65 	bl	8006310 <HAL_GetTick>
 8007846:	4602      	mov	r2, r0
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	1ad3      	subs	r3, r2, r3
 800784c:	2b02      	cmp	r3, #2
 800784e:	d901      	bls.n	8007854 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8007850:	2303      	movs	r3, #3
 8007852:	e07d      	b.n	8007950 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8007854:	f7ff fbbe 	bl	8006fd4 <LL_RCC_IsActiveFlag_PPRE2>
 8007858:	4603      	mov	r3, r0
 800785a:	2b00      	cmp	r3, #0
 800785c:	d0f1      	beq.n	8007842 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f003 0301 	and.w	r3, r3, #1
 8007866:	2b00      	cmp	r3, #0
 8007868:	d043      	beq.n	80078f2 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	685b      	ldr	r3, [r3, #4]
 800786e:	2b02      	cmp	r3, #2
 8007870:	d106      	bne.n	8007880 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8007872:	f7ff f86f 	bl	8006954 <LL_RCC_HSE_IsReady>
 8007876:	4603      	mov	r3, r0
 8007878:	2b00      	cmp	r3, #0
 800787a:	d11e      	bne.n	80078ba <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800787c:	2301      	movs	r3, #1
 800787e:	e067      	b.n	8007950 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	685b      	ldr	r3, [r3, #4]
 8007884:	2b03      	cmp	r3, #3
 8007886:	d106      	bne.n	8007896 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8007888:	f7ff fb17 	bl	8006eba <LL_RCC_PLL_IsReady>
 800788c:	4603      	mov	r3, r0
 800788e:	2b00      	cmp	r3, #0
 8007890:	d113      	bne.n	80078ba <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8007892:	2301      	movs	r3, #1
 8007894:	e05c      	b.n	8007950 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	685b      	ldr	r3, [r3, #4]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d106      	bne.n	80078ac <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800789e:	f7ff f9d7 	bl	8006c50 <LL_RCC_MSI_IsReady>
 80078a2:	4603      	mov	r3, r0
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d108      	bne.n	80078ba <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80078a8:	2301      	movs	r3, #1
 80078aa:	e051      	b.n	8007950 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80078ac:	f7ff f882 	bl	80069b4 <LL_RCC_HSI_IsReady>
 80078b0:	4603      	mov	r3, r0
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d101      	bne.n	80078ba <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80078b6:	2301      	movs	r3, #1
 80078b8:	e04a      	b.n	8007950 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	685b      	ldr	r3, [r3, #4]
 80078be:	4618      	mov	r0, r3
 80078c0:	f7ff fa15 	bl	8006cee <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80078c4:	f7fe fd24 	bl	8006310 <HAL_GetTick>
 80078c8:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80078ca:	e00a      	b.n	80078e2 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80078cc:	f7fe fd20 	bl	8006310 <HAL_GetTick>
 80078d0:	4602      	mov	r2, r0
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	1ad3      	subs	r3, r2, r3
 80078d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80078da:	4293      	cmp	r3, r2
 80078dc:	d901      	bls.n	80078e2 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80078de:	2303      	movs	r3, #3
 80078e0:	e036      	b.n	8007950 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80078e2:	f7ff fa18 	bl	8006d16 <LL_RCC_GetSysClkSource>
 80078e6:	4602      	mov	r2, r0
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	685b      	ldr	r3, [r3, #4]
 80078ec:	009b      	lsls	r3, r3, #2
 80078ee:	429a      	cmp	r2, r3
 80078f0:	d1ec      	bne.n	80078cc <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80078f2:	4b19      	ldr	r3, [pc, #100]	@ (8007958 <HAL_RCC_ClockConfig+0x278>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f003 0307 	and.w	r3, r3, #7
 80078fa:	683a      	ldr	r2, [r7, #0]
 80078fc:	429a      	cmp	r2, r3
 80078fe:	d21b      	bcs.n	8007938 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007900:	4b15      	ldr	r3, [pc, #84]	@ (8007958 <HAL_RCC_ClockConfig+0x278>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f023 0207 	bic.w	r2, r3, #7
 8007908:	4913      	ldr	r1, [pc, #76]	@ (8007958 <HAL_RCC_ClockConfig+0x278>)
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	4313      	orrs	r3, r2
 800790e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007910:	f7fe fcfe 	bl	8006310 <HAL_GetTick>
 8007914:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007916:	e008      	b.n	800792a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8007918:	f7fe fcfa 	bl	8006310 <HAL_GetTick>
 800791c:	4602      	mov	r2, r0
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	1ad3      	subs	r3, r2, r3
 8007922:	2b02      	cmp	r3, #2
 8007924:	d901      	bls.n	800792a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8007926:	2303      	movs	r3, #3
 8007928:	e012      	b.n	8007950 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800792a:	4b0b      	ldr	r3, [pc, #44]	@ (8007958 <HAL_RCC_ClockConfig+0x278>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f003 0307 	and.w	r3, r3, #7
 8007932:	683a      	ldr	r2, [r7, #0]
 8007934:	429a      	cmp	r2, r3
 8007936:	d1ef      	bne.n	8007918 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8007938:	f000 f87e 	bl	8007a38 <HAL_RCC_GetHCLKFreq>
 800793c:	4603      	mov	r3, r0
 800793e:	4a07      	ldr	r2, [pc, #28]	@ (800795c <HAL_RCC_ClockConfig+0x27c>)
 8007940:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8007942:	f7fe fcf1 	bl	8006328 <HAL_GetTickPrio>
 8007946:	4603      	mov	r3, r0
 8007948:	4618      	mov	r0, r3
 800794a:	f7fe f9e7 	bl	8005d1c <HAL_InitTick>
 800794e:	4603      	mov	r3, r0
}
 8007950:	4618      	mov	r0, r3
 8007952:	3710      	adds	r7, #16
 8007954:	46bd      	mov	sp, r7
 8007956:	bd80      	pop	{r7, pc}
 8007958:	58004000 	.word	0x58004000
 800795c:	20000100 	.word	0x20000100

08007960 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007960:	b590      	push	{r4, r7, lr}
 8007962:	b085      	sub	sp, #20
 8007964:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007966:	f7ff f9d6 	bl	8006d16 <LL_RCC_GetSysClkSource>
 800796a:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d10a      	bne.n	8007988 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8007972:	f7ff f992 	bl	8006c9a <LL_RCC_MSI_GetRange>
 8007976:	4603      	mov	r3, r0
 8007978:	091b      	lsrs	r3, r3, #4
 800797a:	f003 030f 	and.w	r3, r3, #15
 800797e:	4a2b      	ldr	r2, [pc, #172]	@ (8007a2c <HAL_RCC_GetSysClockFreq+0xcc>)
 8007980:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007984:	60fb      	str	r3, [r7, #12]
 8007986:	e04b      	b.n	8007a20 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2b04      	cmp	r3, #4
 800798c:	d102      	bne.n	8007994 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800798e:	4b28      	ldr	r3, [pc, #160]	@ (8007a30 <HAL_RCC_GetSysClockFreq+0xd0>)
 8007990:	60fb      	str	r3, [r7, #12]
 8007992:	e045      	b.n	8007a20 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2b08      	cmp	r3, #8
 8007998:	d10a      	bne.n	80079b0 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800799a:	f7fe ffab 	bl	80068f4 <LL_RCC_HSE_IsEnabledDiv2>
 800799e:	4603      	mov	r3, r0
 80079a0:	2b01      	cmp	r3, #1
 80079a2:	d102      	bne.n	80079aa <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80079a4:	4b22      	ldr	r3, [pc, #136]	@ (8007a30 <HAL_RCC_GetSysClockFreq+0xd0>)
 80079a6:	60fb      	str	r3, [r7, #12]
 80079a8:	e03a      	b.n	8007a20 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80079aa:	4b22      	ldr	r3, [pc, #136]	@ (8007a34 <HAL_RCC_GetSysClockFreq+0xd4>)
 80079ac:	60fb      	str	r3, [r7, #12]
 80079ae:	e037      	b.n	8007a20 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80079b0:	f7ff faba 	bl	8006f28 <LL_RCC_PLL_GetMainSource>
 80079b4:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	2b02      	cmp	r3, #2
 80079ba:	d003      	beq.n	80079c4 <HAL_RCC_GetSysClockFreq+0x64>
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	2b03      	cmp	r3, #3
 80079c0:	d003      	beq.n	80079ca <HAL_RCC_GetSysClockFreq+0x6a>
 80079c2:	e00d      	b.n	80079e0 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80079c4:	4b1a      	ldr	r3, [pc, #104]	@ (8007a30 <HAL_RCC_GetSysClockFreq+0xd0>)
 80079c6:	60bb      	str	r3, [r7, #8]
        break;
 80079c8:	e015      	b.n	80079f6 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80079ca:	f7fe ff93 	bl	80068f4 <LL_RCC_HSE_IsEnabledDiv2>
 80079ce:	4603      	mov	r3, r0
 80079d0:	2b01      	cmp	r3, #1
 80079d2:	d102      	bne.n	80079da <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80079d4:	4b16      	ldr	r3, [pc, #88]	@ (8007a30 <HAL_RCC_GetSysClockFreq+0xd0>)
 80079d6:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80079d8:	e00d      	b.n	80079f6 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 80079da:	4b16      	ldr	r3, [pc, #88]	@ (8007a34 <HAL_RCC_GetSysClockFreq+0xd4>)
 80079dc:	60bb      	str	r3, [r7, #8]
        break;
 80079de:	e00a      	b.n	80079f6 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80079e0:	f7ff f95b 	bl	8006c9a <LL_RCC_MSI_GetRange>
 80079e4:	4603      	mov	r3, r0
 80079e6:	091b      	lsrs	r3, r3, #4
 80079e8:	f003 030f 	and.w	r3, r3, #15
 80079ec:	4a0f      	ldr	r2, [pc, #60]	@ (8007a2c <HAL_RCC_GetSysClockFreq+0xcc>)
 80079ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079f2:	60bb      	str	r3, [r7, #8]
        break;
 80079f4:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 80079f6:	f7ff fa72 	bl	8006ede <LL_RCC_PLL_GetN>
 80079fa:	4602      	mov	r2, r0
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	fb03 f402 	mul.w	r4, r3, r2
 8007a02:	f7ff fa85 	bl	8006f10 <LL_RCC_PLL_GetDivider>
 8007a06:	4603      	mov	r3, r0
 8007a08:	091b      	lsrs	r3, r3, #4
 8007a0a:	3301      	adds	r3, #1
 8007a0c:	fbb4 f4f3 	udiv	r4, r4, r3
 8007a10:	f7ff fa72 	bl	8006ef8 <LL_RCC_PLL_GetR>
 8007a14:	4603      	mov	r3, r0
 8007a16:	0f5b      	lsrs	r3, r3, #29
 8007a18:	3301      	adds	r3, #1
 8007a1a:	fbb4 f3f3 	udiv	r3, r4, r3
 8007a1e:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8007a20:	68fb      	ldr	r3, [r7, #12]
}
 8007a22:	4618      	mov	r0, r3
 8007a24:	3714      	adds	r7, #20
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bd90      	pop	{r4, r7, pc}
 8007a2a:	bf00      	nop
 8007a2c:	08013084 	.word	0x08013084
 8007a30:	00f42400 	.word	0x00f42400
 8007a34:	01e84800 	.word	0x01e84800

08007a38 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007a38:	b598      	push	{r3, r4, r7, lr}
 8007a3a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8007a3c:	f7ff ff90 	bl	8007960 <HAL_RCC_GetSysClockFreq>
 8007a40:	4604      	mov	r4, r0
 8007a42:	f7ff f9dd 	bl	8006e00 <LL_RCC_GetAHBPrescaler>
 8007a46:	4603      	mov	r3, r0
 8007a48:	091b      	lsrs	r3, r3, #4
 8007a4a:	f003 030f 	and.w	r3, r3, #15
 8007a4e:	4a03      	ldr	r2, [pc, #12]	@ (8007a5c <HAL_RCC_GetHCLKFreq+0x24>)
 8007a50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a54:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8007a58:	4618      	mov	r0, r3
 8007a5a:	bd98      	pop	{r3, r4, r7, pc}
 8007a5c:	08013024 	.word	0x08013024

08007a60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007a60:	b598      	push	{r3, r4, r7, lr}
 8007a62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8007a64:	f7ff ffe8 	bl	8007a38 <HAL_RCC_GetHCLKFreq>
 8007a68:	4604      	mov	r4, r0
 8007a6a:	f7ff f9f0 	bl	8006e4e <LL_RCC_GetAPB1Prescaler>
 8007a6e:	4603      	mov	r3, r0
 8007a70:	0a1b      	lsrs	r3, r3, #8
 8007a72:	f003 0307 	and.w	r3, r3, #7
 8007a76:	4a04      	ldr	r2, [pc, #16]	@ (8007a88 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007a78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a7c:	f003 031f 	and.w	r3, r3, #31
 8007a80:	fa24 f303 	lsr.w	r3, r4, r3
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	bd98      	pop	{r3, r4, r7, pc}
 8007a88:	08013064 	.word	0x08013064

08007a8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007a8c:	b598      	push	{r3, r4, r7, lr}
 8007a8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8007a90:	f7ff ffd2 	bl	8007a38 <HAL_RCC_GetHCLKFreq>
 8007a94:	4604      	mov	r4, r0
 8007a96:	f7ff f9e6 	bl	8006e66 <LL_RCC_GetAPB2Prescaler>
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	0adb      	lsrs	r3, r3, #11
 8007a9e:	f003 0307 	and.w	r3, r3, #7
 8007aa2:	4a04      	ldr	r2, [pc, #16]	@ (8007ab4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007aa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007aa8:	f003 031f 	and.w	r3, r3, #31
 8007aac:	fa24 f303 	lsr.w	r3, r4, r3
}
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	bd98      	pop	{r3, r4, r7, pc}
 8007ab4:	08013064 	.word	0x08013064

08007ab8 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b082      	sub	sp, #8
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
 8007ac0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 |
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	226f      	movs	r2, #111	@ 0x6f
 8007ac6:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 8007ac8:	f7ff f925 	bl	8006d16 <LL_RCC_GetSysClkSource>
 8007acc:	4602      	mov	r2, r0
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 8007ad2:	f7ff f995 	bl	8006e00 <LL_RCC_GetAHBPrescaler>
 8007ad6:	4602      	mov	r2, r0
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 8007adc:	f7ff f9b7 	bl	8006e4e <LL_RCC_GetAPB1Prescaler>
 8007ae0:	4602      	mov	r2, r0
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 8007ae6:	f7ff f9be 	bl	8006e66 <LL_RCC_GetAPB2Prescaler>
 8007aea:	4602      	mov	r2, r0
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 8007af0:	f7ff f992 	bl	8006e18 <LL_C2_RCC_GetAHBPrescaler>
 8007af4:	4602      	mov	r2, r0
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 8007afa:	f7ff f99a 	bl	8006e32 <LL_RCC_GetAHB4Prescaler>
 8007afe:	4602      	mov	r2, r0
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8007b04:	4b04      	ldr	r3, [pc, #16]	@ (8007b18 <HAL_RCC_GetClockConfig+0x60>)
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f003 0207 	and.w	r2, r3, #7
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	601a      	str	r2, [r3, #0]
}
 8007b10:	bf00      	nop
 8007b12:	3708      	adds	r7, #8
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}
 8007b18:	58004000 	.word	0x58004000

08007b1c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8007b1c:	b590      	push	{r4, r7, lr}
 8007b1e:	b085      	sub	sp, #20
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2bb0      	cmp	r3, #176	@ 0xb0
 8007b28:	d903      	bls.n	8007b32 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8007b2a:	4b15      	ldr	r3, [pc, #84]	@ (8007b80 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8007b2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b2e:	60fb      	str	r3, [r7, #12]
 8007b30:	e007      	b.n	8007b42 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	091b      	lsrs	r3, r3, #4
 8007b36:	f003 030f 	and.w	r3, r3, #15
 8007b3a:	4a11      	ldr	r2, [pc, #68]	@ (8007b80 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8007b3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b40:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8007b42:	f7ff f976 	bl	8006e32 <LL_RCC_GetAHB4Prescaler>
 8007b46:	4603      	mov	r3, r0
 8007b48:	091b      	lsrs	r3, r3, #4
 8007b4a:	f003 030f 	and.w	r3, r3, #15
 8007b4e:	4a0d      	ldr	r2, [pc, #52]	@ (8007b84 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8007b50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b54:	68fa      	ldr	r2, [r7, #12]
 8007b56:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b5a:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	4a0a      	ldr	r2, [pc, #40]	@ (8007b88 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8007b60:	fba2 2303 	umull	r2, r3, r2, r3
 8007b64:	0c9c      	lsrs	r4, r3, #18
 8007b66:	f7fe feb7 	bl	80068d8 <HAL_PWREx_GetVoltageRange>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	4619      	mov	r1, r3
 8007b6e:	4620      	mov	r0, r4
 8007b70:	f000 f80c 	bl	8007b8c <RCC_SetFlashLatency>
 8007b74:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8007b76:	4618      	mov	r0, r3
 8007b78:	3714      	adds	r7, #20
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bd90      	pop	{r4, r7, pc}
 8007b7e:	bf00      	nop
 8007b80:	08013084 	.word	0x08013084
 8007b84:	08013024 	.word	0x08013024
 8007b88:	431bde83 	.word	0x431bde83

08007b8c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8007b8c:	b590      	push	{r4, r7, lr}
 8007b8e:	b093      	sub	sp, #76	@ 0x4c
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
 8007b94:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8007b96:	4b37      	ldr	r3, [pc, #220]	@ (8007c74 <RCC_SetFlashLatency+0xe8>)
 8007b98:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8007b9c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007b9e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8007ba2:	4a35      	ldr	r2, [pc, #212]	@ (8007c78 <RCC_SetFlashLatency+0xec>)
 8007ba4:	f107 031c 	add.w	r3, r7, #28
 8007ba8:	ca07      	ldmia	r2, {r0, r1, r2}
 8007baa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8007bae:	4b33      	ldr	r3, [pc, #204]	@ (8007c7c <RCC_SetFlashLatency+0xf0>)
 8007bb0:	f107 040c 	add.w	r4, r7, #12
 8007bb4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007bb6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8007bba:	2300      	movs	r3, #0
 8007bbc:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007bc4:	d11a      	bne.n	8007bfc <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	643b      	str	r3, [r7, #64]	@ 0x40
 8007bca:	e013      	b.n	8007bf4 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8007bcc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007bce:	009b      	lsls	r3, r3, #2
 8007bd0:	3348      	adds	r3, #72	@ 0x48
 8007bd2:	443b      	add	r3, r7
 8007bd4:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8007bd8:	687a      	ldr	r2, [r7, #4]
 8007bda:	429a      	cmp	r2, r3
 8007bdc:	d807      	bhi.n	8007bee <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8007bde:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007be0:	009b      	lsls	r3, r3, #2
 8007be2:	3348      	adds	r3, #72	@ 0x48
 8007be4:	443b      	add	r3, r7
 8007be6:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8007bea:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8007bec:	e020      	b.n	8007c30 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8007bee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007bf0:	3301      	adds	r3, #1
 8007bf2:	643b      	str	r3, [r7, #64]	@ 0x40
 8007bf4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007bf6:	2b03      	cmp	r3, #3
 8007bf8:	d9e8      	bls.n	8007bcc <RCC_SetFlashLatency+0x40>
 8007bfa:	e019      	b.n	8007c30 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007c00:	e013      	b.n	8007c2a <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8007c02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c04:	009b      	lsls	r3, r3, #2
 8007c06:	3348      	adds	r3, #72	@ 0x48
 8007c08:	443b      	add	r3, r7
 8007c0a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8007c0e:	687a      	ldr	r2, [r7, #4]
 8007c10:	429a      	cmp	r2, r3
 8007c12:	d807      	bhi.n	8007c24 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8007c14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c16:	009b      	lsls	r3, r3, #2
 8007c18:	3348      	adds	r3, #72	@ 0x48
 8007c1a:	443b      	add	r3, r7
 8007c1c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8007c20:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8007c22:	e005      	b.n	8007c30 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8007c24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c26:	3301      	adds	r3, #1
 8007c28:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007c2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c2c:	2b02      	cmp	r3, #2
 8007c2e:	d9e8      	bls.n	8007c02 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8007c30:	4b13      	ldr	r3, [pc, #76]	@ (8007c80 <RCC_SetFlashLatency+0xf4>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f023 0207 	bic.w	r2, r3, #7
 8007c38:	4911      	ldr	r1, [pc, #68]	@ (8007c80 <RCC_SetFlashLatency+0xf4>)
 8007c3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007c3c:	4313      	orrs	r3, r2
 8007c3e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007c40:	f7fe fb66 	bl	8006310 <HAL_GetTick>
 8007c44:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8007c46:	e008      	b.n	8007c5a <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8007c48:	f7fe fb62 	bl	8006310 <HAL_GetTick>
 8007c4c:	4602      	mov	r2, r0
 8007c4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c50:	1ad3      	subs	r3, r2, r3
 8007c52:	2b02      	cmp	r3, #2
 8007c54:	d901      	bls.n	8007c5a <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8007c56:	2303      	movs	r3, #3
 8007c58:	e007      	b.n	8007c6a <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8007c5a:	4b09      	ldr	r3, [pc, #36]	@ (8007c80 <RCC_SetFlashLatency+0xf4>)
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f003 0307 	and.w	r3, r3, #7
 8007c62:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007c64:	429a      	cmp	r2, r3
 8007c66:	d1ef      	bne.n	8007c48 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8007c68:	2300      	movs	r3, #0
}
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	374c      	adds	r7, #76	@ 0x4c
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	bd90      	pop	{r4, r7, pc}
 8007c72:	bf00      	nop
 8007c74:	0800ff88 	.word	0x0800ff88
 8007c78:	0800ff98 	.word	0x0800ff98
 8007c7c:	0800ffa4 	.word	0x0800ffa4
 8007c80:	58004000 	.word	0x58004000

08007c84 <LL_RCC_LSE_IsEnabled>:
{
 8007c84:	b480      	push	{r7}
 8007c86:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8007c88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007c8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c90:	f003 0301 	and.w	r3, r3, #1
 8007c94:	2b01      	cmp	r3, #1
 8007c96:	d101      	bne.n	8007c9c <LL_RCC_LSE_IsEnabled+0x18>
 8007c98:	2301      	movs	r3, #1
 8007c9a:	e000      	b.n	8007c9e <LL_RCC_LSE_IsEnabled+0x1a>
 8007c9c:	2300      	movs	r3, #0
}
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca6:	4770      	bx	lr

08007ca8 <LL_RCC_LSE_IsReady>:
{
 8007ca8:	b480      	push	{r7}
 8007caa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8007cac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007cb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007cb4:	f003 0302 	and.w	r3, r3, #2
 8007cb8:	2b02      	cmp	r3, #2
 8007cba:	d101      	bne.n	8007cc0 <LL_RCC_LSE_IsReady+0x18>
 8007cbc:	2301      	movs	r3, #1
 8007cbe:	e000      	b.n	8007cc2 <LL_RCC_LSE_IsReady+0x1a>
 8007cc0:	2300      	movs	r3, #0
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cca:	4770      	bx	lr

08007ccc <LL_RCC_SetRFWKPClockSource>:
{
 8007ccc:	b480      	push	{r7}
 8007cce:	b083      	sub	sp, #12
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8007cd4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007cd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007cdc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007ce0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	4313      	orrs	r3, r2
 8007ce8:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8007cec:	bf00      	nop
 8007cee:	370c      	adds	r7, #12
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf6:	4770      	bx	lr

08007cf8 <LL_RCC_SetSMPSClockSource>:
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	b083      	sub	sp, #12
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8007d00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007d04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d06:	f023 0203 	bic.w	r2, r3, #3
 8007d0a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	4313      	orrs	r3, r2
 8007d12:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8007d14:	bf00      	nop
 8007d16:	370c      	adds	r7, #12
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1e:	4770      	bx	lr

08007d20 <LL_RCC_SetSMPSPrescaler>:
{
 8007d20:	b480      	push	{r7}
 8007d22:	b083      	sub	sp, #12
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8007d28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007d2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d2e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007d32:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	4313      	orrs	r3, r2
 8007d3a:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8007d3c:	bf00      	nop
 8007d3e:	370c      	adds	r7, #12
 8007d40:	46bd      	mov	sp, r7
 8007d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d46:	4770      	bx	lr

08007d48 <LL_RCC_SetUSARTClockSource>:
{
 8007d48:	b480      	push	{r7}
 8007d4a:	b083      	sub	sp, #12
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8007d50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d58:	f023 0203 	bic.w	r2, r3, #3
 8007d5c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	4313      	orrs	r3, r2
 8007d64:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007d68:	bf00      	nop
 8007d6a:	370c      	adds	r7, #12
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d72:	4770      	bx	lr

08007d74 <LL_RCC_SetLPUARTClockSource>:
{
 8007d74:	b480      	push	{r7}
 8007d76:	b083      	sub	sp, #12
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8007d7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007d80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d84:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007d88:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	4313      	orrs	r3, r2
 8007d90:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007d94:	bf00      	nop
 8007d96:	370c      	adds	r7, #12
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9e:	4770      	bx	lr

08007da0 <LL_RCC_SetI2CClockSource>:
{
 8007da0:	b480      	push	{r7}
 8007da2:	b083      	sub	sp, #12
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8007da8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007dac:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	091b      	lsrs	r3, r3, #4
 8007db4:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8007db8:	43db      	mvns	r3, r3
 8007dba:	401a      	ands	r2, r3
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	011b      	lsls	r3, r3, #4
 8007dc0:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8007dc4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007dc8:	4313      	orrs	r3, r2
 8007dca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007dce:	bf00      	nop
 8007dd0:	370c      	adds	r7, #12
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd8:	4770      	bx	lr

08007dda <LL_RCC_SetLPTIMClockSource>:
{
 8007dda:	b480      	push	{r7}
 8007ddc:	b083      	sub	sp, #12
 8007dde:	af00      	add	r7, sp, #0
 8007de0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8007de2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007de6:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	0c1b      	lsrs	r3, r3, #16
 8007dee:	041b      	lsls	r3, r3, #16
 8007df0:	43db      	mvns	r3, r3
 8007df2:	401a      	ands	r2, r3
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	041b      	lsls	r3, r3, #16
 8007df8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007dfc:	4313      	orrs	r3, r2
 8007dfe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007e02:	bf00      	nop
 8007e04:	370c      	adds	r7, #12
 8007e06:	46bd      	mov	sp, r7
 8007e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0c:	4770      	bx	lr

08007e0e <LL_RCC_SetSAIClockSource>:
{
 8007e0e:	b480      	push	{r7}
 8007e10:	b083      	sub	sp, #12
 8007e12:	af00      	add	r7, sp, #0
 8007e14:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8007e16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e1e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007e22:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	4313      	orrs	r3, r2
 8007e2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007e2e:	bf00      	nop
 8007e30:	370c      	adds	r7, #12
 8007e32:	46bd      	mov	sp, r7
 8007e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e38:	4770      	bx	lr

08007e3a <LL_RCC_SetRNGClockSource>:
{
 8007e3a:	b480      	push	{r7}
 8007e3c:	b083      	sub	sp, #12
 8007e3e:	af00      	add	r7, sp, #0
 8007e40:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8007e42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e4a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8007e4e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	4313      	orrs	r3, r2
 8007e56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007e5a:	bf00      	nop
 8007e5c:	370c      	adds	r7, #12
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e64:	4770      	bx	lr

08007e66 <LL_RCC_SetCLK48ClockSource>:
{
 8007e66:	b480      	push	{r7}
 8007e68:	b083      	sub	sp, #12
 8007e6a:	af00      	add	r7, sp, #0
 8007e6c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8007e6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e76:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007e7a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	4313      	orrs	r3, r2
 8007e82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007e86:	bf00      	nop
 8007e88:	370c      	adds	r7, #12
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e90:	4770      	bx	lr

08007e92 <LL_RCC_SetUSBClockSource>:
{
 8007e92:	b580      	push	{r7, lr}
 8007e94:	b082      	sub	sp, #8
 8007e96:	af00      	add	r7, sp, #0
 8007e98:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8007e9a:	6878      	ldr	r0, [r7, #4]
 8007e9c:	f7ff ffe3 	bl	8007e66 <LL_RCC_SetCLK48ClockSource>
}
 8007ea0:	bf00      	nop
 8007ea2:	3708      	adds	r7, #8
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bd80      	pop	{r7, pc}

08007ea8 <LL_RCC_SetADCClockSource>:
{
 8007ea8:	b480      	push	{r7}
 8007eaa:	b083      	sub	sp, #12
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8007eb0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007eb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007eb8:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007ebc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	4313      	orrs	r3, r2
 8007ec4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007ec8:	bf00      	nop
 8007eca:	370c      	adds	r7, #12
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed2:	4770      	bx	lr

08007ed4 <LL_RCC_SetRTCClockSource>:
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b083      	sub	sp, #12
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8007edc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007ee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ee4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007ee8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	4313      	orrs	r3, r2
 8007ef0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8007ef4:	bf00      	nop
 8007ef6:	370c      	adds	r7, #12
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efe:	4770      	bx	lr

08007f00 <LL_RCC_GetRTCClockSource>:
{
 8007f00:	b480      	push	{r7}
 8007f02:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8007f04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007f08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f0c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8007f10:	4618      	mov	r0, r3
 8007f12:	46bd      	mov	sp, r7
 8007f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f18:	4770      	bx	lr

08007f1a <LL_RCC_ForceBackupDomainReset>:
{
 8007f1a:	b480      	push	{r7}
 8007f1c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8007f1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f26:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007f2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007f2e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8007f32:	bf00      	nop
 8007f34:	46bd      	mov	sp, r7
 8007f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3a:	4770      	bx	lr

08007f3c <LL_RCC_ReleaseBackupDomainReset>:
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8007f40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007f44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f48:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007f4c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007f50:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8007f54:	bf00      	nop
 8007f56:	46bd      	mov	sp, r7
 8007f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5c:	4770      	bx	lr

08007f5e <LL_RCC_PLLSAI1_Enable>:
{
 8007f5e:	b480      	push	{r7}
 8007f60:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8007f62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007f6c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007f70:	6013      	str	r3, [r2, #0]
}
 8007f72:	bf00      	nop
 8007f74:	46bd      	mov	sp, r7
 8007f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7a:	4770      	bx	lr

08007f7c <LL_RCC_PLLSAI1_Disable>:
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8007f80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007f8a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007f8e:	6013      	str	r3, [r2, #0]
}
 8007f90:	bf00      	nop
 8007f92:	46bd      	mov	sp, r7
 8007f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f98:	4770      	bx	lr

08007f9a <LL_RCC_PLLSAI1_IsReady>:
{
 8007f9a:	b480      	push	{r7}
 8007f9c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8007f9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007fa8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007fac:	d101      	bne.n	8007fb2 <LL_RCC_PLLSAI1_IsReady+0x18>
 8007fae:	2301      	movs	r3, #1
 8007fb0:	e000      	b.n	8007fb4 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8007fb2:	2300      	movs	r3, #0
}
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbc:	4770      	bx	lr

08007fbe <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007fbe:	b580      	push	{r7, lr}
 8007fc0:	b088      	sub	sp, #32
 8007fc2:	af00      	add	r7, sp, #0
 8007fc4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8007fca:	2300      	movs	r3, #0
 8007fcc:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d034      	beq.n	8008044 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fde:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007fe2:	d021      	beq.n	8008028 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8007fe4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007fe8:	d81b      	bhi.n	8008022 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007fea:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007fee:	d01d      	beq.n	800802c <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8007ff0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007ff4:	d815      	bhi.n	8008022 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d00b      	beq.n	8008012 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8007ffa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007ffe:	d110      	bne.n	8008022 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8008000:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008004:	68db      	ldr	r3, [r3, #12]
 8008006:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800800a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800800e:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8008010:	e00d      	b.n	800802e <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	3304      	adds	r3, #4
 8008016:	4618      	mov	r0, r3
 8008018:	f000 f947 	bl	80082aa <RCCEx_PLLSAI1_ConfigNP>
 800801c:	4603      	mov	r3, r0
 800801e:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8008020:	e005      	b.n	800802e <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8008022:	2301      	movs	r3, #1
 8008024:	77fb      	strb	r3, [r7, #31]
        break;
 8008026:	e002      	b.n	800802e <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8008028:	bf00      	nop
 800802a:	e000      	b.n	800802e <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800802c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800802e:	7ffb      	ldrb	r3, [r7, #31]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d105      	bne.n	8008040 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008038:	4618      	mov	r0, r3
 800803a:	f7ff fee8 	bl	8007e0e <LL_RCC_SetSAIClockSource>
 800803e:	e001      	b.n	8008044 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008040:	7ffb      	ldrb	r3, [r7, #31]
 8008042:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800804c:	2b00      	cmp	r3, #0
 800804e:	d046      	beq.n	80080de <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8008050:	f7ff ff56 	bl	8007f00 <LL_RCC_GetRTCClockSource>
 8008054:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800805a:	69ba      	ldr	r2, [r7, #24]
 800805c:	429a      	cmp	r2, r3
 800805e:	d03c      	beq.n	80080da <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8008060:	f7fe fc2a 	bl	80068b8 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8008064:	69bb      	ldr	r3, [r7, #24]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d105      	bne.n	8008076 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800806e:	4618      	mov	r0, r3
 8008070:	f7ff ff30 	bl	8007ed4 <LL_RCC_SetRTCClockSource>
 8008074:	e02e      	b.n	80080d4 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8008076:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800807a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800807e:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8008080:	f7ff ff4b 	bl	8007f1a <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8008084:	f7ff ff5a 	bl	8007f3c <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8008088:	697b      	ldr	r3, [r7, #20]
 800808a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008092:	4313      	orrs	r3, r2
 8008094:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8008096:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800809a:	697b      	ldr	r3, [r7, #20]
 800809c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80080a0:	f7ff fdf0 	bl	8007c84 <LL_RCC_LSE_IsEnabled>
 80080a4:	4603      	mov	r3, r0
 80080a6:	2b01      	cmp	r3, #1
 80080a8:	d114      	bne.n	80080d4 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80080aa:	f7fe f931 	bl	8006310 <HAL_GetTick>
 80080ae:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80080b0:	e00b      	b.n	80080ca <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80080b2:	f7fe f92d 	bl	8006310 <HAL_GetTick>
 80080b6:	4602      	mov	r2, r0
 80080b8:	693b      	ldr	r3, [r7, #16]
 80080ba:	1ad3      	subs	r3, r2, r3
 80080bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80080c0:	4293      	cmp	r3, r2
 80080c2:	d902      	bls.n	80080ca <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80080c4:	2303      	movs	r3, #3
 80080c6:	77fb      	strb	r3, [r7, #31]
              break;
 80080c8:	e004      	b.n	80080d4 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80080ca:	f7ff fded 	bl	8007ca8 <LL_RCC_LSE_IsReady>
 80080ce:	4603      	mov	r3, r0
 80080d0:	2b01      	cmp	r3, #1
 80080d2:	d1ee      	bne.n	80080b2 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80080d4:	7ffb      	ldrb	r3, [r7, #31]
 80080d6:	77bb      	strb	r3, [r7, #30]
 80080d8:	e001      	b.n	80080de <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080da:	7ffb      	ldrb	r3, [r7, #31]
 80080dc:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f003 0301 	and.w	r3, r3, #1
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d004      	beq.n	80080f4 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	699b      	ldr	r3, [r3, #24]
 80080ee:	4618      	mov	r0, r3
 80080f0:	f7ff fe2a 	bl	8007d48 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f003 0302 	and.w	r3, r3, #2
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d004      	beq.n	800810a <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	69db      	ldr	r3, [r3, #28]
 8008104:	4618      	mov	r0, r3
 8008106:	f7ff fe35 	bl	8007d74 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f003 0310 	and.w	r3, r3, #16
 8008112:	2b00      	cmp	r3, #0
 8008114:	d004      	beq.n	8008120 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800811a:	4618      	mov	r0, r3
 800811c:	f7ff fe5d 	bl	8007dda <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f003 0320 	and.w	r3, r3, #32
 8008128:	2b00      	cmp	r3, #0
 800812a:	d004      	beq.n	8008136 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008130:	4618      	mov	r0, r3
 8008132:	f7ff fe52 	bl	8007dda <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f003 0304 	and.w	r3, r3, #4
 800813e:	2b00      	cmp	r3, #0
 8008140:	d004      	beq.n	800814c <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6a1b      	ldr	r3, [r3, #32]
 8008146:	4618      	mov	r0, r3
 8008148:	f7ff fe2a 	bl	8007da0 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f003 0308 	and.w	r3, r3, #8
 8008154:	2b00      	cmp	r3, #0
 8008156:	d004      	beq.n	8008162 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800815c:	4618      	mov	r0, r3
 800815e:	f7ff fe1f 	bl	8007da0 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800816a:	2b00      	cmp	r3, #0
 800816c:	d022      	beq.n	80081b4 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008172:	4618      	mov	r0, r3
 8008174:	f7ff fe8d 	bl	8007e92 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800817c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008180:	d107      	bne.n	8008192 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8008182:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008186:	68db      	ldr	r3, [r3, #12]
 8008188:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800818c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008190:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008196:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800819a:	d10b      	bne.n	80081b4 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	3304      	adds	r3, #4
 80081a0:	4618      	mov	r0, r3
 80081a2:	f000 f8dd 	bl	8008360 <RCCEx_PLLSAI1_ConfigNQ>
 80081a6:	4603      	mov	r3, r0
 80081a8:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80081aa:	7ffb      	ldrb	r3, [r7, #31]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d001      	beq.n	80081b4 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 80081b0:	7ffb      	ldrb	r3, [r7, #31]
 80081b2:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d02b      	beq.n	8008218 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80081c8:	d008      	beq.n	80081dc <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081ce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80081d2:	d003      	beq.n	80081dc <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d105      	bne.n	80081e8 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081e0:	4618      	mov	r0, r3
 80081e2:	f7ff fe2a 	bl	8007e3a <LL_RCC_SetRNGClockSource>
 80081e6:	e00a      	b.n	80081fe <HAL_RCCEx_PeriphCLKConfig+0x240>
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80081f0:	60fb      	str	r3, [r7, #12]
 80081f2:	2000      	movs	r0, #0
 80081f4:	f7ff fe21 	bl	8007e3a <LL_RCC_SetRNGClockSource>
 80081f8:	68f8      	ldr	r0, [r7, #12]
 80081fa:	f7ff fe34 	bl	8007e66 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008202:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8008206:	d107      	bne.n	8008218 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8008208:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800820c:	68db      	ldr	r3, [r3, #12]
 800820e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008212:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008216:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008220:	2b00      	cmp	r3, #0
 8008222:	d022      	beq.n	800826a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008228:	4618      	mov	r0, r3
 800822a:	f7ff fe3d 	bl	8007ea8 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008232:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008236:	d107      	bne.n	8008248 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008238:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800823c:	68db      	ldr	r3, [r3, #12]
 800823e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008242:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008246:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800824c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008250:	d10b      	bne.n	800826a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	3304      	adds	r3, #4
 8008256:	4618      	mov	r0, r3
 8008258:	f000 f8dd 	bl	8008416 <RCCEx_PLLSAI1_ConfigNR>
 800825c:	4603      	mov	r3, r0
 800825e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8008260:	7ffb      	ldrb	r3, [r7, #31]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d001      	beq.n	800826a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8008266:	7ffb      	ldrb	r3, [r7, #31]
 8008268:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008272:	2b00      	cmp	r3, #0
 8008274:	d004      	beq.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800827a:	4618      	mov	r0, r3
 800827c:	f7ff fd26 	bl	8007ccc <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008288:	2b00      	cmp	r3, #0
 800828a:	d009      	beq.n	80082a0 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008290:	4618      	mov	r0, r3
 8008292:	f7ff fd45 	bl	8007d20 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800829a:	4618      	mov	r0, r3
 800829c:	f7ff fd2c 	bl	8007cf8 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 80082a0:	7fbb      	ldrb	r3, [r7, #30]
}
 80082a2:	4618      	mov	r0, r3
 80082a4:	3720      	adds	r7, #32
 80082a6:	46bd      	mov	sp, r7
 80082a8:	bd80      	pop	{r7, pc}

080082aa <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80082aa:	b580      	push	{r7, lr}
 80082ac:	b084      	sub	sp, #16
 80082ae:	af00      	add	r7, sp, #0
 80082b0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80082b2:	2300      	movs	r3, #0
 80082b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80082b6:	f7ff fe61 	bl	8007f7c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80082ba:	f7fe f829 	bl	8006310 <HAL_GetTick>
 80082be:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80082c0:	e009      	b.n	80082d6 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80082c2:	f7fe f825 	bl	8006310 <HAL_GetTick>
 80082c6:	4602      	mov	r2, r0
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	1ad3      	subs	r3, r2, r3
 80082cc:	2b02      	cmp	r3, #2
 80082ce:	d902      	bls.n	80082d6 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80082d0:	2303      	movs	r3, #3
 80082d2:	73fb      	strb	r3, [r7, #15]
      break;
 80082d4:	e004      	b.n	80082e0 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80082d6:	f7ff fe60 	bl	8007f9a <LL_RCC_PLLSAI1_IsReady>
 80082da:	4603      	mov	r3, r0
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d1f0      	bne.n	80082c2 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80082e0:	7bfb      	ldrb	r3, [r7, #15]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d137      	bne.n	8008356 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80082e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80082ea:	691b      	ldr	r3, [r3, #16]
 80082ec:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	021b      	lsls	r3, r3, #8
 80082f6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80082fa:	4313      	orrs	r3, r2
 80082fc:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80082fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008302:	691b      	ldr	r3, [r3, #16]
 8008304:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	685b      	ldr	r3, [r3, #4]
 800830c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008310:	4313      	orrs	r3, r2
 8008312:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8008314:	f7ff fe23 	bl	8007f5e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008318:	f7fd fffa 	bl	8006310 <HAL_GetTick>
 800831c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800831e:	e009      	b.n	8008334 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008320:	f7fd fff6 	bl	8006310 <HAL_GetTick>
 8008324:	4602      	mov	r2, r0
 8008326:	68bb      	ldr	r3, [r7, #8]
 8008328:	1ad3      	subs	r3, r2, r3
 800832a:	2b02      	cmp	r3, #2
 800832c:	d902      	bls.n	8008334 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800832e:	2303      	movs	r3, #3
 8008330:	73fb      	strb	r3, [r7, #15]
        break;
 8008332:	e004      	b.n	800833e <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8008334:	f7ff fe31 	bl	8007f9a <LL_RCC_PLLSAI1_IsReady>
 8008338:	4603      	mov	r3, r0
 800833a:	2b01      	cmp	r3, #1
 800833c:	d1f0      	bne.n	8008320 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800833e:	7bfb      	ldrb	r3, [r7, #15]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d108      	bne.n	8008356 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8008344:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008348:	691a      	ldr	r2, [r3, #16]
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	691b      	ldr	r3, [r3, #16]
 800834e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008352:	4313      	orrs	r3, r2
 8008354:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8008356:	7bfb      	ldrb	r3, [r7, #15]
}
 8008358:	4618      	mov	r0, r3
 800835a:	3710      	adds	r7, #16
 800835c:	46bd      	mov	sp, r7
 800835e:	bd80      	pop	{r7, pc}

08008360 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b084      	sub	sp, #16
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008368:	2300      	movs	r3, #0
 800836a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800836c:	f7ff fe06 	bl	8007f7c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008370:	f7fd ffce 	bl	8006310 <HAL_GetTick>
 8008374:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8008376:	e009      	b.n	800838c <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008378:	f7fd ffca 	bl	8006310 <HAL_GetTick>
 800837c:	4602      	mov	r2, r0
 800837e:	68bb      	ldr	r3, [r7, #8]
 8008380:	1ad3      	subs	r3, r2, r3
 8008382:	2b02      	cmp	r3, #2
 8008384:	d902      	bls.n	800838c <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8008386:	2303      	movs	r3, #3
 8008388:	73fb      	strb	r3, [r7, #15]
      break;
 800838a:	e004      	b.n	8008396 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800838c:	f7ff fe05 	bl	8007f9a <LL_RCC_PLLSAI1_IsReady>
 8008390:	4603      	mov	r3, r0
 8008392:	2b00      	cmp	r3, #0
 8008394:	d1f0      	bne.n	8008378 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8008396:	7bfb      	ldrb	r3, [r7, #15]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d137      	bne.n	800840c <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800839c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80083a0:	691b      	ldr	r3, [r3, #16]
 80083a2:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	021b      	lsls	r3, r3, #8
 80083ac:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80083b0:	4313      	orrs	r3, r2
 80083b2:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80083b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80083b8:	691b      	ldr	r3, [r3, #16]
 80083ba:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	689b      	ldr	r3, [r3, #8]
 80083c2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80083c6:	4313      	orrs	r3, r2
 80083c8:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80083ca:	f7ff fdc8 	bl	8007f5e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80083ce:	f7fd ff9f 	bl	8006310 <HAL_GetTick>
 80083d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80083d4:	e009      	b.n	80083ea <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80083d6:	f7fd ff9b 	bl	8006310 <HAL_GetTick>
 80083da:	4602      	mov	r2, r0
 80083dc:	68bb      	ldr	r3, [r7, #8]
 80083de:	1ad3      	subs	r3, r2, r3
 80083e0:	2b02      	cmp	r3, #2
 80083e2:	d902      	bls.n	80083ea <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80083e4:	2303      	movs	r3, #3
 80083e6:	73fb      	strb	r3, [r7, #15]
        break;
 80083e8:	e004      	b.n	80083f4 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80083ea:	f7ff fdd6 	bl	8007f9a <LL_RCC_PLLSAI1_IsReady>
 80083ee:	4603      	mov	r3, r0
 80083f0:	2b01      	cmp	r3, #1
 80083f2:	d1f0      	bne.n	80083d6 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80083f4:	7bfb      	ldrb	r3, [r7, #15]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d108      	bne.n	800840c <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80083fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80083fe:	691a      	ldr	r2, [r3, #16]
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	691b      	ldr	r3, [r3, #16]
 8008404:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008408:	4313      	orrs	r3, r2
 800840a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800840c:	7bfb      	ldrb	r3, [r7, #15]
}
 800840e:	4618      	mov	r0, r3
 8008410:	3710      	adds	r7, #16
 8008412:	46bd      	mov	sp, r7
 8008414:	bd80      	pop	{r7, pc}

08008416 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8008416:	b580      	push	{r7, lr}
 8008418:	b084      	sub	sp, #16
 800841a:	af00      	add	r7, sp, #0
 800841c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800841e:	2300      	movs	r3, #0
 8008420:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8008422:	f7ff fdab 	bl	8007f7c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008426:	f7fd ff73 	bl	8006310 <HAL_GetTick>
 800842a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800842c:	e009      	b.n	8008442 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800842e:	f7fd ff6f 	bl	8006310 <HAL_GetTick>
 8008432:	4602      	mov	r2, r0
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	1ad3      	subs	r3, r2, r3
 8008438:	2b02      	cmp	r3, #2
 800843a:	d902      	bls.n	8008442 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800843c:	2303      	movs	r3, #3
 800843e:	73fb      	strb	r3, [r7, #15]
      break;
 8008440:	e004      	b.n	800844c <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8008442:	f7ff fdaa 	bl	8007f9a <LL_RCC_PLLSAI1_IsReady>
 8008446:	4603      	mov	r3, r0
 8008448:	2b00      	cmp	r3, #0
 800844a:	d1f0      	bne.n	800842e <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800844c:	7bfb      	ldrb	r3, [r7, #15]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d137      	bne.n	80084c2 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8008452:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008456:	691b      	ldr	r3, [r3, #16]
 8008458:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	021b      	lsls	r3, r3, #8
 8008462:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008466:	4313      	orrs	r3, r2
 8008468:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800846a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800846e:	691b      	ldr	r3, [r3, #16]
 8008470:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	68db      	ldr	r3, [r3, #12]
 8008478:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800847c:	4313      	orrs	r3, r2
 800847e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8008480:	f7ff fd6d 	bl	8007f5e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008484:	f7fd ff44 	bl	8006310 <HAL_GetTick>
 8008488:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800848a:	e009      	b.n	80084a0 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800848c:	f7fd ff40 	bl	8006310 <HAL_GetTick>
 8008490:	4602      	mov	r2, r0
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	1ad3      	subs	r3, r2, r3
 8008496:	2b02      	cmp	r3, #2
 8008498:	d902      	bls.n	80084a0 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800849a:	2303      	movs	r3, #3
 800849c:	73fb      	strb	r3, [r7, #15]
        break;
 800849e:	e004      	b.n	80084aa <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80084a0:	f7ff fd7b 	bl	8007f9a <LL_RCC_PLLSAI1_IsReady>
 80084a4:	4603      	mov	r3, r0
 80084a6:	2b01      	cmp	r3, #1
 80084a8:	d1f0      	bne.n	800848c <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80084aa:	7bfb      	ldrb	r3, [r7, #15]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d108      	bne.n	80084c2 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80084b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80084b4:	691a      	ldr	r2, [r3, #16]
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	691b      	ldr	r3, [r3, #16]
 80084ba:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80084be:	4313      	orrs	r3, r2
 80084c0:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80084c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80084c4:	4618      	mov	r0, r3
 80084c6:	3710      	adds	r7, #16
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bd80      	pop	{r7, pc}

080084cc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b084      	sub	sp, #16
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d101      	bne.n	80084de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80084da:	2301      	movs	r3, #1
 80084dc:	e095      	b.n	800860a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d108      	bne.n	80084f8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	685b      	ldr	r3, [r3, #4]
 80084ea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80084ee:	d009      	beq.n	8008504 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2200      	movs	r2, #0
 80084f4:	61da      	str	r2, [r3, #28]
 80084f6:	e005      	b.n	8008504 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2200      	movs	r2, #0
 80084fc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2200      	movs	r2, #0
 8008502:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2200      	movs	r2, #0
 8008508:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008510:	b2db      	uxtb	r3, r3
 8008512:	2b00      	cmp	r3, #0
 8008514:	d106      	bne.n	8008524 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	2200      	movs	r2, #0
 800851a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	f7fd fbb2 	bl	8005c88 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2202      	movs	r2, #2
 8008528:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	681a      	ldr	r2, [r3, #0]
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800853a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	68db      	ldr	r3, [r3, #12]
 8008540:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008544:	d902      	bls.n	800854c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008546:	2300      	movs	r3, #0
 8008548:	60fb      	str	r3, [r7, #12]
 800854a:	e002      	b.n	8008552 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800854c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008550:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	68db      	ldr	r3, [r3, #12]
 8008556:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800855a:	d007      	beq.n	800856c <HAL_SPI_Init+0xa0>
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	68db      	ldr	r3, [r3, #12]
 8008560:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008564:	d002      	beq.n	800856c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2200      	movs	r2, #0
 800856a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	685b      	ldr	r3, [r3, #4]
 8008570:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	689b      	ldr	r3, [r3, #8]
 8008578:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800857c:	431a      	orrs	r2, r3
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	691b      	ldr	r3, [r3, #16]
 8008582:	f003 0302 	and.w	r3, r3, #2
 8008586:	431a      	orrs	r2, r3
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	695b      	ldr	r3, [r3, #20]
 800858c:	f003 0301 	and.w	r3, r3, #1
 8008590:	431a      	orrs	r2, r3
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	699b      	ldr	r3, [r3, #24]
 8008596:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800859a:	431a      	orrs	r2, r3
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	69db      	ldr	r3, [r3, #28]
 80085a0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80085a4:	431a      	orrs	r2, r3
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	6a1b      	ldr	r3, [r3, #32]
 80085aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80085ae:	ea42 0103 	orr.w	r1, r2, r3
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085b6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	430a      	orrs	r2, r1
 80085c0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	699b      	ldr	r3, [r3, #24]
 80085c6:	0c1b      	lsrs	r3, r3, #16
 80085c8:	f003 0204 	and.w	r2, r3, #4
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085d0:	f003 0310 	and.w	r3, r3, #16
 80085d4:	431a      	orrs	r2, r3
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80085da:	f003 0308 	and.w	r3, r3, #8
 80085de:	431a      	orrs	r2, r3
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	68db      	ldr	r3, [r3, #12]
 80085e4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80085e8:	ea42 0103 	orr.w	r1, r2, r3
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	430a      	orrs	r2, r1
 80085f8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2200      	movs	r2, #0
 80085fe:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2201      	movs	r2, #1
 8008604:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8008608:	2300      	movs	r3, #0
}
 800860a:	4618      	mov	r0, r3
 800860c:	3710      	adds	r7, #16
 800860e:	46bd      	mov	sp, r7
 8008610:	bd80      	pop	{r7, pc}

08008612 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008612:	b580      	push	{r7, lr}
 8008614:	b088      	sub	sp, #32
 8008616:	af00      	add	r7, sp, #0
 8008618:	60f8      	str	r0, [r7, #12]
 800861a:	60b9      	str	r1, [r7, #8]
 800861c:	603b      	str	r3, [r7, #0]
 800861e:	4613      	mov	r3, r2
 8008620:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008622:	2300      	movs	r3, #0
 8008624:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800862c:	2b01      	cmp	r3, #1
 800862e:	d101      	bne.n	8008634 <HAL_SPI_Transmit+0x22>
 8008630:	2302      	movs	r3, #2
 8008632:	e15f      	b.n	80088f4 <HAL_SPI_Transmit+0x2e2>
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	2201      	movs	r2, #1
 8008638:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800863c:	f7fd fe68 	bl	8006310 <HAL_GetTick>
 8008640:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008642:	88fb      	ldrh	r3, [r7, #6]
 8008644:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800864c:	b2db      	uxtb	r3, r3
 800864e:	2b01      	cmp	r3, #1
 8008650:	d002      	beq.n	8008658 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008652:	2302      	movs	r3, #2
 8008654:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008656:	e148      	b.n	80088ea <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8008658:	68bb      	ldr	r3, [r7, #8]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d002      	beq.n	8008664 <HAL_SPI_Transmit+0x52>
 800865e:	88fb      	ldrh	r3, [r7, #6]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d102      	bne.n	800866a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008664:	2301      	movs	r3, #1
 8008666:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008668:	e13f      	b.n	80088ea <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	2203      	movs	r2, #3
 800866e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	2200      	movs	r2, #0
 8008676:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	68ba      	ldr	r2, [r7, #8]
 800867c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	88fa      	ldrh	r2, [r7, #6]
 8008682:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	88fa      	ldrh	r2, [r7, #6]
 8008688:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	2200      	movs	r2, #0
 800868e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	2200      	movs	r2, #0
 8008694:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	2200      	movs	r2, #0
 800869c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	2200      	movs	r2, #0
 80086a4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	2200      	movs	r2, #0
 80086aa:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	689b      	ldr	r3, [r3, #8]
 80086b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80086b4:	d10f      	bne.n	80086d6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	681a      	ldr	r2, [r3, #0]
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80086c4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	681a      	ldr	r2, [r3, #0]
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80086d4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086e0:	2b40      	cmp	r3, #64	@ 0x40
 80086e2:	d007      	beq.n	80086f4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	681a      	ldr	r2, [r3, #0]
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80086f2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	68db      	ldr	r3, [r3, #12]
 80086f8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80086fc:	d94f      	bls.n	800879e <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	685b      	ldr	r3, [r3, #4]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d002      	beq.n	800870c <HAL_SPI_Transmit+0xfa>
 8008706:	8afb      	ldrh	r3, [r7, #22]
 8008708:	2b01      	cmp	r3, #1
 800870a:	d142      	bne.n	8008792 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008710:	881a      	ldrh	r2, [r3, #0]
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800871c:	1c9a      	adds	r2, r3, #2
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008726:	b29b      	uxth	r3, r3
 8008728:	3b01      	subs	r3, #1
 800872a:	b29a      	uxth	r2, r3
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008730:	e02f      	b.n	8008792 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	689b      	ldr	r3, [r3, #8]
 8008738:	f003 0302 	and.w	r3, r3, #2
 800873c:	2b02      	cmp	r3, #2
 800873e:	d112      	bne.n	8008766 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008744:	881a      	ldrh	r2, [r3, #0]
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008750:	1c9a      	adds	r2, r3, #2
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800875a:	b29b      	uxth	r3, r3
 800875c:	3b01      	subs	r3, #1
 800875e:	b29a      	uxth	r2, r3
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008764:	e015      	b.n	8008792 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008766:	f7fd fdd3 	bl	8006310 <HAL_GetTick>
 800876a:	4602      	mov	r2, r0
 800876c:	69bb      	ldr	r3, [r7, #24]
 800876e:	1ad3      	subs	r3, r2, r3
 8008770:	683a      	ldr	r2, [r7, #0]
 8008772:	429a      	cmp	r2, r3
 8008774:	d803      	bhi.n	800877e <HAL_SPI_Transmit+0x16c>
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800877c:	d102      	bne.n	8008784 <HAL_SPI_Transmit+0x172>
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d106      	bne.n	8008792 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8008784:	2303      	movs	r3, #3
 8008786:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	2201      	movs	r2, #1
 800878c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8008790:	e0ab      	b.n	80088ea <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008796:	b29b      	uxth	r3, r3
 8008798:	2b00      	cmp	r3, #0
 800879a:	d1ca      	bne.n	8008732 <HAL_SPI_Transmit+0x120>
 800879c:	e080      	b.n	80088a0 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	685b      	ldr	r3, [r3, #4]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d002      	beq.n	80087ac <HAL_SPI_Transmit+0x19a>
 80087a6:	8afb      	ldrh	r3, [r7, #22]
 80087a8:	2b01      	cmp	r3, #1
 80087aa:	d174      	bne.n	8008896 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80087b0:	b29b      	uxth	r3, r3
 80087b2:	2b01      	cmp	r3, #1
 80087b4:	d912      	bls.n	80087dc <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087ba:	881a      	ldrh	r2, [r3, #0]
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087c6:	1c9a      	adds	r2, r3, #2
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80087d0:	b29b      	uxth	r3, r3
 80087d2:	3b02      	subs	r3, #2
 80087d4:	b29a      	uxth	r2, r3
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80087da:	e05c      	b.n	8008896 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	330c      	adds	r3, #12
 80087e6:	7812      	ldrb	r2, [r2, #0]
 80087e8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087ee:	1c5a      	adds	r2, r3, #1
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80087f8:	b29b      	uxth	r3, r3
 80087fa:	3b01      	subs	r3, #1
 80087fc:	b29a      	uxth	r2, r3
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8008802:	e048      	b.n	8008896 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	689b      	ldr	r3, [r3, #8]
 800880a:	f003 0302 	and.w	r3, r3, #2
 800880e:	2b02      	cmp	r3, #2
 8008810:	d12b      	bne.n	800886a <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008816:	b29b      	uxth	r3, r3
 8008818:	2b01      	cmp	r3, #1
 800881a:	d912      	bls.n	8008842 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008820:	881a      	ldrh	r2, [r3, #0]
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800882c:	1c9a      	adds	r2, r3, #2
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008836:	b29b      	uxth	r3, r3
 8008838:	3b02      	subs	r3, #2
 800883a:	b29a      	uxth	r2, r3
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008840:	e029      	b.n	8008896 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	330c      	adds	r3, #12
 800884c:	7812      	ldrb	r2, [r2, #0]
 800884e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008854:	1c5a      	adds	r2, r3, #1
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800885e:	b29b      	uxth	r3, r3
 8008860:	3b01      	subs	r3, #1
 8008862:	b29a      	uxth	r2, r3
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008868:	e015      	b.n	8008896 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800886a:	f7fd fd51 	bl	8006310 <HAL_GetTick>
 800886e:	4602      	mov	r2, r0
 8008870:	69bb      	ldr	r3, [r7, #24]
 8008872:	1ad3      	subs	r3, r2, r3
 8008874:	683a      	ldr	r2, [r7, #0]
 8008876:	429a      	cmp	r2, r3
 8008878:	d803      	bhi.n	8008882 <HAL_SPI_Transmit+0x270>
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008880:	d102      	bne.n	8008888 <HAL_SPI_Transmit+0x276>
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d106      	bne.n	8008896 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8008888:	2303      	movs	r3, #3
 800888a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	2201      	movs	r2, #1
 8008890:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8008894:	e029      	b.n	80088ea <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800889a:	b29b      	uxth	r3, r3
 800889c:	2b00      	cmp	r3, #0
 800889e:	d1b1      	bne.n	8008804 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80088a0:	69ba      	ldr	r2, [r7, #24]
 80088a2:	6839      	ldr	r1, [r7, #0]
 80088a4:	68f8      	ldr	r0, [r7, #12]
 80088a6:	f000 f947 	bl	8008b38 <SPI_EndRxTxTransaction>
 80088aa:	4603      	mov	r3, r0
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d002      	beq.n	80088b6 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	2220      	movs	r2, #32
 80088b4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	689b      	ldr	r3, [r3, #8]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d10a      	bne.n	80088d4 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80088be:	2300      	movs	r3, #0
 80088c0:	613b      	str	r3, [r7, #16]
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	68db      	ldr	r3, [r3, #12]
 80088c8:	613b      	str	r3, [r7, #16]
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	689b      	ldr	r3, [r3, #8]
 80088d0:	613b      	str	r3, [r7, #16]
 80088d2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d002      	beq.n	80088e2 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80088dc:	2301      	movs	r3, #1
 80088de:	77fb      	strb	r3, [r7, #31]
 80088e0:	e003      	b.n	80088ea <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	2201      	movs	r2, #1
 80088e6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	2200      	movs	r2, #0
 80088ee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80088f2:	7ffb      	ldrb	r3, [r7, #31]
}
 80088f4:	4618      	mov	r0, r3
 80088f6:	3720      	adds	r7, #32
 80088f8:	46bd      	mov	sp, r7
 80088fa:	bd80      	pop	{r7, pc}

080088fc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b088      	sub	sp, #32
 8008900:	af00      	add	r7, sp, #0
 8008902:	60f8      	str	r0, [r7, #12]
 8008904:	60b9      	str	r1, [r7, #8]
 8008906:	603b      	str	r3, [r7, #0]
 8008908:	4613      	mov	r3, r2
 800890a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800890c:	f7fd fd00 	bl	8006310 <HAL_GetTick>
 8008910:	4602      	mov	r2, r0
 8008912:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008914:	1a9b      	subs	r3, r3, r2
 8008916:	683a      	ldr	r2, [r7, #0]
 8008918:	4413      	add	r3, r2
 800891a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800891c:	f7fd fcf8 	bl	8006310 <HAL_GetTick>
 8008920:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008922:	4b39      	ldr	r3, [pc, #228]	@ (8008a08 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	015b      	lsls	r3, r3, #5
 8008928:	0d1b      	lsrs	r3, r3, #20
 800892a:	69fa      	ldr	r2, [r7, #28]
 800892c:	fb02 f303 	mul.w	r3, r2, r3
 8008930:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008932:	e054      	b.n	80089de <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800893a:	d050      	beq.n	80089de <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800893c:	f7fd fce8 	bl	8006310 <HAL_GetTick>
 8008940:	4602      	mov	r2, r0
 8008942:	69bb      	ldr	r3, [r7, #24]
 8008944:	1ad3      	subs	r3, r2, r3
 8008946:	69fa      	ldr	r2, [r7, #28]
 8008948:	429a      	cmp	r2, r3
 800894a:	d902      	bls.n	8008952 <SPI_WaitFlagStateUntilTimeout+0x56>
 800894c:	69fb      	ldr	r3, [r7, #28]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d13d      	bne.n	80089ce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	685a      	ldr	r2, [r3, #4]
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008960:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	685b      	ldr	r3, [r3, #4]
 8008966:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800896a:	d111      	bne.n	8008990 <SPI_WaitFlagStateUntilTimeout+0x94>
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	689b      	ldr	r3, [r3, #8]
 8008970:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008974:	d004      	beq.n	8008980 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	689b      	ldr	r3, [r3, #8]
 800897a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800897e:	d107      	bne.n	8008990 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	681a      	ldr	r2, [r3, #0]
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800898e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008994:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008998:	d10f      	bne.n	80089ba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	681a      	ldr	r2, [r3, #0]
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80089a8:	601a      	str	r2, [r3, #0]
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	681a      	ldr	r2, [r3, #0]
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80089b8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	2201      	movs	r2, #1
 80089be:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	2200      	movs	r2, #0
 80089c6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80089ca:	2303      	movs	r3, #3
 80089cc:	e017      	b.n	80089fe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80089ce:	697b      	ldr	r3, [r7, #20]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d101      	bne.n	80089d8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80089d4:	2300      	movs	r3, #0
 80089d6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80089d8:	697b      	ldr	r3, [r7, #20]
 80089da:	3b01      	subs	r3, #1
 80089dc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	689a      	ldr	r2, [r3, #8]
 80089e4:	68bb      	ldr	r3, [r7, #8]
 80089e6:	4013      	ands	r3, r2
 80089e8:	68ba      	ldr	r2, [r7, #8]
 80089ea:	429a      	cmp	r2, r3
 80089ec:	bf0c      	ite	eq
 80089ee:	2301      	moveq	r3, #1
 80089f0:	2300      	movne	r3, #0
 80089f2:	b2db      	uxtb	r3, r3
 80089f4:	461a      	mov	r2, r3
 80089f6:	79fb      	ldrb	r3, [r7, #7]
 80089f8:	429a      	cmp	r2, r3
 80089fa:	d19b      	bne.n	8008934 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80089fc:	2300      	movs	r3, #0
}
 80089fe:	4618      	mov	r0, r3
 8008a00:	3720      	adds	r7, #32
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bd80      	pop	{r7, pc}
 8008a06:	bf00      	nop
 8008a08:	20000100 	.word	0x20000100

08008a0c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b08a      	sub	sp, #40	@ 0x28
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	60f8      	str	r0, [r7, #12]
 8008a14:	60b9      	str	r1, [r7, #8]
 8008a16:	607a      	str	r2, [r7, #4]
 8008a18:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8008a1e:	f7fd fc77 	bl	8006310 <HAL_GetTick>
 8008a22:	4602      	mov	r2, r0
 8008a24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a26:	1a9b      	subs	r3, r3, r2
 8008a28:	683a      	ldr	r2, [r7, #0]
 8008a2a:	4413      	add	r3, r2
 8008a2c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8008a2e:	f7fd fc6f 	bl	8006310 <HAL_GetTick>
 8008a32:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	330c      	adds	r3, #12
 8008a3a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008a3c:	4b3d      	ldr	r3, [pc, #244]	@ (8008b34 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8008a3e:	681a      	ldr	r2, [r3, #0]
 8008a40:	4613      	mov	r3, r2
 8008a42:	009b      	lsls	r3, r3, #2
 8008a44:	4413      	add	r3, r2
 8008a46:	00da      	lsls	r2, r3, #3
 8008a48:	1ad3      	subs	r3, r2, r3
 8008a4a:	0d1b      	lsrs	r3, r3, #20
 8008a4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008a4e:	fb02 f303 	mul.w	r3, r2, r3
 8008a52:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8008a54:	e060      	b.n	8008b18 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008a56:	68bb      	ldr	r3, [r7, #8]
 8008a58:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008a5c:	d107      	bne.n	8008a6e <SPI_WaitFifoStateUntilTimeout+0x62>
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d104      	bne.n	8008a6e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008a64:	69fb      	ldr	r3, [r7, #28]
 8008a66:	781b      	ldrb	r3, [r3, #0]
 8008a68:	b2db      	uxtb	r3, r3
 8008a6a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8008a6c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a74:	d050      	beq.n	8008b18 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008a76:	f7fd fc4b 	bl	8006310 <HAL_GetTick>
 8008a7a:	4602      	mov	r2, r0
 8008a7c:	6a3b      	ldr	r3, [r7, #32]
 8008a7e:	1ad3      	subs	r3, r2, r3
 8008a80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008a82:	429a      	cmp	r2, r3
 8008a84:	d902      	bls.n	8008a8c <SPI_WaitFifoStateUntilTimeout+0x80>
 8008a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d13d      	bne.n	8008b08 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	685a      	ldr	r2, [r3, #4]
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008a9a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	685b      	ldr	r3, [r3, #4]
 8008aa0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008aa4:	d111      	bne.n	8008aca <SPI_WaitFifoStateUntilTimeout+0xbe>
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	689b      	ldr	r3, [r3, #8]
 8008aaa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008aae:	d004      	beq.n	8008aba <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	689b      	ldr	r3, [r3, #8]
 8008ab4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008ab8:	d107      	bne.n	8008aca <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	681a      	ldr	r2, [r3, #0]
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008ac8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ace:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008ad2:	d10f      	bne.n	8008af4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	681a      	ldr	r2, [r3, #0]
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008ae2:	601a      	str	r2, [r3, #0]
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	681a      	ldr	r2, [r3, #0]
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008af2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	2201      	movs	r2, #1
 8008af8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	2200      	movs	r2, #0
 8008b00:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8008b04:	2303      	movs	r3, #3
 8008b06:	e010      	b.n	8008b2a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008b08:	69bb      	ldr	r3, [r7, #24]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d101      	bne.n	8008b12 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8008b0e:	2300      	movs	r3, #0
 8008b10:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8008b12:	69bb      	ldr	r3, [r7, #24]
 8008b14:	3b01      	subs	r3, #1
 8008b16:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	689a      	ldr	r2, [r3, #8]
 8008b1e:	68bb      	ldr	r3, [r7, #8]
 8008b20:	4013      	ands	r3, r2
 8008b22:	687a      	ldr	r2, [r7, #4]
 8008b24:	429a      	cmp	r2, r3
 8008b26:	d196      	bne.n	8008a56 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8008b28:	2300      	movs	r3, #0
}
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	3728      	adds	r7, #40	@ 0x28
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bd80      	pop	{r7, pc}
 8008b32:	bf00      	nop
 8008b34:	20000100 	.word	0x20000100

08008b38 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b086      	sub	sp, #24
 8008b3c:	af02      	add	r7, sp, #8
 8008b3e:	60f8      	str	r0, [r7, #12]
 8008b40:	60b9      	str	r1, [r7, #8]
 8008b42:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	9300      	str	r3, [sp, #0]
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8008b50:	68f8      	ldr	r0, [r7, #12]
 8008b52:	f7ff ff5b 	bl	8008a0c <SPI_WaitFifoStateUntilTimeout>
 8008b56:	4603      	mov	r3, r0
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d007      	beq.n	8008b6c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008b60:	f043 0220 	orr.w	r2, r3, #32
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008b68:	2303      	movs	r3, #3
 8008b6a:	e027      	b.n	8008bbc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	9300      	str	r3, [sp, #0]
 8008b70:	68bb      	ldr	r3, [r7, #8]
 8008b72:	2200      	movs	r2, #0
 8008b74:	2180      	movs	r1, #128	@ 0x80
 8008b76:	68f8      	ldr	r0, [r7, #12]
 8008b78:	f7ff fec0 	bl	80088fc <SPI_WaitFlagStateUntilTimeout>
 8008b7c:	4603      	mov	r3, r0
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d007      	beq.n	8008b92 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008b86:	f043 0220 	orr.w	r2, r3, #32
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008b8e:	2303      	movs	r3, #3
 8008b90:	e014      	b.n	8008bbc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	9300      	str	r3, [sp, #0]
 8008b96:	68bb      	ldr	r3, [r7, #8]
 8008b98:	2200      	movs	r2, #0
 8008b9a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8008b9e:	68f8      	ldr	r0, [r7, #12]
 8008ba0:	f7ff ff34 	bl	8008a0c <SPI_WaitFifoStateUntilTimeout>
 8008ba4:	4603      	mov	r3, r0
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d007      	beq.n	8008bba <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008bae:	f043 0220 	orr.w	r2, r3, #32
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008bb6:	2303      	movs	r3, #3
 8008bb8:	e000      	b.n	8008bbc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8008bba:	2300      	movs	r3, #0
}
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	3710      	adds	r7, #16
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	bd80      	pop	{r7, pc}

08008bc4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b082      	sub	sp, #8
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d101      	bne.n	8008bd6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008bd2:	2301      	movs	r3, #1
 8008bd4:	e049      	b.n	8008c6a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008bdc:	b2db      	uxtb	r3, r3
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d106      	bne.n	8008bf0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	2200      	movs	r2, #0
 8008be6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008bea:	6878      	ldr	r0, [r7, #4]
 8008bec:	f000 f841 	bl	8008c72 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2202      	movs	r2, #2
 8008bf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681a      	ldr	r2, [r3, #0]
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	3304      	adds	r3, #4
 8008c00:	4619      	mov	r1, r3
 8008c02:	4610      	mov	r0, r2
 8008c04:	f000 f9be 	bl	8008f84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2201      	movs	r2, #1
 8008c0c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2201      	movs	r2, #1
 8008c14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2201      	movs	r2, #1
 8008c1c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2201      	movs	r2, #1
 8008c24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2201      	movs	r2, #1
 8008c2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2201      	movs	r2, #1
 8008c34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2201      	movs	r2, #1
 8008c3c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2201      	movs	r2, #1
 8008c44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2201      	movs	r2, #1
 8008c4c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2201      	movs	r2, #1
 8008c54:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2201      	movs	r2, #1
 8008c5c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2201      	movs	r2, #1
 8008c64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008c68:	2300      	movs	r3, #0
}
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	3708      	adds	r7, #8
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bd80      	pop	{r7, pc}

08008c72 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8008c72:	b480      	push	{r7}
 8008c74:	b083      	sub	sp, #12
 8008c76:	af00      	add	r7, sp, #0
 8008c78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008c7a:	bf00      	nop
 8008c7c:	370c      	adds	r7, #12
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c84:	4770      	bx	lr
	...

08008c88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008c88:	b480      	push	{r7}
 8008c8a:	b085      	sub	sp, #20
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008c96:	b2db      	uxtb	r3, r3
 8008c98:	2b01      	cmp	r3, #1
 8008c9a:	d001      	beq.n	8008ca0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008c9c:	2301      	movs	r3, #1
 8008c9e:	e036      	b.n	8008d0e <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2202      	movs	r2, #2
 8008ca4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	68da      	ldr	r2, [r3, #12]
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	f042 0201 	orr.w	r2, r2, #1
 8008cb6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	4a17      	ldr	r2, [pc, #92]	@ (8008d1c <HAL_TIM_Base_Start_IT+0x94>)
 8008cbe:	4293      	cmp	r3, r2
 8008cc0:	d004      	beq.n	8008ccc <HAL_TIM_Base_Start_IT+0x44>
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008cca:	d115      	bne.n	8008cf8 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	689a      	ldr	r2, [r3, #8]
 8008cd2:	4b13      	ldr	r3, [pc, #76]	@ (8008d20 <HAL_TIM_Base_Start_IT+0x98>)
 8008cd4:	4013      	ands	r3, r2
 8008cd6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	2b06      	cmp	r3, #6
 8008cdc:	d015      	beq.n	8008d0a <HAL_TIM_Base_Start_IT+0x82>
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ce4:	d011      	beq.n	8008d0a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	681a      	ldr	r2, [r3, #0]
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f042 0201 	orr.w	r2, r2, #1
 8008cf4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008cf6:	e008      	b.n	8008d0a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	681a      	ldr	r2, [r3, #0]
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f042 0201 	orr.w	r2, r2, #1
 8008d06:	601a      	str	r2, [r3, #0]
 8008d08:	e000      	b.n	8008d0c <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d0a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008d0c:	2300      	movs	r3, #0
}
 8008d0e:	4618      	mov	r0, r3
 8008d10:	3714      	adds	r7, #20
 8008d12:	46bd      	mov	sp, r7
 8008d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d18:	4770      	bx	lr
 8008d1a:	bf00      	nop
 8008d1c:	40012c00 	.word	0x40012c00
 8008d20:	00010007 	.word	0x00010007

08008d24 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b084      	sub	sp, #16
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	68db      	ldr	r3, [r3, #12]
 8008d32:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	691b      	ldr	r3, [r3, #16]
 8008d3a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008d3c:	68bb      	ldr	r3, [r7, #8]
 8008d3e:	f003 0302 	and.w	r3, r3, #2
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d020      	beq.n	8008d88 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	f003 0302 	and.w	r3, r3, #2
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d01b      	beq.n	8008d88 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	f06f 0202 	mvn.w	r2, #2
 8008d58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	2201      	movs	r2, #1
 8008d5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	699b      	ldr	r3, [r3, #24]
 8008d66:	f003 0303 	and.w	r3, r3, #3
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d003      	beq.n	8008d76 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008d6e:	6878      	ldr	r0, [r7, #4]
 8008d70:	f000 f8e9 	bl	8008f46 <HAL_TIM_IC_CaptureCallback>
 8008d74:	e005      	b.n	8008d82 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d76:	6878      	ldr	r0, [r7, #4]
 8008d78:	f000 f8db 	bl	8008f32 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d7c:	6878      	ldr	r0, [r7, #4]
 8008d7e:	f000 f8ec 	bl	8008f5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	2200      	movs	r2, #0
 8008d86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008d88:	68bb      	ldr	r3, [r7, #8]
 8008d8a:	f003 0304 	and.w	r3, r3, #4
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d020      	beq.n	8008dd4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	f003 0304 	and.w	r3, r3, #4
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d01b      	beq.n	8008dd4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	f06f 0204 	mvn.w	r2, #4
 8008da4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	2202      	movs	r2, #2
 8008daa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	699b      	ldr	r3, [r3, #24]
 8008db2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d003      	beq.n	8008dc2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f000 f8c3 	bl	8008f46 <HAL_TIM_IC_CaptureCallback>
 8008dc0:	e005      	b.n	8008dce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008dc2:	6878      	ldr	r0, [r7, #4]
 8008dc4:	f000 f8b5 	bl	8008f32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	f000 f8c6 	bl	8008f5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008dd4:	68bb      	ldr	r3, [r7, #8]
 8008dd6:	f003 0308 	and.w	r3, r3, #8
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d020      	beq.n	8008e20 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	f003 0308 	and.w	r3, r3, #8
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d01b      	beq.n	8008e20 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	f06f 0208 	mvn.w	r2, #8
 8008df0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	2204      	movs	r2, #4
 8008df6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	69db      	ldr	r3, [r3, #28]
 8008dfe:	f003 0303 	and.w	r3, r3, #3
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d003      	beq.n	8008e0e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e06:	6878      	ldr	r0, [r7, #4]
 8008e08:	f000 f89d 	bl	8008f46 <HAL_TIM_IC_CaptureCallback>
 8008e0c:	e005      	b.n	8008e1a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e0e:	6878      	ldr	r0, [r7, #4]
 8008e10:	f000 f88f 	bl	8008f32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e14:	6878      	ldr	r0, [r7, #4]
 8008e16:	f000 f8a0 	bl	8008f5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008e20:	68bb      	ldr	r3, [r7, #8]
 8008e22:	f003 0310 	and.w	r3, r3, #16
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d020      	beq.n	8008e6c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	f003 0310 	and.w	r3, r3, #16
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d01b      	beq.n	8008e6c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	f06f 0210 	mvn.w	r2, #16
 8008e3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2208      	movs	r2, #8
 8008e42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	69db      	ldr	r3, [r3, #28]
 8008e4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d003      	beq.n	8008e5a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	f000 f877 	bl	8008f46 <HAL_TIM_IC_CaptureCallback>
 8008e58:	e005      	b.n	8008e66 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f000 f869 	bl	8008f32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e60:	6878      	ldr	r0, [r7, #4]
 8008e62:	f000 f87a 	bl	8008f5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	2200      	movs	r2, #0
 8008e6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008e6c:	68bb      	ldr	r3, [r7, #8]
 8008e6e:	f003 0301 	and.w	r3, r3, #1
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d00c      	beq.n	8008e90 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	f003 0301 	and.w	r3, r3, #1
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d007      	beq.n	8008e90 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	f06f 0201 	mvn.w	r2, #1
 8008e88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008e8a:	6878      	ldr	r0, [r7, #4]
 8008e8c:	f7fc fea8 	bl	8005be0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008e90:	68bb      	ldr	r3, [r7, #8]
 8008e92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d104      	bne.n	8008ea4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008e9a:	68bb      	ldr	r3, [r7, #8]
 8008e9c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d00c      	beq.n	8008ebe <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d007      	beq.n	8008ebe <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8008eb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008eb8:	6878      	ldr	r0, [r7, #4]
 8008eba:	f000 f8dd 	bl	8009078 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008ebe:	68bb      	ldr	r3, [r7, #8]
 8008ec0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d00c      	beq.n	8008ee2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d007      	beq.n	8008ee2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008eda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008edc:	6878      	ldr	r0, [r7, #4]
 8008ede:	f000 f8d5 	bl	800908c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008ee2:	68bb      	ldr	r3, [r7, #8]
 8008ee4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d00c      	beq.n	8008f06 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d007      	beq.n	8008f06 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008efe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008f00:	6878      	ldr	r0, [r7, #4]
 8008f02:	f000 f834 	bl	8008f6e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008f06:	68bb      	ldr	r3, [r7, #8]
 8008f08:	f003 0320 	and.w	r3, r3, #32
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d00c      	beq.n	8008f2a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	f003 0320 	and.w	r3, r3, #32
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d007      	beq.n	8008f2a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	f06f 0220 	mvn.w	r2, #32
 8008f22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008f24:	6878      	ldr	r0, [r7, #4]
 8008f26:	f000 f89d 	bl	8009064 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008f2a:	bf00      	nop
 8008f2c:	3710      	adds	r7, #16
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	bd80      	pop	{r7, pc}

08008f32 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008f32:	b480      	push	{r7}
 8008f34:	b083      	sub	sp, #12
 8008f36:	af00      	add	r7, sp, #0
 8008f38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008f3a:	bf00      	nop
 8008f3c:	370c      	adds	r7, #12
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f44:	4770      	bx	lr

08008f46 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008f46:	b480      	push	{r7}
 8008f48:	b083      	sub	sp, #12
 8008f4a:	af00      	add	r7, sp, #0
 8008f4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008f4e:	bf00      	nop
 8008f50:	370c      	adds	r7, #12
 8008f52:	46bd      	mov	sp, r7
 8008f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f58:	4770      	bx	lr

08008f5a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008f5a:	b480      	push	{r7}
 8008f5c:	b083      	sub	sp, #12
 8008f5e:	af00      	add	r7, sp, #0
 8008f60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008f62:	bf00      	nop
 8008f64:	370c      	adds	r7, #12
 8008f66:	46bd      	mov	sp, r7
 8008f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6c:	4770      	bx	lr

08008f6e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008f6e:	b480      	push	{r7}
 8008f70:	b083      	sub	sp, #12
 8008f72:	af00      	add	r7, sp, #0
 8008f74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008f76:	bf00      	nop
 8008f78:	370c      	adds	r7, #12
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f80:	4770      	bx	lr
	...

08008f84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008f84:	b480      	push	{r7}
 8008f86:	b085      	sub	sp, #20
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
 8008f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	4a30      	ldr	r2, [pc, #192]	@ (8009058 <TIM_Base_SetConfig+0xd4>)
 8008f98:	4293      	cmp	r3, r2
 8008f9a:	d003      	beq.n	8008fa4 <TIM_Base_SetConfig+0x20>
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008fa2:	d108      	bne.n	8008fb6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008faa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	685b      	ldr	r3, [r3, #4]
 8008fb0:	68fa      	ldr	r2, [r7, #12]
 8008fb2:	4313      	orrs	r3, r2
 8008fb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	4a27      	ldr	r2, [pc, #156]	@ (8009058 <TIM_Base_SetConfig+0xd4>)
 8008fba:	4293      	cmp	r3, r2
 8008fbc:	d00b      	beq.n	8008fd6 <TIM_Base_SetConfig+0x52>
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008fc4:	d007      	beq.n	8008fd6 <TIM_Base_SetConfig+0x52>
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	4a24      	ldr	r2, [pc, #144]	@ (800905c <TIM_Base_SetConfig+0xd8>)
 8008fca:	4293      	cmp	r3, r2
 8008fcc:	d003      	beq.n	8008fd6 <TIM_Base_SetConfig+0x52>
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	4a23      	ldr	r2, [pc, #140]	@ (8009060 <TIM_Base_SetConfig+0xdc>)
 8008fd2:	4293      	cmp	r3, r2
 8008fd4:	d108      	bne.n	8008fe8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008fdc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	68db      	ldr	r3, [r3, #12]
 8008fe2:	68fa      	ldr	r2, [r7, #12]
 8008fe4:	4313      	orrs	r3, r2
 8008fe6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008fee:	683b      	ldr	r3, [r7, #0]
 8008ff0:	695b      	ldr	r3, [r3, #20]
 8008ff2:	4313      	orrs	r3, r2
 8008ff4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	68fa      	ldr	r2, [r7, #12]
 8008ffa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	689a      	ldr	r2, [r3, #8]
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	681a      	ldr	r2, [r3, #0]
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	4a12      	ldr	r2, [pc, #72]	@ (8009058 <TIM_Base_SetConfig+0xd4>)
 8009010:	4293      	cmp	r3, r2
 8009012:	d007      	beq.n	8009024 <TIM_Base_SetConfig+0xa0>
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	4a11      	ldr	r2, [pc, #68]	@ (800905c <TIM_Base_SetConfig+0xd8>)
 8009018:	4293      	cmp	r3, r2
 800901a:	d003      	beq.n	8009024 <TIM_Base_SetConfig+0xa0>
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	4a10      	ldr	r2, [pc, #64]	@ (8009060 <TIM_Base_SetConfig+0xdc>)
 8009020:	4293      	cmp	r3, r2
 8009022:	d103      	bne.n	800902c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	691a      	ldr	r2, [r3, #16]
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2201      	movs	r2, #1
 8009030:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	691b      	ldr	r3, [r3, #16]
 8009036:	f003 0301 	and.w	r3, r3, #1
 800903a:	2b01      	cmp	r3, #1
 800903c:	d105      	bne.n	800904a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	691b      	ldr	r3, [r3, #16]
 8009042:	f023 0201 	bic.w	r2, r3, #1
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	611a      	str	r2, [r3, #16]
  }
}
 800904a:	bf00      	nop
 800904c:	3714      	adds	r7, #20
 800904e:	46bd      	mov	sp, r7
 8009050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009054:	4770      	bx	lr
 8009056:	bf00      	nop
 8009058:	40012c00 	.word	0x40012c00
 800905c:	40014400 	.word	0x40014400
 8009060:	40014800 	.word	0x40014800

08009064 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009064:	b480      	push	{r7}
 8009066:	b083      	sub	sp, #12
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800906c:	bf00      	nop
 800906e:	370c      	adds	r7, #12
 8009070:	46bd      	mov	sp, r7
 8009072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009076:	4770      	bx	lr

08009078 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009078:	b480      	push	{r7}
 800907a:	b083      	sub	sp, #12
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009080:	bf00      	nop
 8009082:	370c      	adds	r7, #12
 8009084:	46bd      	mov	sp, r7
 8009086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908a:	4770      	bx	lr

0800908c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800908c:	b480      	push	{r7}
 800908e:	b083      	sub	sp, #12
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009094:	bf00      	nop
 8009096:	370c      	adds	r7, #12
 8009098:	46bd      	mov	sp, r7
 800909a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909e:	4770      	bx	lr

080090a0 <LL_RCC_GetUSARTClockSource>:
{
 80090a0:	b480      	push	{r7}
 80090a2:	b083      	sub	sp, #12
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 80090a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80090ac:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	4013      	ands	r3, r2
}
 80090b4:	4618      	mov	r0, r3
 80090b6:	370c      	adds	r7, #12
 80090b8:	46bd      	mov	sp, r7
 80090ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090be:	4770      	bx	lr

080090c0 <LL_RCC_GetLPUARTClockSource>:
{
 80090c0:	b480      	push	{r7}
 80090c2:	b083      	sub	sp, #12
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80090c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80090cc:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	4013      	ands	r3, r2
}
 80090d4:	4618      	mov	r0, r3
 80090d6:	370c      	adds	r7, #12
 80090d8:	46bd      	mov	sp, r7
 80090da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090de:	4770      	bx	lr

080090e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b082      	sub	sp, #8
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d101      	bne.n	80090f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80090ee:	2301      	movs	r3, #1
 80090f0:	e042      	b.n	8009178 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d106      	bne.n	800910a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2200      	movs	r2, #0
 8009100:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009104:	6878      	ldr	r0, [r7, #4]
 8009106:	f000 f83b 	bl	8009180 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	2224      	movs	r2, #36	@ 0x24
 800910e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	681a      	ldr	r2, [r3, #0]
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	f022 0201 	bic.w	r2, r2, #1
 8009120:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009126:	2b00      	cmp	r3, #0
 8009128:	d002      	beq.n	8009130 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800912a:	6878      	ldr	r0, [r7, #4]
 800912c:	f000 fae8 	bl	8009700 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	f000 f8bd 	bl	80092b0 <UART_SetConfig>
 8009136:	4603      	mov	r3, r0
 8009138:	2b01      	cmp	r3, #1
 800913a:	d101      	bne.n	8009140 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800913c:	2301      	movs	r3, #1
 800913e:	e01b      	b.n	8009178 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	685a      	ldr	r2, [r3, #4]
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800914e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	689a      	ldr	r2, [r3, #8]
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800915e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	681a      	ldr	r2, [r3, #0]
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	f042 0201 	orr.w	r2, r2, #1
 800916e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009170:	6878      	ldr	r0, [r7, #4]
 8009172:	f000 fb67 	bl	8009844 <UART_CheckIdleState>
 8009176:	4603      	mov	r3, r0
}
 8009178:	4618      	mov	r0, r3
 800917a:	3708      	adds	r7, #8
 800917c:	46bd      	mov	sp, r7
 800917e:	bd80      	pop	{r7, pc}

08009180 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8009180:	b480      	push	{r7}
 8009182:	b083      	sub	sp, #12
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8009188:	bf00      	nop
 800918a:	370c      	adds	r7, #12
 800918c:	46bd      	mov	sp, r7
 800918e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009192:	4770      	bx	lr

08009194 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b08a      	sub	sp, #40	@ 0x28
 8009198:	af02      	add	r7, sp, #8
 800919a:	60f8      	str	r0, [r7, #12]
 800919c:	60b9      	str	r1, [r7, #8]
 800919e:	603b      	str	r3, [r7, #0]
 80091a0:	4613      	mov	r3, r2
 80091a2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80091aa:	2b20      	cmp	r3, #32
 80091ac:	d17b      	bne.n	80092a6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80091ae:	68bb      	ldr	r3, [r7, #8]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d002      	beq.n	80091ba <HAL_UART_Transmit+0x26>
 80091b4:	88fb      	ldrh	r3, [r7, #6]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d101      	bne.n	80091be <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80091ba:	2301      	movs	r3, #1
 80091bc:	e074      	b.n	80092a8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	2200      	movs	r2, #0
 80091c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	2221      	movs	r2, #33	@ 0x21
 80091ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80091ce:	f7fd f89f 	bl	8006310 <HAL_GetTick>
 80091d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	88fa      	ldrh	r2, [r7, #6]
 80091d8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	88fa      	ldrh	r2, [r7, #6]
 80091e0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	689b      	ldr	r3, [r3, #8]
 80091e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80091ec:	d108      	bne.n	8009200 <HAL_UART_Transmit+0x6c>
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	691b      	ldr	r3, [r3, #16]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d104      	bne.n	8009200 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80091f6:	2300      	movs	r3, #0
 80091f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80091fa:	68bb      	ldr	r3, [r7, #8]
 80091fc:	61bb      	str	r3, [r7, #24]
 80091fe:	e003      	b.n	8009208 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009200:	68bb      	ldr	r3, [r7, #8]
 8009202:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009204:	2300      	movs	r3, #0
 8009206:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009208:	e030      	b.n	800926c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	9300      	str	r3, [sp, #0]
 800920e:	697b      	ldr	r3, [r7, #20]
 8009210:	2200      	movs	r2, #0
 8009212:	2180      	movs	r1, #128	@ 0x80
 8009214:	68f8      	ldr	r0, [r7, #12]
 8009216:	f000 fbbf 	bl	8009998 <UART_WaitOnFlagUntilTimeout>
 800921a:	4603      	mov	r3, r0
 800921c:	2b00      	cmp	r3, #0
 800921e:	d005      	beq.n	800922c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	2220      	movs	r2, #32
 8009224:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8009228:	2303      	movs	r3, #3
 800922a:	e03d      	b.n	80092a8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800922c:	69fb      	ldr	r3, [r7, #28]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d10b      	bne.n	800924a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009232:	69bb      	ldr	r3, [r7, #24]
 8009234:	881b      	ldrh	r3, [r3, #0]
 8009236:	461a      	mov	r2, r3
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009240:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8009242:	69bb      	ldr	r3, [r7, #24]
 8009244:	3302      	adds	r3, #2
 8009246:	61bb      	str	r3, [r7, #24]
 8009248:	e007      	b.n	800925a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800924a:	69fb      	ldr	r3, [r7, #28]
 800924c:	781a      	ldrb	r2, [r3, #0]
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8009254:	69fb      	ldr	r3, [r7, #28]
 8009256:	3301      	adds	r3, #1
 8009258:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009260:	b29b      	uxth	r3, r3
 8009262:	3b01      	subs	r3, #1
 8009264:	b29a      	uxth	r2, r3
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009272:	b29b      	uxth	r3, r3
 8009274:	2b00      	cmp	r3, #0
 8009276:	d1c8      	bne.n	800920a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009278:	683b      	ldr	r3, [r7, #0]
 800927a:	9300      	str	r3, [sp, #0]
 800927c:	697b      	ldr	r3, [r7, #20]
 800927e:	2200      	movs	r2, #0
 8009280:	2140      	movs	r1, #64	@ 0x40
 8009282:	68f8      	ldr	r0, [r7, #12]
 8009284:	f000 fb88 	bl	8009998 <UART_WaitOnFlagUntilTimeout>
 8009288:	4603      	mov	r3, r0
 800928a:	2b00      	cmp	r3, #0
 800928c:	d005      	beq.n	800929a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	2220      	movs	r2, #32
 8009292:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8009296:	2303      	movs	r3, #3
 8009298:	e006      	b.n	80092a8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	2220      	movs	r2, #32
 800929e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80092a2:	2300      	movs	r3, #0
 80092a4:	e000      	b.n	80092a8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80092a6:	2302      	movs	r3, #2
  }
}
 80092a8:	4618      	mov	r0, r3
 80092aa:	3720      	adds	r7, #32
 80092ac:	46bd      	mov	sp, r7
 80092ae:	bd80      	pop	{r7, pc}

080092b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80092b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80092b4:	b08c      	sub	sp, #48	@ 0x30
 80092b6:	af00      	add	r7, sp, #0
 80092b8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80092ba:	2300      	movs	r3, #0
 80092bc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80092c0:	697b      	ldr	r3, [r7, #20]
 80092c2:	689a      	ldr	r2, [r3, #8]
 80092c4:	697b      	ldr	r3, [r7, #20]
 80092c6:	691b      	ldr	r3, [r3, #16]
 80092c8:	431a      	orrs	r2, r3
 80092ca:	697b      	ldr	r3, [r7, #20]
 80092cc:	695b      	ldr	r3, [r3, #20]
 80092ce:	431a      	orrs	r2, r3
 80092d0:	697b      	ldr	r3, [r7, #20]
 80092d2:	69db      	ldr	r3, [r3, #28]
 80092d4:	4313      	orrs	r3, r2
 80092d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80092d8:	697b      	ldr	r3, [r7, #20]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	681a      	ldr	r2, [r3, #0]
 80092de:	4baf      	ldr	r3, [pc, #700]	@ (800959c <UART_SetConfig+0x2ec>)
 80092e0:	4013      	ands	r3, r2
 80092e2:	697a      	ldr	r2, [r7, #20]
 80092e4:	6812      	ldr	r2, [r2, #0]
 80092e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80092e8:	430b      	orrs	r3, r1
 80092ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80092ec:	697b      	ldr	r3, [r7, #20]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	685b      	ldr	r3, [r3, #4]
 80092f2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80092f6:	697b      	ldr	r3, [r7, #20]
 80092f8:	68da      	ldr	r2, [r3, #12]
 80092fa:	697b      	ldr	r3, [r7, #20]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	430a      	orrs	r2, r1
 8009300:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009302:	697b      	ldr	r3, [r7, #20]
 8009304:	699b      	ldr	r3, [r3, #24]
 8009306:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009308:	697b      	ldr	r3, [r7, #20]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	4aa4      	ldr	r2, [pc, #656]	@ (80095a0 <UART_SetConfig+0x2f0>)
 800930e:	4293      	cmp	r3, r2
 8009310:	d004      	beq.n	800931c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009312:	697b      	ldr	r3, [r7, #20]
 8009314:	6a1b      	ldr	r3, [r3, #32]
 8009316:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009318:	4313      	orrs	r3, r2
 800931a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800931c:	697b      	ldr	r3, [r7, #20]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	689b      	ldr	r3, [r3, #8]
 8009322:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8009326:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800932a:	697a      	ldr	r2, [r7, #20]
 800932c:	6812      	ldr	r2, [r2, #0]
 800932e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009330:	430b      	orrs	r3, r1
 8009332:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009334:	697b      	ldr	r3, [r7, #20]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800933a:	f023 010f 	bic.w	r1, r3, #15
 800933e:	697b      	ldr	r3, [r7, #20]
 8009340:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009342:	697b      	ldr	r3, [r7, #20]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	430a      	orrs	r2, r1
 8009348:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800934a:	697b      	ldr	r3, [r7, #20]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	4a95      	ldr	r2, [pc, #596]	@ (80095a4 <UART_SetConfig+0x2f4>)
 8009350:	4293      	cmp	r3, r2
 8009352:	d125      	bne.n	80093a0 <UART_SetConfig+0xf0>
 8009354:	2003      	movs	r0, #3
 8009356:	f7ff fea3 	bl	80090a0 <LL_RCC_GetUSARTClockSource>
 800935a:	4603      	mov	r3, r0
 800935c:	2b03      	cmp	r3, #3
 800935e:	d81b      	bhi.n	8009398 <UART_SetConfig+0xe8>
 8009360:	a201      	add	r2, pc, #4	@ (adr r2, 8009368 <UART_SetConfig+0xb8>)
 8009362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009366:	bf00      	nop
 8009368:	08009379 	.word	0x08009379
 800936c:	08009389 	.word	0x08009389
 8009370:	08009381 	.word	0x08009381
 8009374:	08009391 	.word	0x08009391
 8009378:	2301      	movs	r3, #1
 800937a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800937e:	e042      	b.n	8009406 <UART_SetConfig+0x156>
 8009380:	2302      	movs	r3, #2
 8009382:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009386:	e03e      	b.n	8009406 <UART_SetConfig+0x156>
 8009388:	2304      	movs	r3, #4
 800938a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800938e:	e03a      	b.n	8009406 <UART_SetConfig+0x156>
 8009390:	2308      	movs	r3, #8
 8009392:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009396:	e036      	b.n	8009406 <UART_SetConfig+0x156>
 8009398:	2310      	movs	r3, #16
 800939a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800939e:	e032      	b.n	8009406 <UART_SetConfig+0x156>
 80093a0:	697b      	ldr	r3, [r7, #20]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	4a7e      	ldr	r2, [pc, #504]	@ (80095a0 <UART_SetConfig+0x2f0>)
 80093a6:	4293      	cmp	r3, r2
 80093a8:	d12a      	bne.n	8009400 <UART_SetConfig+0x150>
 80093aa:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 80093ae:	f7ff fe87 	bl	80090c0 <LL_RCC_GetLPUARTClockSource>
 80093b2:	4603      	mov	r3, r0
 80093b4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80093b8:	d01a      	beq.n	80093f0 <UART_SetConfig+0x140>
 80093ba:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80093be:	d81b      	bhi.n	80093f8 <UART_SetConfig+0x148>
 80093c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80093c4:	d00c      	beq.n	80093e0 <UART_SetConfig+0x130>
 80093c6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80093ca:	d815      	bhi.n	80093f8 <UART_SetConfig+0x148>
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d003      	beq.n	80093d8 <UART_SetConfig+0x128>
 80093d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80093d4:	d008      	beq.n	80093e8 <UART_SetConfig+0x138>
 80093d6:	e00f      	b.n	80093f8 <UART_SetConfig+0x148>
 80093d8:	2300      	movs	r3, #0
 80093da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80093de:	e012      	b.n	8009406 <UART_SetConfig+0x156>
 80093e0:	2302      	movs	r3, #2
 80093e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80093e6:	e00e      	b.n	8009406 <UART_SetConfig+0x156>
 80093e8:	2304      	movs	r3, #4
 80093ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80093ee:	e00a      	b.n	8009406 <UART_SetConfig+0x156>
 80093f0:	2308      	movs	r3, #8
 80093f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80093f6:	e006      	b.n	8009406 <UART_SetConfig+0x156>
 80093f8:	2310      	movs	r3, #16
 80093fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80093fe:	e002      	b.n	8009406 <UART_SetConfig+0x156>
 8009400:	2310      	movs	r3, #16
 8009402:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009406:	697b      	ldr	r3, [r7, #20]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	4a65      	ldr	r2, [pc, #404]	@ (80095a0 <UART_SetConfig+0x2f0>)
 800940c:	4293      	cmp	r3, r2
 800940e:	f040 8097 	bne.w	8009540 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009412:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009416:	2b08      	cmp	r3, #8
 8009418:	d823      	bhi.n	8009462 <UART_SetConfig+0x1b2>
 800941a:	a201      	add	r2, pc, #4	@ (adr r2, 8009420 <UART_SetConfig+0x170>)
 800941c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009420:	08009445 	.word	0x08009445
 8009424:	08009463 	.word	0x08009463
 8009428:	0800944d 	.word	0x0800944d
 800942c:	08009463 	.word	0x08009463
 8009430:	08009453 	.word	0x08009453
 8009434:	08009463 	.word	0x08009463
 8009438:	08009463 	.word	0x08009463
 800943c:	08009463 	.word	0x08009463
 8009440:	0800945b 	.word	0x0800945b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009444:	f7fe fb0c 	bl	8007a60 <HAL_RCC_GetPCLK1Freq>
 8009448:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800944a:	e010      	b.n	800946e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800944c:	4b56      	ldr	r3, [pc, #344]	@ (80095a8 <UART_SetConfig+0x2f8>)
 800944e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009450:	e00d      	b.n	800946e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009452:	f7fe fa85 	bl	8007960 <HAL_RCC_GetSysClockFreq>
 8009456:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009458:	e009      	b.n	800946e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800945a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800945e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009460:	e005      	b.n	800946e <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8009462:	2300      	movs	r3, #0
 8009464:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009466:	2301      	movs	r3, #1
 8009468:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800946c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800946e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009470:	2b00      	cmp	r3, #0
 8009472:	f000 812b 	beq.w	80096cc <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009476:	697b      	ldr	r3, [r7, #20]
 8009478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800947a:	4a4c      	ldr	r2, [pc, #304]	@ (80095ac <UART_SetConfig+0x2fc>)
 800947c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009480:	461a      	mov	r2, r3
 8009482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009484:	fbb3 f3f2 	udiv	r3, r3, r2
 8009488:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800948a:	697b      	ldr	r3, [r7, #20]
 800948c:	685a      	ldr	r2, [r3, #4]
 800948e:	4613      	mov	r3, r2
 8009490:	005b      	lsls	r3, r3, #1
 8009492:	4413      	add	r3, r2
 8009494:	69ba      	ldr	r2, [r7, #24]
 8009496:	429a      	cmp	r2, r3
 8009498:	d305      	bcc.n	80094a6 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800949a:	697b      	ldr	r3, [r7, #20]
 800949c:	685b      	ldr	r3, [r3, #4]
 800949e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80094a0:	69ba      	ldr	r2, [r7, #24]
 80094a2:	429a      	cmp	r2, r3
 80094a4:	d903      	bls.n	80094ae <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 80094a6:	2301      	movs	r3, #1
 80094a8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80094ac:	e10e      	b.n	80096cc <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80094ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094b0:	2200      	movs	r2, #0
 80094b2:	60bb      	str	r3, [r7, #8]
 80094b4:	60fa      	str	r2, [r7, #12]
 80094b6:	697b      	ldr	r3, [r7, #20]
 80094b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094ba:	4a3c      	ldr	r2, [pc, #240]	@ (80095ac <UART_SetConfig+0x2fc>)
 80094bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80094c0:	b29b      	uxth	r3, r3
 80094c2:	2200      	movs	r2, #0
 80094c4:	603b      	str	r3, [r7, #0]
 80094c6:	607a      	str	r2, [r7, #4]
 80094c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80094cc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80094d0:	f7f7 fb42 	bl	8000b58 <__aeabi_uldivmod>
 80094d4:	4602      	mov	r2, r0
 80094d6:	460b      	mov	r3, r1
 80094d8:	4610      	mov	r0, r2
 80094da:	4619      	mov	r1, r3
 80094dc:	f04f 0200 	mov.w	r2, #0
 80094e0:	f04f 0300 	mov.w	r3, #0
 80094e4:	020b      	lsls	r3, r1, #8
 80094e6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80094ea:	0202      	lsls	r2, r0, #8
 80094ec:	6979      	ldr	r1, [r7, #20]
 80094ee:	6849      	ldr	r1, [r1, #4]
 80094f0:	0849      	lsrs	r1, r1, #1
 80094f2:	2000      	movs	r0, #0
 80094f4:	460c      	mov	r4, r1
 80094f6:	4605      	mov	r5, r0
 80094f8:	eb12 0804 	adds.w	r8, r2, r4
 80094fc:	eb43 0905 	adc.w	r9, r3, r5
 8009500:	697b      	ldr	r3, [r7, #20]
 8009502:	685b      	ldr	r3, [r3, #4]
 8009504:	2200      	movs	r2, #0
 8009506:	469a      	mov	sl, r3
 8009508:	4693      	mov	fp, r2
 800950a:	4652      	mov	r2, sl
 800950c:	465b      	mov	r3, fp
 800950e:	4640      	mov	r0, r8
 8009510:	4649      	mov	r1, r9
 8009512:	f7f7 fb21 	bl	8000b58 <__aeabi_uldivmod>
 8009516:	4602      	mov	r2, r0
 8009518:	460b      	mov	r3, r1
 800951a:	4613      	mov	r3, r2
 800951c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800951e:	6a3b      	ldr	r3, [r7, #32]
 8009520:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009524:	d308      	bcc.n	8009538 <UART_SetConfig+0x288>
 8009526:	6a3b      	ldr	r3, [r7, #32]
 8009528:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800952c:	d204      	bcs.n	8009538 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 800952e:	697b      	ldr	r3, [r7, #20]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	6a3a      	ldr	r2, [r7, #32]
 8009534:	60da      	str	r2, [r3, #12]
 8009536:	e0c9      	b.n	80096cc <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8009538:	2301      	movs	r3, #1
 800953a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800953e:	e0c5      	b.n	80096cc <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009540:	697b      	ldr	r3, [r7, #20]
 8009542:	69db      	ldr	r3, [r3, #28]
 8009544:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009548:	d16d      	bne.n	8009626 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800954a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800954e:	3b01      	subs	r3, #1
 8009550:	2b07      	cmp	r3, #7
 8009552:	d82d      	bhi.n	80095b0 <UART_SetConfig+0x300>
 8009554:	a201      	add	r2, pc, #4	@ (adr r2, 800955c <UART_SetConfig+0x2ac>)
 8009556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800955a:	bf00      	nop
 800955c:	0800957d 	.word	0x0800957d
 8009560:	08009585 	.word	0x08009585
 8009564:	080095b1 	.word	0x080095b1
 8009568:	0800958b 	.word	0x0800958b
 800956c:	080095b1 	.word	0x080095b1
 8009570:	080095b1 	.word	0x080095b1
 8009574:	080095b1 	.word	0x080095b1
 8009578:	08009593 	.word	0x08009593
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800957c:	f7fe fa86 	bl	8007a8c <HAL_RCC_GetPCLK2Freq>
 8009580:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009582:	e01b      	b.n	80095bc <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009584:	4b08      	ldr	r3, [pc, #32]	@ (80095a8 <UART_SetConfig+0x2f8>)
 8009586:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009588:	e018      	b.n	80095bc <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800958a:	f7fe f9e9 	bl	8007960 <HAL_RCC_GetSysClockFreq>
 800958e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009590:	e014      	b.n	80095bc <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009592:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009596:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009598:	e010      	b.n	80095bc <UART_SetConfig+0x30c>
 800959a:	bf00      	nop
 800959c:	cfff69f3 	.word	0xcfff69f3
 80095a0:	40008000 	.word	0x40008000
 80095a4:	40013800 	.word	0x40013800
 80095a8:	00f42400 	.word	0x00f42400
 80095ac:	080130c4 	.word	0x080130c4
      default:
        pclk = 0U;
 80095b0:	2300      	movs	r3, #0
 80095b2:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80095b4:	2301      	movs	r3, #1
 80095b6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80095ba:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80095bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095be:	2b00      	cmp	r3, #0
 80095c0:	f000 8084 	beq.w	80096cc <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80095c4:	697b      	ldr	r3, [r7, #20]
 80095c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095c8:	4a4b      	ldr	r2, [pc, #300]	@ (80096f8 <UART_SetConfig+0x448>)
 80095ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80095ce:	461a      	mov	r2, r3
 80095d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80095d6:	005a      	lsls	r2, r3, #1
 80095d8:	697b      	ldr	r3, [r7, #20]
 80095da:	685b      	ldr	r3, [r3, #4]
 80095dc:	085b      	lsrs	r3, r3, #1
 80095de:	441a      	add	r2, r3
 80095e0:	697b      	ldr	r3, [r7, #20]
 80095e2:	685b      	ldr	r3, [r3, #4]
 80095e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80095e8:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80095ea:	6a3b      	ldr	r3, [r7, #32]
 80095ec:	2b0f      	cmp	r3, #15
 80095ee:	d916      	bls.n	800961e <UART_SetConfig+0x36e>
 80095f0:	6a3b      	ldr	r3, [r7, #32]
 80095f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80095f6:	d212      	bcs.n	800961e <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80095f8:	6a3b      	ldr	r3, [r7, #32]
 80095fa:	b29b      	uxth	r3, r3
 80095fc:	f023 030f 	bic.w	r3, r3, #15
 8009600:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009602:	6a3b      	ldr	r3, [r7, #32]
 8009604:	085b      	lsrs	r3, r3, #1
 8009606:	b29b      	uxth	r3, r3
 8009608:	f003 0307 	and.w	r3, r3, #7
 800960c:	b29a      	uxth	r2, r3
 800960e:	8bfb      	ldrh	r3, [r7, #30]
 8009610:	4313      	orrs	r3, r2
 8009612:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8009614:	697b      	ldr	r3, [r7, #20]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	8bfa      	ldrh	r2, [r7, #30]
 800961a:	60da      	str	r2, [r3, #12]
 800961c:	e056      	b.n	80096cc <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800961e:	2301      	movs	r3, #1
 8009620:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009624:	e052      	b.n	80096cc <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009626:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800962a:	3b01      	subs	r3, #1
 800962c:	2b07      	cmp	r3, #7
 800962e:	d822      	bhi.n	8009676 <UART_SetConfig+0x3c6>
 8009630:	a201      	add	r2, pc, #4	@ (adr r2, 8009638 <UART_SetConfig+0x388>)
 8009632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009636:	bf00      	nop
 8009638:	08009659 	.word	0x08009659
 800963c:	08009661 	.word	0x08009661
 8009640:	08009677 	.word	0x08009677
 8009644:	08009667 	.word	0x08009667
 8009648:	08009677 	.word	0x08009677
 800964c:	08009677 	.word	0x08009677
 8009650:	08009677 	.word	0x08009677
 8009654:	0800966f 	.word	0x0800966f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009658:	f7fe fa18 	bl	8007a8c <HAL_RCC_GetPCLK2Freq>
 800965c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800965e:	e010      	b.n	8009682 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009660:	4b26      	ldr	r3, [pc, #152]	@ (80096fc <UART_SetConfig+0x44c>)
 8009662:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009664:	e00d      	b.n	8009682 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009666:	f7fe f97b 	bl	8007960 <HAL_RCC_GetSysClockFreq>
 800966a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800966c:	e009      	b.n	8009682 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800966e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009672:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009674:	e005      	b.n	8009682 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8009676:	2300      	movs	r3, #0
 8009678:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800967a:	2301      	movs	r3, #1
 800967c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009680:	bf00      	nop
    }

    if (pclk != 0U)
 8009682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009684:	2b00      	cmp	r3, #0
 8009686:	d021      	beq.n	80096cc <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009688:	697b      	ldr	r3, [r7, #20]
 800968a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800968c:	4a1a      	ldr	r2, [pc, #104]	@ (80096f8 <UART_SetConfig+0x448>)
 800968e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009692:	461a      	mov	r2, r3
 8009694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009696:	fbb3 f2f2 	udiv	r2, r3, r2
 800969a:	697b      	ldr	r3, [r7, #20]
 800969c:	685b      	ldr	r3, [r3, #4]
 800969e:	085b      	lsrs	r3, r3, #1
 80096a0:	441a      	add	r2, r3
 80096a2:	697b      	ldr	r3, [r7, #20]
 80096a4:	685b      	ldr	r3, [r3, #4]
 80096a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80096aa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80096ac:	6a3b      	ldr	r3, [r7, #32]
 80096ae:	2b0f      	cmp	r3, #15
 80096b0:	d909      	bls.n	80096c6 <UART_SetConfig+0x416>
 80096b2:	6a3b      	ldr	r3, [r7, #32]
 80096b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80096b8:	d205      	bcs.n	80096c6 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80096ba:	6a3b      	ldr	r3, [r7, #32]
 80096bc:	b29a      	uxth	r2, r3
 80096be:	697b      	ldr	r3, [r7, #20]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	60da      	str	r2, [r3, #12]
 80096c4:	e002      	b.n	80096cc <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80096c6:	2301      	movs	r3, #1
 80096c8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80096cc:	697b      	ldr	r3, [r7, #20]
 80096ce:	2201      	movs	r2, #1
 80096d0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80096d4:	697b      	ldr	r3, [r7, #20]
 80096d6:	2201      	movs	r2, #1
 80096d8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80096dc:	697b      	ldr	r3, [r7, #20]
 80096de:	2200      	movs	r2, #0
 80096e0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80096e2:	697b      	ldr	r3, [r7, #20]
 80096e4:	2200      	movs	r2, #0
 80096e6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80096e8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80096ec:	4618      	mov	r0, r3
 80096ee:	3730      	adds	r7, #48	@ 0x30
 80096f0:	46bd      	mov	sp, r7
 80096f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80096f6:	bf00      	nop
 80096f8:	080130c4 	.word	0x080130c4
 80096fc:	00f42400 	.word	0x00f42400

08009700 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009700:	b480      	push	{r7}
 8009702:	b083      	sub	sp, #12
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800970c:	f003 0308 	and.w	r3, r3, #8
 8009710:	2b00      	cmp	r3, #0
 8009712:	d00a      	beq.n	800972a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	685b      	ldr	r3, [r3, #4]
 800971a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	430a      	orrs	r2, r1
 8009728:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800972e:	f003 0301 	and.w	r3, r3, #1
 8009732:	2b00      	cmp	r3, #0
 8009734:	d00a      	beq.n	800974c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	685b      	ldr	r3, [r3, #4]
 800973c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	430a      	orrs	r2, r1
 800974a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009750:	f003 0302 	and.w	r3, r3, #2
 8009754:	2b00      	cmp	r3, #0
 8009756:	d00a      	beq.n	800976e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	685b      	ldr	r3, [r3, #4]
 800975e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	430a      	orrs	r2, r1
 800976c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009772:	f003 0304 	and.w	r3, r3, #4
 8009776:	2b00      	cmp	r3, #0
 8009778:	d00a      	beq.n	8009790 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	685b      	ldr	r3, [r3, #4]
 8009780:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	430a      	orrs	r2, r1
 800978e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009794:	f003 0310 	and.w	r3, r3, #16
 8009798:	2b00      	cmp	r3, #0
 800979a:	d00a      	beq.n	80097b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	689b      	ldr	r3, [r3, #8]
 80097a2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	430a      	orrs	r2, r1
 80097b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097b6:	f003 0320 	and.w	r3, r3, #32
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d00a      	beq.n	80097d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	689b      	ldr	r3, [r3, #8]
 80097c4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	430a      	orrs	r2, r1
 80097d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d01a      	beq.n	8009816 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	685b      	ldr	r3, [r3, #4]
 80097e6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	430a      	orrs	r2, r1
 80097f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80097fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80097fe:	d10a      	bne.n	8009816 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	685b      	ldr	r3, [r3, #4]
 8009806:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	430a      	orrs	r2, r1
 8009814:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800981a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800981e:	2b00      	cmp	r3, #0
 8009820:	d00a      	beq.n	8009838 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	685b      	ldr	r3, [r3, #4]
 8009828:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	430a      	orrs	r2, r1
 8009836:	605a      	str	r2, [r3, #4]
  }
}
 8009838:	bf00      	nop
 800983a:	370c      	adds	r7, #12
 800983c:	46bd      	mov	sp, r7
 800983e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009842:	4770      	bx	lr

08009844 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b098      	sub	sp, #96	@ 0x60
 8009848:	af02      	add	r7, sp, #8
 800984a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	2200      	movs	r2, #0
 8009850:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009854:	f7fc fd5c 	bl	8006310 <HAL_GetTick>
 8009858:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	f003 0308 	and.w	r3, r3, #8
 8009864:	2b08      	cmp	r3, #8
 8009866:	d12f      	bne.n	80098c8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009868:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800986c:	9300      	str	r3, [sp, #0]
 800986e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009870:	2200      	movs	r2, #0
 8009872:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009876:	6878      	ldr	r0, [r7, #4]
 8009878:	f000 f88e 	bl	8009998 <UART_WaitOnFlagUntilTimeout>
 800987c:	4603      	mov	r3, r0
 800987e:	2b00      	cmp	r3, #0
 8009880:	d022      	beq.n	80098c8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009888:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800988a:	e853 3f00 	ldrex	r3, [r3]
 800988e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009890:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009892:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009896:	653b      	str	r3, [r7, #80]	@ 0x50
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	461a      	mov	r2, r3
 800989e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80098a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80098a2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098a4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80098a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80098a8:	e841 2300 	strex	r3, r2, [r1]
 80098ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80098ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d1e6      	bne.n	8009882 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	2220      	movs	r2, #32
 80098b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	2200      	movs	r2, #0
 80098c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80098c4:	2303      	movs	r3, #3
 80098c6:	e063      	b.n	8009990 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	f003 0304 	and.w	r3, r3, #4
 80098d2:	2b04      	cmp	r3, #4
 80098d4:	d149      	bne.n	800996a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80098d6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80098da:	9300      	str	r3, [sp, #0]
 80098dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80098de:	2200      	movs	r2, #0
 80098e0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80098e4:	6878      	ldr	r0, [r7, #4]
 80098e6:	f000 f857 	bl	8009998 <UART_WaitOnFlagUntilTimeout>
 80098ea:	4603      	mov	r3, r0
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d03c      	beq.n	800996a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098f8:	e853 3f00 	ldrex	r3, [r3]
 80098fc:	623b      	str	r3, [r7, #32]
   return(result);
 80098fe:	6a3b      	ldr	r3, [r7, #32]
 8009900:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009904:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	461a      	mov	r2, r3
 800990c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800990e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009910:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009912:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009914:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009916:	e841 2300 	strex	r3, r2, [r1]
 800991a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800991c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800991e:	2b00      	cmp	r3, #0
 8009920:	d1e6      	bne.n	80098f0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	3308      	adds	r3, #8
 8009928:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800992a:	693b      	ldr	r3, [r7, #16]
 800992c:	e853 3f00 	ldrex	r3, [r3]
 8009930:	60fb      	str	r3, [r7, #12]
   return(result);
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	f023 0301 	bic.w	r3, r3, #1
 8009938:	64bb      	str	r3, [r7, #72]	@ 0x48
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	3308      	adds	r3, #8
 8009940:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009942:	61fa      	str	r2, [r7, #28]
 8009944:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009946:	69b9      	ldr	r1, [r7, #24]
 8009948:	69fa      	ldr	r2, [r7, #28]
 800994a:	e841 2300 	strex	r3, r2, [r1]
 800994e:	617b      	str	r3, [r7, #20]
   return(result);
 8009950:	697b      	ldr	r3, [r7, #20]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d1e5      	bne.n	8009922 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	2220      	movs	r2, #32
 800995a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	2200      	movs	r2, #0
 8009962:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009966:	2303      	movs	r3, #3
 8009968:	e012      	b.n	8009990 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	2220      	movs	r2, #32
 800996e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	2220      	movs	r2, #32
 8009976:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	2200      	movs	r2, #0
 800997e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	2200      	movs	r2, #0
 8009984:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	2200      	movs	r2, #0
 800998a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800998e:	2300      	movs	r3, #0
}
 8009990:	4618      	mov	r0, r3
 8009992:	3758      	adds	r7, #88	@ 0x58
 8009994:	46bd      	mov	sp, r7
 8009996:	bd80      	pop	{r7, pc}

08009998 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009998:	b580      	push	{r7, lr}
 800999a:	b084      	sub	sp, #16
 800999c:	af00      	add	r7, sp, #0
 800999e:	60f8      	str	r0, [r7, #12]
 80099a0:	60b9      	str	r1, [r7, #8]
 80099a2:	603b      	str	r3, [r7, #0]
 80099a4:	4613      	mov	r3, r2
 80099a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80099a8:	e04f      	b.n	8009a4a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80099aa:	69bb      	ldr	r3, [r7, #24]
 80099ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099b0:	d04b      	beq.n	8009a4a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80099b2:	f7fc fcad 	bl	8006310 <HAL_GetTick>
 80099b6:	4602      	mov	r2, r0
 80099b8:	683b      	ldr	r3, [r7, #0]
 80099ba:	1ad3      	subs	r3, r2, r3
 80099bc:	69ba      	ldr	r2, [r7, #24]
 80099be:	429a      	cmp	r2, r3
 80099c0:	d302      	bcc.n	80099c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80099c2:	69bb      	ldr	r3, [r7, #24]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d101      	bne.n	80099cc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80099c8:	2303      	movs	r3, #3
 80099ca:	e04e      	b.n	8009a6a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	f003 0304 	and.w	r3, r3, #4
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d037      	beq.n	8009a4a <UART_WaitOnFlagUntilTimeout+0xb2>
 80099da:	68bb      	ldr	r3, [r7, #8]
 80099dc:	2b80      	cmp	r3, #128	@ 0x80
 80099de:	d034      	beq.n	8009a4a <UART_WaitOnFlagUntilTimeout+0xb2>
 80099e0:	68bb      	ldr	r3, [r7, #8]
 80099e2:	2b40      	cmp	r3, #64	@ 0x40
 80099e4:	d031      	beq.n	8009a4a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	69db      	ldr	r3, [r3, #28]
 80099ec:	f003 0308 	and.w	r3, r3, #8
 80099f0:	2b08      	cmp	r3, #8
 80099f2:	d110      	bne.n	8009a16 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	2208      	movs	r2, #8
 80099fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80099fc:	68f8      	ldr	r0, [r7, #12]
 80099fe:	f000 f838 	bl	8009a72 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	2208      	movs	r2, #8
 8009a06:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	2200      	movs	r2, #0
 8009a0e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009a12:	2301      	movs	r3, #1
 8009a14:	e029      	b.n	8009a6a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	69db      	ldr	r3, [r3, #28]
 8009a1c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009a20:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009a24:	d111      	bne.n	8009a4a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009a2e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009a30:	68f8      	ldr	r0, [r7, #12]
 8009a32:	f000 f81e 	bl	8009a72 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	2220      	movs	r2, #32
 8009a3a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	2200      	movs	r2, #0
 8009a42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009a46:	2303      	movs	r3, #3
 8009a48:	e00f      	b.n	8009a6a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	69da      	ldr	r2, [r3, #28]
 8009a50:	68bb      	ldr	r3, [r7, #8]
 8009a52:	4013      	ands	r3, r2
 8009a54:	68ba      	ldr	r2, [r7, #8]
 8009a56:	429a      	cmp	r2, r3
 8009a58:	bf0c      	ite	eq
 8009a5a:	2301      	moveq	r3, #1
 8009a5c:	2300      	movne	r3, #0
 8009a5e:	b2db      	uxtb	r3, r3
 8009a60:	461a      	mov	r2, r3
 8009a62:	79fb      	ldrb	r3, [r7, #7]
 8009a64:	429a      	cmp	r2, r3
 8009a66:	d0a0      	beq.n	80099aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009a68:	2300      	movs	r3, #0
}
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	3710      	adds	r7, #16
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	bd80      	pop	{r7, pc}

08009a72 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009a72:	b480      	push	{r7}
 8009a74:	b095      	sub	sp, #84	@ 0x54
 8009a76:	af00      	add	r7, sp, #0
 8009a78:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a82:	e853 3f00 	ldrex	r3, [r3]
 8009a86:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009a88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a8a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009a8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	461a      	mov	r2, r3
 8009a96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009a98:	643b      	str	r3, [r7, #64]	@ 0x40
 8009a9a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a9c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009a9e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009aa0:	e841 2300 	strex	r3, r2, [r1]
 8009aa4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009aa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d1e6      	bne.n	8009a7a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	3308      	adds	r3, #8
 8009ab2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ab4:	6a3b      	ldr	r3, [r7, #32]
 8009ab6:	e853 3f00 	ldrex	r3, [r3]
 8009aba:	61fb      	str	r3, [r7, #28]
   return(result);
 8009abc:	69fb      	ldr	r3, [r7, #28]
 8009abe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009ac2:	f023 0301 	bic.w	r3, r3, #1
 8009ac6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	3308      	adds	r3, #8
 8009ace:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009ad0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009ad2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ad4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009ad6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009ad8:	e841 2300 	strex	r3, r2, [r1]
 8009adc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d1e3      	bne.n	8009aac <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009ae8:	2b01      	cmp	r3, #1
 8009aea:	d118      	bne.n	8009b1e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	e853 3f00 	ldrex	r3, [r3]
 8009af8:	60bb      	str	r3, [r7, #8]
   return(result);
 8009afa:	68bb      	ldr	r3, [r7, #8]
 8009afc:	f023 0310 	bic.w	r3, r3, #16
 8009b00:	647b      	str	r3, [r7, #68]	@ 0x44
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	461a      	mov	r2, r3
 8009b08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009b0a:	61bb      	str	r3, [r7, #24]
 8009b0c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b0e:	6979      	ldr	r1, [r7, #20]
 8009b10:	69ba      	ldr	r2, [r7, #24]
 8009b12:	e841 2300 	strex	r3, r2, [r1]
 8009b16:	613b      	str	r3, [r7, #16]
   return(result);
 8009b18:	693b      	ldr	r3, [r7, #16]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d1e6      	bne.n	8009aec <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	2220      	movs	r2, #32
 8009b22:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	2200      	movs	r2, #0
 8009b2a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	2200      	movs	r2, #0
 8009b30:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009b32:	bf00      	nop
 8009b34:	3754      	adds	r7, #84	@ 0x54
 8009b36:	46bd      	mov	sp, r7
 8009b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3c:	4770      	bx	lr
	...

08009b40 <__NVIC_SetPriority>:
{
 8009b40:	b480      	push	{r7}
 8009b42:	b083      	sub	sp, #12
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	4603      	mov	r3, r0
 8009b48:	6039      	str	r1, [r7, #0]
 8009b4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009b4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	db0a      	blt.n	8009b6a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009b54:	683b      	ldr	r3, [r7, #0]
 8009b56:	b2da      	uxtb	r2, r3
 8009b58:	490c      	ldr	r1, [pc, #48]	@ (8009b8c <__NVIC_SetPriority+0x4c>)
 8009b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009b5e:	0112      	lsls	r2, r2, #4
 8009b60:	b2d2      	uxtb	r2, r2
 8009b62:	440b      	add	r3, r1
 8009b64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8009b68:	e00a      	b.n	8009b80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009b6a:	683b      	ldr	r3, [r7, #0]
 8009b6c:	b2da      	uxtb	r2, r3
 8009b6e:	4908      	ldr	r1, [pc, #32]	@ (8009b90 <__NVIC_SetPriority+0x50>)
 8009b70:	79fb      	ldrb	r3, [r7, #7]
 8009b72:	f003 030f 	and.w	r3, r3, #15
 8009b76:	3b04      	subs	r3, #4
 8009b78:	0112      	lsls	r2, r2, #4
 8009b7a:	b2d2      	uxtb	r2, r2
 8009b7c:	440b      	add	r3, r1
 8009b7e:	761a      	strb	r2, [r3, #24]
}
 8009b80:	bf00      	nop
 8009b82:	370c      	adds	r7, #12
 8009b84:	46bd      	mov	sp, r7
 8009b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8a:	4770      	bx	lr
 8009b8c:	e000e100 	.word	0xe000e100
 8009b90:	e000ed00 	.word	0xe000ed00

08009b94 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009b94:	b580      	push	{r7, lr}
 8009b96:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009b98:	4b05      	ldr	r3, [pc, #20]	@ (8009bb0 <SysTick_Handler+0x1c>)
 8009b9a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009b9c:	f001 fefc 	bl	800b998 <xTaskGetSchedulerState>
 8009ba0:	4603      	mov	r3, r0
 8009ba2:	2b01      	cmp	r3, #1
 8009ba4:	d001      	beq.n	8009baa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009ba6:	f002 fcf7 	bl	800c598 <xPortSysTickHandler>
  }
}
 8009baa:	bf00      	nop
 8009bac:	bd80      	pop	{r7, pc}
 8009bae:	bf00      	nop
 8009bb0:	e000e010 	.word	0xe000e010

08009bb4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009bb8:	2100      	movs	r1, #0
 8009bba:	f06f 0004 	mvn.w	r0, #4
 8009bbe:	f7ff ffbf 	bl	8009b40 <__NVIC_SetPriority>
#endif
}
 8009bc2:	bf00      	nop
 8009bc4:	bd80      	pop	{r7, pc}
	...

08009bc8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009bc8:	b480      	push	{r7}
 8009bca:	b083      	sub	sp, #12
 8009bcc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009bce:	f3ef 8305 	mrs	r3, IPSR
 8009bd2:	603b      	str	r3, [r7, #0]
  return(result);
 8009bd4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d003      	beq.n	8009be2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009bda:	f06f 0305 	mvn.w	r3, #5
 8009bde:	607b      	str	r3, [r7, #4]
 8009be0:	e00c      	b.n	8009bfc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009be2:	4b0a      	ldr	r3, [pc, #40]	@ (8009c0c <osKernelInitialize+0x44>)
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d105      	bne.n	8009bf6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009bea:	4b08      	ldr	r3, [pc, #32]	@ (8009c0c <osKernelInitialize+0x44>)
 8009bec:	2201      	movs	r2, #1
 8009bee:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	607b      	str	r3, [r7, #4]
 8009bf4:	e002      	b.n	8009bfc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009bf6:	f04f 33ff 	mov.w	r3, #4294967295
 8009bfa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009bfc:	687b      	ldr	r3, [r7, #4]
}
 8009bfe:	4618      	mov	r0, r3
 8009c00:	370c      	adds	r7, #12
 8009c02:	46bd      	mov	sp, r7
 8009c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c08:	4770      	bx	lr
 8009c0a:	bf00      	nop
 8009c0c:	20000800 	.word	0x20000800

08009c10 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b082      	sub	sp, #8
 8009c14:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c16:	f3ef 8305 	mrs	r3, IPSR
 8009c1a:	603b      	str	r3, [r7, #0]
  return(result);
 8009c1c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d003      	beq.n	8009c2a <osKernelStart+0x1a>
    stat = osErrorISR;
 8009c22:	f06f 0305 	mvn.w	r3, #5
 8009c26:	607b      	str	r3, [r7, #4]
 8009c28:	e010      	b.n	8009c4c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009c2a:	4b0b      	ldr	r3, [pc, #44]	@ (8009c58 <osKernelStart+0x48>)
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	2b01      	cmp	r3, #1
 8009c30:	d109      	bne.n	8009c46 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009c32:	f7ff ffbf 	bl	8009bb4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009c36:	4b08      	ldr	r3, [pc, #32]	@ (8009c58 <osKernelStart+0x48>)
 8009c38:	2202      	movs	r2, #2
 8009c3a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009c3c:	f001 fa12 	bl	800b064 <vTaskStartScheduler>
      stat = osOK;
 8009c40:	2300      	movs	r3, #0
 8009c42:	607b      	str	r3, [r7, #4]
 8009c44:	e002      	b.n	8009c4c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009c46:	f04f 33ff 	mov.w	r3, #4294967295
 8009c4a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009c4c:	687b      	ldr	r3, [r7, #4]
}
 8009c4e:	4618      	mov	r0, r3
 8009c50:	3708      	adds	r7, #8
 8009c52:	46bd      	mov	sp, r7
 8009c54:	bd80      	pop	{r7, pc}
 8009c56:	bf00      	nop
 8009c58:	20000800 	.word	0x20000800

08009c5c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b08e      	sub	sp, #56	@ 0x38
 8009c60:	af04      	add	r7, sp, #16
 8009c62:	60f8      	str	r0, [r7, #12]
 8009c64:	60b9      	str	r1, [r7, #8]
 8009c66:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009c68:	2300      	movs	r3, #0
 8009c6a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c6c:	f3ef 8305 	mrs	r3, IPSR
 8009c70:	617b      	str	r3, [r7, #20]
  return(result);
 8009c72:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d17e      	bne.n	8009d76 <osThreadNew+0x11a>
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d07b      	beq.n	8009d76 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009c7e:	2380      	movs	r3, #128	@ 0x80
 8009c80:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009c82:	2318      	movs	r3, #24
 8009c84:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009c86:	2300      	movs	r3, #0
 8009c88:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8009c8a:	f04f 33ff 	mov.w	r3, #4294967295
 8009c8e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d045      	beq.n	8009d22 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d002      	beq.n	8009ca4 <osThreadNew+0x48>
        name = attr->name;
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	699b      	ldr	r3, [r3, #24]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d002      	beq.n	8009cb2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	699b      	ldr	r3, [r3, #24]
 8009cb0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009cb2:	69fb      	ldr	r3, [r7, #28]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d008      	beq.n	8009cca <osThreadNew+0x6e>
 8009cb8:	69fb      	ldr	r3, [r7, #28]
 8009cba:	2b38      	cmp	r3, #56	@ 0x38
 8009cbc:	d805      	bhi.n	8009cca <osThreadNew+0x6e>
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	685b      	ldr	r3, [r3, #4]
 8009cc2:	f003 0301 	and.w	r3, r3, #1
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d001      	beq.n	8009cce <osThreadNew+0x72>
        return (NULL);
 8009cca:	2300      	movs	r3, #0
 8009ccc:	e054      	b.n	8009d78 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	695b      	ldr	r3, [r3, #20]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d003      	beq.n	8009cde <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	695b      	ldr	r3, [r3, #20]
 8009cda:	089b      	lsrs	r3, r3, #2
 8009cdc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	689b      	ldr	r3, [r3, #8]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d00e      	beq.n	8009d04 <osThreadNew+0xa8>
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	68db      	ldr	r3, [r3, #12]
 8009cea:	2ba7      	cmp	r3, #167	@ 0xa7
 8009cec:	d90a      	bls.n	8009d04 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d006      	beq.n	8009d04 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	695b      	ldr	r3, [r3, #20]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d002      	beq.n	8009d04 <osThreadNew+0xa8>
        mem = 1;
 8009cfe:	2301      	movs	r3, #1
 8009d00:	61bb      	str	r3, [r7, #24]
 8009d02:	e010      	b.n	8009d26 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	689b      	ldr	r3, [r3, #8]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d10c      	bne.n	8009d26 <osThreadNew+0xca>
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	68db      	ldr	r3, [r3, #12]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d108      	bne.n	8009d26 <osThreadNew+0xca>
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	691b      	ldr	r3, [r3, #16]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d104      	bne.n	8009d26 <osThreadNew+0xca>
          mem = 0;
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	61bb      	str	r3, [r7, #24]
 8009d20:	e001      	b.n	8009d26 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009d22:	2300      	movs	r3, #0
 8009d24:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009d26:	69bb      	ldr	r3, [r7, #24]
 8009d28:	2b01      	cmp	r3, #1
 8009d2a:	d110      	bne.n	8009d4e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009d30:	687a      	ldr	r2, [r7, #4]
 8009d32:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009d34:	9202      	str	r2, [sp, #8]
 8009d36:	9301      	str	r3, [sp, #4]
 8009d38:	69fb      	ldr	r3, [r7, #28]
 8009d3a:	9300      	str	r3, [sp, #0]
 8009d3c:	68bb      	ldr	r3, [r7, #8]
 8009d3e:	6a3a      	ldr	r2, [r7, #32]
 8009d40:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009d42:	68f8      	ldr	r0, [r7, #12]
 8009d44:	f000 ff9a 	bl	800ac7c <xTaskCreateStatic>
 8009d48:	4603      	mov	r3, r0
 8009d4a:	613b      	str	r3, [r7, #16]
 8009d4c:	e013      	b.n	8009d76 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009d4e:	69bb      	ldr	r3, [r7, #24]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d110      	bne.n	8009d76 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009d54:	6a3b      	ldr	r3, [r7, #32]
 8009d56:	b29a      	uxth	r2, r3
 8009d58:	f107 0310 	add.w	r3, r7, #16
 8009d5c:	9301      	str	r3, [sp, #4]
 8009d5e:	69fb      	ldr	r3, [r7, #28]
 8009d60:	9300      	str	r3, [sp, #0]
 8009d62:	68bb      	ldr	r3, [r7, #8]
 8009d64:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009d66:	68f8      	ldr	r0, [r7, #12]
 8009d68:	f000 ffe8 	bl	800ad3c <xTaskCreate>
 8009d6c:	4603      	mov	r3, r0
 8009d6e:	2b01      	cmp	r3, #1
 8009d70:	d001      	beq.n	8009d76 <osThreadNew+0x11a>
            hTask = NULL;
 8009d72:	2300      	movs	r3, #0
 8009d74:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009d76:	693b      	ldr	r3, [r7, #16]
}
 8009d78:	4618      	mov	r0, r3
 8009d7a:	3728      	adds	r7, #40	@ 0x28
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	bd80      	pop	{r7, pc}

08009d80 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b084      	sub	sp, #16
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009d88:	f3ef 8305 	mrs	r3, IPSR
 8009d8c:	60bb      	str	r3, [r7, #8]
  return(result);
 8009d8e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d003      	beq.n	8009d9c <osDelay+0x1c>
    stat = osErrorISR;
 8009d94:	f06f 0305 	mvn.w	r3, #5
 8009d98:	60fb      	str	r3, [r7, #12]
 8009d9a:	e007      	b.n	8009dac <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d002      	beq.n	8009dac <osDelay+0x2c>
      vTaskDelay(ticks);
 8009da6:	6878      	ldr	r0, [r7, #4]
 8009da8:	f001 f926 	bl	800aff8 <vTaskDelay>
    }
  }

  return (stat);
 8009dac:	68fb      	ldr	r3, [r7, #12]
}
 8009dae:	4618      	mov	r0, r3
 8009db0:	3710      	adds	r7, #16
 8009db2:	46bd      	mov	sp, r7
 8009db4:	bd80      	pop	{r7, pc}

08009db6 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8009db6:	b580      	push	{r7, lr}
 8009db8:	b08a      	sub	sp, #40	@ 0x28
 8009dba:	af02      	add	r7, sp, #8
 8009dbc:	60f8      	str	r0, [r7, #12]
 8009dbe:	60b9      	str	r1, [r7, #8]
 8009dc0:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009dc6:	f3ef 8305 	mrs	r3, IPSR
 8009dca:	613b      	str	r3, [r7, #16]
  return(result);
 8009dcc:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d175      	bne.n	8009ebe <osSemaphoreNew+0x108>
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d072      	beq.n	8009ebe <osSemaphoreNew+0x108>
 8009dd8:	68ba      	ldr	r2, [r7, #8]
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	429a      	cmp	r2, r3
 8009dde:	d86e      	bhi.n	8009ebe <osSemaphoreNew+0x108>
    mem = -1;
 8009de0:	f04f 33ff 	mov.w	r3, #4294967295
 8009de4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d015      	beq.n	8009e18 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	689b      	ldr	r3, [r3, #8]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d006      	beq.n	8009e02 <osSemaphoreNew+0x4c>
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	68db      	ldr	r3, [r3, #12]
 8009df8:	2b4f      	cmp	r3, #79	@ 0x4f
 8009dfa:	d902      	bls.n	8009e02 <osSemaphoreNew+0x4c>
        mem = 1;
 8009dfc:	2301      	movs	r3, #1
 8009dfe:	61bb      	str	r3, [r7, #24]
 8009e00:	e00c      	b.n	8009e1c <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	689b      	ldr	r3, [r3, #8]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d108      	bne.n	8009e1c <osSemaphoreNew+0x66>
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	68db      	ldr	r3, [r3, #12]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d104      	bne.n	8009e1c <osSemaphoreNew+0x66>
          mem = 0;
 8009e12:	2300      	movs	r3, #0
 8009e14:	61bb      	str	r3, [r7, #24]
 8009e16:	e001      	b.n	8009e1c <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8009e18:	2300      	movs	r3, #0
 8009e1a:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8009e1c:	69bb      	ldr	r3, [r7, #24]
 8009e1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e22:	d04c      	beq.n	8009ebe <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	2b01      	cmp	r3, #1
 8009e28:	d128      	bne.n	8009e7c <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8009e2a:	69bb      	ldr	r3, [r7, #24]
 8009e2c:	2b01      	cmp	r3, #1
 8009e2e:	d10a      	bne.n	8009e46 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	689b      	ldr	r3, [r3, #8]
 8009e34:	2203      	movs	r2, #3
 8009e36:	9200      	str	r2, [sp, #0]
 8009e38:	2200      	movs	r2, #0
 8009e3a:	2100      	movs	r1, #0
 8009e3c:	2001      	movs	r0, #1
 8009e3e:	f000 f995 	bl	800a16c <xQueueGenericCreateStatic>
 8009e42:	61f8      	str	r0, [r7, #28]
 8009e44:	e005      	b.n	8009e52 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8009e46:	2203      	movs	r2, #3
 8009e48:	2100      	movs	r1, #0
 8009e4a:	2001      	movs	r0, #1
 8009e4c:	f000 fa0b 	bl	800a266 <xQueueGenericCreate>
 8009e50:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8009e52:	69fb      	ldr	r3, [r7, #28]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d022      	beq.n	8009e9e <osSemaphoreNew+0xe8>
 8009e58:	68bb      	ldr	r3, [r7, #8]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d01f      	beq.n	8009e9e <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009e5e:	2300      	movs	r3, #0
 8009e60:	2200      	movs	r2, #0
 8009e62:	2100      	movs	r1, #0
 8009e64:	69f8      	ldr	r0, [r7, #28]
 8009e66:	f000 facb 	bl	800a400 <xQueueGenericSend>
 8009e6a:	4603      	mov	r3, r0
 8009e6c:	2b01      	cmp	r3, #1
 8009e6e:	d016      	beq.n	8009e9e <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8009e70:	69f8      	ldr	r0, [r7, #28]
 8009e72:	f000 fd47 	bl	800a904 <vQueueDelete>
            hSemaphore = NULL;
 8009e76:	2300      	movs	r3, #0
 8009e78:	61fb      	str	r3, [r7, #28]
 8009e7a:	e010      	b.n	8009e9e <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8009e7c:	69bb      	ldr	r3, [r7, #24]
 8009e7e:	2b01      	cmp	r3, #1
 8009e80:	d108      	bne.n	8009e94 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	689b      	ldr	r3, [r3, #8]
 8009e86:	461a      	mov	r2, r3
 8009e88:	68b9      	ldr	r1, [r7, #8]
 8009e8a:	68f8      	ldr	r0, [r7, #12]
 8009e8c:	f000 fa49 	bl	800a322 <xQueueCreateCountingSemaphoreStatic>
 8009e90:	61f8      	str	r0, [r7, #28]
 8009e92:	e004      	b.n	8009e9e <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8009e94:	68b9      	ldr	r1, [r7, #8]
 8009e96:	68f8      	ldr	r0, [r7, #12]
 8009e98:	f000 fa7c 	bl	800a394 <xQueueCreateCountingSemaphore>
 8009e9c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8009e9e:	69fb      	ldr	r3, [r7, #28]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d00c      	beq.n	8009ebe <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d003      	beq.n	8009eb2 <osSemaphoreNew+0xfc>
          name = attr->name;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	617b      	str	r3, [r7, #20]
 8009eb0:	e001      	b.n	8009eb6 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8009eb6:	6979      	ldr	r1, [r7, #20]
 8009eb8:	69f8      	ldr	r0, [r7, #28]
 8009eba:	f000 fe57 	bl	800ab6c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8009ebe:	69fb      	ldr	r3, [r7, #28]
}
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	3720      	adds	r7, #32
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	bd80      	pop	{r7, pc}

08009ec8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009ec8:	b480      	push	{r7}
 8009eca:	b085      	sub	sp, #20
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	60f8      	str	r0, [r7, #12]
 8009ed0:	60b9      	str	r1, [r7, #8]
 8009ed2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	4a07      	ldr	r2, [pc, #28]	@ (8009ef4 <vApplicationGetIdleTaskMemory+0x2c>)
 8009ed8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009eda:	68bb      	ldr	r3, [r7, #8]
 8009edc:	4a06      	ldr	r2, [pc, #24]	@ (8009ef8 <vApplicationGetIdleTaskMemory+0x30>)
 8009ede:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	2280      	movs	r2, #128	@ 0x80
 8009ee4:	601a      	str	r2, [r3, #0]
}
 8009ee6:	bf00      	nop
 8009ee8:	3714      	adds	r7, #20
 8009eea:	46bd      	mov	sp, r7
 8009eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef0:	4770      	bx	lr
 8009ef2:	bf00      	nop
 8009ef4:	20000804 	.word	0x20000804
 8009ef8:	200008ac 	.word	0x200008ac

08009efc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009efc:	b480      	push	{r7}
 8009efe:	b085      	sub	sp, #20
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	60f8      	str	r0, [r7, #12]
 8009f04:	60b9      	str	r1, [r7, #8]
 8009f06:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	4a07      	ldr	r2, [pc, #28]	@ (8009f28 <vApplicationGetTimerTaskMemory+0x2c>)
 8009f0c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009f0e:	68bb      	ldr	r3, [r7, #8]
 8009f10:	4a06      	ldr	r2, [pc, #24]	@ (8009f2c <vApplicationGetTimerTaskMemory+0x30>)
 8009f12:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009f1a:	601a      	str	r2, [r3, #0]
}
 8009f1c:	bf00      	nop
 8009f1e:	3714      	adds	r7, #20
 8009f20:	46bd      	mov	sp, r7
 8009f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f26:	4770      	bx	lr
 8009f28:	20000aac 	.word	0x20000aac
 8009f2c:	20000b54 	.word	0x20000b54

08009f30 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009f30:	b480      	push	{r7}
 8009f32:	b083      	sub	sp, #12
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	f103 0208 	add.w	r2, r3, #8
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	f04f 32ff 	mov.w	r2, #4294967295
 8009f48:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	f103 0208 	add.w	r2, r3, #8
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	f103 0208 	add.w	r2, r3, #8
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	2200      	movs	r2, #0
 8009f62:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009f64:	bf00      	nop
 8009f66:	370c      	adds	r7, #12
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6e:	4770      	bx	lr

08009f70 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009f70:	b480      	push	{r7}
 8009f72:	b083      	sub	sp, #12
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009f7e:	bf00      	nop
 8009f80:	370c      	adds	r7, #12
 8009f82:	46bd      	mov	sp, r7
 8009f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f88:	4770      	bx	lr

08009f8a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009f8a:	b480      	push	{r7}
 8009f8c:	b085      	sub	sp, #20
 8009f8e:	af00      	add	r7, sp, #0
 8009f90:	6078      	str	r0, [r7, #4]
 8009f92:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	685b      	ldr	r3, [r3, #4]
 8009f98:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009f9a:	683b      	ldr	r3, [r7, #0]
 8009f9c:	68fa      	ldr	r2, [r7, #12]
 8009f9e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	689a      	ldr	r2, [r3, #8]
 8009fa4:	683b      	ldr	r3, [r7, #0]
 8009fa6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	689b      	ldr	r3, [r3, #8]
 8009fac:	683a      	ldr	r2, [r7, #0]
 8009fae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	683a      	ldr	r2, [r7, #0]
 8009fb4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009fb6:	683b      	ldr	r3, [r7, #0]
 8009fb8:	687a      	ldr	r2, [r7, #4]
 8009fba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	1c5a      	adds	r2, r3, #1
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	601a      	str	r2, [r3, #0]
}
 8009fc6:	bf00      	nop
 8009fc8:	3714      	adds	r7, #20
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd0:	4770      	bx	lr

08009fd2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009fd2:	b480      	push	{r7}
 8009fd4:	b085      	sub	sp, #20
 8009fd6:	af00      	add	r7, sp, #0
 8009fd8:	6078      	str	r0, [r7, #4]
 8009fda:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009fdc:	683b      	ldr	r3, [r7, #0]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009fe2:	68bb      	ldr	r3, [r7, #8]
 8009fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fe8:	d103      	bne.n	8009ff2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	691b      	ldr	r3, [r3, #16]
 8009fee:	60fb      	str	r3, [r7, #12]
 8009ff0:	e00c      	b.n	800a00c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	3308      	adds	r3, #8
 8009ff6:	60fb      	str	r3, [r7, #12]
 8009ff8:	e002      	b.n	800a000 <vListInsert+0x2e>
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	685b      	ldr	r3, [r3, #4]
 8009ffe:	60fb      	str	r3, [r7, #12]
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	685b      	ldr	r3, [r3, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	68ba      	ldr	r2, [r7, #8]
 800a008:	429a      	cmp	r2, r3
 800a00a:	d2f6      	bcs.n	8009ffa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	685a      	ldr	r2, [r3, #4]
 800a010:	683b      	ldr	r3, [r7, #0]
 800a012:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a014:	683b      	ldr	r3, [r7, #0]
 800a016:	685b      	ldr	r3, [r3, #4]
 800a018:	683a      	ldr	r2, [r7, #0]
 800a01a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a01c:	683b      	ldr	r3, [r7, #0]
 800a01e:	68fa      	ldr	r2, [r7, #12]
 800a020:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	683a      	ldr	r2, [r7, #0]
 800a026:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a028:	683b      	ldr	r3, [r7, #0]
 800a02a:	687a      	ldr	r2, [r7, #4]
 800a02c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	1c5a      	adds	r2, r3, #1
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	601a      	str	r2, [r3, #0]
}
 800a038:	bf00      	nop
 800a03a:	3714      	adds	r7, #20
 800a03c:	46bd      	mov	sp, r7
 800a03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a042:	4770      	bx	lr

0800a044 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a044:	b480      	push	{r7}
 800a046:	b085      	sub	sp, #20
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	691b      	ldr	r3, [r3, #16]
 800a050:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	685b      	ldr	r3, [r3, #4]
 800a056:	687a      	ldr	r2, [r7, #4]
 800a058:	6892      	ldr	r2, [r2, #8]
 800a05a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	689b      	ldr	r3, [r3, #8]
 800a060:	687a      	ldr	r2, [r7, #4]
 800a062:	6852      	ldr	r2, [r2, #4]
 800a064:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	685b      	ldr	r3, [r3, #4]
 800a06a:	687a      	ldr	r2, [r7, #4]
 800a06c:	429a      	cmp	r2, r3
 800a06e:	d103      	bne.n	800a078 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	689a      	ldr	r2, [r3, #8]
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	2200      	movs	r2, #0
 800a07c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	1e5a      	subs	r2, r3, #1
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	681b      	ldr	r3, [r3, #0]
}
 800a08c:	4618      	mov	r0, r3
 800a08e:	3714      	adds	r7, #20
 800a090:	46bd      	mov	sp, r7
 800a092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a096:	4770      	bx	lr

0800a098 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	b084      	sub	sp, #16
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
 800a0a0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d10b      	bne.n	800a0c4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a0ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0b0:	f383 8811 	msr	BASEPRI, r3
 800a0b4:	f3bf 8f6f 	isb	sy
 800a0b8:	f3bf 8f4f 	dsb	sy
 800a0bc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a0be:	bf00      	nop
 800a0c0:	bf00      	nop
 800a0c2:	e7fd      	b.n	800a0c0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a0c4:	f002 f9d8 	bl	800c478 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	681a      	ldr	r2, [r3, #0]
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a0d0:	68f9      	ldr	r1, [r7, #12]
 800a0d2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a0d4:	fb01 f303 	mul.w	r3, r1, r3
 800a0d8:	441a      	add	r2, r3
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	2200      	movs	r2, #0
 800a0e2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	681a      	ldr	r2, [r3, #0]
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	681a      	ldr	r2, [r3, #0]
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a0f4:	3b01      	subs	r3, #1
 800a0f6:	68f9      	ldr	r1, [r7, #12]
 800a0f8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a0fa:	fb01 f303 	mul.w	r3, r1, r3
 800a0fe:	441a      	add	r2, r3
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	22ff      	movs	r2, #255	@ 0xff
 800a108:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	22ff      	movs	r2, #255	@ 0xff
 800a110:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800a114:	683b      	ldr	r3, [r7, #0]
 800a116:	2b00      	cmp	r3, #0
 800a118:	d114      	bne.n	800a144 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	691b      	ldr	r3, [r3, #16]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d01a      	beq.n	800a158 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	3310      	adds	r3, #16
 800a126:	4618      	mov	r0, r3
 800a128:	f001 fa70 	bl	800b60c <xTaskRemoveFromEventList>
 800a12c:	4603      	mov	r3, r0
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d012      	beq.n	800a158 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a132:	4b0d      	ldr	r3, [pc, #52]	@ (800a168 <xQueueGenericReset+0xd0>)
 800a134:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a138:	601a      	str	r2, [r3, #0]
 800a13a:	f3bf 8f4f 	dsb	sy
 800a13e:	f3bf 8f6f 	isb	sy
 800a142:	e009      	b.n	800a158 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	3310      	adds	r3, #16
 800a148:	4618      	mov	r0, r3
 800a14a:	f7ff fef1 	bl	8009f30 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	3324      	adds	r3, #36	@ 0x24
 800a152:	4618      	mov	r0, r3
 800a154:	f7ff feec 	bl	8009f30 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a158:	f002 f9c0 	bl	800c4dc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a15c:	2301      	movs	r3, #1
}
 800a15e:	4618      	mov	r0, r3
 800a160:	3710      	adds	r7, #16
 800a162:	46bd      	mov	sp, r7
 800a164:	bd80      	pop	{r7, pc}
 800a166:	bf00      	nop
 800a168:	e000ed04 	.word	0xe000ed04

0800a16c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a16c:	b580      	push	{r7, lr}
 800a16e:	b08e      	sub	sp, #56	@ 0x38
 800a170:	af02      	add	r7, sp, #8
 800a172:	60f8      	str	r0, [r7, #12]
 800a174:	60b9      	str	r1, [r7, #8]
 800a176:	607a      	str	r2, [r7, #4]
 800a178:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d10b      	bne.n	800a198 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800a180:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a184:	f383 8811 	msr	BASEPRI, r3
 800a188:	f3bf 8f6f 	isb	sy
 800a18c:	f3bf 8f4f 	dsb	sy
 800a190:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a192:	bf00      	nop
 800a194:	bf00      	nop
 800a196:	e7fd      	b.n	800a194 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d10b      	bne.n	800a1b6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800a19e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1a2:	f383 8811 	msr	BASEPRI, r3
 800a1a6:	f3bf 8f6f 	isb	sy
 800a1aa:	f3bf 8f4f 	dsb	sy
 800a1ae:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a1b0:	bf00      	nop
 800a1b2:	bf00      	nop
 800a1b4:	e7fd      	b.n	800a1b2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d002      	beq.n	800a1c2 <xQueueGenericCreateStatic+0x56>
 800a1bc:	68bb      	ldr	r3, [r7, #8]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d001      	beq.n	800a1c6 <xQueueGenericCreateStatic+0x5a>
 800a1c2:	2301      	movs	r3, #1
 800a1c4:	e000      	b.n	800a1c8 <xQueueGenericCreateStatic+0x5c>
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d10b      	bne.n	800a1e4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800a1cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1d0:	f383 8811 	msr	BASEPRI, r3
 800a1d4:	f3bf 8f6f 	isb	sy
 800a1d8:	f3bf 8f4f 	dsb	sy
 800a1dc:	623b      	str	r3, [r7, #32]
}
 800a1de:	bf00      	nop
 800a1e0:	bf00      	nop
 800a1e2:	e7fd      	b.n	800a1e0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d102      	bne.n	800a1f0 <xQueueGenericCreateStatic+0x84>
 800a1ea:	68bb      	ldr	r3, [r7, #8]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d101      	bne.n	800a1f4 <xQueueGenericCreateStatic+0x88>
 800a1f0:	2301      	movs	r3, #1
 800a1f2:	e000      	b.n	800a1f6 <xQueueGenericCreateStatic+0x8a>
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d10b      	bne.n	800a212 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800a1fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1fe:	f383 8811 	msr	BASEPRI, r3
 800a202:	f3bf 8f6f 	isb	sy
 800a206:	f3bf 8f4f 	dsb	sy
 800a20a:	61fb      	str	r3, [r7, #28]
}
 800a20c:	bf00      	nop
 800a20e:	bf00      	nop
 800a210:	e7fd      	b.n	800a20e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a212:	2350      	movs	r3, #80	@ 0x50
 800a214:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a216:	697b      	ldr	r3, [r7, #20]
 800a218:	2b50      	cmp	r3, #80	@ 0x50
 800a21a:	d00b      	beq.n	800a234 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800a21c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a220:	f383 8811 	msr	BASEPRI, r3
 800a224:	f3bf 8f6f 	isb	sy
 800a228:	f3bf 8f4f 	dsb	sy
 800a22c:	61bb      	str	r3, [r7, #24]
}
 800a22e:	bf00      	nop
 800a230:	bf00      	nop
 800a232:	e7fd      	b.n	800a230 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a234:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a236:	683b      	ldr	r3, [r7, #0]
 800a238:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800a23a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d00d      	beq.n	800a25c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a240:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a242:	2201      	movs	r2, #1
 800a244:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a248:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800a24c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a24e:	9300      	str	r3, [sp, #0]
 800a250:	4613      	mov	r3, r2
 800a252:	687a      	ldr	r2, [r7, #4]
 800a254:	68b9      	ldr	r1, [r7, #8]
 800a256:	68f8      	ldr	r0, [r7, #12]
 800a258:	f000 f840 	bl	800a2dc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a25c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800a25e:	4618      	mov	r0, r3
 800a260:	3730      	adds	r7, #48	@ 0x30
 800a262:	46bd      	mov	sp, r7
 800a264:	bd80      	pop	{r7, pc}

0800a266 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a266:	b580      	push	{r7, lr}
 800a268:	b08a      	sub	sp, #40	@ 0x28
 800a26a:	af02      	add	r7, sp, #8
 800a26c:	60f8      	str	r0, [r7, #12]
 800a26e:	60b9      	str	r1, [r7, #8]
 800a270:	4613      	mov	r3, r2
 800a272:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d10b      	bne.n	800a292 <xQueueGenericCreate+0x2c>
	__asm volatile
 800a27a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a27e:	f383 8811 	msr	BASEPRI, r3
 800a282:	f3bf 8f6f 	isb	sy
 800a286:	f3bf 8f4f 	dsb	sy
 800a28a:	613b      	str	r3, [r7, #16]
}
 800a28c:	bf00      	nop
 800a28e:	bf00      	nop
 800a290:	e7fd      	b.n	800a28e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	68ba      	ldr	r2, [r7, #8]
 800a296:	fb02 f303 	mul.w	r3, r2, r3
 800a29a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a29c:	69fb      	ldr	r3, [r7, #28]
 800a29e:	3350      	adds	r3, #80	@ 0x50
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	f002 fa0b 	bl	800c6bc <pvPortMalloc>
 800a2a6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a2a8:	69bb      	ldr	r3, [r7, #24]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d011      	beq.n	800a2d2 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a2ae:	69bb      	ldr	r3, [r7, #24]
 800a2b0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a2b2:	697b      	ldr	r3, [r7, #20]
 800a2b4:	3350      	adds	r3, #80	@ 0x50
 800a2b6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a2b8:	69bb      	ldr	r3, [r7, #24]
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a2c0:	79fa      	ldrb	r2, [r7, #7]
 800a2c2:	69bb      	ldr	r3, [r7, #24]
 800a2c4:	9300      	str	r3, [sp, #0]
 800a2c6:	4613      	mov	r3, r2
 800a2c8:	697a      	ldr	r2, [r7, #20]
 800a2ca:	68b9      	ldr	r1, [r7, #8]
 800a2cc:	68f8      	ldr	r0, [r7, #12]
 800a2ce:	f000 f805 	bl	800a2dc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a2d2:	69bb      	ldr	r3, [r7, #24]
	}
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	3720      	adds	r7, #32
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	bd80      	pop	{r7, pc}

0800a2dc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b084      	sub	sp, #16
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	60f8      	str	r0, [r7, #12]
 800a2e4:	60b9      	str	r1, [r7, #8]
 800a2e6:	607a      	str	r2, [r7, #4]
 800a2e8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a2ea:	68bb      	ldr	r3, [r7, #8]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d103      	bne.n	800a2f8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a2f0:	69bb      	ldr	r3, [r7, #24]
 800a2f2:	69ba      	ldr	r2, [r7, #24]
 800a2f4:	601a      	str	r2, [r3, #0]
 800a2f6:	e002      	b.n	800a2fe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a2f8:	69bb      	ldr	r3, [r7, #24]
 800a2fa:	687a      	ldr	r2, [r7, #4]
 800a2fc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a2fe:	69bb      	ldr	r3, [r7, #24]
 800a300:	68fa      	ldr	r2, [r7, #12]
 800a302:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a304:	69bb      	ldr	r3, [r7, #24]
 800a306:	68ba      	ldr	r2, [r7, #8]
 800a308:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a30a:	2101      	movs	r1, #1
 800a30c:	69b8      	ldr	r0, [r7, #24]
 800a30e:	f7ff fec3 	bl	800a098 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a312:	69bb      	ldr	r3, [r7, #24]
 800a314:	78fa      	ldrb	r2, [r7, #3]
 800a316:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a31a:	bf00      	nop
 800a31c:	3710      	adds	r7, #16
 800a31e:	46bd      	mov	sp, r7
 800a320:	bd80      	pop	{r7, pc}

0800a322 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800a322:	b580      	push	{r7, lr}
 800a324:	b08a      	sub	sp, #40	@ 0x28
 800a326:	af02      	add	r7, sp, #8
 800a328:	60f8      	str	r0, [r7, #12]
 800a32a:	60b9      	str	r1, [r7, #8]
 800a32c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	2b00      	cmp	r3, #0
 800a332:	d10b      	bne.n	800a34c <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 800a334:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a338:	f383 8811 	msr	BASEPRI, r3
 800a33c:	f3bf 8f6f 	isb	sy
 800a340:	f3bf 8f4f 	dsb	sy
 800a344:	61bb      	str	r3, [r7, #24]
}
 800a346:	bf00      	nop
 800a348:	bf00      	nop
 800a34a:	e7fd      	b.n	800a348 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a34c:	68ba      	ldr	r2, [r7, #8]
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	429a      	cmp	r2, r3
 800a352:	d90b      	bls.n	800a36c <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 800a354:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a358:	f383 8811 	msr	BASEPRI, r3
 800a35c:	f3bf 8f6f 	isb	sy
 800a360:	f3bf 8f4f 	dsb	sy
 800a364:	617b      	str	r3, [r7, #20]
}
 800a366:	bf00      	nop
 800a368:	bf00      	nop
 800a36a:	e7fd      	b.n	800a368 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a36c:	2302      	movs	r3, #2
 800a36e:	9300      	str	r3, [sp, #0]
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	2200      	movs	r2, #0
 800a374:	2100      	movs	r1, #0
 800a376:	68f8      	ldr	r0, [r7, #12]
 800a378:	f7ff fef8 	bl	800a16c <xQueueGenericCreateStatic>
 800a37c:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800a37e:	69fb      	ldr	r3, [r7, #28]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d002      	beq.n	800a38a <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a384:	69fb      	ldr	r3, [r7, #28]
 800a386:	68ba      	ldr	r2, [r7, #8]
 800a388:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a38a:	69fb      	ldr	r3, [r7, #28]
	}
 800a38c:	4618      	mov	r0, r3
 800a38e:	3720      	adds	r7, #32
 800a390:	46bd      	mov	sp, r7
 800a392:	bd80      	pop	{r7, pc}

0800a394 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800a394:	b580      	push	{r7, lr}
 800a396:	b086      	sub	sp, #24
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
 800a39c:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d10b      	bne.n	800a3bc <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800a3a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3a8:	f383 8811 	msr	BASEPRI, r3
 800a3ac:	f3bf 8f6f 	isb	sy
 800a3b0:	f3bf 8f4f 	dsb	sy
 800a3b4:	613b      	str	r3, [r7, #16]
}
 800a3b6:	bf00      	nop
 800a3b8:	bf00      	nop
 800a3ba:	e7fd      	b.n	800a3b8 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a3bc:	683a      	ldr	r2, [r7, #0]
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	429a      	cmp	r2, r3
 800a3c2:	d90b      	bls.n	800a3dc <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800a3c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3c8:	f383 8811 	msr	BASEPRI, r3
 800a3cc:	f3bf 8f6f 	isb	sy
 800a3d0:	f3bf 8f4f 	dsb	sy
 800a3d4:	60fb      	str	r3, [r7, #12]
}
 800a3d6:	bf00      	nop
 800a3d8:	bf00      	nop
 800a3da:	e7fd      	b.n	800a3d8 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a3dc:	2202      	movs	r2, #2
 800a3de:	2100      	movs	r1, #0
 800a3e0:	6878      	ldr	r0, [r7, #4]
 800a3e2:	f7ff ff40 	bl	800a266 <xQueueGenericCreate>
 800a3e6:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800a3e8:	697b      	ldr	r3, [r7, #20]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d002      	beq.n	800a3f4 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a3ee:	697b      	ldr	r3, [r7, #20]
 800a3f0:	683a      	ldr	r2, [r7, #0]
 800a3f2:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a3f4:	697b      	ldr	r3, [r7, #20]
	}
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	3718      	adds	r7, #24
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	bd80      	pop	{r7, pc}
	...

0800a400 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a400:	b580      	push	{r7, lr}
 800a402:	b08e      	sub	sp, #56	@ 0x38
 800a404:	af00      	add	r7, sp, #0
 800a406:	60f8      	str	r0, [r7, #12]
 800a408:	60b9      	str	r1, [r7, #8]
 800a40a:	607a      	str	r2, [r7, #4]
 800a40c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a40e:	2300      	movs	r3, #0
 800a410:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d10b      	bne.n	800a434 <xQueueGenericSend+0x34>
	__asm volatile
 800a41c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a420:	f383 8811 	msr	BASEPRI, r3
 800a424:	f3bf 8f6f 	isb	sy
 800a428:	f3bf 8f4f 	dsb	sy
 800a42c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a42e:	bf00      	nop
 800a430:	bf00      	nop
 800a432:	e7fd      	b.n	800a430 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a434:	68bb      	ldr	r3, [r7, #8]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d103      	bne.n	800a442 <xQueueGenericSend+0x42>
 800a43a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a43c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d101      	bne.n	800a446 <xQueueGenericSend+0x46>
 800a442:	2301      	movs	r3, #1
 800a444:	e000      	b.n	800a448 <xQueueGenericSend+0x48>
 800a446:	2300      	movs	r3, #0
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d10b      	bne.n	800a464 <xQueueGenericSend+0x64>
	__asm volatile
 800a44c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a450:	f383 8811 	msr	BASEPRI, r3
 800a454:	f3bf 8f6f 	isb	sy
 800a458:	f3bf 8f4f 	dsb	sy
 800a45c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a45e:	bf00      	nop
 800a460:	bf00      	nop
 800a462:	e7fd      	b.n	800a460 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a464:	683b      	ldr	r3, [r7, #0]
 800a466:	2b02      	cmp	r3, #2
 800a468:	d103      	bne.n	800a472 <xQueueGenericSend+0x72>
 800a46a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a46c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a46e:	2b01      	cmp	r3, #1
 800a470:	d101      	bne.n	800a476 <xQueueGenericSend+0x76>
 800a472:	2301      	movs	r3, #1
 800a474:	e000      	b.n	800a478 <xQueueGenericSend+0x78>
 800a476:	2300      	movs	r3, #0
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d10b      	bne.n	800a494 <xQueueGenericSend+0x94>
	__asm volatile
 800a47c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a480:	f383 8811 	msr	BASEPRI, r3
 800a484:	f3bf 8f6f 	isb	sy
 800a488:	f3bf 8f4f 	dsb	sy
 800a48c:	623b      	str	r3, [r7, #32]
}
 800a48e:	bf00      	nop
 800a490:	bf00      	nop
 800a492:	e7fd      	b.n	800a490 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a494:	f001 fa80 	bl	800b998 <xTaskGetSchedulerState>
 800a498:	4603      	mov	r3, r0
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d102      	bne.n	800a4a4 <xQueueGenericSend+0xa4>
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d101      	bne.n	800a4a8 <xQueueGenericSend+0xa8>
 800a4a4:	2301      	movs	r3, #1
 800a4a6:	e000      	b.n	800a4aa <xQueueGenericSend+0xaa>
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d10b      	bne.n	800a4c6 <xQueueGenericSend+0xc6>
	__asm volatile
 800a4ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4b2:	f383 8811 	msr	BASEPRI, r3
 800a4b6:	f3bf 8f6f 	isb	sy
 800a4ba:	f3bf 8f4f 	dsb	sy
 800a4be:	61fb      	str	r3, [r7, #28]
}
 800a4c0:	bf00      	nop
 800a4c2:	bf00      	nop
 800a4c4:	e7fd      	b.n	800a4c2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a4c6:	f001 ffd7 	bl	800c478 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a4ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a4ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a4d2:	429a      	cmp	r2, r3
 800a4d4:	d302      	bcc.n	800a4dc <xQueueGenericSend+0xdc>
 800a4d6:	683b      	ldr	r3, [r7, #0]
 800a4d8:	2b02      	cmp	r3, #2
 800a4da:	d129      	bne.n	800a530 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a4dc:	683a      	ldr	r2, [r7, #0]
 800a4de:	68b9      	ldr	r1, [r7, #8]
 800a4e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a4e2:	f000 fa33 	bl	800a94c <prvCopyDataToQueue>
 800a4e6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a4e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d010      	beq.n	800a512 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a4f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4f2:	3324      	adds	r3, #36	@ 0x24
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	f001 f889 	bl	800b60c <xTaskRemoveFromEventList>
 800a4fa:	4603      	mov	r3, r0
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d013      	beq.n	800a528 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a500:	4b3f      	ldr	r3, [pc, #252]	@ (800a600 <xQueueGenericSend+0x200>)
 800a502:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a506:	601a      	str	r2, [r3, #0]
 800a508:	f3bf 8f4f 	dsb	sy
 800a50c:	f3bf 8f6f 	isb	sy
 800a510:	e00a      	b.n	800a528 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a512:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a514:	2b00      	cmp	r3, #0
 800a516:	d007      	beq.n	800a528 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a518:	4b39      	ldr	r3, [pc, #228]	@ (800a600 <xQueueGenericSend+0x200>)
 800a51a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a51e:	601a      	str	r2, [r3, #0]
 800a520:	f3bf 8f4f 	dsb	sy
 800a524:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a528:	f001 ffd8 	bl	800c4dc <vPortExitCritical>
				return pdPASS;
 800a52c:	2301      	movs	r3, #1
 800a52e:	e063      	b.n	800a5f8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d103      	bne.n	800a53e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a536:	f001 ffd1 	bl	800c4dc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a53a:	2300      	movs	r3, #0
 800a53c:	e05c      	b.n	800a5f8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a53e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a540:	2b00      	cmp	r3, #0
 800a542:	d106      	bne.n	800a552 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a544:	f107 0314 	add.w	r3, r7, #20
 800a548:	4618      	mov	r0, r3
 800a54a:	f001 f8c3 	bl	800b6d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a54e:	2301      	movs	r3, #1
 800a550:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a552:	f001 ffc3 	bl	800c4dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a556:	f000 fdf5 	bl	800b144 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a55a:	f001 ff8d 	bl	800c478 <vPortEnterCritical>
 800a55e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a560:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a564:	b25b      	sxtb	r3, r3
 800a566:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a56a:	d103      	bne.n	800a574 <xQueueGenericSend+0x174>
 800a56c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a56e:	2200      	movs	r2, #0
 800a570:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a576:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a57a:	b25b      	sxtb	r3, r3
 800a57c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a580:	d103      	bne.n	800a58a <xQueueGenericSend+0x18a>
 800a582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a584:	2200      	movs	r2, #0
 800a586:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a58a:	f001 ffa7 	bl	800c4dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a58e:	1d3a      	adds	r2, r7, #4
 800a590:	f107 0314 	add.w	r3, r7, #20
 800a594:	4611      	mov	r1, r2
 800a596:	4618      	mov	r0, r3
 800a598:	f001 f8b2 	bl	800b700 <xTaskCheckForTimeOut>
 800a59c:	4603      	mov	r3, r0
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d124      	bne.n	800a5ec <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a5a2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a5a4:	f000 faca 	bl	800ab3c <prvIsQueueFull>
 800a5a8:	4603      	mov	r3, r0
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d018      	beq.n	800a5e0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a5ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5b0:	3310      	adds	r3, #16
 800a5b2:	687a      	ldr	r2, [r7, #4]
 800a5b4:	4611      	mov	r1, r2
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	f000 ffd6 	bl	800b568 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a5bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a5be:	f000 fa55 	bl	800aa6c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a5c2:	f000 fdcd 	bl	800b160 <xTaskResumeAll>
 800a5c6:	4603      	mov	r3, r0
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	f47f af7c 	bne.w	800a4c6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800a5ce:	4b0c      	ldr	r3, [pc, #48]	@ (800a600 <xQueueGenericSend+0x200>)
 800a5d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a5d4:	601a      	str	r2, [r3, #0]
 800a5d6:	f3bf 8f4f 	dsb	sy
 800a5da:	f3bf 8f6f 	isb	sy
 800a5de:	e772      	b.n	800a4c6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a5e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a5e2:	f000 fa43 	bl	800aa6c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a5e6:	f000 fdbb 	bl	800b160 <xTaskResumeAll>
 800a5ea:	e76c      	b.n	800a4c6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a5ec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a5ee:	f000 fa3d 	bl	800aa6c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a5f2:	f000 fdb5 	bl	800b160 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a5f6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	3738      	adds	r7, #56	@ 0x38
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	bd80      	pop	{r7, pc}
 800a600:	e000ed04 	.word	0xe000ed04

0800a604 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a604:	b580      	push	{r7, lr}
 800a606:	b090      	sub	sp, #64	@ 0x40
 800a608:	af00      	add	r7, sp, #0
 800a60a:	60f8      	str	r0, [r7, #12]
 800a60c:	60b9      	str	r1, [r7, #8]
 800a60e:	607a      	str	r2, [r7, #4]
 800a610:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800a616:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d10b      	bne.n	800a634 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800a61c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a620:	f383 8811 	msr	BASEPRI, r3
 800a624:	f3bf 8f6f 	isb	sy
 800a628:	f3bf 8f4f 	dsb	sy
 800a62c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a62e:	bf00      	nop
 800a630:	bf00      	nop
 800a632:	e7fd      	b.n	800a630 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a634:	68bb      	ldr	r3, [r7, #8]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d103      	bne.n	800a642 <xQueueGenericSendFromISR+0x3e>
 800a63a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a63c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d101      	bne.n	800a646 <xQueueGenericSendFromISR+0x42>
 800a642:	2301      	movs	r3, #1
 800a644:	e000      	b.n	800a648 <xQueueGenericSendFromISR+0x44>
 800a646:	2300      	movs	r3, #0
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d10b      	bne.n	800a664 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800a64c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a650:	f383 8811 	msr	BASEPRI, r3
 800a654:	f3bf 8f6f 	isb	sy
 800a658:	f3bf 8f4f 	dsb	sy
 800a65c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a65e:	bf00      	nop
 800a660:	bf00      	nop
 800a662:	e7fd      	b.n	800a660 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a664:	683b      	ldr	r3, [r7, #0]
 800a666:	2b02      	cmp	r3, #2
 800a668:	d103      	bne.n	800a672 <xQueueGenericSendFromISR+0x6e>
 800a66a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a66c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a66e:	2b01      	cmp	r3, #1
 800a670:	d101      	bne.n	800a676 <xQueueGenericSendFromISR+0x72>
 800a672:	2301      	movs	r3, #1
 800a674:	e000      	b.n	800a678 <xQueueGenericSendFromISR+0x74>
 800a676:	2300      	movs	r3, #0
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d10b      	bne.n	800a694 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800a67c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a680:	f383 8811 	msr	BASEPRI, r3
 800a684:	f3bf 8f6f 	isb	sy
 800a688:	f3bf 8f4f 	dsb	sy
 800a68c:	623b      	str	r3, [r7, #32]
}
 800a68e:	bf00      	nop
 800a690:	bf00      	nop
 800a692:	e7fd      	b.n	800a690 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a694:	f001 ffd0 	bl	800c638 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a698:	f3ef 8211 	mrs	r2, BASEPRI
 800a69c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6a0:	f383 8811 	msr	BASEPRI, r3
 800a6a4:	f3bf 8f6f 	isb	sy
 800a6a8:	f3bf 8f4f 	dsb	sy
 800a6ac:	61fa      	str	r2, [r7, #28]
 800a6ae:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a6b0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a6b2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a6b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6b6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a6b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a6bc:	429a      	cmp	r2, r3
 800a6be:	d302      	bcc.n	800a6c6 <xQueueGenericSendFromISR+0xc2>
 800a6c0:	683b      	ldr	r3, [r7, #0]
 800a6c2:	2b02      	cmp	r3, #2
 800a6c4:	d12f      	bne.n	800a726 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a6c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6c8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a6cc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a6d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a6d6:	683a      	ldr	r2, [r7, #0]
 800a6d8:	68b9      	ldr	r1, [r7, #8]
 800a6da:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a6dc:	f000 f936 	bl	800a94c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a6e0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800a6e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6e8:	d112      	bne.n	800a710 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a6ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d016      	beq.n	800a720 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a6f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6f4:	3324      	adds	r3, #36	@ 0x24
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	f000 ff88 	bl	800b60c <xTaskRemoveFromEventList>
 800a6fc:	4603      	mov	r3, r0
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d00e      	beq.n	800a720 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	2b00      	cmp	r3, #0
 800a706:	d00b      	beq.n	800a720 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	2201      	movs	r2, #1
 800a70c:	601a      	str	r2, [r3, #0]
 800a70e:	e007      	b.n	800a720 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a710:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800a714:	3301      	adds	r3, #1
 800a716:	b2db      	uxtb	r3, r3
 800a718:	b25a      	sxtb	r2, r3
 800a71a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a71c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a720:	2301      	movs	r3, #1
 800a722:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800a724:	e001      	b.n	800a72a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a726:	2300      	movs	r3, #0
 800a728:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a72a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a72c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a72e:	697b      	ldr	r3, [r7, #20]
 800a730:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a734:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a736:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a738:	4618      	mov	r0, r3
 800a73a:	3740      	adds	r7, #64	@ 0x40
 800a73c:	46bd      	mov	sp, r7
 800a73e:	bd80      	pop	{r7, pc}

0800a740 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a740:	b580      	push	{r7, lr}
 800a742:	b08c      	sub	sp, #48	@ 0x30
 800a744:	af00      	add	r7, sp, #0
 800a746:	60f8      	str	r0, [r7, #12]
 800a748:	60b9      	str	r1, [r7, #8]
 800a74a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a74c:	2300      	movs	r3, #0
 800a74e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a754:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a756:	2b00      	cmp	r3, #0
 800a758:	d10b      	bne.n	800a772 <xQueueReceive+0x32>
	__asm volatile
 800a75a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a75e:	f383 8811 	msr	BASEPRI, r3
 800a762:	f3bf 8f6f 	isb	sy
 800a766:	f3bf 8f4f 	dsb	sy
 800a76a:	623b      	str	r3, [r7, #32]
}
 800a76c:	bf00      	nop
 800a76e:	bf00      	nop
 800a770:	e7fd      	b.n	800a76e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a772:	68bb      	ldr	r3, [r7, #8]
 800a774:	2b00      	cmp	r3, #0
 800a776:	d103      	bne.n	800a780 <xQueueReceive+0x40>
 800a778:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a77a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d101      	bne.n	800a784 <xQueueReceive+0x44>
 800a780:	2301      	movs	r3, #1
 800a782:	e000      	b.n	800a786 <xQueueReceive+0x46>
 800a784:	2300      	movs	r3, #0
 800a786:	2b00      	cmp	r3, #0
 800a788:	d10b      	bne.n	800a7a2 <xQueueReceive+0x62>
	__asm volatile
 800a78a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a78e:	f383 8811 	msr	BASEPRI, r3
 800a792:	f3bf 8f6f 	isb	sy
 800a796:	f3bf 8f4f 	dsb	sy
 800a79a:	61fb      	str	r3, [r7, #28]
}
 800a79c:	bf00      	nop
 800a79e:	bf00      	nop
 800a7a0:	e7fd      	b.n	800a79e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a7a2:	f001 f8f9 	bl	800b998 <xTaskGetSchedulerState>
 800a7a6:	4603      	mov	r3, r0
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d102      	bne.n	800a7b2 <xQueueReceive+0x72>
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d101      	bne.n	800a7b6 <xQueueReceive+0x76>
 800a7b2:	2301      	movs	r3, #1
 800a7b4:	e000      	b.n	800a7b8 <xQueueReceive+0x78>
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d10b      	bne.n	800a7d4 <xQueueReceive+0x94>
	__asm volatile
 800a7bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7c0:	f383 8811 	msr	BASEPRI, r3
 800a7c4:	f3bf 8f6f 	isb	sy
 800a7c8:	f3bf 8f4f 	dsb	sy
 800a7cc:	61bb      	str	r3, [r7, #24]
}
 800a7ce:	bf00      	nop
 800a7d0:	bf00      	nop
 800a7d2:	e7fd      	b.n	800a7d0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a7d4:	f001 fe50 	bl	800c478 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a7d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7dc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a7de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d01f      	beq.n	800a824 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a7e4:	68b9      	ldr	r1, [r7, #8]
 800a7e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a7e8:	f000 f91a 	bl	800aa20 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a7ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7ee:	1e5a      	subs	r2, r3, #1
 800a7f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7f2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a7f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7f6:	691b      	ldr	r3, [r3, #16]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d00f      	beq.n	800a81c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a7fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7fe:	3310      	adds	r3, #16
 800a800:	4618      	mov	r0, r3
 800a802:	f000 ff03 	bl	800b60c <xTaskRemoveFromEventList>
 800a806:	4603      	mov	r3, r0
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d007      	beq.n	800a81c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a80c:	4b3c      	ldr	r3, [pc, #240]	@ (800a900 <xQueueReceive+0x1c0>)
 800a80e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a812:	601a      	str	r2, [r3, #0]
 800a814:	f3bf 8f4f 	dsb	sy
 800a818:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a81c:	f001 fe5e 	bl	800c4dc <vPortExitCritical>
				return pdPASS;
 800a820:	2301      	movs	r3, #1
 800a822:	e069      	b.n	800a8f8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	2b00      	cmp	r3, #0
 800a828:	d103      	bne.n	800a832 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a82a:	f001 fe57 	bl	800c4dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a82e:	2300      	movs	r3, #0
 800a830:	e062      	b.n	800a8f8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a832:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a834:	2b00      	cmp	r3, #0
 800a836:	d106      	bne.n	800a846 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a838:	f107 0310 	add.w	r3, r7, #16
 800a83c:	4618      	mov	r0, r3
 800a83e:	f000 ff49 	bl	800b6d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a842:	2301      	movs	r3, #1
 800a844:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a846:	f001 fe49 	bl	800c4dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a84a:	f000 fc7b 	bl	800b144 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a84e:	f001 fe13 	bl	800c478 <vPortEnterCritical>
 800a852:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a854:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a858:	b25b      	sxtb	r3, r3
 800a85a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a85e:	d103      	bne.n	800a868 <xQueueReceive+0x128>
 800a860:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a862:	2200      	movs	r2, #0
 800a864:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a868:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a86a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a86e:	b25b      	sxtb	r3, r3
 800a870:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a874:	d103      	bne.n	800a87e <xQueueReceive+0x13e>
 800a876:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a878:	2200      	movs	r2, #0
 800a87a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a87e:	f001 fe2d 	bl	800c4dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a882:	1d3a      	adds	r2, r7, #4
 800a884:	f107 0310 	add.w	r3, r7, #16
 800a888:	4611      	mov	r1, r2
 800a88a:	4618      	mov	r0, r3
 800a88c:	f000 ff38 	bl	800b700 <xTaskCheckForTimeOut>
 800a890:	4603      	mov	r3, r0
 800a892:	2b00      	cmp	r3, #0
 800a894:	d123      	bne.n	800a8de <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a896:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a898:	f000 f93a 	bl	800ab10 <prvIsQueueEmpty>
 800a89c:	4603      	mov	r3, r0
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d017      	beq.n	800a8d2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a8a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8a4:	3324      	adds	r3, #36	@ 0x24
 800a8a6:	687a      	ldr	r2, [r7, #4]
 800a8a8:	4611      	mov	r1, r2
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	f000 fe5c 	bl	800b568 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a8b0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a8b2:	f000 f8db 	bl	800aa6c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a8b6:	f000 fc53 	bl	800b160 <xTaskResumeAll>
 800a8ba:	4603      	mov	r3, r0
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d189      	bne.n	800a7d4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800a8c0:	4b0f      	ldr	r3, [pc, #60]	@ (800a900 <xQueueReceive+0x1c0>)
 800a8c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a8c6:	601a      	str	r2, [r3, #0]
 800a8c8:	f3bf 8f4f 	dsb	sy
 800a8cc:	f3bf 8f6f 	isb	sy
 800a8d0:	e780      	b.n	800a7d4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a8d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a8d4:	f000 f8ca 	bl	800aa6c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a8d8:	f000 fc42 	bl	800b160 <xTaskResumeAll>
 800a8dc:	e77a      	b.n	800a7d4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a8de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a8e0:	f000 f8c4 	bl	800aa6c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a8e4:	f000 fc3c 	bl	800b160 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a8e8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a8ea:	f000 f911 	bl	800ab10 <prvIsQueueEmpty>
 800a8ee:	4603      	mov	r3, r0
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	f43f af6f 	beq.w	800a7d4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a8f6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	3730      	adds	r7, #48	@ 0x30
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	bd80      	pop	{r7, pc}
 800a900:	e000ed04 	.word	0xe000ed04

0800a904 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800a904:	b580      	push	{r7, lr}
 800a906:	b084      	sub	sp, #16
 800a908:	af00      	add	r7, sp, #0
 800a90a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d10b      	bne.n	800a92e <vQueueDelete+0x2a>
	__asm volatile
 800a916:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a91a:	f383 8811 	msr	BASEPRI, r3
 800a91e:	f3bf 8f6f 	isb	sy
 800a922:	f3bf 8f4f 	dsb	sy
 800a926:	60bb      	str	r3, [r7, #8]
}
 800a928:	bf00      	nop
 800a92a:	bf00      	nop
 800a92c:	e7fd      	b.n	800a92a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800a92e:	68f8      	ldr	r0, [r7, #12]
 800a930:	f000 f946 	bl	800abc0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d102      	bne.n	800a944 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800a93e:	68f8      	ldr	r0, [r7, #12]
 800a940:	f001 ff90 	bl	800c864 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800a944:	bf00      	nop
 800a946:	3710      	adds	r7, #16
 800a948:	46bd      	mov	sp, r7
 800a94a:	bd80      	pop	{r7, pc}

0800a94c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a94c:	b580      	push	{r7, lr}
 800a94e:	b086      	sub	sp, #24
 800a950:	af00      	add	r7, sp, #0
 800a952:	60f8      	str	r0, [r7, #12]
 800a954:	60b9      	str	r1, [r7, #8]
 800a956:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a958:	2300      	movs	r3, #0
 800a95a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a960:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a966:	2b00      	cmp	r3, #0
 800a968:	d10d      	bne.n	800a986 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d14d      	bne.n	800aa0e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	689b      	ldr	r3, [r3, #8]
 800a976:	4618      	mov	r0, r3
 800a978:	f001 f82c 	bl	800b9d4 <xTaskPriorityDisinherit>
 800a97c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	2200      	movs	r2, #0
 800a982:	609a      	str	r2, [r3, #8]
 800a984:	e043      	b.n	800aa0e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d119      	bne.n	800a9c0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	6858      	ldr	r0, [r3, #4]
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a994:	461a      	mov	r2, r3
 800a996:	68b9      	ldr	r1, [r7, #8]
 800a998:	f003 f945 	bl	800dc26 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	685a      	ldr	r2, [r3, #4]
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9a4:	441a      	add	r2, r3
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	685a      	ldr	r2, [r3, #4]
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	689b      	ldr	r3, [r3, #8]
 800a9b2:	429a      	cmp	r2, r3
 800a9b4:	d32b      	bcc.n	800aa0e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	681a      	ldr	r2, [r3, #0]
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	605a      	str	r2, [r3, #4]
 800a9be:	e026      	b.n	800aa0e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	68d8      	ldr	r0, [r3, #12]
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9c8:	461a      	mov	r2, r3
 800a9ca:	68b9      	ldr	r1, [r7, #8]
 800a9cc:	f003 f92b 	bl	800dc26 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	68da      	ldr	r2, [r3, #12]
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9d8:	425b      	negs	r3, r3
 800a9da:	441a      	add	r2, r3
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	68da      	ldr	r2, [r3, #12]
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	429a      	cmp	r2, r3
 800a9ea:	d207      	bcs.n	800a9fc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	689a      	ldr	r2, [r3, #8]
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9f4:	425b      	negs	r3, r3
 800a9f6:	441a      	add	r2, r3
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	2b02      	cmp	r3, #2
 800aa00:	d105      	bne.n	800aa0e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aa02:	693b      	ldr	r3, [r7, #16]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d002      	beq.n	800aa0e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800aa08:	693b      	ldr	r3, [r7, #16]
 800aa0a:	3b01      	subs	r3, #1
 800aa0c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800aa0e:	693b      	ldr	r3, [r7, #16]
 800aa10:	1c5a      	adds	r2, r3, #1
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800aa16:	697b      	ldr	r3, [r7, #20]
}
 800aa18:	4618      	mov	r0, r3
 800aa1a:	3718      	adds	r7, #24
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	bd80      	pop	{r7, pc}

0800aa20 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800aa20:	b580      	push	{r7, lr}
 800aa22:	b082      	sub	sp, #8
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	6078      	str	r0, [r7, #4]
 800aa28:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d018      	beq.n	800aa64 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	68da      	ldr	r2, [r3, #12]
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa3a:	441a      	add	r2, r3
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	68da      	ldr	r2, [r3, #12]
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	689b      	ldr	r3, [r3, #8]
 800aa48:	429a      	cmp	r2, r3
 800aa4a:	d303      	bcc.n	800aa54 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681a      	ldr	r2, [r3, #0]
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	68d9      	ldr	r1, [r3, #12]
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa5c:	461a      	mov	r2, r3
 800aa5e:	6838      	ldr	r0, [r7, #0]
 800aa60:	f003 f8e1 	bl	800dc26 <memcpy>
	}
}
 800aa64:	bf00      	nop
 800aa66:	3708      	adds	r7, #8
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	bd80      	pop	{r7, pc}

0800aa6c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800aa6c:	b580      	push	{r7, lr}
 800aa6e:	b084      	sub	sp, #16
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800aa74:	f001 fd00 	bl	800c478 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800aa7e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800aa80:	e011      	b.n	800aaa6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d012      	beq.n	800aab0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	3324      	adds	r3, #36	@ 0x24
 800aa8e:	4618      	mov	r0, r3
 800aa90:	f000 fdbc 	bl	800b60c <xTaskRemoveFromEventList>
 800aa94:	4603      	mov	r3, r0
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d001      	beq.n	800aa9e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800aa9a:	f000 fe95 	bl	800b7c8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800aa9e:	7bfb      	ldrb	r3, [r7, #15]
 800aaa0:	3b01      	subs	r3, #1
 800aaa2:	b2db      	uxtb	r3, r3
 800aaa4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800aaa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	dce9      	bgt.n	800aa82 <prvUnlockQueue+0x16>
 800aaae:	e000      	b.n	800aab2 <prvUnlockQueue+0x46>
					break;
 800aab0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	22ff      	movs	r2, #255	@ 0xff
 800aab6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800aaba:	f001 fd0f 	bl	800c4dc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800aabe:	f001 fcdb 	bl	800c478 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800aac8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800aaca:	e011      	b.n	800aaf0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	691b      	ldr	r3, [r3, #16]
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d012      	beq.n	800aafa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	3310      	adds	r3, #16
 800aad8:	4618      	mov	r0, r3
 800aada:	f000 fd97 	bl	800b60c <xTaskRemoveFromEventList>
 800aade:	4603      	mov	r3, r0
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d001      	beq.n	800aae8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800aae4:	f000 fe70 	bl	800b7c8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800aae8:	7bbb      	ldrb	r3, [r7, #14]
 800aaea:	3b01      	subs	r3, #1
 800aaec:	b2db      	uxtb	r3, r3
 800aaee:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800aaf0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	dce9      	bgt.n	800aacc <prvUnlockQueue+0x60>
 800aaf8:	e000      	b.n	800aafc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800aafa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	22ff      	movs	r2, #255	@ 0xff
 800ab00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800ab04:	f001 fcea 	bl	800c4dc <vPortExitCritical>
}
 800ab08:	bf00      	nop
 800ab0a:	3710      	adds	r7, #16
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	bd80      	pop	{r7, pc}

0800ab10 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ab10:	b580      	push	{r7, lr}
 800ab12:	b084      	sub	sp, #16
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ab18:	f001 fcae 	bl	800c478 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d102      	bne.n	800ab2a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ab24:	2301      	movs	r3, #1
 800ab26:	60fb      	str	r3, [r7, #12]
 800ab28:	e001      	b.n	800ab2e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ab2e:	f001 fcd5 	bl	800c4dc <vPortExitCritical>

	return xReturn;
 800ab32:	68fb      	ldr	r3, [r7, #12]
}
 800ab34:	4618      	mov	r0, r3
 800ab36:	3710      	adds	r7, #16
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	bd80      	pop	{r7, pc}

0800ab3c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	b084      	sub	sp, #16
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ab44:	f001 fc98 	bl	800c478 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab50:	429a      	cmp	r2, r3
 800ab52:	d102      	bne.n	800ab5a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ab54:	2301      	movs	r3, #1
 800ab56:	60fb      	str	r3, [r7, #12]
 800ab58:	e001      	b.n	800ab5e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ab5e:	f001 fcbd 	bl	800c4dc <vPortExitCritical>

	return xReturn;
 800ab62:	68fb      	ldr	r3, [r7, #12]
}
 800ab64:	4618      	mov	r0, r3
 800ab66:	3710      	adds	r7, #16
 800ab68:	46bd      	mov	sp, r7
 800ab6a:	bd80      	pop	{r7, pc}

0800ab6c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ab6c:	b480      	push	{r7}
 800ab6e:	b085      	sub	sp, #20
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	6078      	str	r0, [r7, #4]
 800ab74:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ab76:	2300      	movs	r3, #0
 800ab78:	60fb      	str	r3, [r7, #12]
 800ab7a:	e014      	b.n	800aba6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ab7c:	4a0f      	ldr	r2, [pc, #60]	@ (800abbc <vQueueAddToRegistry+0x50>)
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d10b      	bne.n	800aba0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ab88:	490c      	ldr	r1, [pc, #48]	@ (800abbc <vQueueAddToRegistry+0x50>)
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	683a      	ldr	r2, [r7, #0]
 800ab8e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ab92:	4a0a      	ldr	r2, [pc, #40]	@ (800abbc <vQueueAddToRegistry+0x50>)
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	00db      	lsls	r3, r3, #3
 800ab98:	4413      	add	r3, r2
 800ab9a:	687a      	ldr	r2, [r7, #4]
 800ab9c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ab9e:	e006      	b.n	800abae <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	3301      	adds	r3, #1
 800aba4:	60fb      	str	r3, [r7, #12]
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	2b07      	cmp	r3, #7
 800abaa:	d9e7      	bls.n	800ab7c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800abac:	bf00      	nop
 800abae:	bf00      	nop
 800abb0:	3714      	adds	r7, #20
 800abb2:	46bd      	mov	sp, r7
 800abb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb8:	4770      	bx	lr
 800abba:	bf00      	nop
 800abbc:	20000f54 	.word	0x20000f54

0800abc0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800abc0:	b480      	push	{r7}
 800abc2:	b085      	sub	sp, #20
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800abc8:	2300      	movs	r3, #0
 800abca:	60fb      	str	r3, [r7, #12]
 800abcc:	e016      	b.n	800abfc <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800abce:	4a10      	ldr	r2, [pc, #64]	@ (800ac10 <vQueueUnregisterQueue+0x50>)
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	00db      	lsls	r3, r3, #3
 800abd4:	4413      	add	r3, r2
 800abd6:	685b      	ldr	r3, [r3, #4]
 800abd8:	687a      	ldr	r2, [r7, #4]
 800abda:	429a      	cmp	r2, r3
 800abdc:	d10b      	bne.n	800abf6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800abde:	4a0c      	ldr	r2, [pc, #48]	@ (800ac10 <vQueueUnregisterQueue+0x50>)
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	2100      	movs	r1, #0
 800abe4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800abe8:	4a09      	ldr	r2, [pc, #36]	@ (800ac10 <vQueueUnregisterQueue+0x50>)
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	00db      	lsls	r3, r3, #3
 800abee:	4413      	add	r3, r2
 800abf0:	2200      	movs	r2, #0
 800abf2:	605a      	str	r2, [r3, #4]
				break;
 800abf4:	e006      	b.n	800ac04 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	3301      	adds	r3, #1
 800abfa:	60fb      	str	r3, [r7, #12]
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	2b07      	cmp	r3, #7
 800ac00:	d9e5      	bls.n	800abce <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800ac02:	bf00      	nop
 800ac04:	bf00      	nop
 800ac06:	3714      	adds	r7, #20
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0e:	4770      	bx	lr
 800ac10:	20000f54 	.word	0x20000f54

0800ac14 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ac14:	b580      	push	{r7, lr}
 800ac16:	b086      	sub	sp, #24
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	60f8      	str	r0, [r7, #12]
 800ac1c:	60b9      	str	r1, [r7, #8]
 800ac1e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ac24:	f001 fc28 	bl	800c478 <vPortEnterCritical>
 800ac28:	697b      	ldr	r3, [r7, #20]
 800ac2a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ac2e:	b25b      	sxtb	r3, r3
 800ac30:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac34:	d103      	bne.n	800ac3e <vQueueWaitForMessageRestricted+0x2a>
 800ac36:	697b      	ldr	r3, [r7, #20]
 800ac38:	2200      	movs	r2, #0
 800ac3a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ac3e:	697b      	ldr	r3, [r7, #20]
 800ac40:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ac44:	b25b      	sxtb	r3, r3
 800ac46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac4a:	d103      	bne.n	800ac54 <vQueueWaitForMessageRestricted+0x40>
 800ac4c:	697b      	ldr	r3, [r7, #20]
 800ac4e:	2200      	movs	r2, #0
 800ac50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ac54:	f001 fc42 	bl	800c4dc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ac58:	697b      	ldr	r3, [r7, #20]
 800ac5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d106      	bne.n	800ac6e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ac60:	697b      	ldr	r3, [r7, #20]
 800ac62:	3324      	adds	r3, #36	@ 0x24
 800ac64:	687a      	ldr	r2, [r7, #4]
 800ac66:	68b9      	ldr	r1, [r7, #8]
 800ac68:	4618      	mov	r0, r3
 800ac6a:	f000 fca3 	bl	800b5b4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ac6e:	6978      	ldr	r0, [r7, #20]
 800ac70:	f7ff fefc 	bl	800aa6c <prvUnlockQueue>
	}
 800ac74:	bf00      	nop
 800ac76:	3718      	adds	r7, #24
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	bd80      	pop	{r7, pc}

0800ac7c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b08e      	sub	sp, #56	@ 0x38
 800ac80:	af04      	add	r7, sp, #16
 800ac82:	60f8      	str	r0, [r7, #12]
 800ac84:	60b9      	str	r1, [r7, #8]
 800ac86:	607a      	str	r2, [r7, #4]
 800ac88:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ac8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d10b      	bne.n	800aca8 <xTaskCreateStatic+0x2c>
	__asm volatile
 800ac90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac94:	f383 8811 	msr	BASEPRI, r3
 800ac98:	f3bf 8f6f 	isb	sy
 800ac9c:	f3bf 8f4f 	dsb	sy
 800aca0:	623b      	str	r3, [r7, #32]
}
 800aca2:	bf00      	nop
 800aca4:	bf00      	nop
 800aca6:	e7fd      	b.n	800aca4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800aca8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d10b      	bne.n	800acc6 <xTaskCreateStatic+0x4a>
	__asm volatile
 800acae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acb2:	f383 8811 	msr	BASEPRI, r3
 800acb6:	f3bf 8f6f 	isb	sy
 800acba:	f3bf 8f4f 	dsb	sy
 800acbe:	61fb      	str	r3, [r7, #28]
}
 800acc0:	bf00      	nop
 800acc2:	bf00      	nop
 800acc4:	e7fd      	b.n	800acc2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800acc6:	23a8      	movs	r3, #168	@ 0xa8
 800acc8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800acca:	693b      	ldr	r3, [r7, #16]
 800accc:	2ba8      	cmp	r3, #168	@ 0xa8
 800acce:	d00b      	beq.n	800ace8 <xTaskCreateStatic+0x6c>
	__asm volatile
 800acd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acd4:	f383 8811 	msr	BASEPRI, r3
 800acd8:	f3bf 8f6f 	isb	sy
 800acdc:	f3bf 8f4f 	dsb	sy
 800ace0:	61bb      	str	r3, [r7, #24]
}
 800ace2:	bf00      	nop
 800ace4:	bf00      	nop
 800ace6:	e7fd      	b.n	800ace4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ace8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800acea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acec:	2b00      	cmp	r3, #0
 800acee:	d01e      	beq.n	800ad2e <xTaskCreateStatic+0xb2>
 800acf0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d01b      	beq.n	800ad2e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800acf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acf8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800acfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acfc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800acfe:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ad00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad02:	2202      	movs	r2, #2
 800ad04:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ad08:	2300      	movs	r3, #0
 800ad0a:	9303      	str	r3, [sp, #12]
 800ad0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad0e:	9302      	str	r3, [sp, #8]
 800ad10:	f107 0314 	add.w	r3, r7, #20
 800ad14:	9301      	str	r3, [sp, #4]
 800ad16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad18:	9300      	str	r3, [sp, #0]
 800ad1a:	683b      	ldr	r3, [r7, #0]
 800ad1c:	687a      	ldr	r2, [r7, #4]
 800ad1e:	68b9      	ldr	r1, [r7, #8]
 800ad20:	68f8      	ldr	r0, [r7, #12]
 800ad22:	f000 f851 	bl	800adc8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ad26:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ad28:	f000 f8f6 	bl	800af18 <prvAddNewTaskToReadyList>
 800ad2c:	e001      	b.n	800ad32 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800ad2e:	2300      	movs	r3, #0
 800ad30:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ad32:	697b      	ldr	r3, [r7, #20]
	}
 800ad34:	4618      	mov	r0, r3
 800ad36:	3728      	adds	r7, #40	@ 0x28
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	bd80      	pop	{r7, pc}

0800ad3c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ad3c:	b580      	push	{r7, lr}
 800ad3e:	b08c      	sub	sp, #48	@ 0x30
 800ad40:	af04      	add	r7, sp, #16
 800ad42:	60f8      	str	r0, [r7, #12]
 800ad44:	60b9      	str	r1, [r7, #8]
 800ad46:	603b      	str	r3, [r7, #0]
 800ad48:	4613      	mov	r3, r2
 800ad4a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ad4c:	88fb      	ldrh	r3, [r7, #6]
 800ad4e:	009b      	lsls	r3, r3, #2
 800ad50:	4618      	mov	r0, r3
 800ad52:	f001 fcb3 	bl	800c6bc <pvPortMalloc>
 800ad56:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ad58:	697b      	ldr	r3, [r7, #20]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d00e      	beq.n	800ad7c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ad5e:	20a8      	movs	r0, #168	@ 0xa8
 800ad60:	f001 fcac 	bl	800c6bc <pvPortMalloc>
 800ad64:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ad66:	69fb      	ldr	r3, [r7, #28]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d003      	beq.n	800ad74 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ad6c:	69fb      	ldr	r3, [r7, #28]
 800ad6e:	697a      	ldr	r2, [r7, #20]
 800ad70:	631a      	str	r2, [r3, #48]	@ 0x30
 800ad72:	e005      	b.n	800ad80 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ad74:	6978      	ldr	r0, [r7, #20]
 800ad76:	f001 fd75 	bl	800c864 <vPortFree>
 800ad7a:	e001      	b.n	800ad80 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ad80:	69fb      	ldr	r3, [r7, #28]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d017      	beq.n	800adb6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ad86:	69fb      	ldr	r3, [r7, #28]
 800ad88:	2200      	movs	r2, #0
 800ad8a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ad8e:	88fa      	ldrh	r2, [r7, #6]
 800ad90:	2300      	movs	r3, #0
 800ad92:	9303      	str	r3, [sp, #12]
 800ad94:	69fb      	ldr	r3, [r7, #28]
 800ad96:	9302      	str	r3, [sp, #8]
 800ad98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad9a:	9301      	str	r3, [sp, #4]
 800ad9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad9e:	9300      	str	r3, [sp, #0]
 800ada0:	683b      	ldr	r3, [r7, #0]
 800ada2:	68b9      	ldr	r1, [r7, #8]
 800ada4:	68f8      	ldr	r0, [r7, #12]
 800ada6:	f000 f80f 	bl	800adc8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800adaa:	69f8      	ldr	r0, [r7, #28]
 800adac:	f000 f8b4 	bl	800af18 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800adb0:	2301      	movs	r3, #1
 800adb2:	61bb      	str	r3, [r7, #24]
 800adb4:	e002      	b.n	800adbc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800adb6:	f04f 33ff 	mov.w	r3, #4294967295
 800adba:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800adbc:	69bb      	ldr	r3, [r7, #24]
	}
 800adbe:	4618      	mov	r0, r3
 800adc0:	3720      	adds	r7, #32
 800adc2:	46bd      	mov	sp, r7
 800adc4:	bd80      	pop	{r7, pc}
	...

0800adc8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800adc8:	b580      	push	{r7, lr}
 800adca:	b088      	sub	sp, #32
 800adcc:	af00      	add	r7, sp, #0
 800adce:	60f8      	str	r0, [r7, #12]
 800add0:	60b9      	str	r1, [r7, #8]
 800add2:	607a      	str	r2, [r7, #4]
 800add4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800add6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800add8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	009b      	lsls	r3, r3, #2
 800adde:	461a      	mov	r2, r3
 800ade0:	21a5      	movs	r1, #165	@ 0xa5
 800ade2:	f002 fdf7 	bl	800d9d4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ade6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ade8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800adf0:	3b01      	subs	r3, #1
 800adf2:	009b      	lsls	r3, r3, #2
 800adf4:	4413      	add	r3, r2
 800adf6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800adf8:	69bb      	ldr	r3, [r7, #24]
 800adfa:	f023 0307 	bic.w	r3, r3, #7
 800adfe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ae00:	69bb      	ldr	r3, [r7, #24]
 800ae02:	f003 0307 	and.w	r3, r3, #7
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d00b      	beq.n	800ae22 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800ae0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae0e:	f383 8811 	msr	BASEPRI, r3
 800ae12:	f3bf 8f6f 	isb	sy
 800ae16:	f3bf 8f4f 	dsb	sy
 800ae1a:	617b      	str	r3, [r7, #20]
}
 800ae1c:	bf00      	nop
 800ae1e:	bf00      	nop
 800ae20:	e7fd      	b.n	800ae1e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ae22:	68bb      	ldr	r3, [r7, #8]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d01f      	beq.n	800ae68 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ae28:	2300      	movs	r3, #0
 800ae2a:	61fb      	str	r3, [r7, #28]
 800ae2c:	e012      	b.n	800ae54 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ae2e:	68ba      	ldr	r2, [r7, #8]
 800ae30:	69fb      	ldr	r3, [r7, #28]
 800ae32:	4413      	add	r3, r2
 800ae34:	7819      	ldrb	r1, [r3, #0]
 800ae36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ae38:	69fb      	ldr	r3, [r7, #28]
 800ae3a:	4413      	add	r3, r2
 800ae3c:	3334      	adds	r3, #52	@ 0x34
 800ae3e:	460a      	mov	r2, r1
 800ae40:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ae42:	68ba      	ldr	r2, [r7, #8]
 800ae44:	69fb      	ldr	r3, [r7, #28]
 800ae46:	4413      	add	r3, r2
 800ae48:	781b      	ldrb	r3, [r3, #0]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d006      	beq.n	800ae5c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ae4e:	69fb      	ldr	r3, [r7, #28]
 800ae50:	3301      	adds	r3, #1
 800ae52:	61fb      	str	r3, [r7, #28]
 800ae54:	69fb      	ldr	r3, [r7, #28]
 800ae56:	2b0f      	cmp	r3, #15
 800ae58:	d9e9      	bls.n	800ae2e <prvInitialiseNewTask+0x66>
 800ae5a:	e000      	b.n	800ae5e <prvInitialiseNewTask+0x96>
			{
				break;
 800ae5c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ae5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae60:	2200      	movs	r2, #0
 800ae62:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800ae66:	e003      	b.n	800ae70 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ae68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae6a:	2200      	movs	r2, #0
 800ae6c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ae70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae72:	2b37      	cmp	r3, #55	@ 0x37
 800ae74:	d901      	bls.n	800ae7a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ae76:	2337      	movs	r3, #55	@ 0x37
 800ae78:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ae7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae7c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ae7e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ae80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae82:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ae84:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ae86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae88:	2200      	movs	r2, #0
 800ae8a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ae8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae8e:	3304      	adds	r3, #4
 800ae90:	4618      	mov	r0, r3
 800ae92:	f7ff f86d 	bl	8009f70 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ae96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae98:	3318      	adds	r3, #24
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	f7ff f868 	bl	8009f70 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800aea0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aea2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aea4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aea6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aea8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800aeac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aeae:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800aeb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aeb2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aeb4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800aeb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aeb8:	2200      	movs	r2, #0
 800aeba:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800aebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aec0:	2200      	movs	r2, #0
 800aec2:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800aec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aec8:	3354      	adds	r3, #84	@ 0x54
 800aeca:	224c      	movs	r2, #76	@ 0x4c
 800aecc:	2100      	movs	r1, #0
 800aece:	4618      	mov	r0, r3
 800aed0:	f002 fd80 	bl	800d9d4 <memset>
 800aed4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aed6:	4a0d      	ldr	r2, [pc, #52]	@ (800af0c <prvInitialiseNewTask+0x144>)
 800aed8:	659a      	str	r2, [r3, #88]	@ 0x58
 800aeda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aedc:	4a0c      	ldr	r2, [pc, #48]	@ (800af10 <prvInitialiseNewTask+0x148>)
 800aede:	65da      	str	r2, [r3, #92]	@ 0x5c
 800aee0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aee2:	4a0c      	ldr	r2, [pc, #48]	@ (800af14 <prvInitialiseNewTask+0x14c>)
 800aee4:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800aee6:	683a      	ldr	r2, [r7, #0]
 800aee8:	68f9      	ldr	r1, [r7, #12]
 800aeea:	69b8      	ldr	r0, [r7, #24]
 800aeec:	f001 f990 	bl	800c210 <pxPortInitialiseStack>
 800aef0:	4602      	mov	r2, r0
 800aef2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aef4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800aef6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d002      	beq.n	800af02 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800aefc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aefe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800af00:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800af02:	bf00      	nop
 800af04:	3720      	adds	r7, #32
 800af06:	46bd      	mov	sp, r7
 800af08:	bd80      	pop	{r7, pc}
 800af0a:	bf00      	nop
 800af0c:	200115f0 	.word	0x200115f0
 800af10:	20011658 	.word	0x20011658
 800af14:	200116c0 	.word	0x200116c0

0800af18 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800af18:	b580      	push	{r7, lr}
 800af1a:	b082      	sub	sp, #8
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800af20:	f001 faaa 	bl	800c478 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800af24:	4b2d      	ldr	r3, [pc, #180]	@ (800afdc <prvAddNewTaskToReadyList+0xc4>)
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	3301      	adds	r3, #1
 800af2a:	4a2c      	ldr	r2, [pc, #176]	@ (800afdc <prvAddNewTaskToReadyList+0xc4>)
 800af2c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800af2e:	4b2c      	ldr	r3, [pc, #176]	@ (800afe0 <prvAddNewTaskToReadyList+0xc8>)
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	2b00      	cmp	r3, #0
 800af34:	d109      	bne.n	800af4a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800af36:	4a2a      	ldr	r2, [pc, #168]	@ (800afe0 <prvAddNewTaskToReadyList+0xc8>)
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800af3c:	4b27      	ldr	r3, [pc, #156]	@ (800afdc <prvAddNewTaskToReadyList+0xc4>)
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	2b01      	cmp	r3, #1
 800af42:	d110      	bne.n	800af66 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800af44:	f000 fc64 	bl	800b810 <prvInitialiseTaskLists>
 800af48:	e00d      	b.n	800af66 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800af4a:	4b26      	ldr	r3, [pc, #152]	@ (800afe4 <prvAddNewTaskToReadyList+0xcc>)
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d109      	bne.n	800af66 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800af52:	4b23      	ldr	r3, [pc, #140]	@ (800afe0 <prvAddNewTaskToReadyList+0xc8>)
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af5c:	429a      	cmp	r2, r3
 800af5e:	d802      	bhi.n	800af66 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800af60:	4a1f      	ldr	r2, [pc, #124]	@ (800afe0 <prvAddNewTaskToReadyList+0xc8>)
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800af66:	4b20      	ldr	r3, [pc, #128]	@ (800afe8 <prvAddNewTaskToReadyList+0xd0>)
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	3301      	adds	r3, #1
 800af6c:	4a1e      	ldr	r2, [pc, #120]	@ (800afe8 <prvAddNewTaskToReadyList+0xd0>)
 800af6e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800af70:	4b1d      	ldr	r3, [pc, #116]	@ (800afe8 <prvAddNewTaskToReadyList+0xd0>)
 800af72:	681a      	ldr	r2, [r3, #0]
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af7c:	4b1b      	ldr	r3, [pc, #108]	@ (800afec <prvAddNewTaskToReadyList+0xd4>)
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	429a      	cmp	r2, r3
 800af82:	d903      	bls.n	800af8c <prvAddNewTaskToReadyList+0x74>
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af88:	4a18      	ldr	r2, [pc, #96]	@ (800afec <prvAddNewTaskToReadyList+0xd4>)
 800af8a:	6013      	str	r3, [r2, #0]
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af90:	4613      	mov	r3, r2
 800af92:	009b      	lsls	r3, r3, #2
 800af94:	4413      	add	r3, r2
 800af96:	009b      	lsls	r3, r3, #2
 800af98:	4a15      	ldr	r2, [pc, #84]	@ (800aff0 <prvAddNewTaskToReadyList+0xd8>)
 800af9a:	441a      	add	r2, r3
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	3304      	adds	r3, #4
 800afa0:	4619      	mov	r1, r3
 800afa2:	4610      	mov	r0, r2
 800afa4:	f7fe fff1 	bl	8009f8a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800afa8:	f001 fa98 	bl	800c4dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800afac:	4b0d      	ldr	r3, [pc, #52]	@ (800afe4 <prvAddNewTaskToReadyList+0xcc>)
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d00e      	beq.n	800afd2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800afb4:	4b0a      	ldr	r3, [pc, #40]	@ (800afe0 <prvAddNewTaskToReadyList+0xc8>)
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afbe:	429a      	cmp	r2, r3
 800afc0:	d207      	bcs.n	800afd2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800afc2:	4b0c      	ldr	r3, [pc, #48]	@ (800aff4 <prvAddNewTaskToReadyList+0xdc>)
 800afc4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800afc8:	601a      	str	r2, [r3, #0]
 800afca:	f3bf 8f4f 	dsb	sy
 800afce:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800afd2:	bf00      	nop
 800afd4:	3708      	adds	r7, #8
 800afd6:	46bd      	mov	sp, r7
 800afd8:	bd80      	pop	{r7, pc}
 800afda:	bf00      	nop
 800afdc:	20001468 	.word	0x20001468
 800afe0:	20000f94 	.word	0x20000f94
 800afe4:	20001474 	.word	0x20001474
 800afe8:	20001484 	.word	0x20001484
 800afec:	20001470 	.word	0x20001470
 800aff0:	20000f98 	.word	0x20000f98
 800aff4:	e000ed04 	.word	0xe000ed04

0800aff8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800aff8:	b580      	push	{r7, lr}
 800affa:	b084      	sub	sp, #16
 800affc:	af00      	add	r7, sp, #0
 800affe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b000:	2300      	movs	r3, #0
 800b002:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	2b00      	cmp	r3, #0
 800b008:	d018      	beq.n	800b03c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b00a:	4b14      	ldr	r3, [pc, #80]	@ (800b05c <vTaskDelay+0x64>)
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d00b      	beq.n	800b02a <vTaskDelay+0x32>
	__asm volatile
 800b012:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b016:	f383 8811 	msr	BASEPRI, r3
 800b01a:	f3bf 8f6f 	isb	sy
 800b01e:	f3bf 8f4f 	dsb	sy
 800b022:	60bb      	str	r3, [r7, #8]
}
 800b024:	bf00      	nop
 800b026:	bf00      	nop
 800b028:	e7fd      	b.n	800b026 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b02a:	f000 f88b 	bl	800b144 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b02e:	2100      	movs	r1, #0
 800b030:	6878      	ldr	r0, [r7, #4]
 800b032:	f000 fd3f 	bl	800bab4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b036:	f000 f893 	bl	800b160 <xTaskResumeAll>
 800b03a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d107      	bne.n	800b052 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800b042:	4b07      	ldr	r3, [pc, #28]	@ (800b060 <vTaskDelay+0x68>)
 800b044:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b048:	601a      	str	r2, [r3, #0]
 800b04a:	f3bf 8f4f 	dsb	sy
 800b04e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b052:	bf00      	nop
 800b054:	3710      	adds	r7, #16
 800b056:	46bd      	mov	sp, r7
 800b058:	bd80      	pop	{r7, pc}
 800b05a:	bf00      	nop
 800b05c:	20001490 	.word	0x20001490
 800b060:	e000ed04 	.word	0xe000ed04

0800b064 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b064:	b580      	push	{r7, lr}
 800b066:	b08a      	sub	sp, #40	@ 0x28
 800b068:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b06a:	2300      	movs	r3, #0
 800b06c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b06e:	2300      	movs	r3, #0
 800b070:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b072:	463a      	mov	r2, r7
 800b074:	1d39      	adds	r1, r7, #4
 800b076:	f107 0308 	add.w	r3, r7, #8
 800b07a:	4618      	mov	r0, r3
 800b07c:	f7fe ff24 	bl	8009ec8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b080:	6839      	ldr	r1, [r7, #0]
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	68ba      	ldr	r2, [r7, #8]
 800b086:	9202      	str	r2, [sp, #8]
 800b088:	9301      	str	r3, [sp, #4]
 800b08a:	2300      	movs	r3, #0
 800b08c:	9300      	str	r3, [sp, #0]
 800b08e:	2300      	movs	r3, #0
 800b090:	460a      	mov	r2, r1
 800b092:	4924      	ldr	r1, [pc, #144]	@ (800b124 <vTaskStartScheduler+0xc0>)
 800b094:	4824      	ldr	r0, [pc, #144]	@ (800b128 <vTaskStartScheduler+0xc4>)
 800b096:	f7ff fdf1 	bl	800ac7c <xTaskCreateStatic>
 800b09a:	4603      	mov	r3, r0
 800b09c:	4a23      	ldr	r2, [pc, #140]	@ (800b12c <vTaskStartScheduler+0xc8>)
 800b09e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b0a0:	4b22      	ldr	r3, [pc, #136]	@ (800b12c <vTaskStartScheduler+0xc8>)
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d002      	beq.n	800b0ae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b0a8:	2301      	movs	r3, #1
 800b0aa:	617b      	str	r3, [r7, #20]
 800b0ac:	e001      	b.n	800b0b2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b0b2:	697b      	ldr	r3, [r7, #20]
 800b0b4:	2b01      	cmp	r3, #1
 800b0b6:	d102      	bne.n	800b0be <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b0b8:	f000 fd50 	bl	800bb5c <xTimerCreateTimerTask>
 800b0bc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b0be:	697b      	ldr	r3, [r7, #20]
 800b0c0:	2b01      	cmp	r3, #1
 800b0c2:	d11b      	bne.n	800b0fc <vTaskStartScheduler+0x98>
	__asm volatile
 800b0c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0c8:	f383 8811 	msr	BASEPRI, r3
 800b0cc:	f3bf 8f6f 	isb	sy
 800b0d0:	f3bf 8f4f 	dsb	sy
 800b0d4:	613b      	str	r3, [r7, #16]
}
 800b0d6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b0d8:	4b15      	ldr	r3, [pc, #84]	@ (800b130 <vTaskStartScheduler+0xcc>)
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	3354      	adds	r3, #84	@ 0x54
 800b0de:	4a15      	ldr	r2, [pc, #84]	@ (800b134 <vTaskStartScheduler+0xd0>)
 800b0e0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b0e2:	4b15      	ldr	r3, [pc, #84]	@ (800b138 <vTaskStartScheduler+0xd4>)
 800b0e4:	f04f 32ff 	mov.w	r2, #4294967295
 800b0e8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b0ea:	4b14      	ldr	r3, [pc, #80]	@ (800b13c <vTaskStartScheduler+0xd8>)
 800b0ec:	2201      	movs	r2, #1
 800b0ee:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b0f0:	4b13      	ldr	r3, [pc, #76]	@ (800b140 <vTaskStartScheduler+0xdc>)
 800b0f2:	2200      	movs	r2, #0
 800b0f4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b0f6:	f001 f91b 	bl	800c330 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b0fa:	e00f      	b.n	800b11c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b0fc:	697b      	ldr	r3, [r7, #20]
 800b0fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b102:	d10b      	bne.n	800b11c <vTaskStartScheduler+0xb8>
	__asm volatile
 800b104:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b108:	f383 8811 	msr	BASEPRI, r3
 800b10c:	f3bf 8f6f 	isb	sy
 800b110:	f3bf 8f4f 	dsb	sy
 800b114:	60fb      	str	r3, [r7, #12]
}
 800b116:	bf00      	nop
 800b118:	bf00      	nop
 800b11a:	e7fd      	b.n	800b118 <vTaskStartScheduler+0xb4>
}
 800b11c:	bf00      	nop
 800b11e:	3718      	adds	r7, #24
 800b120:	46bd      	mov	sp, r7
 800b122:	bd80      	pop	{r7, pc}
 800b124:	0800ffb4 	.word	0x0800ffb4
 800b128:	0800b7e1 	.word	0x0800b7e1
 800b12c:	2000148c 	.word	0x2000148c
 800b130:	20000f94 	.word	0x20000f94
 800b134:	20000120 	.word	0x20000120
 800b138:	20001488 	.word	0x20001488
 800b13c:	20001474 	.word	0x20001474
 800b140:	2000146c 	.word	0x2000146c

0800b144 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b144:	b480      	push	{r7}
 800b146:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b148:	4b04      	ldr	r3, [pc, #16]	@ (800b15c <vTaskSuspendAll+0x18>)
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	3301      	adds	r3, #1
 800b14e:	4a03      	ldr	r2, [pc, #12]	@ (800b15c <vTaskSuspendAll+0x18>)
 800b150:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b152:	bf00      	nop
 800b154:	46bd      	mov	sp, r7
 800b156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b15a:	4770      	bx	lr
 800b15c:	20001490 	.word	0x20001490

0800b160 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b160:	b580      	push	{r7, lr}
 800b162:	b084      	sub	sp, #16
 800b164:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b166:	2300      	movs	r3, #0
 800b168:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b16a:	2300      	movs	r3, #0
 800b16c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b16e:	4b42      	ldr	r3, [pc, #264]	@ (800b278 <xTaskResumeAll+0x118>)
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	2b00      	cmp	r3, #0
 800b174:	d10b      	bne.n	800b18e <xTaskResumeAll+0x2e>
	__asm volatile
 800b176:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b17a:	f383 8811 	msr	BASEPRI, r3
 800b17e:	f3bf 8f6f 	isb	sy
 800b182:	f3bf 8f4f 	dsb	sy
 800b186:	603b      	str	r3, [r7, #0]
}
 800b188:	bf00      	nop
 800b18a:	bf00      	nop
 800b18c:	e7fd      	b.n	800b18a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b18e:	f001 f973 	bl	800c478 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b192:	4b39      	ldr	r3, [pc, #228]	@ (800b278 <xTaskResumeAll+0x118>)
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	3b01      	subs	r3, #1
 800b198:	4a37      	ldr	r2, [pc, #220]	@ (800b278 <xTaskResumeAll+0x118>)
 800b19a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b19c:	4b36      	ldr	r3, [pc, #216]	@ (800b278 <xTaskResumeAll+0x118>)
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d162      	bne.n	800b26a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b1a4:	4b35      	ldr	r3, [pc, #212]	@ (800b27c <xTaskResumeAll+0x11c>)
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d05e      	beq.n	800b26a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b1ac:	e02f      	b.n	800b20e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b1ae:	4b34      	ldr	r3, [pc, #208]	@ (800b280 <xTaskResumeAll+0x120>)
 800b1b0:	68db      	ldr	r3, [r3, #12]
 800b1b2:	68db      	ldr	r3, [r3, #12]
 800b1b4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	3318      	adds	r3, #24
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	f7fe ff42 	bl	800a044 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	3304      	adds	r3, #4
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	f7fe ff3d 	bl	800a044 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b1ce:	4b2d      	ldr	r3, [pc, #180]	@ (800b284 <xTaskResumeAll+0x124>)
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	429a      	cmp	r2, r3
 800b1d4:	d903      	bls.n	800b1de <xTaskResumeAll+0x7e>
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1da:	4a2a      	ldr	r2, [pc, #168]	@ (800b284 <xTaskResumeAll+0x124>)
 800b1dc:	6013      	str	r3, [r2, #0]
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b1e2:	4613      	mov	r3, r2
 800b1e4:	009b      	lsls	r3, r3, #2
 800b1e6:	4413      	add	r3, r2
 800b1e8:	009b      	lsls	r3, r3, #2
 800b1ea:	4a27      	ldr	r2, [pc, #156]	@ (800b288 <xTaskResumeAll+0x128>)
 800b1ec:	441a      	add	r2, r3
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	3304      	adds	r3, #4
 800b1f2:	4619      	mov	r1, r3
 800b1f4:	4610      	mov	r0, r2
 800b1f6:	f7fe fec8 	bl	8009f8a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b1fe:	4b23      	ldr	r3, [pc, #140]	@ (800b28c <xTaskResumeAll+0x12c>)
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b204:	429a      	cmp	r2, r3
 800b206:	d302      	bcc.n	800b20e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800b208:	4b21      	ldr	r3, [pc, #132]	@ (800b290 <xTaskResumeAll+0x130>)
 800b20a:	2201      	movs	r2, #1
 800b20c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b20e:	4b1c      	ldr	r3, [pc, #112]	@ (800b280 <xTaskResumeAll+0x120>)
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	2b00      	cmp	r3, #0
 800b214:	d1cb      	bne.n	800b1ae <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d001      	beq.n	800b220 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b21c:	f000 fb9c 	bl	800b958 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b220:	4b1c      	ldr	r3, [pc, #112]	@ (800b294 <xTaskResumeAll+0x134>)
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d010      	beq.n	800b24e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b22c:	f000 f858 	bl	800b2e0 <xTaskIncrementTick>
 800b230:	4603      	mov	r3, r0
 800b232:	2b00      	cmp	r3, #0
 800b234:	d002      	beq.n	800b23c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800b236:	4b16      	ldr	r3, [pc, #88]	@ (800b290 <xTaskResumeAll+0x130>)
 800b238:	2201      	movs	r2, #1
 800b23a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	3b01      	subs	r3, #1
 800b240:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	2b00      	cmp	r3, #0
 800b246:	d1f1      	bne.n	800b22c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800b248:	4b12      	ldr	r3, [pc, #72]	@ (800b294 <xTaskResumeAll+0x134>)
 800b24a:	2200      	movs	r2, #0
 800b24c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b24e:	4b10      	ldr	r3, [pc, #64]	@ (800b290 <xTaskResumeAll+0x130>)
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	2b00      	cmp	r3, #0
 800b254:	d009      	beq.n	800b26a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b256:	2301      	movs	r3, #1
 800b258:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b25a:	4b0f      	ldr	r3, [pc, #60]	@ (800b298 <xTaskResumeAll+0x138>)
 800b25c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b260:	601a      	str	r2, [r3, #0]
 800b262:	f3bf 8f4f 	dsb	sy
 800b266:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b26a:	f001 f937 	bl	800c4dc <vPortExitCritical>

	return xAlreadyYielded;
 800b26e:	68bb      	ldr	r3, [r7, #8]
}
 800b270:	4618      	mov	r0, r3
 800b272:	3710      	adds	r7, #16
 800b274:	46bd      	mov	sp, r7
 800b276:	bd80      	pop	{r7, pc}
 800b278:	20001490 	.word	0x20001490
 800b27c:	20001468 	.word	0x20001468
 800b280:	20001428 	.word	0x20001428
 800b284:	20001470 	.word	0x20001470
 800b288:	20000f98 	.word	0x20000f98
 800b28c:	20000f94 	.word	0x20000f94
 800b290:	2000147c 	.word	0x2000147c
 800b294:	20001478 	.word	0x20001478
 800b298:	e000ed04 	.word	0xe000ed04

0800b29c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b29c:	b480      	push	{r7}
 800b29e:	b083      	sub	sp, #12
 800b2a0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b2a2:	4b05      	ldr	r3, [pc, #20]	@ (800b2b8 <xTaskGetTickCount+0x1c>)
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b2a8:	687b      	ldr	r3, [r7, #4]
}
 800b2aa:	4618      	mov	r0, r3
 800b2ac:	370c      	adds	r7, #12
 800b2ae:	46bd      	mov	sp, r7
 800b2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b4:	4770      	bx	lr
 800b2b6:	bf00      	nop
 800b2b8:	2000146c 	.word	0x2000146c

0800b2bc <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800b2bc:	b580      	push	{r7, lr}
 800b2be:	b082      	sub	sp, #8
 800b2c0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b2c2:	f001 f9b9 	bl	800c638 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800b2ca:	4b04      	ldr	r3, [pc, #16]	@ (800b2dc <xTaskGetTickCountFromISR+0x20>)
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b2d0:	683b      	ldr	r3, [r7, #0]
}
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	3708      	adds	r7, #8
 800b2d6:	46bd      	mov	sp, r7
 800b2d8:	bd80      	pop	{r7, pc}
 800b2da:	bf00      	nop
 800b2dc:	2000146c 	.word	0x2000146c

0800b2e0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b2e0:	b580      	push	{r7, lr}
 800b2e2:	b086      	sub	sp, #24
 800b2e4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b2ea:	4b4f      	ldr	r3, [pc, #316]	@ (800b428 <xTaskIncrementTick+0x148>)
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	f040 8090 	bne.w	800b414 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b2f4:	4b4d      	ldr	r3, [pc, #308]	@ (800b42c <xTaskIncrementTick+0x14c>)
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	3301      	adds	r3, #1
 800b2fa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b2fc:	4a4b      	ldr	r2, [pc, #300]	@ (800b42c <xTaskIncrementTick+0x14c>)
 800b2fe:	693b      	ldr	r3, [r7, #16]
 800b300:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b302:	693b      	ldr	r3, [r7, #16]
 800b304:	2b00      	cmp	r3, #0
 800b306:	d121      	bne.n	800b34c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800b308:	4b49      	ldr	r3, [pc, #292]	@ (800b430 <xTaskIncrementTick+0x150>)
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d00b      	beq.n	800b32a <xTaskIncrementTick+0x4a>
	__asm volatile
 800b312:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b316:	f383 8811 	msr	BASEPRI, r3
 800b31a:	f3bf 8f6f 	isb	sy
 800b31e:	f3bf 8f4f 	dsb	sy
 800b322:	603b      	str	r3, [r7, #0]
}
 800b324:	bf00      	nop
 800b326:	bf00      	nop
 800b328:	e7fd      	b.n	800b326 <xTaskIncrementTick+0x46>
 800b32a:	4b41      	ldr	r3, [pc, #260]	@ (800b430 <xTaskIncrementTick+0x150>)
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	60fb      	str	r3, [r7, #12]
 800b330:	4b40      	ldr	r3, [pc, #256]	@ (800b434 <xTaskIncrementTick+0x154>)
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	4a3e      	ldr	r2, [pc, #248]	@ (800b430 <xTaskIncrementTick+0x150>)
 800b336:	6013      	str	r3, [r2, #0]
 800b338:	4a3e      	ldr	r2, [pc, #248]	@ (800b434 <xTaskIncrementTick+0x154>)
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	6013      	str	r3, [r2, #0]
 800b33e:	4b3e      	ldr	r3, [pc, #248]	@ (800b438 <xTaskIncrementTick+0x158>)
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	3301      	adds	r3, #1
 800b344:	4a3c      	ldr	r2, [pc, #240]	@ (800b438 <xTaskIncrementTick+0x158>)
 800b346:	6013      	str	r3, [r2, #0]
 800b348:	f000 fb06 	bl	800b958 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b34c:	4b3b      	ldr	r3, [pc, #236]	@ (800b43c <xTaskIncrementTick+0x15c>)
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	693a      	ldr	r2, [r7, #16]
 800b352:	429a      	cmp	r2, r3
 800b354:	d349      	bcc.n	800b3ea <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b356:	4b36      	ldr	r3, [pc, #216]	@ (800b430 <xTaskIncrementTick+0x150>)
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d104      	bne.n	800b36a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b360:	4b36      	ldr	r3, [pc, #216]	@ (800b43c <xTaskIncrementTick+0x15c>)
 800b362:	f04f 32ff 	mov.w	r2, #4294967295
 800b366:	601a      	str	r2, [r3, #0]
					break;
 800b368:	e03f      	b.n	800b3ea <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b36a:	4b31      	ldr	r3, [pc, #196]	@ (800b430 <xTaskIncrementTick+0x150>)
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	68db      	ldr	r3, [r3, #12]
 800b370:	68db      	ldr	r3, [r3, #12]
 800b372:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b374:	68bb      	ldr	r3, [r7, #8]
 800b376:	685b      	ldr	r3, [r3, #4]
 800b378:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b37a:	693a      	ldr	r2, [r7, #16]
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	429a      	cmp	r2, r3
 800b380:	d203      	bcs.n	800b38a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b382:	4a2e      	ldr	r2, [pc, #184]	@ (800b43c <xTaskIncrementTick+0x15c>)
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b388:	e02f      	b.n	800b3ea <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b38a:	68bb      	ldr	r3, [r7, #8]
 800b38c:	3304      	adds	r3, #4
 800b38e:	4618      	mov	r0, r3
 800b390:	f7fe fe58 	bl	800a044 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b394:	68bb      	ldr	r3, [r7, #8]
 800b396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d004      	beq.n	800b3a6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b39c:	68bb      	ldr	r3, [r7, #8]
 800b39e:	3318      	adds	r3, #24
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	f7fe fe4f 	bl	800a044 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b3a6:	68bb      	ldr	r3, [r7, #8]
 800b3a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b3aa:	4b25      	ldr	r3, [pc, #148]	@ (800b440 <xTaskIncrementTick+0x160>)
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	429a      	cmp	r2, r3
 800b3b0:	d903      	bls.n	800b3ba <xTaskIncrementTick+0xda>
 800b3b2:	68bb      	ldr	r3, [r7, #8]
 800b3b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3b6:	4a22      	ldr	r2, [pc, #136]	@ (800b440 <xTaskIncrementTick+0x160>)
 800b3b8:	6013      	str	r3, [r2, #0]
 800b3ba:	68bb      	ldr	r3, [r7, #8]
 800b3bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b3be:	4613      	mov	r3, r2
 800b3c0:	009b      	lsls	r3, r3, #2
 800b3c2:	4413      	add	r3, r2
 800b3c4:	009b      	lsls	r3, r3, #2
 800b3c6:	4a1f      	ldr	r2, [pc, #124]	@ (800b444 <xTaskIncrementTick+0x164>)
 800b3c8:	441a      	add	r2, r3
 800b3ca:	68bb      	ldr	r3, [r7, #8]
 800b3cc:	3304      	adds	r3, #4
 800b3ce:	4619      	mov	r1, r3
 800b3d0:	4610      	mov	r0, r2
 800b3d2:	f7fe fdda 	bl	8009f8a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b3d6:	68bb      	ldr	r3, [r7, #8]
 800b3d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b3da:	4b1b      	ldr	r3, [pc, #108]	@ (800b448 <xTaskIncrementTick+0x168>)
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3e0:	429a      	cmp	r2, r3
 800b3e2:	d3b8      	bcc.n	800b356 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800b3e4:	2301      	movs	r3, #1
 800b3e6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b3e8:	e7b5      	b.n	800b356 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b3ea:	4b17      	ldr	r3, [pc, #92]	@ (800b448 <xTaskIncrementTick+0x168>)
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b3f0:	4914      	ldr	r1, [pc, #80]	@ (800b444 <xTaskIncrementTick+0x164>)
 800b3f2:	4613      	mov	r3, r2
 800b3f4:	009b      	lsls	r3, r3, #2
 800b3f6:	4413      	add	r3, r2
 800b3f8:	009b      	lsls	r3, r3, #2
 800b3fa:	440b      	add	r3, r1
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	2b01      	cmp	r3, #1
 800b400:	d901      	bls.n	800b406 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800b402:	2301      	movs	r3, #1
 800b404:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b406:	4b11      	ldr	r3, [pc, #68]	@ (800b44c <xTaskIncrementTick+0x16c>)
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d007      	beq.n	800b41e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800b40e:	2301      	movs	r3, #1
 800b410:	617b      	str	r3, [r7, #20]
 800b412:	e004      	b.n	800b41e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b414:	4b0e      	ldr	r3, [pc, #56]	@ (800b450 <xTaskIncrementTick+0x170>)
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	3301      	adds	r3, #1
 800b41a:	4a0d      	ldr	r2, [pc, #52]	@ (800b450 <xTaskIncrementTick+0x170>)
 800b41c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b41e:	697b      	ldr	r3, [r7, #20]
}
 800b420:	4618      	mov	r0, r3
 800b422:	3718      	adds	r7, #24
 800b424:	46bd      	mov	sp, r7
 800b426:	bd80      	pop	{r7, pc}
 800b428:	20001490 	.word	0x20001490
 800b42c:	2000146c 	.word	0x2000146c
 800b430:	20001420 	.word	0x20001420
 800b434:	20001424 	.word	0x20001424
 800b438:	20001480 	.word	0x20001480
 800b43c:	20001488 	.word	0x20001488
 800b440:	20001470 	.word	0x20001470
 800b444:	20000f98 	.word	0x20000f98
 800b448:	20000f94 	.word	0x20000f94
 800b44c:	2000147c 	.word	0x2000147c
 800b450:	20001478 	.word	0x20001478

0800b454 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b454:	b580      	push	{r7, lr}
 800b456:	b086      	sub	sp, #24
 800b458:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b45a:	4b3d      	ldr	r3, [pc, #244]	@ (800b550 <vTaskSwitchContext+0xfc>)
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d003      	beq.n	800b46a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b462:	4b3c      	ldr	r3, [pc, #240]	@ (800b554 <vTaskSwitchContext+0x100>)
 800b464:	2201      	movs	r2, #1
 800b466:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b468:	e06e      	b.n	800b548 <vTaskSwitchContext+0xf4>
		xYieldPending = pdFALSE;
 800b46a:	4b3a      	ldr	r3, [pc, #232]	@ (800b554 <vTaskSwitchContext+0x100>)
 800b46c:	2200      	movs	r2, #0
 800b46e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800b470:	4b39      	ldr	r3, [pc, #228]	@ (800b558 <vTaskSwitchContext+0x104>)
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b476:	613b      	str	r3, [r7, #16]
 800b478:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 800b47c:	60fb      	str	r3, [r7, #12]
 800b47e:	693b      	ldr	r3, [r7, #16]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	68fa      	ldr	r2, [r7, #12]
 800b484:	429a      	cmp	r2, r3
 800b486:	d111      	bne.n	800b4ac <vTaskSwitchContext+0x58>
 800b488:	693b      	ldr	r3, [r7, #16]
 800b48a:	3304      	adds	r3, #4
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	68fa      	ldr	r2, [r7, #12]
 800b490:	429a      	cmp	r2, r3
 800b492:	d10b      	bne.n	800b4ac <vTaskSwitchContext+0x58>
 800b494:	693b      	ldr	r3, [r7, #16]
 800b496:	3308      	adds	r3, #8
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	68fa      	ldr	r2, [r7, #12]
 800b49c:	429a      	cmp	r2, r3
 800b49e:	d105      	bne.n	800b4ac <vTaskSwitchContext+0x58>
 800b4a0:	693b      	ldr	r3, [r7, #16]
 800b4a2:	330c      	adds	r3, #12
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	68fa      	ldr	r2, [r7, #12]
 800b4a8:	429a      	cmp	r2, r3
 800b4aa:	d008      	beq.n	800b4be <vTaskSwitchContext+0x6a>
 800b4ac:	4b2a      	ldr	r3, [pc, #168]	@ (800b558 <vTaskSwitchContext+0x104>)
 800b4ae:	681a      	ldr	r2, [r3, #0]
 800b4b0:	4b29      	ldr	r3, [pc, #164]	@ (800b558 <vTaskSwitchContext+0x104>)
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	3334      	adds	r3, #52	@ 0x34
 800b4b6:	4619      	mov	r1, r3
 800b4b8:	4610      	mov	r0, r2
 800b4ba:	f7fa f92d 	bl	8005718 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b4be:	4b27      	ldr	r3, [pc, #156]	@ (800b55c <vTaskSwitchContext+0x108>)
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	617b      	str	r3, [r7, #20]
 800b4c4:	e011      	b.n	800b4ea <vTaskSwitchContext+0x96>
 800b4c6:	697b      	ldr	r3, [r7, #20]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d10b      	bne.n	800b4e4 <vTaskSwitchContext+0x90>
	__asm volatile
 800b4cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4d0:	f383 8811 	msr	BASEPRI, r3
 800b4d4:	f3bf 8f6f 	isb	sy
 800b4d8:	f3bf 8f4f 	dsb	sy
 800b4dc:	607b      	str	r3, [r7, #4]
}
 800b4de:	bf00      	nop
 800b4e0:	bf00      	nop
 800b4e2:	e7fd      	b.n	800b4e0 <vTaskSwitchContext+0x8c>
 800b4e4:	697b      	ldr	r3, [r7, #20]
 800b4e6:	3b01      	subs	r3, #1
 800b4e8:	617b      	str	r3, [r7, #20]
 800b4ea:	491d      	ldr	r1, [pc, #116]	@ (800b560 <vTaskSwitchContext+0x10c>)
 800b4ec:	697a      	ldr	r2, [r7, #20]
 800b4ee:	4613      	mov	r3, r2
 800b4f0:	009b      	lsls	r3, r3, #2
 800b4f2:	4413      	add	r3, r2
 800b4f4:	009b      	lsls	r3, r3, #2
 800b4f6:	440b      	add	r3, r1
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d0e3      	beq.n	800b4c6 <vTaskSwitchContext+0x72>
 800b4fe:	697a      	ldr	r2, [r7, #20]
 800b500:	4613      	mov	r3, r2
 800b502:	009b      	lsls	r3, r3, #2
 800b504:	4413      	add	r3, r2
 800b506:	009b      	lsls	r3, r3, #2
 800b508:	4a15      	ldr	r2, [pc, #84]	@ (800b560 <vTaskSwitchContext+0x10c>)
 800b50a:	4413      	add	r3, r2
 800b50c:	60bb      	str	r3, [r7, #8]
 800b50e:	68bb      	ldr	r3, [r7, #8]
 800b510:	685b      	ldr	r3, [r3, #4]
 800b512:	685a      	ldr	r2, [r3, #4]
 800b514:	68bb      	ldr	r3, [r7, #8]
 800b516:	605a      	str	r2, [r3, #4]
 800b518:	68bb      	ldr	r3, [r7, #8]
 800b51a:	685a      	ldr	r2, [r3, #4]
 800b51c:	68bb      	ldr	r3, [r7, #8]
 800b51e:	3308      	adds	r3, #8
 800b520:	429a      	cmp	r2, r3
 800b522:	d104      	bne.n	800b52e <vTaskSwitchContext+0xda>
 800b524:	68bb      	ldr	r3, [r7, #8]
 800b526:	685b      	ldr	r3, [r3, #4]
 800b528:	685a      	ldr	r2, [r3, #4]
 800b52a:	68bb      	ldr	r3, [r7, #8]
 800b52c:	605a      	str	r2, [r3, #4]
 800b52e:	68bb      	ldr	r3, [r7, #8]
 800b530:	685b      	ldr	r3, [r3, #4]
 800b532:	68db      	ldr	r3, [r3, #12]
 800b534:	4a08      	ldr	r2, [pc, #32]	@ (800b558 <vTaskSwitchContext+0x104>)
 800b536:	6013      	str	r3, [r2, #0]
 800b538:	4a08      	ldr	r2, [pc, #32]	@ (800b55c <vTaskSwitchContext+0x108>)
 800b53a:	697b      	ldr	r3, [r7, #20]
 800b53c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b53e:	4b06      	ldr	r3, [pc, #24]	@ (800b558 <vTaskSwitchContext+0x104>)
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	3354      	adds	r3, #84	@ 0x54
 800b544:	4a07      	ldr	r2, [pc, #28]	@ (800b564 <vTaskSwitchContext+0x110>)
 800b546:	6013      	str	r3, [r2, #0]
}
 800b548:	bf00      	nop
 800b54a:	3718      	adds	r7, #24
 800b54c:	46bd      	mov	sp, r7
 800b54e:	bd80      	pop	{r7, pc}
 800b550:	20001490 	.word	0x20001490
 800b554:	2000147c 	.word	0x2000147c
 800b558:	20000f94 	.word	0x20000f94
 800b55c:	20001470 	.word	0x20001470
 800b560:	20000f98 	.word	0x20000f98
 800b564:	20000120 	.word	0x20000120

0800b568 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b568:	b580      	push	{r7, lr}
 800b56a:	b084      	sub	sp, #16
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
 800b570:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	2b00      	cmp	r3, #0
 800b576:	d10b      	bne.n	800b590 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800b578:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b57c:	f383 8811 	msr	BASEPRI, r3
 800b580:	f3bf 8f6f 	isb	sy
 800b584:	f3bf 8f4f 	dsb	sy
 800b588:	60fb      	str	r3, [r7, #12]
}
 800b58a:	bf00      	nop
 800b58c:	bf00      	nop
 800b58e:	e7fd      	b.n	800b58c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b590:	4b07      	ldr	r3, [pc, #28]	@ (800b5b0 <vTaskPlaceOnEventList+0x48>)
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	3318      	adds	r3, #24
 800b596:	4619      	mov	r1, r3
 800b598:	6878      	ldr	r0, [r7, #4]
 800b59a:	f7fe fd1a 	bl	8009fd2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b59e:	2101      	movs	r1, #1
 800b5a0:	6838      	ldr	r0, [r7, #0]
 800b5a2:	f000 fa87 	bl	800bab4 <prvAddCurrentTaskToDelayedList>
}
 800b5a6:	bf00      	nop
 800b5a8:	3710      	adds	r7, #16
 800b5aa:	46bd      	mov	sp, r7
 800b5ac:	bd80      	pop	{r7, pc}
 800b5ae:	bf00      	nop
 800b5b0:	20000f94 	.word	0x20000f94

0800b5b4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b5b4:	b580      	push	{r7, lr}
 800b5b6:	b086      	sub	sp, #24
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	60f8      	str	r0, [r7, #12]
 800b5bc:	60b9      	str	r1, [r7, #8]
 800b5be:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d10b      	bne.n	800b5de <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800b5c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5ca:	f383 8811 	msr	BASEPRI, r3
 800b5ce:	f3bf 8f6f 	isb	sy
 800b5d2:	f3bf 8f4f 	dsb	sy
 800b5d6:	617b      	str	r3, [r7, #20]
}
 800b5d8:	bf00      	nop
 800b5da:	bf00      	nop
 800b5dc:	e7fd      	b.n	800b5da <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b5de:	4b0a      	ldr	r3, [pc, #40]	@ (800b608 <vTaskPlaceOnEventListRestricted+0x54>)
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	3318      	adds	r3, #24
 800b5e4:	4619      	mov	r1, r3
 800b5e6:	68f8      	ldr	r0, [r7, #12]
 800b5e8:	f7fe fccf 	bl	8009f8a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d002      	beq.n	800b5f8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800b5f2:	f04f 33ff 	mov.w	r3, #4294967295
 800b5f6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b5f8:	6879      	ldr	r1, [r7, #4]
 800b5fa:	68b8      	ldr	r0, [r7, #8]
 800b5fc:	f000 fa5a 	bl	800bab4 <prvAddCurrentTaskToDelayedList>
	}
 800b600:	bf00      	nop
 800b602:	3718      	adds	r7, #24
 800b604:	46bd      	mov	sp, r7
 800b606:	bd80      	pop	{r7, pc}
 800b608:	20000f94 	.word	0x20000f94

0800b60c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b60c:	b580      	push	{r7, lr}
 800b60e:	b086      	sub	sp, #24
 800b610:	af00      	add	r7, sp, #0
 800b612:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	68db      	ldr	r3, [r3, #12]
 800b618:	68db      	ldr	r3, [r3, #12]
 800b61a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b61c:	693b      	ldr	r3, [r7, #16]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d10b      	bne.n	800b63a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800b622:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b626:	f383 8811 	msr	BASEPRI, r3
 800b62a:	f3bf 8f6f 	isb	sy
 800b62e:	f3bf 8f4f 	dsb	sy
 800b632:	60fb      	str	r3, [r7, #12]
}
 800b634:	bf00      	nop
 800b636:	bf00      	nop
 800b638:	e7fd      	b.n	800b636 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b63a:	693b      	ldr	r3, [r7, #16]
 800b63c:	3318      	adds	r3, #24
 800b63e:	4618      	mov	r0, r3
 800b640:	f7fe fd00 	bl	800a044 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b644:	4b1d      	ldr	r3, [pc, #116]	@ (800b6bc <xTaskRemoveFromEventList+0xb0>)
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d11d      	bne.n	800b688 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b64c:	693b      	ldr	r3, [r7, #16]
 800b64e:	3304      	adds	r3, #4
 800b650:	4618      	mov	r0, r3
 800b652:	f7fe fcf7 	bl	800a044 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b656:	693b      	ldr	r3, [r7, #16]
 800b658:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b65a:	4b19      	ldr	r3, [pc, #100]	@ (800b6c0 <xTaskRemoveFromEventList+0xb4>)
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	429a      	cmp	r2, r3
 800b660:	d903      	bls.n	800b66a <xTaskRemoveFromEventList+0x5e>
 800b662:	693b      	ldr	r3, [r7, #16]
 800b664:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b666:	4a16      	ldr	r2, [pc, #88]	@ (800b6c0 <xTaskRemoveFromEventList+0xb4>)
 800b668:	6013      	str	r3, [r2, #0]
 800b66a:	693b      	ldr	r3, [r7, #16]
 800b66c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b66e:	4613      	mov	r3, r2
 800b670:	009b      	lsls	r3, r3, #2
 800b672:	4413      	add	r3, r2
 800b674:	009b      	lsls	r3, r3, #2
 800b676:	4a13      	ldr	r2, [pc, #76]	@ (800b6c4 <xTaskRemoveFromEventList+0xb8>)
 800b678:	441a      	add	r2, r3
 800b67a:	693b      	ldr	r3, [r7, #16]
 800b67c:	3304      	adds	r3, #4
 800b67e:	4619      	mov	r1, r3
 800b680:	4610      	mov	r0, r2
 800b682:	f7fe fc82 	bl	8009f8a <vListInsertEnd>
 800b686:	e005      	b.n	800b694 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b688:	693b      	ldr	r3, [r7, #16]
 800b68a:	3318      	adds	r3, #24
 800b68c:	4619      	mov	r1, r3
 800b68e:	480e      	ldr	r0, [pc, #56]	@ (800b6c8 <xTaskRemoveFromEventList+0xbc>)
 800b690:	f7fe fc7b 	bl	8009f8a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b694:	693b      	ldr	r3, [r7, #16]
 800b696:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b698:	4b0c      	ldr	r3, [pc, #48]	@ (800b6cc <xTaskRemoveFromEventList+0xc0>)
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b69e:	429a      	cmp	r2, r3
 800b6a0:	d905      	bls.n	800b6ae <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b6a2:	2301      	movs	r3, #1
 800b6a4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b6a6:	4b0a      	ldr	r3, [pc, #40]	@ (800b6d0 <xTaskRemoveFromEventList+0xc4>)
 800b6a8:	2201      	movs	r2, #1
 800b6aa:	601a      	str	r2, [r3, #0]
 800b6ac:	e001      	b.n	800b6b2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b6b2:	697b      	ldr	r3, [r7, #20]
}
 800b6b4:	4618      	mov	r0, r3
 800b6b6:	3718      	adds	r7, #24
 800b6b8:	46bd      	mov	sp, r7
 800b6ba:	bd80      	pop	{r7, pc}
 800b6bc:	20001490 	.word	0x20001490
 800b6c0:	20001470 	.word	0x20001470
 800b6c4:	20000f98 	.word	0x20000f98
 800b6c8:	20001428 	.word	0x20001428
 800b6cc:	20000f94 	.word	0x20000f94
 800b6d0:	2000147c 	.word	0x2000147c

0800b6d4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b6d4:	b480      	push	{r7}
 800b6d6:	b083      	sub	sp, #12
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b6dc:	4b06      	ldr	r3, [pc, #24]	@ (800b6f8 <vTaskInternalSetTimeOutState+0x24>)
 800b6de:	681a      	ldr	r2, [r3, #0]
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b6e4:	4b05      	ldr	r3, [pc, #20]	@ (800b6fc <vTaskInternalSetTimeOutState+0x28>)
 800b6e6:	681a      	ldr	r2, [r3, #0]
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	605a      	str	r2, [r3, #4]
}
 800b6ec:	bf00      	nop
 800b6ee:	370c      	adds	r7, #12
 800b6f0:	46bd      	mov	sp, r7
 800b6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f6:	4770      	bx	lr
 800b6f8:	20001480 	.word	0x20001480
 800b6fc:	2000146c 	.word	0x2000146c

0800b700 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b700:	b580      	push	{r7, lr}
 800b702:	b088      	sub	sp, #32
 800b704:	af00      	add	r7, sp, #0
 800b706:	6078      	str	r0, [r7, #4]
 800b708:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d10b      	bne.n	800b728 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800b710:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b714:	f383 8811 	msr	BASEPRI, r3
 800b718:	f3bf 8f6f 	isb	sy
 800b71c:	f3bf 8f4f 	dsb	sy
 800b720:	613b      	str	r3, [r7, #16]
}
 800b722:	bf00      	nop
 800b724:	bf00      	nop
 800b726:	e7fd      	b.n	800b724 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b728:	683b      	ldr	r3, [r7, #0]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d10b      	bne.n	800b746 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800b72e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b732:	f383 8811 	msr	BASEPRI, r3
 800b736:	f3bf 8f6f 	isb	sy
 800b73a:	f3bf 8f4f 	dsb	sy
 800b73e:	60fb      	str	r3, [r7, #12]
}
 800b740:	bf00      	nop
 800b742:	bf00      	nop
 800b744:	e7fd      	b.n	800b742 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800b746:	f000 fe97 	bl	800c478 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b74a:	4b1d      	ldr	r3, [pc, #116]	@ (800b7c0 <xTaskCheckForTimeOut+0xc0>)
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	685b      	ldr	r3, [r3, #4]
 800b754:	69ba      	ldr	r2, [r7, #24]
 800b756:	1ad3      	subs	r3, r2, r3
 800b758:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b75a:	683b      	ldr	r3, [r7, #0]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b762:	d102      	bne.n	800b76a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b764:	2300      	movs	r3, #0
 800b766:	61fb      	str	r3, [r7, #28]
 800b768:	e023      	b.n	800b7b2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	681a      	ldr	r2, [r3, #0]
 800b76e:	4b15      	ldr	r3, [pc, #84]	@ (800b7c4 <xTaskCheckForTimeOut+0xc4>)
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	429a      	cmp	r2, r3
 800b774:	d007      	beq.n	800b786 <xTaskCheckForTimeOut+0x86>
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	685b      	ldr	r3, [r3, #4]
 800b77a:	69ba      	ldr	r2, [r7, #24]
 800b77c:	429a      	cmp	r2, r3
 800b77e:	d302      	bcc.n	800b786 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b780:	2301      	movs	r3, #1
 800b782:	61fb      	str	r3, [r7, #28]
 800b784:	e015      	b.n	800b7b2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b786:	683b      	ldr	r3, [r7, #0]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	697a      	ldr	r2, [r7, #20]
 800b78c:	429a      	cmp	r2, r3
 800b78e:	d20b      	bcs.n	800b7a8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b790:	683b      	ldr	r3, [r7, #0]
 800b792:	681a      	ldr	r2, [r3, #0]
 800b794:	697b      	ldr	r3, [r7, #20]
 800b796:	1ad2      	subs	r2, r2, r3
 800b798:	683b      	ldr	r3, [r7, #0]
 800b79a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b79c:	6878      	ldr	r0, [r7, #4]
 800b79e:	f7ff ff99 	bl	800b6d4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	61fb      	str	r3, [r7, #28]
 800b7a6:	e004      	b.n	800b7b2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800b7a8:	683b      	ldr	r3, [r7, #0]
 800b7aa:	2200      	movs	r2, #0
 800b7ac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b7ae:	2301      	movs	r3, #1
 800b7b0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b7b2:	f000 fe93 	bl	800c4dc <vPortExitCritical>

	return xReturn;
 800b7b6:	69fb      	ldr	r3, [r7, #28]
}
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	3720      	adds	r7, #32
 800b7bc:	46bd      	mov	sp, r7
 800b7be:	bd80      	pop	{r7, pc}
 800b7c0:	2000146c 	.word	0x2000146c
 800b7c4:	20001480 	.word	0x20001480

0800b7c8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b7c8:	b480      	push	{r7}
 800b7ca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b7cc:	4b03      	ldr	r3, [pc, #12]	@ (800b7dc <vTaskMissedYield+0x14>)
 800b7ce:	2201      	movs	r2, #1
 800b7d0:	601a      	str	r2, [r3, #0]
}
 800b7d2:	bf00      	nop
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7da:	4770      	bx	lr
 800b7dc:	2000147c 	.word	0x2000147c

0800b7e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b7e0:	b580      	push	{r7, lr}
 800b7e2:	b082      	sub	sp, #8
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b7e8:	f000 f852 	bl	800b890 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b7ec:	4b06      	ldr	r3, [pc, #24]	@ (800b808 <prvIdleTask+0x28>)
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	2b01      	cmp	r3, #1
 800b7f2:	d9f9      	bls.n	800b7e8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b7f4:	4b05      	ldr	r3, [pc, #20]	@ (800b80c <prvIdleTask+0x2c>)
 800b7f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b7fa:	601a      	str	r2, [r3, #0]
 800b7fc:	f3bf 8f4f 	dsb	sy
 800b800:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b804:	e7f0      	b.n	800b7e8 <prvIdleTask+0x8>
 800b806:	bf00      	nop
 800b808:	20000f98 	.word	0x20000f98
 800b80c:	e000ed04 	.word	0xe000ed04

0800b810 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b810:	b580      	push	{r7, lr}
 800b812:	b082      	sub	sp, #8
 800b814:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b816:	2300      	movs	r3, #0
 800b818:	607b      	str	r3, [r7, #4]
 800b81a:	e00c      	b.n	800b836 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b81c:	687a      	ldr	r2, [r7, #4]
 800b81e:	4613      	mov	r3, r2
 800b820:	009b      	lsls	r3, r3, #2
 800b822:	4413      	add	r3, r2
 800b824:	009b      	lsls	r3, r3, #2
 800b826:	4a12      	ldr	r2, [pc, #72]	@ (800b870 <prvInitialiseTaskLists+0x60>)
 800b828:	4413      	add	r3, r2
 800b82a:	4618      	mov	r0, r3
 800b82c:	f7fe fb80 	bl	8009f30 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	3301      	adds	r3, #1
 800b834:	607b      	str	r3, [r7, #4]
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	2b37      	cmp	r3, #55	@ 0x37
 800b83a:	d9ef      	bls.n	800b81c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b83c:	480d      	ldr	r0, [pc, #52]	@ (800b874 <prvInitialiseTaskLists+0x64>)
 800b83e:	f7fe fb77 	bl	8009f30 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b842:	480d      	ldr	r0, [pc, #52]	@ (800b878 <prvInitialiseTaskLists+0x68>)
 800b844:	f7fe fb74 	bl	8009f30 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b848:	480c      	ldr	r0, [pc, #48]	@ (800b87c <prvInitialiseTaskLists+0x6c>)
 800b84a:	f7fe fb71 	bl	8009f30 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b84e:	480c      	ldr	r0, [pc, #48]	@ (800b880 <prvInitialiseTaskLists+0x70>)
 800b850:	f7fe fb6e 	bl	8009f30 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b854:	480b      	ldr	r0, [pc, #44]	@ (800b884 <prvInitialiseTaskLists+0x74>)
 800b856:	f7fe fb6b 	bl	8009f30 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b85a:	4b0b      	ldr	r3, [pc, #44]	@ (800b888 <prvInitialiseTaskLists+0x78>)
 800b85c:	4a05      	ldr	r2, [pc, #20]	@ (800b874 <prvInitialiseTaskLists+0x64>)
 800b85e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b860:	4b0a      	ldr	r3, [pc, #40]	@ (800b88c <prvInitialiseTaskLists+0x7c>)
 800b862:	4a05      	ldr	r2, [pc, #20]	@ (800b878 <prvInitialiseTaskLists+0x68>)
 800b864:	601a      	str	r2, [r3, #0]
}
 800b866:	bf00      	nop
 800b868:	3708      	adds	r7, #8
 800b86a:	46bd      	mov	sp, r7
 800b86c:	bd80      	pop	{r7, pc}
 800b86e:	bf00      	nop
 800b870:	20000f98 	.word	0x20000f98
 800b874:	200013f8 	.word	0x200013f8
 800b878:	2000140c 	.word	0x2000140c
 800b87c:	20001428 	.word	0x20001428
 800b880:	2000143c 	.word	0x2000143c
 800b884:	20001454 	.word	0x20001454
 800b888:	20001420 	.word	0x20001420
 800b88c:	20001424 	.word	0x20001424

0800b890 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b890:	b580      	push	{r7, lr}
 800b892:	b082      	sub	sp, #8
 800b894:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b896:	e019      	b.n	800b8cc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b898:	f000 fdee 	bl	800c478 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b89c:	4b10      	ldr	r3, [pc, #64]	@ (800b8e0 <prvCheckTasksWaitingTermination+0x50>)
 800b89e:	68db      	ldr	r3, [r3, #12]
 800b8a0:	68db      	ldr	r3, [r3, #12]
 800b8a2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	3304      	adds	r3, #4
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	f7fe fbcb 	bl	800a044 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b8ae:	4b0d      	ldr	r3, [pc, #52]	@ (800b8e4 <prvCheckTasksWaitingTermination+0x54>)
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	3b01      	subs	r3, #1
 800b8b4:	4a0b      	ldr	r2, [pc, #44]	@ (800b8e4 <prvCheckTasksWaitingTermination+0x54>)
 800b8b6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b8b8:	4b0b      	ldr	r3, [pc, #44]	@ (800b8e8 <prvCheckTasksWaitingTermination+0x58>)
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	3b01      	subs	r3, #1
 800b8be:	4a0a      	ldr	r2, [pc, #40]	@ (800b8e8 <prvCheckTasksWaitingTermination+0x58>)
 800b8c0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b8c2:	f000 fe0b 	bl	800c4dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b8c6:	6878      	ldr	r0, [r7, #4]
 800b8c8:	f000 f810 	bl	800b8ec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b8cc:	4b06      	ldr	r3, [pc, #24]	@ (800b8e8 <prvCheckTasksWaitingTermination+0x58>)
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d1e1      	bne.n	800b898 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b8d4:	bf00      	nop
 800b8d6:	bf00      	nop
 800b8d8:	3708      	adds	r7, #8
 800b8da:	46bd      	mov	sp, r7
 800b8dc:	bd80      	pop	{r7, pc}
 800b8de:	bf00      	nop
 800b8e0:	2000143c 	.word	0x2000143c
 800b8e4:	20001468 	.word	0x20001468
 800b8e8:	20001450 	.word	0x20001450

0800b8ec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b8ec:	b580      	push	{r7, lr}
 800b8ee:	b084      	sub	sp, #16
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	3354      	adds	r3, #84	@ 0x54
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	f002 f8b7 	bl	800da6c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b904:	2b00      	cmp	r3, #0
 800b906:	d108      	bne.n	800b91a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b90c:	4618      	mov	r0, r3
 800b90e:	f000 ffa9 	bl	800c864 <vPortFree>
				vPortFree( pxTCB );
 800b912:	6878      	ldr	r0, [r7, #4]
 800b914:	f000 ffa6 	bl	800c864 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b918:	e019      	b.n	800b94e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b920:	2b01      	cmp	r3, #1
 800b922:	d103      	bne.n	800b92c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b924:	6878      	ldr	r0, [r7, #4]
 800b926:	f000 ff9d 	bl	800c864 <vPortFree>
	}
 800b92a:	e010      	b.n	800b94e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b932:	2b02      	cmp	r3, #2
 800b934:	d00b      	beq.n	800b94e <prvDeleteTCB+0x62>
	__asm volatile
 800b936:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b93a:	f383 8811 	msr	BASEPRI, r3
 800b93e:	f3bf 8f6f 	isb	sy
 800b942:	f3bf 8f4f 	dsb	sy
 800b946:	60fb      	str	r3, [r7, #12]
}
 800b948:	bf00      	nop
 800b94a:	bf00      	nop
 800b94c:	e7fd      	b.n	800b94a <prvDeleteTCB+0x5e>
	}
 800b94e:	bf00      	nop
 800b950:	3710      	adds	r7, #16
 800b952:	46bd      	mov	sp, r7
 800b954:	bd80      	pop	{r7, pc}
	...

0800b958 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b958:	b480      	push	{r7}
 800b95a:	b083      	sub	sp, #12
 800b95c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b95e:	4b0c      	ldr	r3, [pc, #48]	@ (800b990 <prvResetNextTaskUnblockTime+0x38>)
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	2b00      	cmp	r3, #0
 800b966:	d104      	bne.n	800b972 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b968:	4b0a      	ldr	r3, [pc, #40]	@ (800b994 <prvResetNextTaskUnblockTime+0x3c>)
 800b96a:	f04f 32ff 	mov.w	r2, #4294967295
 800b96e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b970:	e008      	b.n	800b984 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b972:	4b07      	ldr	r3, [pc, #28]	@ (800b990 <prvResetNextTaskUnblockTime+0x38>)
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	68db      	ldr	r3, [r3, #12]
 800b978:	68db      	ldr	r3, [r3, #12]
 800b97a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	685b      	ldr	r3, [r3, #4]
 800b980:	4a04      	ldr	r2, [pc, #16]	@ (800b994 <prvResetNextTaskUnblockTime+0x3c>)
 800b982:	6013      	str	r3, [r2, #0]
}
 800b984:	bf00      	nop
 800b986:	370c      	adds	r7, #12
 800b988:	46bd      	mov	sp, r7
 800b98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b98e:	4770      	bx	lr
 800b990:	20001420 	.word	0x20001420
 800b994:	20001488 	.word	0x20001488

0800b998 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b998:	b480      	push	{r7}
 800b99a:	b083      	sub	sp, #12
 800b99c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b99e:	4b0b      	ldr	r3, [pc, #44]	@ (800b9cc <xTaskGetSchedulerState+0x34>)
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d102      	bne.n	800b9ac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b9a6:	2301      	movs	r3, #1
 800b9a8:	607b      	str	r3, [r7, #4]
 800b9aa:	e008      	b.n	800b9be <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b9ac:	4b08      	ldr	r3, [pc, #32]	@ (800b9d0 <xTaskGetSchedulerState+0x38>)
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d102      	bne.n	800b9ba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b9b4:	2302      	movs	r3, #2
 800b9b6:	607b      	str	r3, [r7, #4]
 800b9b8:	e001      	b.n	800b9be <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b9ba:	2300      	movs	r3, #0
 800b9bc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b9be:	687b      	ldr	r3, [r7, #4]
	}
 800b9c0:	4618      	mov	r0, r3
 800b9c2:	370c      	adds	r7, #12
 800b9c4:	46bd      	mov	sp, r7
 800b9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ca:	4770      	bx	lr
 800b9cc:	20001474 	.word	0x20001474
 800b9d0:	20001490 	.word	0x20001490

0800b9d4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b9d4:	b580      	push	{r7, lr}
 800b9d6:	b086      	sub	sp, #24
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b9e0:	2300      	movs	r3, #0
 800b9e2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d058      	beq.n	800ba9c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b9ea:	4b2f      	ldr	r3, [pc, #188]	@ (800baa8 <xTaskPriorityDisinherit+0xd4>)
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	693a      	ldr	r2, [r7, #16]
 800b9f0:	429a      	cmp	r2, r3
 800b9f2:	d00b      	beq.n	800ba0c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800b9f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9f8:	f383 8811 	msr	BASEPRI, r3
 800b9fc:	f3bf 8f6f 	isb	sy
 800ba00:	f3bf 8f4f 	dsb	sy
 800ba04:	60fb      	str	r3, [r7, #12]
}
 800ba06:	bf00      	nop
 800ba08:	bf00      	nop
 800ba0a:	e7fd      	b.n	800ba08 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ba0c:	693b      	ldr	r3, [r7, #16]
 800ba0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d10b      	bne.n	800ba2c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800ba14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba18:	f383 8811 	msr	BASEPRI, r3
 800ba1c:	f3bf 8f6f 	isb	sy
 800ba20:	f3bf 8f4f 	dsb	sy
 800ba24:	60bb      	str	r3, [r7, #8]
}
 800ba26:	bf00      	nop
 800ba28:	bf00      	nop
 800ba2a:	e7fd      	b.n	800ba28 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800ba2c:	693b      	ldr	r3, [r7, #16]
 800ba2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ba30:	1e5a      	subs	r2, r3, #1
 800ba32:	693b      	ldr	r3, [r7, #16]
 800ba34:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ba36:	693b      	ldr	r3, [r7, #16]
 800ba38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba3a:	693b      	ldr	r3, [r7, #16]
 800ba3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ba3e:	429a      	cmp	r2, r3
 800ba40:	d02c      	beq.n	800ba9c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ba42:	693b      	ldr	r3, [r7, #16]
 800ba44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d128      	bne.n	800ba9c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ba4a:	693b      	ldr	r3, [r7, #16]
 800ba4c:	3304      	adds	r3, #4
 800ba4e:	4618      	mov	r0, r3
 800ba50:	f7fe faf8 	bl	800a044 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ba54:	693b      	ldr	r3, [r7, #16]
 800ba56:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ba58:	693b      	ldr	r3, [r7, #16]
 800ba5a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba5c:	693b      	ldr	r3, [r7, #16]
 800ba5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba60:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ba64:	693b      	ldr	r3, [r7, #16]
 800ba66:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ba68:	693b      	ldr	r3, [r7, #16]
 800ba6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba6c:	4b0f      	ldr	r3, [pc, #60]	@ (800baac <xTaskPriorityDisinherit+0xd8>)
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	429a      	cmp	r2, r3
 800ba72:	d903      	bls.n	800ba7c <xTaskPriorityDisinherit+0xa8>
 800ba74:	693b      	ldr	r3, [r7, #16]
 800ba76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba78:	4a0c      	ldr	r2, [pc, #48]	@ (800baac <xTaskPriorityDisinherit+0xd8>)
 800ba7a:	6013      	str	r3, [r2, #0]
 800ba7c:	693b      	ldr	r3, [r7, #16]
 800ba7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba80:	4613      	mov	r3, r2
 800ba82:	009b      	lsls	r3, r3, #2
 800ba84:	4413      	add	r3, r2
 800ba86:	009b      	lsls	r3, r3, #2
 800ba88:	4a09      	ldr	r2, [pc, #36]	@ (800bab0 <xTaskPriorityDisinherit+0xdc>)
 800ba8a:	441a      	add	r2, r3
 800ba8c:	693b      	ldr	r3, [r7, #16]
 800ba8e:	3304      	adds	r3, #4
 800ba90:	4619      	mov	r1, r3
 800ba92:	4610      	mov	r0, r2
 800ba94:	f7fe fa79 	bl	8009f8a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ba98:	2301      	movs	r3, #1
 800ba9a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ba9c:	697b      	ldr	r3, [r7, #20]
	}
 800ba9e:	4618      	mov	r0, r3
 800baa0:	3718      	adds	r7, #24
 800baa2:	46bd      	mov	sp, r7
 800baa4:	bd80      	pop	{r7, pc}
 800baa6:	bf00      	nop
 800baa8:	20000f94 	.word	0x20000f94
 800baac:	20001470 	.word	0x20001470
 800bab0:	20000f98 	.word	0x20000f98

0800bab4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bab4:	b580      	push	{r7, lr}
 800bab6:	b084      	sub	sp, #16
 800bab8:	af00      	add	r7, sp, #0
 800baba:	6078      	str	r0, [r7, #4]
 800babc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800babe:	4b21      	ldr	r3, [pc, #132]	@ (800bb44 <prvAddCurrentTaskToDelayedList+0x90>)
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bac4:	4b20      	ldr	r3, [pc, #128]	@ (800bb48 <prvAddCurrentTaskToDelayedList+0x94>)
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	3304      	adds	r3, #4
 800baca:	4618      	mov	r0, r3
 800bacc:	f7fe faba 	bl	800a044 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bad6:	d10a      	bne.n	800baee <prvAddCurrentTaskToDelayedList+0x3a>
 800bad8:	683b      	ldr	r3, [r7, #0]
 800bada:	2b00      	cmp	r3, #0
 800badc:	d007      	beq.n	800baee <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bade:	4b1a      	ldr	r3, [pc, #104]	@ (800bb48 <prvAddCurrentTaskToDelayedList+0x94>)
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	3304      	adds	r3, #4
 800bae4:	4619      	mov	r1, r3
 800bae6:	4819      	ldr	r0, [pc, #100]	@ (800bb4c <prvAddCurrentTaskToDelayedList+0x98>)
 800bae8:	f7fe fa4f 	bl	8009f8a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800baec:	e026      	b.n	800bb3c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800baee:	68fa      	ldr	r2, [r7, #12]
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	4413      	add	r3, r2
 800baf4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800baf6:	4b14      	ldr	r3, [pc, #80]	@ (800bb48 <prvAddCurrentTaskToDelayedList+0x94>)
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	68ba      	ldr	r2, [r7, #8]
 800bafc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bafe:	68ba      	ldr	r2, [r7, #8]
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	429a      	cmp	r2, r3
 800bb04:	d209      	bcs.n	800bb1a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bb06:	4b12      	ldr	r3, [pc, #72]	@ (800bb50 <prvAddCurrentTaskToDelayedList+0x9c>)
 800bb08:	681a      	ldr	r2, [r3, #0]
 800bb0a:	4b0f      	ldr	r3, [pc, #60]	@ (800bb48 <prvAddCurrentTaskToDelayedList+0x94>)
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	3304      	adds	r3, #4
 800bb10:	4619      	mov	r1, r3
 800bb12:	4610      	mov	r0, r2
 800bb14:	f7fe fa5d 	bl	8009fd2 <vListInsert>
}
 800bb18:	e010      	b.n	800bb3c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bb1a:	4b0e      	ldr	r3, [pc, #56]	@ (800bb54 <prvAddCurrentTaskToDelayedList+0xa0>)
 800bb1c:	681a      	ldr	r2, [r3, #0]
 800bb1e:	4b0a      	ldr	r3, [pc, #40]	@ (800bb48 <prvAddCurrentTaskToDelayedList+0x94>)
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	3304      	adds	r3, #4
 800bb24:	4619      	mov	r1, r3
 800bb26:	4610      	mov	r0, r2
 800bb28:	f7fe fa53 	bl	8009fd2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bb2c:	4b0a      	ldr	r3, [pc, #40]	@ (800bb58 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	68ba      	ldr	r2, [r7, #8]
 800bb32:	429a      	cmp	r2, r3
 800bb34:	d202      	bcs.n	800bb3c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800bb36:	4a08      	ldr	r2, [pc, #32]	@ (800bb58 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bb38:	68bb      	ldr	r3, [r7, #8]
 800bb3a:	6013      	str	r3, [r2, #0]
}
 800bb3c:	bf00      	nop
 800bb3e:	3710      	adds	r7, #16
 800bb40:	46bd      	mov	sp, r7
 800bb42:	bd80      	pop	{r7, pc}
 800bb44:	2000146c 	.word	0x2000146c
 800bb48:	20000f94 	.word	0x20000f94
 800bb4c:	20001454 	.word	0x20001454
 800bb50:	20001424 	.word	0x20001424
 800bb54:	20001420 	.word	0x20001420
 800bb58:	20001488 	.word	0x20001488

0800bb5c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800bb5c:	b580      	push	{r7, lr}
 800bb5e:	b08a      	sub	sp, #40	@ 0x28
 800bb60:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800bb62:	2300      	movs	r3, #0
 800bb64:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800bb66:	f000 fb13 	bl	800c190 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bb6a:	4b1d      	ldr	r3, [pc, #116]	@ (800bbe0 <xTimerCreateTimerTask+0x84>)
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d021      	beq.n	800bbb6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800bb72:	2300      	movs	r3, #0
 800bb74:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bb76:	2300      	movs	r3, #0
 800bb78:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bb7a:	1d3a      	adds	r2, r7, #4
 800bb7c:	f107 0108 	add.w	r1, r7, #8
 800bb80:	f107 030c 	add.w	r3, r7, #12
 800bb84:	4618      	mov	r0, r3
 800bb86:	f7fe f9b9 	bl	8009efc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800bb8a:	6879      	ldr	r1, [r7, #4]
 800bb8c:	68bb      	ldr	r3, [r7, #8]
 800bb8e:	68fa      	ldr	r2, [r7, #12]
 800bb90:	9202      	str	r2, [sp, #8]
 800bb92:	9301      	str	r3, [sp, #4]
 800bb94:	2302      	movs	r3, #2
 800bb96:	9300      	str	r3, [sp, #0]
 800bb98:	2300      	movs	r3, #0
 800bb9a:	460a      	mov	r2, r1
 800bb9c:	4911      	ldr	r1, [pc, #68]	@ (800bbe4 <xTimerCreateTimerTask+0x88>)
 800bb9e:	4812      	ldr	r0, [pc, #72]	@ (800bbe8 <xTimerCreateTimerTask+0x8c>)
 800bba0:	f7ff f86c 	bl	800ac7c <xTaskCreateStatic>
 800bba4:	4603      	mov	r3, r0
 800bba6:	4a11      	ldr	r2, [pc, #68]	@ (800bbec <xTimerCreateTimerTask+0x90>)
 800bba8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800bbaa:	4b10      	ldr	r3, [pc, #64]	@ (800bbec <xTimerCreateTimerTask+0x90>)
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d001      	beq.n	800bbb6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800bbb2:	2301      	movs	r3, #1
 800bbb4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800bbb6:	697b      	ldr	r3, [r7, #20]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d10b      	bne.n	800bbd4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800bbbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbc0:	f383 8811 	msr	BASEPRI, r3
 800bbc4:	f3bf 8f6f 	isb	sy
 800bbc8:	f3bf 8f4f 	dsb	sy
 800bbcc:	613b      	str	r3, [r7, #16]
}
 800bbce:	bf00      	nop
 800bbd0:	bf00      	nop
 800bbd2:	e7fd      	b.n	800bbd0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800bbd4:	697b      	ldr	r3, [r7, #20]
}
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	3718      	adds	r7, #24
 800bbda:	46bd      	mov	sp, r7
 800bbdc:	bd80      	pop	{r7, pc}
 800bbde:	bf00      	nop
 800bbe0:	200014c4 	.word	0x200014c4
 800bbe4:	0800ffbc 	.word	0x0800ffbc
 800bbe8:	0800bd29 	.word	0x0800bd29
 800bbec:	200014c8 	.word	0x200014c8

0800bbf0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800bbf0:	b580      	push	{r7, lr}
 800bbf2:	b08a      	sub	sp, #40	@ 0x28
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	60f8      	str	r0, [r7, #12]
 800bbf8:	60b9      	str	r1, [r7, #8]
 800bbfa:	607a      	str	r2, [r7, #4]
 800bbfc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800bbfe:	2300      	movs	r3, #0
 800bc00:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d10b      	bne.n	800bc20 <xTimerGenericCommand+0x30>
	__asm volatile
 800bc08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc0c:	f383 8811 	msr	BASEPRI, r3
 800bc10:	f3bf 8f6f 	isb	sy
 800bc14:	f3bf 8f4f 	dsb	sy
 800bc18:	623b      	str	r3, [r7, #32]
}
 800bc1a:	bf00      	nop
 800bc1c:	bf00      	nop
 800bc1e:	e7fd      	b.n	800bc1c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800bc20:	4b19      	ldr	r3, [pc, #100]	@ (800bc88 <xTimerGenericCommand+0x98>)
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d02a      	beq.n	800bc7e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bc28:	68bb      	ldr	r3, [r7, #8]
 800bc2a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bc34:	68bb      	ldr	r3, [r7, #8]
 800bc36:	2b05      	cmp	r3, #5
 800bc38:	dc18      	bgt.n	800bc6c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bc3a:	f7ff fead 	bl	800b998 <xTaskGetSchedulerState>
 800bc3e:	4603      	mov	r3, r0
 800bc40:	2b02      	cmp	r3, #2
 800bc42:	d109      	bne.n	800bc58 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bc44:	4b10      	ldr	r3, [pc, #64]	@ (800bc88 <xTimerGenericCommand+0x98>)
 800bc46:	6818      	ldr	r0, [r3, #0]
 800bc48:	f107 0110 	add.w	r1, r7, #16
 800bc4c:	2300      	movs	r3, #0
 800bc4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bc50:	f7fe fbd6 	bl	800a400 <xQueueGenericSend>
 800bc54:	6278      	str	r0, [r7, #36]	@ 0x24
 800bc56:	e012      	b.n	800bc7e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bc58:	4b0b      	ldr	r3, [pc, #44]	@ (800bc88 <xTimerGenericCommand+0x98>)
 800bc5a:	6818      	ldr	r0, [r3, #0]
 800bc5c:	f107 0110 	add.w	r1, r7, #16
 800bc60:	2300      	movs	r3, #0
 800bc62:	2200      	movs	r2, #0
 800bc64:	f7fe fbcc 	bl	800a400 <xQueueGenericSend>
 800bc68:	6278      	str	r0, [r7, #36]	@ 0x24
 800bc6a:	e008      	b.n	800bc7e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bc6c:	4b06      	ldr	r3, [pc, #24]	@ (800bc88 <xTimerGenericCommand+0x98>)
 800bc6e:	6818      	ldr	r0, [r3, #0]
 800bc70:	f107 0110 	add.w	r1, r7, #16
 800bc74:	2300      	movs	r3, #0
 800bc76:	683a      	ldr	r2, [r7, #0]
 800bc78:	f7fe fcc4 	bl	800a604 <xQueueGenericSendFromISR>
 800bc7c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800bc7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800bc80:	4618      	mov	r0, r3
 800bc82:	3728      	adds	r7, #40	@ 0x28
 800bc84:	46bd      	mov	sp, r7
 800bc86:	bd80      	pop	{r7, pc}
 800bc88:	200014c4 	.word	0x200014c4

0800bc8c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800bc8c:	b580      	push	{r7, lr}
 800bc8e:	b088      	sub	sp, #32
 800bc90:	af02      	add	r7, sp, #8
 800bc92:	6078      	str	r0, [r7, #4]
 800bc94:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc96:	4b23      	ldr	r3, [pc, #140]	@ (800bd24 <prvProcessExpiredTimer+0x98>)
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	68db      	ldr	r3, [r3, #12]
 800bc9c:	68db      	ldr	r3, [r3, #12]
 800bc9e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bca0:	697b      	ldr	r3, [r7, #20]
 800bca2:	3304      	adds	r3, #4
 800bca4:	4618      	mov	r0, r3
 800bca6:	f7fe f9cd 	bl	800a044 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bcaa:	697b      	ldr	r3, [r7, #20]
 800bcac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bcb0:	f003 0304 	and.w	r3, r3, #4
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d023      	beq.n	800bd00 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800bcb8:	697b      	ldr	r3, [r7, #20]
 800bcba:	699a      	ldr	r2, [r3, #24]
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	18d1      	adds	r1, r2, r3
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	683a      	ldr	r2, [r7, #0]
 800bcc4:	6978      	ldr	r0, [r7, #20]
 800bcc6:	f000 f8d5 	bl	800be74 <prvInsertTimerInActiveList>
 800bcca:	4603      	mov	r3, r0
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d020      	beq.n	800bd12 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bcd0:	2300      	movs	r3, #0
 800bcd2:	9300      	str	r3, [sp, #0]
 800bcd4:	2300      	movs	r3, #0
 800bcd6:	687a      	ldr	r2, [r7, #4]
 800bcd8:	2100      	movs	r1, #0
 800bcda:	6978      	ldr	r0, [r7, #20]
 800bcdc:	f7ff ff88 	bl	800bbf0 <xTimerGenericCommand>
 800bce0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800bce2:	693b      	ldr	r3, [r7, #16]
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d114      	bne.n	800bd12 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800bce8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcec:	f383 8811 	msr	BASEPRI, r3
 800bcf0:	f3bf 8f6f 	isb	sy
 800bcf4:	f3bf 8f4f 	dsb	sy
 800bcf8:	60fb      	str	r3, [r7, #12]
}
 800bcfa:	bf00      	nop
 800bcfc:	bf00      	nop
 800bcfe:	e7fd      	b.n	800bcfc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bd00:	697b      	ldr	r3, [r7, #20]
 800bd02:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bd06:	f023 0301 	bic.w	r3, r3, #1
 800bd0a:	b2da      	uxtb	r2, r3
 800bd0c:	697b      	ldr	r3, [r7, #20]
 800bd0e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bd12:	697b      	ldr	r3, [r7, #20]
 800bd14:	6a1b      	ldr	r3, [r3, #32]
 800bd16:	6978      	ldr	r0, [r7, #20]
 800bd18:	4798      	blx	r3
}
 800bd1a:	bf00      	nop
 800bd1c:	3718      	adds	r7, #24
 800bd1e:	46bd      	mov	sp, r7
 800bd20:	bd80      	pop	{r7, pc}
 800bd22:	bf00      	nop
 800bd24:	200014bc 	.word	0x200014bc

0800bd28 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800bd28:	b580      	push	{r7, lr}
 800bd2a:	b084      	sub	sp, #16
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bd30:	f107 0308 	add.w	r3, r7, #8
 800bd34:	4618      	mov	r0, r3
 800bd36:	f000 f859 	bl	800bdec <prvGetNextExpireTime>
 800bd3a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800bd3c:	68bb      	ldr	r3, [r7, #8]
 800bd3e:	4619      	mov	r1, r3
 800bd40:	68f8      	ldr	r0, [r7, #12]
 800bd42:	f000 f805 	bl	800bd50 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800bd46:	f000 f8d7 	bl	800bef8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bd4a:	bf00      	nop
 800bd4c:	e7f0      	b.n	800bd30 <prvTimerTask+0x8>
	...

0800bd50 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800bd50:	b580      	push	{r7, lr}
 800bd52:	b084      	sub	sp, #16
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	6078      	str	r0, [r7, #4]
 800bd58:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800bd5a:	f7ff f9f3 	bl	800b144 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bd5e:	f107 0308 	add.w	r3, r7, #8
 800bd62:	4618      	mov	r0, r3
 800bd64:	f000 f866 	bl	800be34 <prvSampleTimeNow>
 800bd68:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800bd6a:	68bb      	ldr	r3, [r7, #8]
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d130      	bne.n	800bdd2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800bd70:	683b      	ldr	r3, [r7, #0]
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d10a      	bne.n	800bd8c <prvProcessTimerOrBlockTask+0x3c>
 800bd76:	687a      	ldr	r2, [r7, #4]
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	429a      	cmp	r2, r3
 800bd7c:	d806      	bhi.n	800bd8c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800bd7e:	f7ff f9ef 	bl	800b160 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800bd82:	68f9      	ldr	r1, [r7, #12]
 800bd84:	6878      	ldr	r0, [r7, #4]
 800bd86:	f7ff ff81 	bl	800bc8c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800bd8a:	e024      	b.n	800bdd6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800bd8c:	683b      	ldr	r3, [r7, #0]
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d008      	beq.n	800bda4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800bd92:	4b13      	ldr	r3, [pc, #76]	@ (800bde0 <prvProcessTimerOrBlockTask+0x90>)
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d101      	bne.n	800bda0 <prvProcessTimerOrBlockTask+0x50>
 800bd9c:	2301      	movs	r3, #1
 800bd9e:	e000      	b.n	800bda2 <prvProcessTimerOrBlockTask+0x52>
 800bda0:	2300      	movs	r3, #0
 800bda2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bda4:	4b0f      	ldr	r3, [pc, #60]	@ (800bde4 <prvProcessTimerOrBlockTask+0x94>)
 800bda6:	6818      	ldr	r0, [r3, #0]
 800bda8:	687a      	ldr	r2, [r7, #4]
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	1ad3      	subs	r3, r2, r3
 800bdae:	683a      	ldr	r2, [r7, #0]
 800bdb0:	4619      	mov	r1, r3
 800bdb2:	f7fe ff2f 	bl	800ac14 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800bdb6:	f7ff f9d3 	bl	800b160 <xTaskResumeAll>
 800bdba:	4603      	mov	r3, r0
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d10a      	bne.n	800bdd6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800bdc0:	4b09      	ldr	r3, [pc, #36]	@ (800bde8 <prvProcessTimerOrBlockTask+0x98>)
 800bdc2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bdc6:	601a      	str	r2, [r3, #0]
 800bdc8:	f3bf 8f4f 	dsb	sy
 800bdcc:	f3bf 8f6f 	isb	sy
}
 800bdd0:	e001      	b.n	800bdd6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bdd2:	f7ff f9c5 	bl	800b160 <xTaskResumeAll>
}
 800bdd6:	bf00      	nop
 800bdd8:	3710      	adds	r7, #16
 800bdda:	46bd      	mov	sp, r7
 800bddc:	bd80      	pop	{r7, pc}
 800bdde:	bf00      	nop
 800bde0:	200014c0 	.word	0x200014c0
 800bde4:	200014c4 	.word	0x200014c4
 800bde8:	e000ed04 	.word	0xe000ed04

0800bdec <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bdec:	b480      	push	{r7}
 800bdee:	b085      	sub	sp, #20
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bdf4:	4b0e      	ldr	r3, [pc, #56]	@ (800be30 <prvGetNextExpireTime+0x44>)
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d101      	bne.n	800be02 <prvGetNextExpireTime+0x16>
 800bdfe:	2201      	movs	r2, #1
 800be00:	e000      	b.n	800be04 <prvGetNextExpireTime+0x18>
 800be02:	2200      	movs	r2, #0
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d105      	bne.n	800be1c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800be10:	4b07      	ldr	r3, [pc, #28]	@ (800be30 <prvGetNextExpireTime+0x44>)
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	68db      	ldr	r3, [r3, #12]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	60fb      	str	r3, [r7, #12]
 800be1a:	e001      	b.n	800be20 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800be1c:	2300      	movs	r3, #0
 800be1e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800be20:	68fb      	ldr	r3, [r7, #12]
}
 800be22:	4618      	mov	r0, r3
 800be24:	3714      	adds	r7, #20
 800be26:	46bd      	mov	sp, r7
 800be28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be2c:	4770      	bx	lr
 800be2e:	bf00      	nop
 800be30:	200014bc 	.word	0x200014bc

0800be34 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800be34:	b580      	push	{r7, lr}
 800be36:	b084      	sub	sp, #16
 800be38:	af00      	add	r7, sp, #0
 800be3a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800be3c:	f7ff fa2e 	bl	800b29c <xTaskGetTickCount>
 800be40:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800be42:	4b0b      	ldr	r3, [pc, #44]	@ (800be70 <prvSampleTimeNow+0x3c>)
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	68fa      	ldr	r2, [r7, #12]
 800be48:	429a      	cmp	r2, r3
 800be4a:	d205      	bcs.n	800be58 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800be4c:	f000 f93a 	bl	800c0c4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	2201      	movs	r2, #1
 800be54:	601a      	str	r2, [r3, #0]
 800be56:	e002      	b.n	800be5e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	2200      	movs	r2, #0
 800be5c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800be5e:	4a04      	ldr	r2, [pc, #16]	@ (800be70 <prvSampleTimeNow+0x3c>)
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800be64:	68fb      	ldr	r3, [r7, #12]
}
 800be66:	4618      	mov	r0, r3
 800be68:	3710      	adds	r7, #16
 800be6a:	46bd      	mov	sp, r7
 800be6c:	bd80      	pop	{r7, pc}
 800be6e:	bf00      	nop
 800be70:	200014cc 	.word	0x200014cc

0800be74 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800be74:	b580      	push	{r7, lr}
 800be76:	b086      	sub	sp, #24
 800be78:	af00      	add	r7, sp, #0
 800be7a:	60f8      	str	r0, [r7, #12]
 800be7c:	60b9      	str	r1, [r7, #8]
 800be7e:	607a      	str	r2, [r7, #4]
 800be80:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800be82:	2300      	movs	r3, #0
 800be84:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	68ba      	ldr	r2, [r7, #8]
 800be8a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	68fa      	ldr	r2, [r7, #12]
 800be90:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800be92:	68ba      	ldr	r2, [r7, #8]
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	429a      	cmp	r2, r3
 800be98:	d812      	bhi.n	800bec0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800be9a:	687a      	ldr	r2, [r7, #4]
 800be9c:	683b      	ldr	r3, [r7, #0]
 800be9e:	1ad2      	subs	r2, r2, r3
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	699b      	ldr	r3, [r3, #24]
 800bea4:	429a      	cmp	r2, r3
 800bea6:	d302      	bcc.n	800beae <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800bea8:	2301      	movs	r3, #1
 800beaa:	617b      	str	r3, [r7, #20]
 800beac:	e01b      	b.n	800bee6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800beae:	4b10      	ldr	r3, [pc, #64]	@ (800bef0 <prvInsertTimerInActiveList+0x7c>)
 800beb0:	681a      	ldr	r2, [r3, #0]
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	3304      	adds	r3, #4
 800beb6:	4619      	mov	r1, r3
 800beb8:	4610      	mov	r0, r2
 800beba:	f7fe f88a 	bl	8009fd2 <vListInsert>
 800bebe:	e012      	b.n	800bee6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bec0:	687a      	ldr	r2, [r7, #4]
 800bec2:	683b      	ldr	r3, [r7, #0]
 800bec4:	429a      	cmp	r2, r3
 800bec6:	d206      	bcs.n	800bed6 <prvInsertTimerInActiveList+0x62>
 800bec8:	68ba      	ldr	r2, [r7, #8]
 800beca:	683b      	ldr	r3, [r7, #0]
 800becc:	429a      	cmp	r2, r3
 800bece:	d302      	bcc.n	800bed6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800bed0:	2301      	movs	r3, #1
 800bed2:	617b      	str	r3, [r7, #20]
 800bed4:	e007      	b.n	800bee6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bed6:	4b07      	ldr	r3, [pc, #28]	@ (800bef4 <prvInsertTimerInActiveList+0x80>)
 800bed8:	681a      	ldr	r2, [r3, #0]
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	3304      	adds	r3, #4
 800bede:	4619      	mov	r1, r3
 800bee0:	4610      	mov	r0, r2
 800bee2:	f7fe f876 	bl	8009fd2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800bee6:	697b      	ldr	r3, [r7, #20]
}
 800bee8:	4618      	mov	r0, r3
 800beea:	3718      	adds	r7, #24
 800beec:	46bd      	mov	sp, r7
 800beee:	bd80      	pop	{r7, pc}
 800bef0:	200014c0 	.word	0x200014c0
 800bef4:	200014bc 	.word	0x200014bc

0800bef8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800bef8:	b580      	push	{r7, lr}
 800befa:	b08e      	sub	sp, #56	@ 0x38
 800befc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800befe:	e0ce      	b.n	800c09e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	da19      	bge.n	800bf3a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800bf06:	1d3b      	adds	r3, r7, #4
 800bf08:	3304      	adds	r3, #4
 800bf0a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800bf0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d10b      	bne.n	800bf2a <prvProcessReceivedCommands+0x32>
	__asm volatile
 800bf12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf16:	f383 8811 	msr	BASEPRI, r3
 800bf1a:	f3bf 8f6f 	isb	sy
 800bf1e:	f3bf 8f4f 	dsb	sy
 800bf22:	61fb      	str	r3, [r7, #28]
}
 800bf24:	bf00      	nop
 800bf26:	bf00      	nop
 800bf28:	e7fd      	b.n	800bf26 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800bf2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bf30:	6850      	ldr	r0, [r2, #4]
 800bf32:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bf34:	6892      	ldr	r2, [r2, #8]
 800bf36:	4611      	mov	r1, r2
 800bf38:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	f2c0 80ae 	blt.w	800c09e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bf46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf48:	695b      	ldr	r3, [r3, #20]
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d004      	beq.n	800bf58 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bf4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf50:	3304      	adds	r3, #4
 800bf52:	4618      	mov	r0, r3
 800bf54:	f7fe f876 	bl	800a044 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bf58:	463b      	mov	r3, r7
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	f7ff ff6a 	bl	800be34 <prvSampleTimeNow>
 800bf60:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	2b09      	cmp	r3, #9
 800bf66:	f200 8097 	bhi.w	800c098 <prvProcessReceivedCommands+0x1a0>
 800bf6a:	a201      	add	r2, pc, #4	@ (adr r2, 800bf70 <prvProcessReceivedCommands+0x78>)
 800bf6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf70:	0800bf99 	.word	0x0800bf99
 800bf74:	0800bf99 	.word	0x0800bf99
 800bf78:	0800bf99 	.word	0x0800bf99
 800bf7c:	0800c00f 	.word	0x0800c00f
 800bf80:	0800c023 	.word	0x0800c023
 800bf84:	0800c06f 	.word	0x0800c06f
 800bf88:	0800bf99 	.word	0x0800bf99
 800bf8c:	0800bf99 	.word	0x0800bf99
 800bf90:	0800c00f 	.word	0x0800c00f
 800bf94:	0800c023 	.word	0x0800c023
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bf98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf9a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bf9e:	f043 0301 	orr.w	r3, r3, #1
 800bfa2:	b2da      	uxtb	r2, r3
 800bfa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfa6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800bfaa:	68ba      	ldr	r2, [r7, #8]
 800bfac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfae:	699b      	ldr	r3, [r3, #24]
 800bfb0:	18d1      	adds	r1, r2, r3
 800bfb2:	68bb      	ldr	r3, [r7, #8]
 800bfb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bfb6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bfb8:	f7ff ff5c 	bl	800be74 <prvInsertTimerInActiveList>
 800bfbc:	4603      	mov	r3, r0
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d06c      	beq.n	800c09c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bfc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfc4:	6a1b      	ldr	r3, [r3, #32]
 800bfc6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bfc8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bfca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfcc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bfd0:	f003 0304 	and.w	r3, r3, #4
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d061      	beq.n	800c09c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800bfd8:	68ba      	ldr	r2, [r7, #8]
 800bfda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfdc:	699b      	ldr	r3, [r3, #24]
 800bfde:	441a      	add	r2, r3
 800bfe0:	2300      	movs	r3, #0
 800bfe2:	9300      	str	r3, [sp, #0]
 800bfe4:	2300      	movs	r3, #0
 800bfe6:	2100      	movs	r1, #0
 800bfe8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bfea:	f7ff fe01 	bl	800bbf0 <xTimerGenericCommand>
 800bfee:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800bff0:	6a3b      	ldr	r3, [r7, #32]
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d152      	bne.n	800c09c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800bff6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bffa:	f383 8811 	msr	BASEPRI, r3
 800bffe:	f3bf 8f6f 	isb	sy
 800c002:	f3bf 8f4f 	dsb	sy
 800c006:	61bb      	str	r3, [r7, #24]
}
 800c008:	bf00      	nop
 800c00a:	bf00      	nop
 800c00c:	e7fd      	b.n	800c00a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c00e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c010:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c014:	f023 0301 	bic.w	r3, r3, #1
 800c018:	b2da      	uxtb	r2, r3
 800c01a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c01c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c020:	e03d      	b.n	800c09e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c022:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c024:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c028:	f043 0301 	orr.w	r3, r3, #1
 800c02c:	b2da      	uxtb	r2, r3
 800c02e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c030:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c034:	68ba      	ldr	r2, [r7, #8]
 800c036:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c038:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c03a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c03c:	699b      	ldr	r3, [r3, #24]
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d10b      	bne.n	800c05a <prvProcessReceivedCommands+0x162>
	__asm volatile
 800c042:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c046:	f383 8811 	msr	BASEPRI, r3
 800c04a:	f3bf 8f6f 	isb	sy
 800c04e:	f3bf 8f4f 	dsb	sy
 800c052:	617b      	str	r3, [r7, #20]
}
 800c054:	bf00      	nop
 800c056:	bf00      	nop
 800c058:	e7fd      	b.n	800c056 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c05a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c05c:	699a      	ldr	r2, [r3, #24]
 800c05e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c060:	18d1      	adds	r1, r2, r3
 800c062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c064:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c066:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c068:	f7ff ff04 	bl	800be74 <prvInsertTimerInActiveList>
					break;
 800c06c:	e017      	b.n	800c09e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c06e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c070:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c074:	f003 0302 	and.w	r3, r3, #2
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d103      	bne.n	800c084 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800c07c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c07e:	f000 fbf1 	bl	800c864 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c082:	e00c      	b.n	800c09e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c084:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c086:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c08a:	f023 0301 	bic.w	r3, r3, #1
 800c08e:	b2da      	uxtb	r2, r3
 800c090:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c092:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c096:	e002      	b.n	800c09e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800c098:	bf00      	nop
 800c09a:	e000      	b.n	800c09e <prvProcessReceivedCommands+0x1a6>
					break;
 800c09c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c09e:	4b08      	ldr	r3, [pc, #32]	@ (800c0c0 <prvProcessReceivedCommands+0x1c8>)
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	1d39      	adds	r1, r7, #4
 800c0a4:	2200      	movs	r2, #0
 800c0a6:	4618      	mov	r0, r3
 800c0a8:	f7fe fb4a 	bl	800a740 <xQueueReceive>
 800c0ac:	4603      	mov	r3, r0
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	f47f af26 	bne.w	800bf00 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c0b4:	bf00      	nop
 800c0b6:	bf00      	nop
 800c0b8:	3730      	adds	r7, #48	@ 0x30
 800c0ba:	46bd      	mov	sp, r7
 800c0bc:	bd80      	pop	{r7, pc}
 800c0be:	bf00      	nop
 800c0c0:	200014c4 	.word	0x200014c4

0800c0c4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	b088      	sub	sp, #32
 800c0c8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c0ca:	e049      	b.n	800c160 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c0cc:	4b2e      	ldr	r3, [pc, #184]	@ (800c188 <prvSwitchTimerLists+0xc4>)
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	68db      	ldr	r3, [r3, #12]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c0d6:	4b2c      	ldr	r3, [pc, #176]	@ (800c188 <prvSwitchTimerLists+0xc4>)
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	68db      	ldr	r3, [r3, #12]
 800c0dc:	68db      	ldr	r3, [r3, #12]
 800c0de:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	3304      	adds	r3, #4
 800c0e4:	4618      	mov	r0, r3
 800c0e6:	f7fd ffad 	bl	800a044 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	6a1b      	ldr	r3, [r3, #32]
 800c0ee:	68f8      	ldr	r0, [r7, #12]
 800c0f0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c0f8:	f003 0304 	and.w	r3, r3, #4
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d02f      	beq.n	800c160 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	699b      	ldr	r3, [r3, #24]
 800c104:	693a      	ldr	r2, [r7, #16]
 800c106:	4413      	add	r3, r2
 800c108:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c10a:	68ba      	ldr	r2, [r7, #8]
 800c10c:	693b      	ldr	r3, [r7, #16]
 800c10e:	429a      	cmp	r2, r3
 800c110:	d90e      	bls.n	800c130 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	68ba      	ldr	r2, [r7, #8]
 800c116:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	68fa      	ldr	r2, [r7, #12]
 800c11c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c11e:	4b1a      	ldr	r3, [pc, #104]	@ (800c188 <prvSwitchTimerLists+0xc4>)
 800c120:	681a      	ldr	r2, [r3, #0]
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	3304      	adds	r3, #4
 800c126:	4619      	mov	r1, r3
 800c128:	4610      	mov	r0, r2
 800c12a:	f7fd ff52 	bl	8009fd2 <vListInsert>
 800c12e:	e017      	b.n	800c160 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c130:	2300      	movs	r3, #0
 800c132:	9300      	str	r3, [sp, #0]
 800c134:	2300      	movs	r3, #0
 800c136:	693a      	ldr	r2, [r7, #16]
 800c138:	2100      	movs	r1, #0
 800c13a:	68f8      	ldr	r0, [r7, #12]
 800c13c:	f7ff fd58 	bl	800bbf0 <xTimerGenericCommand>
 800c140:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	2b00      	cmp	r3, #0
 800c146:	d10b      	bne.n	800c160 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800c148:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c14c:	f383 8811 	msr	BASEPRI, r3
 800c150:	f3bf 8f6f 	isb	sy
 800c154:	f3bf 8f4f 	dsb	sy
 800c158:	603b      	str	r3, [r7, #0]
}
 800c15a:	bf00      	nop
 800c15c:	bf00      	nop
 800c15e:	e7fd      	b.n	800c15c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c160:	4b09      	ldr	r3, [pc, #36]	@ (800c188 <prvSwitchTimerLists+0xc4>)
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	2b00      	cmp	r3, #0
 800c168:	d1b0      	bne.n	800c0cc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c16a:	4b07      	ldr	r3, [pc, #28]	@ (800c188 <prvSwitchTimerLists+0xc4>)
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c170:	4b06      	ldr	r3, [pc, #24]	@ (800c18c <prvSwitchTimerLists+0xc8>)
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	4a04      	ldr	r2, [pc, #16]	@ (800c188 <prvSwitchTimerLists+0xc4>)
 800c176:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c178:	4a04      	ldr	r2, [pc, #16]	@ (800c18c <prvSwitchTimerLists+0xc8>)
 800c17a:	697b      	ldr	r3, [r7, #20]
 800c17c:	6013      	str	r3, [r2, #0]
}
 800c17e:	bf00      	nop
 800c180:	3718      	adds	r7, #24
 800c182:	46bd      	mov	sp, r7
 800c184:	bd80      	pop	{r7, pc}
 800c186:	bf00      	nop
 800c188:	200014bc 	.word	0x200014bc
 800c18c:	200014c0 	.word	0x200014c0

0800c190 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c190:	b580      	push	{r7, lr}
 800c192:	b082      	sub	sp, #8
 800c194:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c196:	f000 f96f 	bl	800c478 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c19a:	4b15      	ldr	r3, [pc, #84]	@ (800c1f0 <prvCheckForValidListAndQueue+0x60>)
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d120      	bne.n	800c1e4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c1a2:	4814      	ldr	r0, [pc, #80]	@ (800c1f4 <prvCheckForValidListAndQueue+0x64>)
 800c1a4:	f7fd fec4 	bl	8009f30 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c1a8:	4813      	ldr	r0, [pc, #76]	@ (800c1f8 <prvCheckForValidListAndQueue+0x68>)
 800c1aa:	f7fd fec1 	bl	8009f30 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c1ae:	4b13      	ldr	r3, [pc, #76]	@ (800c1fc <prvCheckForValidListAndQueue+0x6c>)
 800c1b0:	4a10      	ldr	r2, [pc, #64]	@ (800c1f4 <prvCheckForValidListAndQueue+0x64>)
 800c1b2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c1b4:	4b12      	ldr	r3, [pc, #72]	@ (800c200 <prvCheckForValidListAndQueue+0x70>)
 800c1b6:	4a10      	ldr	r2, [pc, #64]	@ (800c1f8 <prvCheckForValidListAndQueue+0x68>)
 800c1b8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	9300      	str	r3, [sp, #0]
 800c1be:	4b11      	ldr	r3, [pc, #68]	@ (800c204 <prvCheckForValidListAndQueue+0x74>)
 800c1c0:	4a11      	ldr	r2, [pc, #68]	@ (800c208 <prvCheckForValidListAndQueue+0x78>)
 800c1c2:	2110      	movs	r1, #16
 800c1c4:	200a      	movs	r0, #10
 800c1c6:	f7fd ffd1 	bl	800a16c <xQueueGenericCreateStatic>
 800c1ca:	4603      	mov	r3, r0
 800c1cc:	4a08      	ldr	r2, [pc, #32]	@ (800c1f0 <prvCheckForValidListAndQueue+0x60>)
 800c1ce:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c1d0:	4b07      	ldr	r3, [pc, #28]	@ (800c1f0 <prvCheckForValidListAndQueue+0x60>)
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d005      	beq.n	800c1e4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c1d8:	4b05      	ldr	r3, [pc, #20]	@ (800c1f0 <prvCheckForValidListAndQueue+0x60>)
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	490b      	ldr	r1, [pc, #44]	@ (800c20c <prvCheckForValidListAndQueue+0x7c>)
 800c1de:	4618      	mov	r0, r3
 800c1e0:	f7fe fcc4 	bl	800ab6c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c1e4:	f000 f97a 	bl	800c4dc <vPortExitCritical>
}
 800c1e8:	bf00      	nop
 800c1ea:	46bd      	mov	sp, r7
 800c1ec:	bd80      	pop	{r7, pc}
 800c1ee:	bf00      	nop
 800c1f0:	200014c4 	.word	0x200014c4
 800c1f4:	20001494 	.word	0x20001494
 800c1f8:	200014a8 	.word	0x200014a8
 800c1fc:	200014bc 	.word	0x200014bc
 800c200:	200014c0 	.word	0x200014c0
 800c204:	20001570 	.word	0x20001570
 800c208:	200014d0 	.word	0x200014d0
 800c20c:	0800ffc4 	.word	0x0800ffc4

0800c210 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c210:	b480      	push	{r7}
 800c212:	b085      	sub	sp, #20
 800c214:	af00      	add	r7, sp, #0
 800c216:	60f8      	str	r0, [r7, #12]
 800c218:	60b9      	str	r1, [r7, #8]
 800c21a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	3b04      	subs	r3, #4
 800c220:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c228:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	3b04      	subs	r3, #4
 800c22e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c230:	68bb      	ldr	r3, [r7, #8]
 800c232:	f023 0201 	bic.w	r2, r3, #1
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	3b04      	subs	r3, #4
 800c23e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c240:	4a0c      	ldr	r2, [pc, #48]	@ (800c274 <pxPortInitialiseStack+0x64>)
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	3b14      	subs	r3, #20
 800c24a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c24c:	687a      	ldr	r2, [r7, #4]
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	3b04      	subs	r3, #4
 800c256:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	f06f 0202 	mvn.w	r2, #2
 800c25e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	3b20      	subs	r3, #32
 800c264:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c266:	68fb      	ldr	r3, [r7, #12]
}
 800c268:	4618      	mov	r0, r3
 800c26a:	3714      	adds	r7, #20
 800c26c:	46bd      	mov	sp, r7
 800c26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c272:	4770      	bx	lr
 800c274:	0800c279 	.word	0x0800c279

0800c278 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c278:	b480      	push	{r7}
 800c27a:	b085      	sub	sp, #20
 800c27c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c27e:	2300      	movs	r3, #0
 800c280:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c282:	4b13      	ldr	r3, [pc, #76]	@ (800c2d0 <prvTaskExitError+0x58>)
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c28a:	d00b      	beq.n	800c2a4 <prvTaskExitError+0x2c>
	__asm volatile
 800c28c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c290:	f383 8811 	msr	BASEPRI, r3
 800c294:	f3bf 8f6f 	isb	sy
 800c298:	f3bf 8f4f 	dsb	sy
 800c29c:	60fb      	str	r3, [r7, #12]
}
 800c29e:	bf00      	nop
 800c2a0:	bf00      	nop
 800c2a2:	e7fd      	b.n	800c2a0 <prvTaskExitError+0x28>
	__asm volatile
 800c2a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2a8:	f383 8811 	msr	BASEPRI, r3
 800c2ac:	f3bf 8f6f 	isb	sy
 800c2b0:	f3bf 8f4f 	dsb	sy
 800c2b4:	60bb      	str	r3, [r7, #8]
}
 800c2b6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c2b8:	bf00      	nop
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d0fc      	beq.n	800c2ba <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c2c0:	bf00      	nop
 800c2c2:	bf00      	nop
 800c2c4:	3714      	adds	r7, #20
 800c2c6:	46bd      	mov	sp, r7
 800c2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2cc:	4770      	bx	lr
 800c2ce:	bf00      	nop
 800c2d0:	20000110 	.word	0x20000110
	...

0800c2e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c2e0:	4b07      	ldr	r3, [pc, #28]	@ (800c300 <pxCurrentTCBConst2>)
 800c2e2:	6819      	ldr	r1, [r3, #0]
 800c2e4:	6808      	ldr	r0, [r1, #0]
 800c2e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2ea:	f380 8809 	msr	PSP, r0
 800c2ee:	f3bf 8f6f 	isb	sy
 800c2f2:	f04f 0000 	mov.w	r0, #0
 800c2f6:	f380 8811 	msr	BASEPRI, r0
 800c2fa:	4770      	bx	lr
 800c2fc:	f3af 8000 	nop.w

0800c300 <pxCurrentTCBConst2>:
 800c300:	20000f94 	.word	0x20000f94
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c304:	bf00      	nop
 800c306:	bf00      	nop

0800c308 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c308:	4808      	ldr	r0, [pc, #32]	@ (800c32c <prvPortStartFirstTask+0x24>)
 800c30a:	6800      	ldr	r0, [r0, #0]
 800c30c:	6800      	ldr	r0, [r0, #0]
 800c30e:	f380 8808 	msr	MSP, r0
 800c312:	f04f 0000 	mov.w	r0, #0
 800c316:	f380 8814 	msr	CONTROL, r0
 800c31a:	b662      	cpsie	i
 800c31c:	b661      	cpsie	f
 800c31e:	f3bf 8f4f 	dsb	sy
 800c322:	f3bf 8f6f 	isb	sy
 800c326:	df00      	svc	0
 800c328:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c32a:	bf00      	nop
 800c32c:	e000ed08 	.word	0xe000ed08

0800c330 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c330:	b580      	push	{r7, lr}
 800c332:	b086      	sub	sp, #24
 800c334:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c336:	4b47      	ldr	r3, [pc, #284]	@ (800c454 <xPortStartScheduler+0x124>)
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	4a47      	ldr	r2, [pc, #284]	@ (800c458 <xPortStartScheduler+0x128>)
 800c33c:	4293      	cmp	r3, r2
 800c33e:	d10b      	bne.n	800c358 <xPortStartScheduler+0x28>
	__asm volatile
 800c340:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c344:	f383 8811 	msr	BASEPRI, r3
 800c348:	f3bf 8f6f 	isb	sy
 800c34c:	f3bf 8f4f 	dsb	sy
 800c350:	613b      	str	r3, [r7, #16]
}
 800c352:	bf00      	nop
 800c354:	bf00      	nop
 800c356:	e7fd      	b.n	800c354 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c358:	4b3e      	ldr	r3, [pc, #248]	@ (800c454 <xPortStartScheduler+0x124>)
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	4a3f      	ldr	r2, [pc, #252]	@ (800c45c <xPortStartScheduler+0x12c>)
 800c35e:	4293      	cmp	r3, r2
 800c360:	d10b      	bne.n	800c37a <xPortStartScheduler+0x4a>
	__asm volatile
 800c362:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c366:	f383 8811 	msr	BASEPRI, r3
 800c36a:	f3bf 8f6f 	isb	sy
 800c36e:	f3bf 8f4f 	dsb	sy
 800c372:	60fb      	str	r3, [r7, #12]
}
 800c374:	bf00      	nop
 800c376:	bf00      	nop
 800c378:	e7fd      	b.n	800c376 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c37a:	4b39      	ldr	r3, [pc, #228]	@ (800c460 <xPortStartScheduler+0x130>)
 800c37c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c37e:	697b      	ldr	r3, [r7, #20]
 800c380:	781b      	ldrb	r3, [r3, #0]
 800c382:	b2db      	uxtb	r3, r3
 800c384:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c386:	697b      	ldr	r3, [r7, #20]
 800c388:	22ff      	movs	r2, #255	@ 0xff
 800c38a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c38c:	697b      	ldr	r3, [r7, #20]
 800c38e:	781b      	ldrb	r3, [r3, #0]
 800c390:	b2db      	uxtb	r3, r3
 800c392:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c394:	78fb      	ldrb	r3, [r7, #3]
 800c396:	b2db      	uxtb	r3, r3
 800c398:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c39c:	b2da      	uxtb	r2, r3
 800c39e:	4b31      	ldr	r3, [pc, #196]	@ (800c464 <xPortStartScheduler+0x134>)
 800c3a0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c3a2:	4b31      	ldr	r3, [pc, #196]	@ (800c468 <xPortStartScheduler+0x138>)
 800c3a4:	2207      	movs	r2, #7
 800c3a6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c3a8:	e009      	b.n	800c3be <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800c3aa:	4b2f      	ldr	r3, [pc, #188]	@ (800c468 <xPortStartScheduler+0x138>)
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	3b01      	subs	r3, #1
 800c3b0:	4a2d      	ldr	r2, [pc, #180]	@ (800c468 <xPortStartScheduler+0x138>)
 800c3b2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c3b4:	78fb      	ldrb	r3, [r7, #3]
 800c3b6:	b2db      	uxtb	r3, r3
 800c3b8:	005b      	lsls	r3, r3, #1
 800c3ba:	b2db      	uxtb	r3, r3
 800c3bc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c3be:	78fb      	ldrb	r3, [r7, #3]
 800c3c0:	b2db      	uxtb	r3, r3
 800c3c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c3c6:	2b80      	cmp	r3, #128	@ 0x80
 800c3c8:	d0ef      	beq.n	800c3aa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c3ca:	4b27      	ldr	r3, [pc, #156]	@ (800c468 <xPortStartScheduler+0x138>)
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	f1c3 0307 	rsb	r3, r3, #7
 800c3d2:	2b04      	cmp	r3, #4
 800c3d4:	d00b      	beq.n	800c3ee <xPortStartScheduler+0xbe>
	__asm volatile
 800c3d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3da:	f383 8811 	msr	BASEPRI, r3
 800c3de:	f3bf 8f6f 	isb	sy
 800c3e2:	f3bf 8f4f 	dsb	sy
 800c3e6:	60bb      	str	r3, [r7, #8]
}
 800c3e8:	bf00      	nop
 800c3ea:	bf00      	nop
 800c3ec:	e7fd      	b.n	800c3ea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c3ee:	4b1e      	ldr	r3, [pc, #120]	@ (800c468 <xPortStartScheduler+0x138>)
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	021b      	lsls	r3, r3, #8
 800c3f4:	4a1c      	ldr	r2, [pc, #112]	@ (800c468 <xPortStartScheduler+0x138>)
 800c3f6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c3f8:	4b1b      	ldr	r3, [pc, #108]	@ (800c468 <xPortStartScheduler+0x138>)
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c400:	4a19      	ldr	r2, [pc, #100]	@ (800c468 <xPortStartScheduler+0x138>)
 800c402:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	b2da      	uxtb	r2, r3
 800c408:	697b      	ldr	r3, [r7, #20]
 800c40a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c40c:	4b17      	ldr	r3, [pc, #92]	@ (800c46c <xPortStartScheduler+0x13c>)
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	4a16      	ldr	r2, [pc, #88]	@ (800c46c <xPortStartScheduler+0x13c>)
 800c412:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c416:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c418:	4b14      	ldr	r3, [pc, #80]	@ (800c46c <xPortStartScheduler+0x13c>)
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	4a13      	ldr	r2, [pc, #76]	@ (800c46c <xPortStartScheduler+0x13c>)
 800c41e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c422:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c424:	f000 f8da 	bl	800c5dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c428:	4b11      	ldr	r3, [pc, #68]	@ (800c470 <xPortStartScheduler+0x140>)
 800c42a:	2200      	movs	r2, #0
 800c42c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c42e:	f000 f8f9 	bl	800c624 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c432:	4b10      	ldr	r3, [pc, #64]	@ (800c474 <xPortStartScheduler+0x144>)
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	4a0f      	ldr	r2, [pc, #60]	@ (800c474 <xPortStartScheduler+0x144>)
 800c438:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800c43c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c43e:	f7ff ff63 	bl	800c308 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c442:	f7ff f807 	bl	800b454 <vTaskSwitchContext>
	prvTaskExitError();
 800c446:	f7ff ff17 	bl	800c278 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c44a:	2300      	movs	r3, #0
}
 800c44c:	4618      	mov	r0, r3
 800c44e:	3718      	adds	r7, #24
 800c450:	46bd      	mov	sp, r7
 800c452:	bd80      	pop	{r7, pc}
 800c454:	e000ed00 	.word	0xe000ed00
 800c458:	410fc271 	.word	0x410fc271
 800c45c:	410fc270 	.word	0x410fc270
 800c460:	e000e400 	.word	0xe000e400
 800c464:	200015c0 	.word	0x200015c0
 800c468:	200015c4 	.word	0x200015c4
 800c46c:	e000ed20 	.word	0xe000ed20
 800c470:	20000110 	.word	0x20000110
 800c474:	e000ef34 	.word	0xe000ef34

0800c478 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c478:	b480      	push	{r7}
 800c47a:	b083      	sub	sp, #12
 800c47c:	af00      	add	r7, sp, #0
	__asm volatile
 800c47e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c482:	f383 8811 	msr	BASEPRI, r3
 800c486:	f3bf 8f6f 	isb	sy
 800c48a:	f3bf 8f4f 	dsb	sy
 800c48e:	607b      	str	r3, [r7, #4]
}
 800c490:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c492:	4b10      	ldr	r3, [pc, #64]	@ (800c4d4 <vPortEnterCritical+0x5c>)
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	3301      	adds	r3, #1
 800c498:	4a0e      	ldr	r2, [pc, #56]	@ (800c4d4 <vPortEnterCritical+0x5c>)
 800c49a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c49c:	4b0d      	ldr	r3, [pc, #52]	@ (800c4d4 <vPortEnterCritical+0x5c>)
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	2b01      	cmp	r3, #1
 800c4a2:	d110      	bne.n	800c4c6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c4a4:	4b0c      	ldr	r3, [pc, #48]	@ (800c4d8 <vPortEnterCritical+0x60>)
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	b2db      	uxtb	r3, r3
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d00b      	beq.n	800c4c6 <vPortEnterCritical+0x4e>
	__asm volatile
 800c4ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4b2:	f383 8811 	msr	BASEPRI, r3
 800c4b6:	f3bf 8f6f 	isb	sy
 800c4ba:	f3bf 8f4f 	dsb	sy
 800c4be:	603b      	str	r3, [r7, #0]
}
 800c4c0:	bf00      	nop
 800c4c2:	bf00      	nop
 800c4c4:	e7fd      	b.n	800c4c2 <vPortEnterCritical+0x4a>
	}
}
 800c4c6:	bf00      	nop
 800c4c8:	370c      	adds	r7, #12
 800c4ca:	46bd      	mov	sp, r7
 800c4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d0:	4770      	bx	lr
 800c4d2:	bf00      	nop
 800c4d4:	20000110 	.word	0x20000110
 800c4d8:	e000ed04 	.word	0xe000ed04

0800c4dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c4dc:	b480      	push	{r7}
 800c4de:	b083      	sub	sp, #12
 800c4e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c4e2:	4b12      	ldr	r3, [pc, #72]	@ (800c52c <vPortExitCritical+0x50>)
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d10b      	bne.n	800c502 <vPortExitCritical+0x26>
	__asm volatile
 800c4ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4ee:	f383 8811 	msr	BASEPRI, r3
 800c4f2:	f3bf 8f6f 	isb	sy
 800c4f6:	f3bf 8f4f 	dsb	sy
 800c4fa:	607b      	str	r3, [r7, #4]
}
 800c4fc:	bf00      	nop
 800c4fe:	bf00      	nop
 800c500:	e7fd      	b.n	800c4fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c502:	4b0a      	ldr	r3, [pc, #40]	@ (800c52c <vPortExitCritical+0x50>)
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	3b01      	subs	r3, #1
 800c508:	4a08      	ldr	r2, [pc, #32]	@ (800c52c <vPortExitCritical+0x50>)
 800c50a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c50c:	4b07      	ldr	r3, [pc, #28]	@ (800c52c <vPortExitCritical+0x50>)
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	2b00      	cmp	r3, #0
 800c512:	d105      	bne.n	800c520 <vPortExitCritical+0x44>
 800c514:	2300      	movs	r3, #0
 800c516:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c518:	683b      	ldr	r3, [r7, #0]
 800c51a:	f383 8811 	msr	BASEPRI, r3
}
 800c51e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c520:	bf00      	nop
 800c522:	370c      	adds	r7, #12
 800c524:	46bd      	mov	sp, r7
 800c526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c52a:	4770      	bx	lr
 800c52c:	20000110 	.word	0x20000110

0800c530 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c530:	f3ef 8009 	mrs	r0, PSP
 800c534:	f3bf 8f6f 	isb	sy
 800c538:	4b15      	ldr	r3, [pc, #84]	@ (800c590 <pxCurrentTCBConst>)
 800c53a:	681a      	ldr	r2, [r3, #0]
 800c53c:	f01e 0f10 	tst.w	lr, #16
 800c540:	bf08      	it	eq
 800c542:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c546:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c54a:	6010      	str	r0, [r2, #0]
 800c54c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c550:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c554:	f380 8811 	msr	BASEPRI, r0
 800c558:	f3bf 8f4f 	dsb	sy
 800c55c:	f3bf 8f6f 	isb	sy
 800c560:	f7fe ff78 	bl	800b454 <vTaskSwitchContext>
 800c564:	f04f 0000 	mov.w	r0, #0
 800c568:	f380 8811 	msr	BASEPRI, r0
 800c56c:	bc09      	pop	{r0, r3}
 800c56e:	6819      	ldr	r1, [r3, #0]
 800c570:	6808      	ldr	r0, [r1, #0]
 800c572:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c576:	f01e 0f10 	tst.w	lr, #16
 800c57a:	bf08      	it	eq
 800c57c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c580:	f380 8809 	msr	PSP, r0
 800c584:	f3bf 8f6f 	isb	sy
 800c588:	4770      	bx	lr
 800c58a:	bf00      	nop
 800c58c:	f3af 8000 	nop.w

0800c590 <pxCurrentTCBConst>:
 800c590:	20000f94 	.word	0x20000f94
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c594:	bf00      	nop
 800c596:	bf00      	nop

0800c598 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c598:	b580      	push	{r7, lr}
 800c59a:	b082      	sub	sp, #8
 800c59c:	af00      	add	r7, sp, #0
	__asm volatile
 800c59e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5a2:	f383 8811 	msr	BASEPRI, r3
 800c5a6:	f3bf 8f6f 	isb	sy
 800c5aa:	f3bf 8f4f 	dsb	sy
 800c5ae:	607b      	str	r3, [r7, #4]
}
 800c5b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c5b2:	f7fe fe95 	bl	800b2e0 <xTaskIncrementTick>
 800c5b6:	4603      	mov	r3, r0
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d003      	beq.n	800c5c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c5bc:	4b06      	ldr	r3, [pc, #24]	@ (800c5d8 <xPortSysTickHandler+0x40>)
 800c5be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c5c2:	601a      	str	r2, [r3, #0]
 800c5c4:	2300      	movs	r3, #0
 800c5c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c5c8:	683b      	ldr	r3, [r7, #0]
 800c5ca:	f383 8811 	msr	BASEPRI, r3
}
 800c5ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c5d0:	bf00      	nop
 800c5d2:	3708      	adds	r7, #8
 800c5d4:	46bd      	mov	sp, r7
 800c5d6:	bd80      	pop	{r7, pc}
 800c5d8:	e000ed04 	.word	0xe000ed04

0800c5dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c5dc:	b480      	push	{r7}
 800c5de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c5e0:	4b0b      	ldr	r3, [pc, #44]	@ (800c610 <vPortSetupTimerInterrupt+0x34>)
 800c5e2:	2200      	movs	r2, #0
 800c5e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c5e6:	4b0b      	ldr	r3, [pc, #44]	@ (800c614 <vPortSetupTimerInterrupt+0x38>)
 800c5e8:	2200      	movs	r2, #0
 800c5ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c5ec:	4b0a      	ldr	r3, [pc, #40]	@ (800c618 <vPortSetupTimerInterrupt+0x3c>)
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	4a0a      	ldr	r2, [pc, #40]	@ (800c61c <vPortSetupTimerInterrupt+0x40>)
 800c5f2:	fba2 2303 	umull	r2, r3, r2, r3
 800c5f6:	099b      	lsrs	r3, r3, #6
 800c5f8:	4a09      	ldr	r2, [pc, #36]	@ (800c620 <vPortSetupTimerInterrupt+0x44>)
 800c5fa:	3b01      	subs	r3, #1
 800c5fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c5fe:	4b04      	ldr	r3, [pc, #16]	@ (800c610 <vPortSetupTimerInterrupt+0x34>)
 800c600:	2207      	movs	r2, #7
 800c602:	601a      	str	r2, [r3, #0]
}
 800c604:	bf00      	nop
 800c606:	46bd      	mov	sp, r7
 800c608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c60c:	4770      	bx	lr
 800c60e:	bf00      	nop
 800c610:	e000e010 	.word	0xe000e010
 800c614:	e000e018 	.word	0xe000e018
 800c618:	20000100 	.word	0x20000100
 800c61c:	10624dd3 	.word	0x10624dd3
 800c620:	e000e014 	.word	0xe000e014

0800c624 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c624:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800c634 <vPortEnableVFP+0x10>
 800c628:	6801      	ldr	r1, [r0, #0]
 800c62a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800c62e:	6001      	str	r1, [r0, #0]
 800c630:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c632:	bf00      	nop
 800c634:	e000ed88 	.word	0xe000ed88

0800c638 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c638:	b480      	push	{r7}
 800c63a:	b085      	sub	sp, #20
 800c63c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c63e:	f3ef 8305 	mrs	r3, IPSR
 800c642:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	2b0f      	cmp	r3, #15
 800c648:	d915      	bls.n	800c676 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c64a:	4a18      	ldr	r2, [pc, #96]	@ (800c6ac <vPortValidateInterruptPriority+0x74>)
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	4413      	add	r3, r2
 800c650:	781b      	ldrb	r3, [r3, #0]
 800c652:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c654:	4b16      	ldr	r3, [pc, #88]	@ (800c6b0 <vPortValidateInterruptPriority+0x78>)
 800c656:	781b      	ldrb	r3, [r3, #0]
 800c658:	7afa      	ldrb	r2, [r7, #11]
 800c65a:	429a      	cmp	r2, r3
 800c65c:	d20b      	bcs.n	800c676 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800c65e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c662:	f383 8811 	msr	BASEPRI, r3
 800c666:	f3bf 8f6f 	isb	sy
 800c66a:	f3bf 8f4f 	dsb	sy
 800c66e:	607b      	str	r3, [r7, #4]
}
 800c670:	bf00      	nop
 800c672:	bf00      	nop
 800c674:	e7fd      	b.n	800c672 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c676:	4b0f      	ldr	r3, [pc, #60]	@ (800c6b4 <vPortValidateInterruptPriority+0x7c>)
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800c67e:	4b0e      	ldr	r3, [pc, #56]	@ (800c6b8 <vPortValidateInterruptPriority+0x80>)
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	429a      	cmp	r2, r3
 800c684:	d90b      	bls.n	800c69e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800c686:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c68a:	f383 8811 	msr	BASEPRI, r3
 800c68e:	f3bf 8f6f 	isb	sy
 800c692:	f3bf 8f4f 	dsb	sy
 800c696:	603b      	str	r3, [r7, #0]
}
 800c698:	bf00      	nop
 800c69a:	bf00      	nop
 800c69c:	e7fd      	b.n	800c69a <vPortValidateInterruptPriority+0x62>
	}
 800c69e:	bf00      	nop
 800c6a0:	3714      	adds	r7, #20
 800c6a2:	46bd      	mov	sp, r7
 800c6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a8:	4770      	bx	lr
 800c6aa:	bf00      	nop
 800c6ac:	e000e3f0 	.word	0xe000e3f0
 800c6b0:	200015c0 	.word	0x200015c0
 800c6b4:	e000ed0c 	.word	0xe000ed0c
 800c6b8:	200015c4 	.word	0x200015c4

0800c6bc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c6bc:	b580      	push	{r7, lr}
 800c6be:	b08a      	sub	sp, #40	@ 0x28
 800c6c0:	af00      	add	r7, sp, #0
 800c6c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c6c4:	2300      	movs	r3, #0
 800c6c6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c6c8:	f7fe fd3c 	bl	800b144 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c6cc:	4b5f      	ldr	r3, [pc, #380]	@ (800c84c <pvPortMalloc+0x190>)
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d101      	bne.n	800c6d8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c6d4:	f000 f92a 	bl	800c92c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c6d8:	4b5d      	ldr	r3, [pc, #372]	@ (800c850 <pvPortMalloc+0x194>)
 800c6da:	681a      	ldr	r2, [r3, #0]
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	4013      	ands	r3, r2
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	f040 8095 	bne.w	800c810 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d01e      	beq.n	800c72a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800c6ec:	2208      	movs	r2, #8
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	4413      	add	r3, r2
 800c6f2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	f003 0307 	and.w	r3, r3, #7
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d015      	beq.n	800c72a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	f023 0307 	bic.w	r3, r3, #7
 800c704:	3308      	adds	r3, #8
 800c706:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	f003 0307 	and.w	r3, r3, #7
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d00b      	beq.n	800c72a <pvPortMalloc+0x6e>
	__asm volatile
 800c712:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c716:	f383 8811 	msr	BASEPRI, r3
 800c71a:	f3bf 8f6f 	isb	sy
 800c71e:	f3bf 8f4f 	dsb	sy
 800c722:	617b      	str	r3, [r7, #20]
}
 800c724:	bf00      	nop
 800c726:	bf00      	nop
 800c728:	e7fd      	b.n	800c726 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d06f      	beq.n	800c810 <pvPortMalloc+0x154>
 800c730:	4b48      	ldr	r3, [pc, #288]	@ (800c854 <pvPortMalloc+0x198>)
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	687a      	ldr	r2, [r7, #4]
 800c736:	429a      	cmp	r2, r3
 800c738:	d86a      	bhi.n	800c810 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c73a:	4b47      	ldr	r3, [pc, #284]	@ (800c858 <pvPortMalloc+0x19c>)
 800c73c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c73e:	4b46      	ldr	r3, [pc, #280]	@ (800c858 <pvPortMalloc+0x19c>)
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c744:	e004      	b.n	800c750 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800c746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c748:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c74a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c752:	685b      	ldr	r3, [r3, #4]
 800c754:	687a      	ldr	r2, [r7, #4]
 800c756:	429a      	cmp	r2, r3
 800c758:	d903      	bls.n	800c762 <pvPortMalloc+0xa6>
 800c75a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d1f1      	bne.n	800c746 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c762:	4b3a      	ldr	r3, [pc, #232]	@ (800c84c <pvPortMalloc+0x190>)
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c768:	429a      	cmp	r2, r3
 800c76a:	d051      	beq.n	800c810 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c76c:	6a3b      	ldr	r3, [r7, #32]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	2208      	movs	r2, #8
 800c772:	4413      	add	r3, r2
 800c774:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c778:	681a      	ldr	r2, [r3, #0]
 800c77a:	6a3b      	ldr	r3, [r7, #32]
 800c77c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c77e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c780:	685a      	ldr	r2, [r3, #4]
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	1ad2      	subs	r2, r2, r3
 800c786:	2308      	movs	r3, #8
 800c788:	005b      	lsls	r3, r3, #1
 800c78a:	429a      	cmp	r2, r3
 800c78c:	d920      	bls.n	800c7d0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c78e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	4413      	add	r3, r2
 800c794:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c796:	69bb      	ldr	r3, [r7, #24]
 800c798:	f003 0307 	and.w	r3, r3, #7
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d00b      	beq.n	800c7b8 <pvPortMalloc+0xfc>
	__asm volatile
 800c7a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7a4:	f383 8811 	msr	BASEPRI, r3
 800c7a8:	f3bf 8f6f 	isb	sy
 800c7ac:	f3bf 8f4f 	dsb	sy
 800c7b0:	613b      	str	r3, [r7, #16]
}
 800c7b2:	bf00      	nop
 800c7b4:	bf00      	nop
 800c7b6:	e7fd      	b.n	800c7b4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c7b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7ba:	685a      	ldr	r2, [r3, #4]
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	1ad2      	subs	r2, r2, r3
 800c7c0:	69bb      	ldr	r3, [r7, #24]
 800c7c2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c7c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7c6:	687a      	ldr	r2, [r7, #4]
 800c7c8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c7ca:	69b8      	ldr	r0, [r7, #24]
 800c7cc:	f000 f910 	bl	800c9f0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c7d0:	4b20      	ldr	r3, [pc, #128]	@ (800c854 <pvPortMalloc+0x198>)
 800c7d2:	681a      	ldr	r2, [r3, #0]
 800c7d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7d6:	685b      	ldr	r3, [r3, #4]
 800c7d8:	1ad3      	subs	r3, r2, r3
 800c7da:	4a1e      	ldr	r2, [pc, #120]	@ (800c854 <pvPortMalloc+0x198>)
 800c7dc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c7de:	4b1d      	ldr	r3, [pc, #116]	@ (800c854 <pvPortMalloc+0x198>)
 800c7e0:	681a      	ldr	r2, [r3, #0]
 800c7e2:	4b1e      	ldr	r3, [pc, #120]	@ (800c85c <pvPortMalloc+0x1a0>)
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	429a      	cmp	r2, r3
 800c7e8:	d203      	bcs.n	800c7f2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c7ea:	4b1a      	ldr	r3, [pc, #104]	@ (800c854 <pvPortMalloc+0x198>)
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	4a1b      	ldr	r2, [pc, #108]	@ (800c85c <pvPortMalloc+0x1a0>)
 800c7f0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c7f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7f4:	685a      	ldr	r2, [r3, #4]
 800c7f6:	4b16      	ldr	r3, [pc, #88]	@ (800c850 <pvPortMalloc+0x194>)
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	431a      	orrs	r2, r3
 800c7fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7fe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c802:	2200      	movs	r2, #0
 800c804:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c806:	4b16      	ldr	r3, [pc, #88]	@ (800c860 <pvPortMalloc+0x1a4>)
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	3301      	adds	r3, #1
 800c80c:	4a14      	ldr	r2, [pc, #80]	@ (800c860 <pvPortMalloc+0x1a4>)
 800c80e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c810:	f7fe fca6 	bl	800b160 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800c814:	69fb      	ldr	r3, [r7, #28]
 800c816:	2b00      	cmp	r3, #0
 800c818:	d101      	bne.n	800c81e <pvPortMalloc+0x162>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800c81a:	f7f8 ff88 	bl	800572e <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c81e:	69fb      	ldr	r3, [r7, #28]
 800c820:	f003 0307 	and.w	r3, r3, #7
 800c824:	2b00      	cmp	r3, #0
 800c826:	d00b      	beq.n	800c840 <pvPortMalloc+0x184>
	__asm volatile
 800c828:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c82c:	f383 8811 	msr	BASEPRI, r3
 800c830:	f3bf 8f6f 	isb	sy
 800c834:	f3bf 8f4f 	dsb	sy
 800c838:	60fb      	str	r3, [r7, #12]
}
 800c83a:	bf00      	nop
 800c83c:	bf00      	nop
 800c83e:	e7fd      	b.n	800c83c <pvPortMalloc+0x180>
	return pvReturn;
 800c840:	69fb      	ldr	r3, [r7, #28]
}
 800c842:	4618      	mov	r0, r3
 800c844:	3728      	adds	r7, #40	@ 0x28
 800c846:	46bd      	mov	sp, r7
 800c848:	bd80      	pop	{r7, pc}
 800c84a:	bf00      	nop
 800c84c:	200115d0 	.word	0x200115d0
 800c850:	200115e4 	.word	0x200115e4
 800c854:	200115d4 	.word	0x200115d4
 800c858:	200115c8 	.word	0x200115c8
 800c85c:	200115d8 	.word	0x200115d8
 800c860:	200115dc 	.word	0x200115dc

0800c864 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c864:	b580      	push	{r7, lr}
 800c866:	b086      	sub	sp, #24
 800c868:	af00      	add	r7, sp, #0
 800c86a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	2b00      	cmp	r3, #0
 800c874:	d04f      	beq.n	800c916 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c876:	2308      	movs	r3, #8
 800c878:	425b      	negs	r3, r3
 800c87a:	697a      	ldr	r2, [r7, #20]
 800c87c:	4413      	add	r3, r2
 800c87e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c880:	697b      	ldr	r3, [r7, #20]
 800c882:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c884:	693b      	ldr	r3, [r7, #16]
 800c886:	685a      	ldr	r2, [r3, #4]
 800c888:	4b25      	ldr	r3, [pc, #148]	@ (800c920 <vPortFree+0xbc>)
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	4013      	ands	r3, r2
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d10b      	bne.n	800c8aa <vPortFree+0x46>
	__asm volatile
 800c892:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c896:	f383 8811 	msr	BASEPRI, r3
 800c89a:	f3bf 8f6f 	isb	sy
 800c89e:	f3bf 8f4f 	dsb	sy
 800c8a2:	60fb      	str	r3, [r7, #12]
}
 800c8a4:	bf00      	nop
 800c8a6:	bf00      	nop
 800c8a8:	e7fd      	b.n	800c8a6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c8aa:	693b      	ldr	r3, [r7, #16]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d00b      	beq.n	800c8ca <vPortFree+0x66>
	__asm volatile
 800c8b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8b6:	f383 8811 	msr	BASEPRI, r3
 800c8ba:	f3bf 8f6f 	isb	sy
 800c8be:	f3bf 8f4f 	dsb	sy
 800c8c2:	60bb      	str	r3, [r7, #8]
}
 800c8c4:	bf00      	nop
 800c8c6:	bf00      	nop
 800c8c8:	e7fd      	b.n	800c8c6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c8ca:	693b      	ldr	r3, [r7, #16]
 800c8cc:	685a      	ldr	r2, [r3, #4]
 800c8ce:	4b14      	ldr	r3, [pc, #80]	@ (800c920 <vPortFree+0xbc>)
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	4013      	ands	r3, r2
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d01e      	beq.n	800c916 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c8d8:	693b      	ldr	r3, [r7, #16]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d11a      	bne.n	800c916 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c8e0:	693b      	ldr	r3, [r7, #16]
 800c8e2:	685a      	ldr	r2, [r3, #4]
 800c8e4:	4b0e      	ldr	r3, [pc, #56]	@ (800c920 <vPortFree+0xbc>)
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	43db      	mvns	r3, r3
 800c8ea:	401a      	ands	r2, r3
 800c8ec:	693b      	ldr	r3, [r7, #16]
 800c8ee:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c8f0:	f7fe fc28 	bl	800b144 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c8f4:	693b      	ldr	r3, [r7, #16]
 800c8f6:	685a      	ldr	r2, [r3, #4]
 800c8f8:	4b0a      	ldr	r3, [pc, #40]	@ (800c924 <vPortFree+0xc0>)
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	4413      	add	r3, r2
 800c8fe:	4a09      	ldr	r2, [pc, #36]	@ (800c924 <vPortFree+0xc0>)
 800c900:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c902:	6938      	ldr	r0, [r7, #16]
 800c904:	f000 f874 	bl	800c9f0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c908:	4b07      	ldr	r3, [pc, #28]	@ (800c928 <vPortFree+0xc4>)
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	3301      	adds	r3, #1
 800c90e:	4a06      	ldr	r2, [pc, #24]	@ (800c928 <vPortFree+0xc4>)
 800c910:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c912:	f7fe fc25 	bl	800b160 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c916:	bf00      	nop
 800c918:	3718      	adds	r7, #24
 800c91a:	46bd      	mov	sp, r7
 800c91c:	bd80      	pop	{r7, pc}
 800c91e:	bf00      	nop
 800c920:	200115e4 	.word	0x200115e4
 800c924:	200115d4 	.word	0x200115d4
 800c928:	200115e0 	.word	0x200115e0

0800c92c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c92c:	b480      	push	{r7}
 800c92e:	b085      	sub	sp, #20
 800c930:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c932:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800c936:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c938:	4b27      	ldr	r3, [pc, #156]	@ (800c9d8 <prvHeapInit+0xac>)
 800c93a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	f003 0307 	and.w	r3, r3, #7
 800c942:	2b00      	cmp	r3, #0
 800c944:	d00c      	beq.n	800c960 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	3307      	adds	r3, #7
 800c94a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	f023 0307 	bic.w	r3, r3, #7
 800c952:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c954:	68ba      	ldr	r2, [r7, #8]
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	1ad3      	subs	r3, r2, r3
 800c95a:	4a1f      	ldr	r2, [pc, #124]	@ (800c9d8 <prvHeapInit+0xac>)
 800c95c:	4413      	add	r3, r2
 800c95e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c964:	4a1d      	ldr	r2, [pc, #116]	@ (800c9dc <prvHeapInit+0xb0>)
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c96a:	4b1c      	ldr	r3, [pc, #112]	@ (800c9dc <prvHeapInit+0xb0>)
 800c96c:	2200      	movs	r2, #0
 800c96e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	68ba      	ldr	r2, [r7, #8]
 800c974:	4413      	add	r3, r2
 800c976:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c978:	2208      	movs	r2, #8
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	1a9b      	subs	r3, r3, r2
 800c97e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	f023 0307 	bic.w	r3, r3, #7
 800c986:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	4a15      	ldr	r2, [pc, #84]	@ (800c9e0 <prvHeapInit+0xb4>)
 800c98c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c98e:	4b14      	ldr	r3, [pc, #80]	@ (800c9e0 <prvHeapInit+0xb4>)
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	2200      	movs	r2, #0
 800c994:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c996:	4b12      	ldr	r3, [pc, #72]	@ (800c9e0 <prvHeapInit+0xb4>)
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	2200      	movs	r2, #0
 800c99c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c9a2:	683b      	ldr	r3, [r7, #0]
 800c9a4:	68fa      	ldr	r2, [r7, #12]
 800c9a6:	1ad2      	subs	r2, r2, r3
 800c9a8:	683b      	ldr	r3, [r7, #0]
 800c9aa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c9ac:	4b0c      	ldr	r3, [pc, #48]	@ (800c9e0 <prvHeapInit+0xb4>)
 800c9ae:	681a      	ldr	r2, [r3, #0]
 800c9b0:	683b      	ldr	r3, [r7, #0]
 800c9b2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c9b4:	683b      	ldr	r3, [r7, #0]
 800c9b6:	685b      	ldr	r3, [r3, #4]
 800c9b8:	4a0a      	ldr	r2, [pc, #40]	@ (800c9e4 <prvHeapInit+0xb8>)
 800c9ba:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c9bc:	683b      	ldr	r3, [r7, #0]
 800c9be:	685b      	ldr	r3, [r3, #4]
 800c9c0:	4a09      	ldr	r2, [pc, #36]	@ (800c9e8 <prvHeapInit+0xbc>)
 800c9c2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c9c4:	4b09      	ldr	r3, [pc, #36]	@ (800c9ec <prvHeapInit+0xc0>)
 800c9c6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c9ca:	601a      	str	r2, [r3, #0]
}
 800c9cc:	bf00      	nop
 800c9ce:	3714      	adds	r7, #20
 800c9d0:	46bd      	mov	sp, r7
 800c9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d6:	4770      	bx	lr
 800c9d8:	200015c8 	.word	0x200015c8
 800c9dc:	200115c8 	.word	0x200115c8
 800c9e0:	200115d0 	.word	0x200115d0
 800c9e4:	200115d8 	.word	0x200115d8
 800c9e8:	200115d4 	.word	0x200115d4
 800c9ec:	200115e4 	.word	0x200115e4

0800c9f0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c9f0:	b480      	push	{r7}
 800c9f2:	b085      	sub	sp, #20
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c9f8:	4b28      	ldr	r3, [pc, #160]	@ (800ca9c <prvInsertBlockIntoFreeList+0xac>)
 800c9fa:	60fb      	str	r3, [r7, #12]
 800c9fc:	e002      	b.n	800ca04 <prvInsertBlockIntoFreeList+0x14>
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	60fb      	str	r3, [r7, #12]
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	687a      	ldr	r2, [r7, #4]
 800ca0a:	429a      	cmp	r2, r3
 800ca0c:	d8f7      	bhi.n	800c9fe <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	685b      	ldr	r3, [r3, #4]
 800ca16:	68ba      	ldr	r2, [r7, #8]
 800ca18:	4413      	add	r3, r2
 800ca1a:	687a      	ldr	r2, [r7, #4]
 800ca1c:	429a      	cmp	r2, r3
 800ca1e:	d108      	bne.n	800ca32 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	685a      	ldr	r2, [r3, #4]
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	685b      	ldr	r3, [r3, #4]
 800ca28:	441a      	add	r2, r3
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	685b      	ldr	r3, [r3, #4]
 800ca3a:	68ba      	ldr	r2, [r7, #8]
 800ca3c:	441a      	add	r2, r3
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	429a      	cmp	r2, r3
 800ca44:	d118      	bne.n	800ca78 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	681a      	ldr	r2, [r3, #0]
 800ca4a:	4b15      	ldr	r3, [pc, #84]	@ (800caa0 <prvInsertBlockIntoFreeList+0xb0>)
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	429a      	cmp	r2, r3
 800ca50:	d00d      	beq.n	800ca6e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	685a      	ldr	r2, [r3, #4]
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	685b      	ldr	r3, [r3, #4]
 800ca5c:	441a      	add	r2, r3
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	681a      	ldr	r2, [r3, #0]
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	601a      	str	r2, [r3, #0]
 800ca6c:	e008      	b.n	800ca80 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ca6e:	4b0c      	ldr	r3, [pc, #48]	@ (800caa0 <prvInsertBlockIntoFreeList+0xb0>)
 800ca70:	681a      	ldr	r2, [r3, #0]
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	601a      	str	r2, [r3, #0]
 800ca76:	e003      	b.n	800ca80 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	681a      	ldr	r2, [r3, #0]
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ca80:	68fa      	ldr	r2, [r7, #12]
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	429a      	cmp	r2, r3
 800ca86:	d002      	beq.n	800ca8e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	687a      	ldr	r2, [r7, #4]
 800ca8c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ca8e:	bf00      	nop
 800ca90:	3714      	adds	r7, #20
 800ca92:	46bd      	mov	sp, r7
 800ca94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca98:	4770      	bx	lr
 800ca9a:	bf00      	nop
 800ca9c:	200115c8 	.word	0x200115c8
 800caa0:	200115d0 	.word	0x200115d0

0800caa4 <_ZdlPvj>:
 800caa4:	f000 b800 	b.w	800caa8 <_ZdlPv>

0800caa8 <_ZdlPv>:
 800caa8:	f000 b810 	b.w	800cacc <free>

0800caac <abort>:
 800caac:	b508      	push	{r3, lr}
 800caae:	2006      	movs	r0, #6
 800cab0:	f000 ffc0 	bl	800da34 <raise>
 800cab4:	2001      	movs	r0, #1
 800cab6:	f7f9 f9dd 	bl	8005e74 <_exit>
	...

0800cabc <malloc>:
 800cabc:	4b02      	ldr	r3, [pc, #8]	@ (800cac8 <malloc+0xc>)
 800cabe:	4601      	mov	r1, r0
 800cac0:	6818      	ldr	r0, [r3, #0]
 800cac2:	f000 b82d 	b.w	800cb20 <_malloc_r>
 800cac6:	bf00      	nop
 800cac8:	20000120 	.word	0x20000120

0800cacc <free>:
 800cacc:	4b02      	ldr	r3, [pc, #8]	@ (800cad8 <free+0xc>)
 800cace:	4601      	mov	r1, r0
 800cad0:	6818      	ldr	r0, [r3, #0]
 800cad2:	f001 bf05 	b.w	800e8e0 <_free_r>
 800cad6:	bf00      	nop
 800cad8:	20000120 	.word	0x20000120

0800cadc <sbrk_aligned>:
 800cadc:	b570      	push	{r4, r5, r6, lr}
 800cade:	4e0f      	ldr	r6, [pc, #60]	@ (800cb1c <sbrk_aligned+0x40>)
 800cae0:	460c      	mov	r4, r1
 800cae2:	6831      	ldr	r1, [r6, #0]
 800cae4:	4605      	mov	r5, r0
 800cae6:	b911      	cbnz	r1, 800caee <sbrk_aligned+0x12>
 800cae8:	f001 f84e 	bl	800db88 <_sbrk_r>
 800caec:	6030      	str	r0, [r6, #0]
 800caee:	4621      	mov	r1, r4
 800caf0:	4628      	mov	r0, r5
 800caf2:	f001 f849 	bl	800db88 <_sbrk_r>
 800caf6:	1c43      	adds	r3, r0, #1
 800caf8:	d103      	bne.n	800cb02 <sbrk_aligned+0x26>
 800cafa:	f04f 34ff 	mov.w	r4, #4294967295
 800cafe:	4620      	mov	r0, r4
 800cb00:	bd70      	pop	{r4, r5, r6, pc}
 800cb02:	1cc4      	adds	r4, r0, #3
 800cb04:	f024 0403 	bic.w	r4, r4, #3
 800cb08:	42a0      	cmp	r0, r4
 800cb0a:	d0f8      	beq.n	800cafe <sbrk_aligned+0x22>
 800cb0c:	1a21      	subs	r1, r4, r0
 800cb0e:	4628      	mov	r0, r5
 800cb10:	f001 f83a 	bl	800db88 <_sbrk_r>
 800cb14:	3001      	adds	r0, #1
 800cb16:	d1f2      	bne.n	800cafe <sbrk_aligned+0x22>
 800cb18:	e7ef      	b.n	800cafa <sbrk_aligned+0x1e>
 800cb1a:	bf00      	nop
 800cb1c:	200115e8 	.word	0x200115e8

0800cb20 <_malloc_r>:
 800cb20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb24:	1ccd      	adds	r5, r1, #3
 800cb26:	f025 0503 	bic.w	r5, r5, #3
 800cb2a:	3508      	adds	r5, #8
 800cb2c:	2d0c      	cmp	r5, #12
 800cb2e:	bf38      	it	cc
 800cb30:	250c      	movcc	r5, #12
 800cb32:	2d00      	cmp	r5, #0
 800cb34:	4606      	mov	r6, r0
 800cb36:	db01      	blt.n	800cb3c <_malloc_r+0x1c>
 800cb38:	42a9      	cmp	r1, r5
 800cb3a:	d904      	bls.n	800cb46 <_malloc_r+0x26>
 800cb3c:	230c      	movs	r3, #12
 800cb3e:	6033      	str	r3, [r6, #0]
 800cb40:	2000      	movs	r0, #0
 800cb42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb46:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cc1c <_malloc_r+0xfc>
 800cb4a:	f000 f869 	bl	800cc20 <__malloc_lock>
 800cb4e:	f8d8 3000 	ldr.w	r3, [r8]
 800cb52:	461c      	mov	r4, r3
 800cb54:	bb44      	cbnz	r4, 800cba8 <_malloc_r+0x88>
 800cb56:	4629      	mov	r1, r5
 800cb58:	4630      	mov	r0, r6
 800cb5a:	f7ff ffbf 	bl	800cadc <sbrk_aligned>
 800cb5e:	1c43      	adds	r3, r0, #1
 800cb60:	4604      	mov	r4, r0
 800cb62:	d158      	bne.n	800cc16 <_malloc_r+0xf6>
 800cb64:	f8d8 4000 	ldr.w	r4, [r8]
 800cb68:	4627      	mov	r7, r4
 800cb6a:	2f00      	cmp	r7, #0
 800cb6c:	d143      	bne.n	800cbf6 <_malloc_r+0xd6>
 800cb6e:	2c00      	cmp	r4, #0
 800cb70:	d04b      	beq.n	800cc0a <_malloc_r+0xea>
 800cb72:	6823      	ldr	r3, [r4, #0]
 800cb74:	4639      	mov	r1, r7
 800cb76:	4630      	mov	r0, r6
 800cb78:	eb04 0903 	add.w	r9, r4, r3
 800cb7c:	f001 f804 	bl	800db88 <_sbrk_r>
 800cb80:	4581      	cmp	r9, r0
 800cb82:	d142      	bne.n	800cc0a <_malloc_r+0xea>
 800cb84:	6821      	ldr	r1, [r4, #0]
 800cb86:	1a6d      	subs	r5, r5, r1
 800cb88:	4629      	mov	r1, r5
 800cb8a:	4630      	mov	r0, r6
 800cb8c:	f7ff ffa6 	bl	800cadc <sbrk_aligned>
 800cb90:	3001      	adds	r0, #1
 800cb92:	d03a      	beq.n	800cc0a <_malloc_r+0xea>
 800cb94:	6823      	ldr	r3, [r4, #0]
 800cb96:	442b      	add	r3, r5
 800cb98:	6023      	str	r3, [r4, #0]
 800cb9a:	f8d8 3000 	ldr.w	r3, [r8]
 800cb9e:	685a      	ldr	r2, [r3, #4]
 800cba0:	bb62      	cbnz	r2, 800cbfc <_malloc_r+0xdc>
 800cba2:	f8c8 7000 	str.w	r7, [r8]
 800cba6:	e00f      	b.n	800cbc8 <_malloc_r+0xa8>
 800cba8:	6822      	ldr	r2, [r4, #0]
 800cbaa:	1b52      	subs	r2, r2, r5
 800cbac:	d420      	bmi.n	800cbf0 <_malloc_r+0xd0>
 800cbae:	2a0b      	cmp	r2, #11
 800cbb0:	d917      	bls.n	800cbe2 <_malloc_r+0xc2>
 800cbb2:	1961      	adds	r1, r4, r5
 800cbb4:	42a3      	cmp	r3, r4
 800cbb6:	6025      	str	r5, [r4, #0]
 800cbb8:	bf18      	it	ne
 800cbba:	6059      	strne	r1, [r3, #4]
 800cbbc:	6863      	ldr	r3, [r4, #4]
 800cbbe:	bf08      	it	eq
 800cbc0:	f8c8 1000 	streq.w	r1, [r8]
 800cbc4:	5162      	str	r2, [r4, r5]
 800cbc6:	604b      	str	r3, [r1, #4]
 800cbc8:	4630      	mov	r0, r6
 800cbca:	f000 f82f 	bl	800cc2c <__malloc_unlock>
 800cbce:	f104 000b 	add.w	r0, r4, #11
 800cbd2:	1d23      	adds	r3, r4, #4
 800cbd4:	f020 0007 	bic.w	r0, r0, #7
 800cbd8:	1ac2      	subs	r2, r0, r3
 800cbda:	bf1c      	itt	ne
 800cbdc:	1a1b      	subne	r3, r3, r0
 800cbde:	50a3      	strne	r3, [r4, r2]
 800cbe0:	e7af      	b.n	800cb42 <_malloc_r+0x22>
 800cbe2:	6862      	ldr	r2, [r4, #4]
 800cbe4:	42a3      	cmp	r3, r4
 800cbe6:	bf0c      	ite	eq
 800cbe8:	f8c8 2000 	streq.w	r2, [r8]
 800cbec:	605a      	strne	r2, [r3, #4]
 800cbee:	e7eb      	b.n	800cbc8 <_malloc_r+0xa8>
 800cbf0:	4623      	mov	r3, r4
 800cbf2:	6864      	ldr	r4, [r4, #4]
 800cbf4:	e7ae      	b.n	800cb54 <_malloc_r+0x34>
 800cbf6:	463c      	mov	r4, r7
 800cbf8:	687f      	ldr	r7, [r7, #4]
 800cbfa:	e7b6      	b.n	800cb6a <_malloc_r+0x4a>
 800cbfc:	461a      	mov	r2, r3
 800cbfe:	685b      	ldr	r3, [r3, #4]
 800cc00:	42a3      	cmp	r3, r4
 800cc02:	d1fb      	bne.n	800cbfc <_malloc_r+0xdc>
 800cc04:	2300      	movs	r3, #0
 800cc06:	6053      	str	r3, [r2, #4]
 800cc08:	e7de      	b.n	800cbc8 <_malloc_r+0xa8>
 800cc0a:	230c      	movs	r3, #12
 800cc0c:	6033      	str	r3, [r6, #0]
 800cc0e:	4630      	mov	r0, r6
 800cc10:	f000 f80c 	bl	800cc2c <__malloc_unlock>
 800cc14:	e794      	b.n	800cb40 <_malloc_r+0x20>
 800cc16:	6005      	str	r5, [r0, #0]
 800cc18:	e7d6      	b.n	800cbc8 <_malloc_r+0xa8>
 800cc1a:	bf00      	nop
 800cc1c:	200115ec 	.word	0x200115ec

0800cc20 <__malloc_lock>:
 800cc20:	4801      	ldr	r0, [pc, #4]	@ (800cc28 <__malloc_lock+0x8>)
 800cc22:	f000 bffe 	b.w	800dc22 <__retarget_lock_acquire_recursive>
 800cc26:	bf00      	nop
 800cc28:	20011730 	.word	0x20011730

0800cc2c <__malloc_unlock>:
 800cc2c:	4801      	ldr	r0, [pc, #4]	@ (800cc34 <__malloc_unlock+0x8>)
 800cc2e:	f000 bff9 	b.w	800dc24 <__retarget_lock_release_recursive>
 800cc32:	bf00      	nop
 800cc34:	20011730 	.word	0x20011730

0800cc38 <__cvt>:
 800cc38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cc3c:	ec57 6b10 	vmov	r6, r7, d0
 800cc40:	2f00      	cmp	r7, #0
 800cc42:	460c      	mov	r4, r1
 800cc44:	4619      	mov	r1, r3
 800cc46:	463b      	mov	r3, r7
 800cc48:	bfbb      	ittet	lt
 800cc4a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800cc4e:	461f      	movlt	r7, r3
 800cc50:	2300      	movge	r3, #0
 800cc52:	232d      	movlt	r3, #45	@ 0x2d
 800cc54:	700b      	strb	r3, [r1, #0]
 800cc56:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cc58:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800cc5c:	4691      	mov	r9, r2
 800cc5e:	f023 0820 	bic.w	r8, r3, #32
 800cc62:	bfbc      	itt	lt
 800cc64:	4632      	movlt	r2, r6
 800cc66:	4616      	movlt	r6, r2
 800cc68:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800cc6c:	d005      	beq.n	800cc7a <__cvt+0x42>
 800cc6e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800cc72:	d100      	bne.n	800cc76 <__cvt+0x3e>
 800cc74:	3401      	adds	r4, #1
 800cc76:	2102      	movs	r1, #2
 800cc78:	e000      	b.n	800cc7c <__cvt+0x44>
 800cc7a:	2103      	movs	r1, #3
 800cc7c:	ab03      	add	r3, sp, #12
 800cc7e:	9301      	str	r3, [sp, #4]
 800cc80:	ab02      	add	r3, sp, #8
 800cc82:	9300      	str	r3, [sp, #0]
 800cc84:	ec47 6b10 	vmov	d0, r6, r7
 800cc88:	4653      	mov	r3, sl
 800cc8a:	4622      	mov	r2, r4
 800cc8c:	f001 f864 	bl	800dd58 <_dtoa_r>
 800cc90:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800cc94:	4605      	mov	r5, r0
 800cc96:	d119      	bne.n	800cccc <__cvt+0x94>
 800cc98:	f019 0f01 	tst.w	r9, #1
 800cc9c:	d00e      	beq.n	800ccbc <__cvt+0x84>
 800cc9e:	eb00 0904 	add.w	r9, r0, r4
 800cca2:	2200      	movs	r2, #0
 800cca4:	2300      	movs	r3, #0
 800cca6:	4630      	mov	r0, r6
 800cca8:	4639      	mov	r1, r7
 800ccaa:	f7f3 fee5 	bl	8000a78 <__aeabi_dcmpeq>
 800ccae:	b108      	cbz	r0, 800ccb4 <__cvt+0x7c>
 800ccb0:	f8cd 900c 	str.w	r9, [sp, #12]
 800ccb4:	2230      	movs	r2, #48	@ 0x30
 800ccb6:	9b03      	ldr	r3, [sp, #12]
 800ccb8:	454b      	cmp	r3, r9
 800ccba:	d31e      	bcc.n	800ccfa <__cvt+0xc2>
 800ccbc:	9b03      	ldr	r3, [sp, #12]
 800ccbe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ccc0:	1b5b      	subs	r3, r3, r5
 800ccc2:	4628      	mov	r0, r5
 800ccc4:	6013      	str	r3, [r2, #0]
 800ccc6:	b004      	add	sp, #16
 800ccc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cccc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ccd0:	eb00 0904 	add.w	r9, r0, r4
 800ccd4:	d1e5      	bne.n	800cca2 <__cvt+0x6a>
 800ccd6:	7803      	ldrb	r3, [r0, #0]
 800ccd8:	2b30      	cmp	r3, #48	@ 0x30
 800ccda:	d10a      	bne.n	800ccf2 <__cvt+0xba>
 800ccdc:	2200      	movs	r2, #0
 800ccde:	2300      	movs	r3, #0
 800cce0:	4630      	mov	r0, r6
 800cce2:	4639      	mov	r1, r7
 800cce4:	f7f3 fec8 	bl	8000a78 <__aeabi_dcmpeq>
 800cce8:	b918      	cbnz	r0, 800ccf2 <__cvt+0xba>
 800ccea:	f1c4 0401 	rsb	r4, r4, #1
 800ccee:	f8ca 4000 	str.w	r4, [sl]
 800ccf2:	f8da 3000 	ldr.w	r3, [sl]
 800ccf6:	4499      	add	r9, r3
 800ccf8:	e7d3      	b.n	800cca2 <__cvt+0x6a>
 800ccfa:	1c59      	adds	r1, r3, #1
 800ccfc:	9103      	str	r1, [sp, #12]
 800ccfe:	701a      	strb	r2, [r3, #0]
 800cd00:	e7d9      	b.n	800ccb6 <__cvt+0x7e>

0800cd02 <__exponent>:
 800cd02:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cd04:	2900      	cmp	r1, #0
 800cd06:	bfba      	itte	lt
 800cd08:	4249      	neglt	r1, r1
 800cd0a:	232d      	movlt	r3, #45	@ 0x2d
 800cd0c:	232b      	movge	r3, #43	@ 0x2b
 800cd0e:	2909      	cmp	r1, #9
 800cd10:	7002      	strb	r2, [r0, #0]
 800cd12:	7043      	strb	r3, [r0, #1]
 800cd14:	dd29      	ble.n	800cd6a <__exponent+0x68>
 800cd16:	f10d 0307 	add.w	r3, sp, #7
 800cd1a:	461d      	mov	r5, r3
 800cd1c:	270a      	movs	r7, #10
 800cd1e:	461a      	mov	r2, r3
 800cd20:	fbb1 f6f7 	udiv	r6, r1, r7
 800cd24:	fb07 1416 	mls	r4, r7, r6, r1
 800cd28:	3430      	adds	r4, #48	@ 0x30
 800cd2a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800cd2e:	460c      	mov	r4, r1
 800cd30:	2c63      	cmp	r4, #99	@ 0x63
 800cd32:	f103 33ff 	add.w	r3, r3, #4294967295
 800cd36:	4631      	mov	r1, r6
 800cd38:	dcf1      	bgt.n	800cd1e <__exponent+0x1c>
 800cd3a:	3130      	adds	r1, #48	@ 0x30
 800cd3c:	1e94      	subs	r4, r2, #2
 800cd3e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800cd42:	1c41      	adds	r1, r0, #1
 800cd44:	4623      	mov	r3, r4
 800cd46:	42ab      	cmp	r3, r5
 800cd48:	d30a      	bcc.n	800cd60 <__exponent+0x5e>
 800cd4a:	f10d 0309 	add.w	r3, sp, #9
 800cd4e:	1a9b      	subs	r3, r3, r2
 800cd50:	42ac      	cmp	r4, r5
 800cd52:	bf88      	it	hi
 800cd54:	2300      	movhi	r3, #0
 800cd56:	3302      	adds	r3, #2
 800cd58:	4403      	add	r3, r0
 800cd5a:	1a18      	subs	r0, r3, r0
 800cd5c:	b003      	add	sp, #12
 800cd5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd60:	f813 6b01 	ldrb.w	r6, [r3], #1
 800cd64:	f801 6f01 	strb.w	r6, [r1, #1]!
 800cd68:	e7ed      	b.n	800cd46 <__exponent+0x44>
 800cd6a:	2330      	movs	r3, #48	@ 0x30
 800cd6c:	3130      	adds	r1, #48	@ 0x30
 800cd6e:	7083      	strb	r3, [r0, #2]
 800cd70:	70c1      	strb	r1, [r0, #3]
 800cd72:	1d03      	adds	r3, r0, #4
 800cd74:	e7f1      	b.n	800cd5a <__exponent+0x58>
	...

0800cd78 <_printf_float>:
 800cd78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd7c:	b08d      	sub	sp, #52	@ 0x34
 800cd7e:	460c      	mov	r4, r1
 800cd80:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800cd84:	4616      	mov	r6, r2
 800cd86:	461f      	mov	r7, r3
 800cd88:	4605      	mov	r5, r0
 800cd8a:	f000 fe5b 	bl	800da44 <_localeconv_r>
 800cd8e:	6803      	ldr	r3, [r0, #0]
 800cd90:	9304      	str	r3, [sp, #16]
 800cd92:	4618      	mov	r0, r3
 800cd94:	f7f3 fa44 	bl	8000220 <strlen>
 800cd98:	2300      	movs	r3, #0
 800cd9a:	930a      	str	r3, [sp, #40]	@ 0x28
 800cd9c:	f8d8 3000 	ldr.w	r3, [r8]
 800cda0:	9005      	str	r0, [sp, #20]
 800cda2:	3307      	adds	r3, #7
 800cda4:	f023 0307 	bic.w	r3, r3, #7
 800cda8:	f103 0208 	add.w	r2, r3, #8
 800cdac:	f894 a018 	ldrb.w	sl, [r4, #24]
 800cdb0:	f8d4 b000 	ldr.w	fp, [r4]
 800cdb4:	f8c8 2000 	str.w	r2, [r8]
 800cdb8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cdbc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800cdc0:	9307      	str	r3, [sp, #28]
 800cdc2:	f8cd 8018 	str.w	r8, [sp, #24]
 800cdc6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800cdca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cdce:	4b9c      	ldr	r3, [pc, #624]	@ (800d040 <_printf_float+0x2c8>)
 800cdd0:	f04f 32ff 	mov.w	r2, #4294967295
 800cdd4:	f7f3 fe82 	bl	8000adc <__aeabi_dcmpun>
 800cdd8:	bb70      	cbnz	r0, 800ce38 <_printf_float+0xc0>
 800cdda:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cdde:	4b98      	ldr	r3, [pc, #608]	@ (800d040 <_printf_float+0x2c8>)
 800cde0:	f04f 32ff 	mov.w	r2, #4294967295
 800cde4:	f7f3 fe5c 	bl	8000aa0 <__aeabi_dcmple>
 800cde8:	bb30      	cbnz	r0, 800ce38 <_printf_float+0xc0>
 800cdea:	2200      	movs	r2, #0
 800cdec:	2300      	movs	r3, #0
 800cdee:	4640      	mov	r0, r8
 800cdf0:	4649      	mov	r1, r9
 800cdf2:	f7f3 fe4b 	bl	8000a8c <__aeabi_dcmplt>
 800cdf6:	b110      	cbz	r0, 800cdfe <_printf_float+0x86>
 800cdf8:	232d      	movs	r3, #45	@ 0x2d
 800cdfa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cdfe:	4a91      	ldr	r2, [pc, #580]	@ (800d044 <_printf_float+0x2cc>)
 800ce00:	4b91      	ldr	r3, [pc, #580]	@ (800d048 <_printf_float+0x2d0>)
 800ce02:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800ce06:	bf94      	ite	ls
 800ce08:	4690      	movls	r8, r2
 800ce0a:	4698      	movhi	r8, r3
 800ce0c:	2303      	movs	r3, #3
 800ce0e:	6123      	str	r3, [r4, #16]
 800ce10:	f02b 0304 	bic.w	r3, fp, #4
 800ce14:	6023      	str	r3, [r4, #0]
 800ce16:	f04f 0900 	mov.w	r9, #0
 800ce1a:	9700      	str	r7, [sp, #0]
 800ce1c:	4633      	mov	r3, r6
 800ce1e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800ce20:	4621      	mov	r1, r4
 800ce22:	4628      	mov	r0, r5
 800ce24:	f000 f9d2 	bl	800d1cc <_printf_common>
 800ce28:	3001      	adds	r0, #1
 800ce2a:	f040 808d 	bne.w	800cf48 <_printf_float+0x1d0>
 800ce2e:	f04f 30ff 	mov.w	r0, #4294967295
 800ce32:	b00d      	add	sp, #52	@ 0x34
 800ce34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce38:	4642      	mov	r2, r8
 800ce3a:	464b      	mov	r3, r9
 800ce3c:	4640      	mov	r0, r8
 800ce3e:	4649      	mov	r1, r9
 800ce40:	f7f3 fe4c 	bl	8000adc <__aeabi_dcmpun>
 800ce44:	b140      	cbz	r0, 800ce58 <_printf_float+0xe0>
 800ce46:	464b      	mov	r3, r9
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	bfbc      	itt	lt
 800ce4c:	232d      	movlt	r3, #45	@ 0x2d
 800ce4e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800ce52:	4a7e      	ldr	r2, [pc, #504]	@ (800d04c <_printf_float+0x2d4>)
 800ce54:	4b7e      	ldr	r3, [pc, #504]	@ (800d050 <_printf_float+0x2d8>)
 800ce56:	e7d4      	b.n	800ce02 <_printf_float+0x8a>
 800ce58:	6863      	ldr	r3, [r4, #4]
 800ce5a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800ce5e:	9206      	str	r2, [sp, #24]
 800ce60:	1c5a      	adds	r2, r3, #1
 800ce62:	d13b      	bne.n	800cedc <_printf_float+0x164>
 800ce64:	2306      	movs	r3, #6
 800ce66:	6063      	str	r3, [r4, #4]
 800ce68:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800ce6c:	2300      	movs	r3, #0
 800ce6e:	6022      	str	r2, [r4, #0]
 800ce70:	9303      	str	r3, [sp, #12]
 800ce72:	ab0a      	add	r3, sp, #40	@ 0x28
 800ce74:	e9cd a301 	strd	sl, r3, [sp, #4]
 800ce78:	ab09      	add	r3, sp, #36	@ 0x24
 800ce7a:	9300      	str	r3, [sp, #0]
 800ce7c:	6861      	ldr	r1, [r4, #4]
 800ce7e:	ec49 8b10 	vmov	d0, r8, r9
 800ce82:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800ce86:	4628      	mov	r0, r5
 800ce88:	f7ff fed6 	bl	800cc38 <__cvt>
 800ce8c:	9b06      	ldr	r3, [sp, #24]
 800ce8e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ce90:	2b47      	cmp	r3, #71	@ 0x47
 800ce92:	4680      	mov	r8, r0
 800ce94:	d129      	bne.n	800ceea <_printf_float+0x172>
 800ce96:	1cc8      	adds	r0, r1, #3
 800ce98:	db02      	blt.n	800cea0 <_printf_float+0x128>
 800ce9a:	6863      	ldr	r3, [r4, #4]
 800ce9c:	4299      	cmp	r1, r3
 800ce9e:	dd41      	ble.n	800cf24 <_printf_float+0x1ac>
 800cea0:	f1aa 0a02 	sub.w	sl, sl, #2
 800cea4:	fa5f fa8a 	uxtb.w	sl, sl
 800cea8:	3901      	subs	r1, #1
 800ceaa:	4652      	mov	r2, sl
 800ceac:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800ceb0:	9109      	str	r1, [sp, #36]	@ 0x24
 800ceb2:	f7ff ff26 	bl	800cd02 <__exponent>
 800ceb6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ceb8:	1813      	adds	r3, r2, r0
 800ceba:	2a01      	cmp	r2, #1
 800cebc:	4681      	mov	r9, r0
 800cebe:	6123      	str	r3, [r4, #16]
 800cec0:	dc02      	bgt.n	800cec8 <_printf_float+0x150>
 800cec2:	6822      	ldr	r2, [r4, #0]
 800cec4:	07d2      	lsls	r2, r2, #31
 800cec6:	d501      	bpl.n	800cecc <_printf_float+0x154>
 800cec8:	3301      	adds	r3, #1
 800ceca:	6123      	str	r3, [r4, #16]
 800cecc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d0a2      	beq.n	800ce1a <_printf_float+0xa2>
 800ced4:	232d      	movs	r3, #45	@ 0x2d
 800ced6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ceda:	e79e      	b.n	800ce1a <_printf_float+0xa2>
 800cedc:	9a06      	ldr	r2, [sp, #24]
 800cede:	2a47      	cmp	r2, #71	@ 0x47
 800cee0:	d1c2      	bne.n	800ce68 <_printf_float+0xf0>
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d1c0      	bne.n	800ce68 <_printf_float+0xf0>
 800cee6:	2301      	movs	r3, #1
 800cee8:	e7bd      	b.n	800ce66 <_printf_float+0xee>
 800ceea:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ceee:	d9db      	bls.n	800cea8 <_printf_float+0x130>
 800cef0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800cef4:	d118      	bne.n	800cf28 <_printf_float+0x1b0>
 800cef6:	2900      	cmp	r1, #0
 800cef8:	6863      	ldr	r3, [r4, #4]
 800cefa:	dd0b      	ble.n	800cf14 <_printf_float+0x19c>
 800cefc:	6121      	str	r1, [r4, #16]
 800cefe:	b913      	cbnz	r3, 800cf06 <_printf_float+0x18e>
 800cf00:	6822      	ldr	r2, [r4, #0]
 800cf02:	07d0      	lsls	r0, r2, #31
 800cf04:	d502      	bpl.n	800cf0c <_printf_float+0x194>
 800cf06:	3301      	adds	r3, #1
 800cf08:	440b      	add	r3, r1
 800cf0a:	6123      	str	r3, [r4, #16]
 800cf0c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800cf0e:	f04f 0900 	mov.w	r9, #0
 800cf12:	e7db      	b.n	800cecc <_printf_float+0x154>
 800cf14:	b913      	cbnz	r3, 800cf1c <_printf_float+0x1a4>
 800cf16:	6822      	ldr	r2, [r4, #0]
 800cf18:	07d2      	lsls	r2, r2, #31
 800cf1a:	d501      	bpl.n	800cf20 <_printf_float+0x1a8>
 800cf1c:	3302      	adds	r3, #2
 800cf1e:	e7f4      	b.n	800cf0a <_printf_float+0x192>
 800cf20:	2301      	movs	r3, #1
 800cf22:	e7f2      	b.n	800cf0a <_printf_float+0x192>
 800cf24:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800cf28:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cf2a:	4299      	cmp	r1, r3
 800cf2c:	db05      	blt.n	800cf3a <_printf_float+0x1c2>
 800cf2e:	6823      	ldr	r3, [r4, #0]
 800cf30:	6121      	str	r1, [r4, #16]
 800cf32:	07d8      	lsls	r0, r3, #31
 800cf34:	d5ea      	bpl.n	800cf0c <_printf_float+0x194>
 800cf36:	1c4b      	adds	r3, r1, #1
 800cf38:	e7e7      	b.n	800cf0a <_printf_float+0x192>
 800cf3a:	2900      	cmp	r1, #0
 800cf3c:	bfd4      	ite	le
 800cf3e:	f1c1 0202 	rsble	r2, r1, #2
 800cf42:	2201      	movgt	r2, #1
 800cf44:	4413      	add	r3, r2
 800cf46:	e7e0      	b.n	800cf0a <_printf_float+0x192>
 800cf48:	6823      	ldr	r3, [r4, #0]
 800cf4a:	055a      	lsls	r2, r3, #21
 800cf4c:	d407      	bmi.n	800cf5e <_printf_float+0x1e6>
 800cf4e:	6923      	ldr	r3, [r4, #16]
 800cf50:	4642      	mov	r2, r8
 800cf52:	4631      	mov	r1, r6
 800cf54:	4628      	mov	r0, r5
 800cf56:	47b8      	blx	r7
 800cf58:	3001      	adds	r0, #1
 800cf5a:	d12b      	bne.n	800cfb4 <_printf_float+0x23c>
 800cf5c:	e767      	b.n	800ce2e <_printf_float+0xb6>
 800cf5e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800cf62:	f240 80dd 	bls.w	800d120 <_printf_float+0x3a8>
 800cf66:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800cf6a:	2200      	movs	r2, #0
 800cf6c:	2300      	movs	r3, #0
 800cf6e:	f7f3 fd83 	bl	8000a78 <__aeabi_dcmpeq>
 800cf72:	2800      	cmp	r0, #0
 800cf74:	d033      	beq.n	800cfde <_printf_float+0x266>
 800cf76:	4a37      	ldr	r2, [pc, #220]	@ (800d054 <_printf_float+0x2dc>)
 800cf78:	2301      	movs	r3, #1
 800cf7a:	4631      	mov	r1, r6
 800cf7c:	4628      	mov	r0, r5
 800cf7e:	47b8      	blx	r7
 800cf80:	3001      	adds	r0, #1
 800cf82:	f43f af54 	beq.w	800ce2e <_printf_float+0xb6>
 800cf86:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800cf8a:	4543      	cmp	r3, r8
 800cf8c:	db02      	blt.n	800cf94 <_printf_float+0x21c>
 800cf8e:	6823      	ldr	r3, [r4, #0]
 800cf90:	07d8      	lsls	r0, r3, #31
 800cf92:	d50f      	bpl.n	800cfb4 <_printf_float+0x23c>
 800cf94:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cf98:	4631      	mov	r1, r6
 800cf9a:	4628      	mov	r0, r5
 800cf9c:	47b8      	blx	r7
 800cf9e:	3001      	adds	r0, #1
 800cfa0:	f43f af45 	beq.w	800ce2e <_printf_float+0xb6>
 800cfa4:	f04f 0900 	mov.w	r9, #0
 800cfa8:	f108 38ff 	add.w	r8, r8, #4294967295
 800cfac:	f104 0a1a 	add.w	sl, r4, #26
 800cfb0:	45c8      	cmp	r8, r9
 800cfb2:	dc09      	bgt.n	800cfc8 <_printf_float+0x250>
 800cfb4:	6823      	ldr	r3, [r4, #0]
 800cfb6:	079b      	lsls	r3, r3, #30
 800cfb8:	f100 8103 	bmi.w	800d1c2 <_printf_float+0x44a>
 800cfbc:	68e0      	ldr	r0, [r4, #12]
 800cfbe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cfc0:	4298      	cmp	r0, r3
 800cfc2:	bfb8      	it	lt
 800cfc4:	4618      	movlt	r0, r3
 800cfc6:	e734      	b.n	800ce32 <_printf_float+0xba>
 800cfc8:	2301      	movs	r3, #1
 800cfca:	4652      	mov	r2, sl
 800cfcc:	4631      	mov	r1, r6
 800cfce:	4628      	mov	r0, r5
 800cfd0:	47b8      	blx	r7
 800cfd2:	3001      	adds	r0, #1
 800cfd4:	f43f af2b 	beq.w	800ce2e <_printf_float+0xb6>
 800cfd8:	f109 0901 	add.w	r9, r9, #1
 800cfdc:	e7e8      	b.n	800cfb0 <_printf_float+0x238>
 800cfde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	dc39      	bgt.n	800d058 <_printf_float+0x2e0>
 800cfe4:	4a1b      	ldr	r2, [pc, #108]	@ (800d054 <_printf_float+0x2dc>)
 800cfe6:	2301      	movs	r3, #1
 800cfe8:	4631      	mov	r1, r6
 800cfea:	4628      	mov	r0, r5
 800cfec:	47b8      	blx	r7
 800cfee:	3001      	adds	r0, #1
 800cff0:	f43f af1d 	beq.w	800ce2e <_printf_float+0xb6>
 800cff4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800cff8:	ea59 0303 	orrs.w	r3, r9, r3
 800cffc:	d102      	bne.n	800d004 <_printf_float+0x28c>
 800cffe:	6823      	ldr	r3, [r4, #0]
 800d000:	07d9      	lsls	r1, r3, #31
 800d002:	d5d7      	bpl.n	800cfb4 <_printf_float+0x23c>
 800d004:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d008:	4631      	mov	r1, r6
 800d00a:	4628      	mov	r0, r5
 800d00c:	47b8      	blx	r7
 800d00e:	3001      	adds	r0, #1
 800d010:	f43f af0d 	beq.w	800ce2e <_printf_float+0xb6>
 800d014:	f04f 0a00 	mov.w	sl, #0
 800d018:	f104 0b1a 	add.w	fp, r4, #26
 800d01c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d01e:	425b      	negs	r3, r3
 800d020:	4553      	cmp	r3, sl
 800d022:	dc01      	bgt.n	800d028 <_printf_float+0x2b0>
 800d024:	464b      	mov	r3, r9
 800d026:	e793      	b.n	800cf50 <_printf_float+0x1d8>
 800d028:	2301      	movs	r3, #1
 800d02a:	465a      	mov	r2, fp
 800d02c:	4631      	mov	r1, r6
 800d02e:	4628      	mov	r0, r5
 800d030:	47b8      	blx	r7
 800d032:	3001      	adds	r0, #1
 800d034:	f43f aefb 	beq.w	800ce2e <_printf_float+0xb6>
 800d038:	f10a 0a01 	add.w	sl, sl, #1
 800d03c:	e7ee      	b.n	800d01c <_printf_float+0x2a4>
 800d03e:	bf00      	nop
 800d040:	7fefffff 	.word	0x7fefffff
 800d044:	080130dc 	.word	0x080130dc
 800d048:	080130e0 	.word	0x080130e0
 800d04c:	080130e4 	.word	0x080130e4
 800d050:	080130e8 	.word	0x080130e8
 800d054:	080130ec 	.word	0x080130ec
 800d058:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d05a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d05e:	4553      	cmp	r3, sl
 800d060:	bfa8      	it	ge
 800d062:	4653      	movge	r3, sl
 800d064:	2b00      	cmp	r3, #0
 800d066:	4699      	mov	r9, r3
 800d068:	dc36      	bgt.n	800d0d8 <_printf_float+0x360>
 800d06a:	f04f 0b00 	mov.w	fp, #0
 800d06e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d072:	f104 021a 	add.w	r2, r4, #26
 800d076:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d078:	9306      	str	r3, [sp, #24]
 800d07a:	eba3 0309 	sub.w	r3, r3, r9
 800d07e:	455b      	cmp	r3, fp
 800d080:	dc31      	bgt.n	800d0e6 <_printf_float+0x36e>
 800d082:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d084:	459a      	cmp	sl, r3
 800d086:	dc3a      	bgt.n	800d0fe <_printf_float+0x386>
 800d088:	6823      	ldr	r3, [r4, #0]
 800d08a:	07da      	lsls	r2, r3, #31
 800d08c:	d437      	bmi.n	800d0fe <_printf_float+0x386>
 800d08e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d090:	ebaa 0903 	sub.w	r9, sl, r3
 800d094:	9b06      	ldr	r3, [sp, #24]
 800d096:	ebaa 0303 	sub.w	r3, sl, r3
 800d09a:	4599      	cmp	r9, r3
 800d09c:	bfa8      	it	ge
 800d09e:	4699      	movge	r9, r3
 800d0a0:	f1b9 0f00 	cmp.w	r9, #0
 800d0a4:	dc33      	bgt.n	800d10e <_printf_float+0x396>
 800d0a6:	f04f 0800 	mov.w	r8, #0
 800d0aa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d0ae:	f104 0b1a 	add.w	fp, r4, #26
 800d0b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d0b4:	ebaa 0303 	sub.w	r3, sl, r3
 800d0b8:	eba3 0309 	sub.w	r3, r3, r9
 800d0bc:	4543      	cmp	r3, r8
 800d0be:	f77f af79 	ble.w	800cfb4 <_printf_float+0x23c>
 800d0c2:	2301      	movs	r3, #1
 800d0c4:	465a      	mov	r2, fp
 800d0c6:	4631      	mov	r1, r6
 800d0c8:	4628      	mov	r0, r5
 800d0ca:	47b8      	blx	r7
 800d0cc:	3001      	adds	r0, #1
 800d0ce:	f43f aeae 	beq.w	800ce2e <_printf_float+0xb6>
 800d0d2:	f108 0801 	add.w	r8, r8, #1
 800d0d6:	e7ec      	b.n	800d0b2 <_printf_float+0x33a>
 800d0d8:	4642      	mov	r2, r8
 800d0da:	4631      	mov	r1, r6
 800d0dc:	4628      	mov	r0, r5
 800d0de:	47b8      	blx	r7
 800d0e0:	3001      	adds	r0, #1
 800d0e2:	d1c2      	bne.n	800d06a <_printf_float+0x2f2>
 800d0e4:	e6a3      	b.n	800ce2e <_printf_float+0xb6>
 800d0e6:	2301      	movs	r3, #1
 800d0e8:	4631      	mov	r1, r6
 800d0ea:	4628      	mov	r0, r5
 800d0ec:	9206      	str	r2, [sp, #24]
 800d0ee:	47b8      	blx	r7
 800d0f0:	3001      	adds	r0, #1
 800d0f2:	f43f ae9c 	beq.w	800ce2e <_printf_float+0xb6>
 800d0f6:	9a06      	ldr	r2, [sp, #24]
 800d0f8:	f10b 0b01 	add.w	fp, fp, #1
 800d0fc:	e7bb      	b.n	800d076 <_printf_float+0x2fe>
 800d0fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d102:	4631      	mov	r1, r6
 800d104:	4628      	mov	r0, r5
 800d106:	47b8      	blx	r7
 800d108:	3001      	adds	r0, #1
 800d10a:	d1c0      	bne.n	800d08e <_printf_float+0x316>
 800d10c:	e68f      	b.n	800ce2e <_printf_float+0xb6>
 800d10e:	9a06      	ldr	r2, [sp, #24]
 800d110:	464b      	mov	r3, r9
 800d112:	4442      	add	r2, r8
 800d114:	4631      	mov	r1, r6
 800d116:	4628      	mov	r0, r5
 800d118:	47b8      	blx	r7
 800d11a:	3001      	adds	r0, #1
 800d11c:	d1c3      	bne.n	800d0a6 <_printf_float+0x32e>
 800d11e:	e686      	b.n	800ce2e <_printf_float+0xb6>
 800d120:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d124:	f1ba 0f01 	cmp.w	sl, #1
 800d128:	dc01      	bgt.n	800d12e <_printf_float+0x3b6>
 800d12a:	07db      	lsls	r3, r3, #31
 800d12c:	d536      	bpl.n	800d19c <_printf_float+0x424>
 800d12e:	2301      	movs	r3, #1
 800d130:	4642      	mov	r2, r8
 800d132:	4631      	mov	r1, r6
 800d134:	4628      	mov	r0, r5
 800d136:	47b8      	blx	r7
 800d138:	3001      	adds	r0, #1
 800d13a:	f43f ae78 	beq.w	800ce2e <_printf_float+0xb6>
 800d13e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d142:	4631      	mov	r1, r6
 800d144:	4628      	mov	r0, r5
 800d146:	47b8      	blx	r7
 800d148:	3001      	adds	r0, #1
 800d14a:	f43f ae70 	beq.w	800ce2e <_printf_float+0xb6>
 800d14e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d152:	2200      	movs	r2, #0
 800d154:	2300      	movs	r3, #0
 800d156:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d15a:	f7f3 fc8d 	bl	8000a78 <__aeabi_dcmpeq>
 800d15e:	b9c0      	cbnz	r0, 800d192 <_printf_float+0x41a>
 800d160:	4653      	mov	r3, sl
 800d162:	f108 0201 	add.w	r2, r8, #1
 800d166:	4631      	mov	r1, r6
 800d168:	4628      	mov	r0, r5
 800d16a:	47b8      	blx	r7
 800d16c:	3001      	adds	r0, #1
 800d16e:	d10c      	bne.n	800d18a <_printf_float+0x412>
 800d170:	e65d      	b.n	800ce2e <_printf_float+0xb6>
 800d172:	2301      	movs	r3, #1
 800d174:	465a      	mov	r2, fp
 800d176:	4631      	mov	r1, r6
 800d178:	4628      	mov	r0, r5
 800d17a:	47b8      	blx	r7
 800d17c:	3001      	adds	r0, #1
 800d17e:	f43f ae56 	beq.w	800ce2e <_printf_float+0xb6>
 800d182:	f108 0801 	add.w	r8, r8, #1
 800d186:	45d0      	cmp	r8, sl
 800d188:	dbf3      	blt.n	800d172 <_printf_float+0x3fa>
 800d18a:	464b      	mov	r3, r9
 800d18c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800d190:	e6df      	b.n	800cf52 <_printf_float+0x1da>
 800d192:	f04f 0800 	mov.w	r8, #0
 800d196:	f104 0b1a 	add.w	fp, r4, #26
 800d19a:	e7f4      	b.n	800d186 <_printf_float+0x40e>
 800d19c:	2301      	movs	r3, #1
 800d19e:	4642      	mov	r2, r8
 800d1a0:	e7e1      	b.n	800d166 <_printf_float+0x3ee>
 800d1a2:	2301      	movs	r3, #1
 800d1a4:	464a      	mov	r2, r9
 800d1a6:	4631      	mov	r1, r6
 800d1a8:	4628      	mov	r0, r5
 800d1aa:	47b8      	blx	r7
 800d1ac:	3001      	adds	r0, #1
 800d1ae:	f43f ae3e 	beq.w	800ce2e <_printf_float+0xb6>
 800d1b2:	f108 0801 	add.w	r8, r8, #1
 800d1b6:	68e3      	ldr	r3, [r4, #12]
 800d1b8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d1ba:	1a5b      	subs	r3, r3, r1
 800d1bc:	4543      	cmp	r3, r8
 800d1be:	dcf0      	bgt.n	800d1a2 <_printf_float+0x42a>
 800d1c0:	e6fc      	b.n	800cfbc <_printf_float+0x244>
 800d1c2:	f04f 0800 	mov.w	r8, #0
 800d1c6:	f104 0919 	add.w	r9, r4, #25
 800d1ca:	e7f4      	b.n	800d1b6 <_printf_float+0x43e>

0800d1cc <_printf_common>:
 800d1cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d1d0:	4616      	mov	r6, r2
 800d1d2:	4698      	mov	r8, r3
 800d1d4:	688a      	ldr	r2, [r1, #8]
 800d1d6:	690b      	ldr	r3, [r1, #16]
 800d1d8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d1dc:	4293      	cmp	r3, r2
 800d1de:	bfb8      	it	lt
 800d1e0:	4613      	movlt	r3, r2
 800d1e2:	6033      	str	r3, [r6, #0]
 800d1e4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d1e8:	4607      	mov	r7, r0
 800d1ea:	460c      	mov	r4, r1
 800d1ec:	b10a      	cbz	r2, 800d1f2 <_printf_common+0x26>
 800d1ee:	3301      	adds	r3, #1
 800d1f0:	6033      	str	r3, [r6, #0]
 800d1f2:	6823      	ldr	r3, [r4, #0]
 800d1f4:	0699      	lsls	r1, r3, #26
 800d1f6:	bf42      	ittt	mi
 800d1f8:	6833      	ldrmi	r3, [r6, #0]
 800d1fa:	3302      	addmi	r3, #2
 800d1fc:	6033      	strmi	r3, [r6, #0]
 800d1fe:	6825      	ldr	r5, [r4, #0]
 800d200:	f015 0506 	ands.w	r5, r5, #6
 800d204:	d106      	bne.n	800d214 <_printf_common+0x48>
 800d206:	f104 0a19 	add.w	sl, r4, #25
 800d20a:	68e3      	ldr	r3, [r4, #12]
 800d20c:	6832      	ldr	r2, [r6, #0]
 800d20e:	1a9b      	subs	r3, r3, r2
 800d210:	42ab      	cmp	r3, r5
 800d212:	dc26      	bgt.n	800d262 <_printf_common+0x96>
 800d214:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d218:	6822      	ldr	r2, [r4, #0]
 800d21a:	3b00      	subs	r3, #0
 800d21c:	bf18      	it	ne
 800d21e:	2301      	movne	r3, #1
 800d220:	0692      	lsls	r2, r2, #26
 800d222:	d42b      	bmi.n	800d27c <_printf_common+0xb0>
 800d224:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d228:	4641      	mov	r1, r8
 800d22a:	4638      	mov	r0, r7
 800d22c:	47c8      	blx	r9
 800d22e:	3001      	adds	r0, #1
 800d230:	d01e      	beq.n	800d270 <_printf_common+0xa4>
 800d232:	6823      	ldr	r3, [r4, #0]
 800d234:	6922      	ldr	r2, [r4, #16]
 800d236:	f003 0306 	and.w	r3, r3, #6
 800d23a:	2b04      	cmp	r3, #4
 800d23c:	bf02      	ittt	eq
 800d23e:	68e5      	ldreq	r5, [r4, #12]
 800d240:	6833      	ldreq	r3, [r6, #0]
 800d242:	1aed      	subeq	r5, r5, r3
 800d244:	68a3      	ldr	r3, [r4, #8]
 800d246:	bf0c      	ite	eq
 800d248:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d24c:	2500      	movne	r5, #0
 800d24e:	4293      	cmp	r3, r2
 800d250:	bfc4      	itt	gt
 800d252:	1a9b      	subgt	r3, r3, r2
 800d254:	18ed      	addgt	r5, r5, r3
 800d256:	2600      	movs	r6, #0
 800d258:	341a      	adds	r4, #26
 800d25a:	42b5      	cmp	r5, r6
 800d25c:	d11a      	bne.n	800d294 <_printf_common+0xc8>
 800d25e:	2000      	movs	r0, #0
 800d260:	e008      	b.n	800d274 <_printf_common+0xa8>
 800d262:	2301      	movs	r3, #1
 800d264:	4652      	mov	r2, sl
 800d266:	4641      	mov	r1, r8
 800d268:	4638      	mov	r0, r7
 800d26a:	47c8      	blx	r9
 800d26c:	3001      	adds	r0, #1
 800d26e:	d103      	bne.n	800d278 <_printf_common+0xac>
 800d270:	f04f 30ff 	mov.w	r0, #4294967295
 800d274:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d278:	3501      	adds	r5, #1
 800d27a:	e7c6      	b.n	800d20a <_printf_common+0x3e>
 800d27c:	18e1      	adds	r1, r4, r3
 800d27e:	1c5a      	adds	r2, r3, #1
 800d280:	2030      	movs	r0, #48	@ 0x30
 800d282:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d286:	4422      	add	r2, r4
 800d288:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d28c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d290:	3302      	adds	r3, #2
 800d292:	e7c7      	b.n	800d224 <_printf_common+0x58>
 800d294:	2301      	movs	r3, #1
 800d296:	4622      	mov	r2, r4
 800d298:	4641      	mov	r1, r8
 800d29a:	4638      	mov	r0, r7
 800d29c:	47c8      	blx	r9
 800d29e:	3001      	adds	r0, #1
 800d2a0:	d0e6      	beq.n	800d270 <_printf_common+0xa4>
 800d2a2:	3601      	adds	r6, #1
 800d2a4:	e7d9      	b.n	800d25a <_printf_common+0x8e>
	...

0800d2a8 <_printf_i>:
 800d2a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d2ac:	7e0f      	ldrb	r7, [r1, #24]
 800d2ae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d2b0:	2f78      	cmp	r7, #120	@ 0x78
 800d2b2:	4691      	mov	r9, r2
 800d2b4:	4680      	mov	r8, r0
 800d2b6:	460c      	mov	r4, r1
 800d2b8:	469a      	mov	sl, r3
 800d2ba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d2be:	d807      	bhi.n	800d2d0 <_printf_i+0x28>
 800d2c0:	2f62      	cmp	r7, #98	@ 0x62
 800d2c2:	d80a      	bhi.n	800d2da <_printf_i+0x32>
 800d2c4:	2f00      	cmp	r7, #0
 800d2c6:	f000 80d2 	beq.w	800d46e <_printf_i+0x1c6>
 800d2ca:	2f58      	cmp	r7, #88	@ 0x58
 800d2cc:	f000 80b9 	beq.w	800d442 <_printf_i+0x19a>
 800d2d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d2d4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d2d8:	e03a      	b.n	800d350 <_printf_i+0xa8>
 800d2da:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d2de:	2b15      	cmp	r3, #21
 800d2e0:	d8f6      	bhi.n	800d2d0 <_printf_i+0x28>
 800d2e2:	a101      	add	r1, pc, #4	@ (adr r1, 800d2e8 <_printf_i+0x40>)
 800d2e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d2e8:	0800d341 	.word	0x0800d341
 800d2ec:	0800d355 	.word	0x0800d355
 800d2f0:	0800d2d1 	.word	0x0800d2d1
 800d2f4:	0800d2d1 	.word	0x0800d2d1
 800d2f8:	0800d2d1 	.word	0x0800d2d1
 800d2fc:	0800d2d1 	.word	0x0800d2d1
 800d300:	0800d355 	.word	0x0800d355
 800d304:	0800d2d1 	.word	0x0800d2d1
 800d308:	0800d2d1 	.word	0x0800d2d1
 800d30c:	0800d2d1 	.word	0x0800d2d1
 800d310:	0800d2d1 	.word	0x0800d2d1
 800d314:	0800d455 	.word	0x0800d455
 800d318:	0800d37f 	.word	0x0800d37f
 800d31c:	0800d40f 	.word	0x0800d40f
 800d320:	0800d2d1 	.word	0x0800d2d1
 800d324:	0800d2d1 	.word	0x0800d2d1
 800d328:	0800d477 	.word	0x0800d477
 800d32c:	0800d2d1 	.word	0x0800d2d1
 800d330:	0800d37f 	.word	0x0800d37f
 800d334:	0800d2d1 	.word	0x0800d2d1
 800d338:	0800d2d1 	.word	0x0800d2d1
 800d33c:	0800d417 	.word	0x0800d417
 800d340:	6833      	ldr	r3, [r6, #0]
 800d342:	1d1a      	adds	r2, r3, #4
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	6032      	str	r2, [r6, #0]
 800d348:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d34c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d350:	2301      	movs	r3, #1
 800d352:	e09d      	b.n	800d490 <_printf_i+0x1e8>
 800d354:	6833      	ldr	r3, [r6, #0]
 800d356:	6820      	ldr	r0, [r4, #0]
 800d358:	1d19      	adds	r1, r3, #4
 800d35a:	6031      	str	r1, [r6, #0]
 800d35c:	0606      	lsls	r6, r0, #24
 800d35e:	d501      	bpl.n	800d364 <_printf_i+0xbc>
 800d360:	681d      	ldr	r5, [r3, #0]
 800d362:	e003      	b.n	800d36c <_printf_i+0xc4>
 800d364:	0645      	lsls	r5, r0, #25
 800d366:	d5fb      	bpl.n	800d360 <_printf_i+0xb8>
 800d368:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d36c:	2d00      	cmp	r5, #0
 800d36e:	da03      	bge.n	800d378 <_printf_i+0xd0>
 800d370:	232d      	movs	r3, #45	@ 0x2d
 800d372:	426d      	negs	r5, r5
 800d374:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d378:	4859      	ldr	r0, [pc, #356]	@ (800d4e0 <_printf_i+0x238>)
 800d37a:	230a      	movs	r3, #10
 800d37c:	e011      	b.n	800d3a2 <_printf_i+0xfa>
 800d37e:	6821      	ldr	r1, [r4, #0]
 800d380:	6833      	ldr	r3, [r6, #0]
 800d382:	0608      	lsls	r0, r1, #24
 800d384:	f853 5b04 	ldr.w	r5, [r3], #4
 800d388:	d402      	bmi.n	800d390 <_printf_i+0xe8>
 800d38a:	0649      	lsls	r1, r1, #25
 800d38c:	bf48      	it	mi
 800d38e:	b2ad      	uxthmi	r5, r5
 800d390:	2f6f      	cmp	r7, #111	@ 0x6f
 800d392:	4853      	ldr	r0, [pc, #332]	@ (800d4e0 <_printf_i+0x238>)
 800d394:	6033      	str	r3, [r6, #0]
 800d396:	bf14      	ite	ne
 800d398:	230a      	movne	r3, #10
 800d39a:	2308      	moveq	r3, #8
 800d39c:	2100      	movs	r1, #0
 800d39e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d3a2:	6866      	ldr	r6, [r4, #4]
 800d3a4:	60a6      	str	r6, [r4, #8]
 800d3a6:	2e00      	cmp	r6, #0
 800d3a8:	bfa2      	ittt	ge
 800d3aa:	6821      	ldrge	r1, [r4, #0]
 800d3ac:	f021 0104 	bicge.w	r1, r1, #4
 800d3b0:	6021      	strge	r1, [r4, #0]
 800d3b2:	b90d      	cbnz	r5, 800d3b8 <_printf_i+0x110>
 800d3b4:	2e00      	cmp	r6, #0
 800d3b6:	d04b      	beq.n	800d450 <_printf_i+0x1a8>
 800d3b8:	4616      	mov	r6, r2
 800d3ba:	fbb5 f1f3 	udiv	r1, r5, r3
 800d3be:	fb03 5711 	mls	r7, r3, r1, r5
 800d3c2:	5dc7      	ldrb	r7, [r0, r7]
 800d3c4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d3c8:	462f      	mov	r7, r5
 800d3ca:	42bb      	cmp	r3, r7
 800d3cc:	460d      	mov	r5, r1
 800d3ce:	d9f4      	bls.n	800d3ba <_printf_i+0x112>
 800d3d0:	2b08      	cmp	r3, #8
 800d3d2:	d10b      	bne.n	800d3ec <_printf_i+0x144>
 800d3d4:	6823      	ldr	r3, [r4, #0]
 800d3d6:	07df      	lsls	r7, r3, #31
 800d3d8:	d508      	bpl.n	800d3ec <_printf_i+0x144>
 800d3da:	6923      	ldr	r3, [r4, #16]
 800d3dc:	6861      	ldr	r1, [r4, #4]
 800d3de:	4299      	cmp	r1, r3
 800d3e0:	bfde      	ittt	le
 800d3e2:	2330      	movle	r3, #48	@ 0x30
 800d3e4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d3e8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d3ec:	1b92      	subs	r2, r2, r6
 800d3ee:	6122      	str	r2, [r4, #16]
 800d3f0:	f8cd a000 	str.w	sl, [sp]
 800d3f4:	464b      	mov	r3, r9
 800d3f6:	aa03      	add	r2, sp, #12
 800d3f8:	4621      	mov	r1, r4
 800d3fa:	4640      	mov	r0, r8
 800d3fc:	f7ff fee6 	bl	800d1cc <_printf_common>
 800d400:	3001      	adds	r0, #1
 800d402:	d14a      	bne.n	800d49a <_printf_i+0x1f2>
 800d404:	f04f 30ff 	mov.w	r0, #4294967295
 800d408:	b004      	add	sp, #16
 800d40a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d40e:	6823      	ldr	r3, [r4, #0]
 800d410:	f043 0320 	orr.w	r3, r3, #32
 800d414:	6023      	str	r3, [r4, #0]
 800d416:	4833      	ldr	r0, [pc, #204]	@ (800d4e4 <_printf_i+0x23c>)
 800d418:	2778      	movs	r7, #120	@ 0x78
 800d41a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d41e:	6823      	ldr	r3, [r4, #0]
 800d420:	6831      	ldr	r1, [r6, #0]
 800d422:	061f      	lsls	r7, r3, #24
 800d424:	f851 5b04 	ldr.w	r5, [r1], #4
 800d428:	d402      	bmi.n	800d430 <_printf_i+0x188>
 800d42a:	065f      	lsls	r7, r3, #25
 800d42c:	bf48      	it	mi
 800d42e:	b2ad      	uxthmi	r5, r5
 800d430:	6031      	str	r1, [r6, #0]
 800d432:	07d9      	lsls	r1, r3, #31
 800d434:	bf44      	itt	mi
 800d436:	f043 0320 	orrmi.w	r3, r3, #32
 800d43a:	6023      	strmi	r3, [r4, #0]
 800d43c:	b11d      	cbz	r5, 800d446 <_printf_i+0x19e>
 800d43e:	2310      	movs	r3, #16
 800d440:	e7ac      	b.n	800d39c <_printf_i+0xf4>
 800d442:	4827      	ldr	r0, [pc, #156]	@ (800d4e0 <_printf_i+0x238>)
 800d444:	e7e9      	b.n	800d41a <_printf_i+0x172>
 800d446:	6823      	ldr	r3, [r4, #0]
 800d448:	f023 0320 	bic.w	r3, r3, #32
 800d44c:	6023      	str	r3, [r4, #0]
 800d44e:	e7f6      	b.n	800d43e <_printf_i+0x196>
 800d450:	4616      	mov	r6, r2
 800d452:	e7bd      	b.n	800d3d0 <_printf_i+0x128>
 800d454:	6833      	ldr	r3, [r6, #0]
 800d456:	6825      	ldr	r5, [r4, #0]
 800d458:	6961      	ldr	r1, [r4, #20]
 800d45a:	1d18      	adds	r0, r3, #4
 800d45c:	6030      	str	r0, [r6, #0]
 800d45e:	062e      	lsls	r6, r5, #24
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	d501      	bpl.n	800d468 <_printf_i+0x1c0>
 800d464:	6019      	str	r1, [r3, #0]
 800d466:	e002      	b.n	800d46e <_printf_i+0x1c6>
 800d468:	0668      	lsls	r0, r5, #25
 800d46a:	d5fb      	bpl.n	800d464 <_printf_i+0x1bc>
 800d46c:	8019      	strh	r1, [r3, #0]
 800d46e:	2300      	movs	r3, #0
 800d470:	6123      	str	r3, [r4, #16]
 800d472:	4616      	mov	r6, r2
 800d474:	e7bc      	b.n	800d3f0 <_printf_i+0x148>
 800d476:	6833      	ldr	r3, [r6, #0]
 800d478:	1d1a      	adds	r2, r3, #4
 800d47a:	6032      	str	r2, [r6, #0]
 800d47c:	681e      	ldr	r6, [r3, #0]
 800d47e:	6862      	ldr	r2, [r4, #4]
 800d480:	2100      	movs	r1, #0
 800d482:	4630      	mov	r0, r6
 800d484:	f7f2 fe7c 	bl	8000180 <memchr>
 800d488:	b108      	cbz	r0, 800d48e <_printf_i+0x1e6>
 800d48a:	1b80      	subs	r0, r0, r6
 800d48c:	6060      	str	r0, [r4, #4]
 800d48e:	6863      	ldr	r3, [r4, #4]
 800d490:	6123      	str	r3, [r4, #16]
 800d492:	2300      	movs	r3, #0
 800d494:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d498:	e7aa      	b.n	800d3f0 <_printf_i+0x148>
 800d49a:	6923      	ldr	r3, [r4, #16]
 800d49c:	4632      	mov	r2, r6
 800d49e:	4649      	mov	r1, r9
 800d4a0:	4640      	mov	r0, r8
 800d4a2:	47d0      	blx	sl
 800d4a4:	3001      	adds	r0, #1
 800d4a6:	d0ad      	beq.n	800d404 <_printf_i+0x15c>
 800d4a8:	6823      	ldr	r3, [r4, #0]
 800d4aa:	079b      	lsls	r3, r3, #30
 800d4ac:	d413      	bmi.n	800d4d6 <_printf_i+0x22e>
 800d4ae:	68e0      	ldr	r0, [r4, #12]
 800d4b0:	9b03      	ldr	r3, [sp, #12]
 800d4b2:	4298      	cmp	r0, r3
 800d4b4:	bfb8      	it	lt
 800d4b6:	4618      	movlt	r0, r3
 800d4b8:	e7a6      	b.n	800d408 <_printf_i+0x160>
 800d4ba:	2301      	movs	r3, #1
 800d4bc:	4632      	mov	r2, r6
 800d4be:	4649      	mov	r1, r9
 800d4c0:	4640      	mov	r0, r8
 800d4c2:	47d0      	blx	sl
 800d4c4:	3001      	adds	r0, #1
 800d4c6:	d09d      	beq.n	800d404 <_printf_i+0x15c>
 800d4c8:	3501      	adds	r5, #1
 800d4ca:	68e3      	ldr	r3, [r4, #12]
 800d4cc:	9903      	ldr	r1, [sp, #12]
 800d4ce:	1a5b      	subs	r3, r3, r1
 800d4d0:	42ab      	cmp	r3, r5
 800d4d2:	dcf2      	bgt.n	800d4ba <_printf_i+0x212>
 800d4d4:	e7eb      	b.n	800d4ae <_printf_i+0x206>
 800d4d6:	2500      	movs	r5, #0
 800d4d8:	f104 0619 	add.w	r6, r4, #25
 800d4dc:	e7f5      	b.n	800d4ca <_printf_i+0x222>
 800d4de:	bf00      	nop
 800d4e0:	080130ee 	.word	0x080130ee
 800d4e4:	080130ff 	.word	0x080130ff

0800d4e8 <std>:
 800d4e8:	2300      	movs	r3, #0
 800d4ea:	b510      	push	{r4, lr}
 800d4ec:	4604      	mov	r4, r0
 800d4ee:	e9c0 3300 	strd	r3, r3, [r0]
 800d4f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d4f6:	6083      	str	r3, [r0, #8]
 800d4f8:	8181      	strh	r1, [r0, #12]
 800d4fa:	6643      	str	r3, [r0, #100]	@ 0x64
 800d4fc:	81c2      	strh	r2, [r0, #14]
 800d4fe:	6183      	str	r3, [r0, #24]
 800d500:	4619      	mov	r1, r3
 800d502:	2208      	movs	r2, #8
 800d504:	305c      	adds	r0, #92	@ 0x5c
 800d506:	f000 fa65 	bl	800d9d4 <memset>
 800d50a:	4b0d      	ldr	r3, [pc, #52]	@ (800d540 <std+0x58>)
 800d50c:	6263      	str	r3, [r4, #36]	@ 0x24
 800d50e:	4b0d      	ldr	r3, [pc, #52]	@ (800d544 <std+0x5c>)
 800d510:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d512:	4b0d      	ldr	r3, [pc, #52]	@ (800d548 <std+0x60>)
 800d514:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d516:	4b0d      	ldr	r3, [pc, #52]	@ (800d54c <std+0x64>)
 800d518:	6323      	str	r3, [r4, #48]	@ 0x30
 800d51a:	4b0d      	ldr	r3, [pc, #52]	@ (800d550 <std+0x68>)
 800d51c:	6224      	str	r4, [r4, #32]
 800d51e:	429c      	cmp	r4, r3
 800d520:	d006      	beq.n	800d530 <std+0x48>
 800d522:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d526:	4294      	cmp	r4, r2
 800d528:	d002      	beq.n	800d530 <std+0x48>
 800d52a:	33d0      	adds	r3, #208	@ 0xd0
 800d52c:	429c      	cmp	r4, r3
 800d52e:	d105      	bne.n	800d53c <std+0x54>
 800d530:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d534:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d538:	f000 bb72 	b.w	800dc20 <__retarget_lock_init_recursive>
 800d53c:	bd10      	pop	{r4, pc}
 800d53e:	bf00      	nop
 800d540:	0800d7b5 	.word	0x0800d7b5
 800d544:	0800d7d7 	.word	0x0800d7d7
 800d548:	0800d80f 	.word	0x0800d80f
 800d54c:	0800d833 	.word	0x0800d833
 800d550:	200115f0 	.word	0x200115f0

0800d554 <stdio_exit_handler>:
 800d554:	4a02      	ldr	r2, [pc, #8]	@ (800d560 <stdio_exit_handler+0xc>)
 800d556:	4903      	ldr	r1, [pc, #12]	@ (800d564 <stdio_exit_handler+0x10>)
 800d558:	4803      	ldr	r0, [pc, #12]	@ (800d568 <stdio_exit_handler+0x14>)
 800d55a:	f000 b869 	b.w	800d630 <_fwalk_sglue>
 800d55e:	bf00      	nop
 800d560:	20000114 	.word	0x20000114
 800d564:	0800f6b5 	.word	0x0800f6b5
 800d568:	20000124 	.word	0x20000124

0800d56c <cleanup_stdio>:
 800d56c:	6841      	ldr	r1, [r0, #4]
 800d56e:	4b0c      	ldr	r3, [pc, #48]	@ (800d5a0 <cleanup_stdio+0x34>)
 800d570:	4299      	cmp	r1, r3
 800d572:	b510      	push	{r4, lr}
 800d574:	4604      	mov	r4, r0
 800d576:	d001      	beq.n	800d57c <cleanup_stdio+0x10>
 800d578:	f002 f89c 	bl	800f6b4 <_fflush_r>
 800d57c:	68a1      	ldr	r1, [r4, #8]
 800d57e:	4b09      	ldr	r3, [pc, #36]	@ (800d5a4 <cleanup_stdio+0x38>)
 800d580:	4299      	cmp	r1, r3
 800d582:	d002      	beq.n	800d58a <cleanup_stdio+0x1e>
 800d584:	4620      	mov	r0, r4
 800d586:	f002 f895 	bl	800f6b4 <_fflush_r>
 800d58a:	68e1      	ldr	r1, [r4, #12]
 800d58c:	4b06      	ldr	r3, [pc, #24]	@ (800d5a8 <cleanup_stdio+0x3c>)
 800d58e:	4299      	cmp	r1, r3
 800d590:	d004      	beq.n	800d59c <cleanup_stdio+0x30>
 800d592:	4620      	mov	r0, r4
 800d594:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d598:	f002 b88c 	b.w	800f6b4 <_fflush_r>
 800d59c:	bd10      	pop	{r4, pc}
 800d59e:	bf00      	nop
 800d5a0:	200115f0 	.word	0x200115f0
 800d5a4:	20011658 	.word	0x20011658
 800d5a8:	200116c0 	.word	0x200116c0

0800d5ac <global_stdio_init.part.0>:
 800d5ac:	b510      	push	{r4, lr}
 800d5ae:	4b0b      	ldr	r3, [pc, #44]	@ (800d5dc <global_stdio_init.part.0+0x30>)
 800d5b0:	4c0b      	ldr	r4, [pc, #44]	@ (800d5e0 <global_stdio_init.part.0+0x34>)
 800d5b2:	4a0c      	ldr	r2, [pc, #48]	@ (800d5e4 <global_stdio_init.part.0+0x38>)
 800d5b4:	601a      	str	r2, [r3, #0]
 800d5b6:	4620      	mov	r0, r4
 800d5b8:	2200      	movs	r2, #0
 800d5ba:	2104      	movs	r1, #4
 800d5bc:	f7ff ff94 	bl	800d4e8 <std>
 800d5c0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d5c4:	2201      	movs	r2, #1
 800d5c6:	2109      	movs	r1, #9
 800d5c8:	f7ff ff8e 	bl	800d4e8 <std>
 800d5cc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d5d0:	2202      	movs	r2, #2
 800d5d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d5d6:	2112      	movs	r1, #18
 800d5d8:	f7ff bf86 	b.w	800d4e8 <std>
 800d5dc:	20011728 	.word	0x20011728
 800d5e0:	200115f0 	.word	0x200115f0
 800d5e4:	0800d555 	.word	0x0800d555

0800d5e8 <__sfp_lock_acquire>:
 800d5e8:	4801      	ldr	r0, [pc, #4]	@ (800d5f0 <__sfp_lock_acquire+0x8>)
 800d5ea:	f000 bb1a 	b.w	800dc22 <__retarget_lock_acquire_recursive>
 800d5ee:	bf00      	nop
 800d5f0:	20011731 	.word	0x20011731

0800d5f4 <__sfp_lock_release>:
 800d5f4:	4801      	ldr	r0, [pc, #4]	@ (800d5fc <__sfp_lock_release+0x8>)
 800d5f6:	f000 bb15 	b.w	800dc24 <__retarget_lock_release_recursive>
 800d5fa:	bf00      	nop
 800d5fc:	20011731 	.word	0x20011731

0800d600 <__sinit>:
 800d600:	b510      	push	{r4, lr}
 800d602:	4604      	mov	r4, r0
 800d604:	f7ff fff0 	bl	800d5e8 <__sfp_lock_acquire>
 800d608:	6a23      	ldr	r3, [r4, #32]
 800d60a:	b11b      	cbz	r3, 800d614 <__sinit+0x14>
 800d60c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d610:	f7ff bff0 	b.w	800d5f4 <__sfp_lock_release>
 800d614:	4b04      	ldr	r3, [pc, #16]	@ (800d628 <__sinit+0x28>)
 800d616:	6223      	str	r3, [r4, #32]
 800d618:	4b04      	ldr	r3, [pc, #16]	@ (800d62c <__sinit+0x2c>)
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d1f5      	bne.n	800d60c <__sinit+0xc>
 800d620:	f7ff ffc4 	bl	800d5ac <global_stdio_init.part.0>
 800d624:	e7f2      	b.n	800d60c <__sinit+0xc>
 800d626:	bf00      	nop
 800d628:	0800d56d 	.word	0x0800d56d
 800d62c:	20011728 	.word	0x20011728

0800d630 <_fwalk_sglue>:
 800d630:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d634:	4607      	mov	r7, r0
 800d636:	4688      	mov	r8, r1
 800d638:	4614      	mov	r4, r2
 800d63a:	2600      	movs	r6, #0
 800d63c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d640:	f1b9 0901 	subs.w	r9, r9, #1
 800d644:	d505      	bpl.n	800d652 <_fwalk_sglue+0x22>
 800d646:	6824      	ldr	r4, [r4, #0]
 800d648:	2c00      	cmp	r4, #0
 800d64a:	d1f7      	bne.n	800d63c <_fwalk_sglue+0xc>
 800d64c:	4630      	mov	r0, r6
 800d64e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d652:	89ab      	ldrh	r3, [r5, #12]
 800d654:	2b01      	cmp	r3, #1
 800d656:	d907      	bls.n	800d668 <_fwalk_sglue+0x38>
 800d658:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d65c:	3301      	adds	r3, #1
 800d65e:	d003      	beq.n	800d668 <_fwalk_sglue+0x38>
 800d660:	4629      	mov	r1, r5
 800d662:	4638      	mov	r0, r7
 800d664:	47c0      	blx	r8
 800d666:	4306      	orrs	r6, r0
 800d668:	3568      	adds	r5, #104	@ 0x68
 800d66a:	e7e9      	b.n	800d640 <_fwalk_sglue+0x10>

0800d66c <iprintf>:
 800d66c:	b40f      	push	{r0, r1, r2, r3}
 800d66e:	b507      	push	{r0, r1, r2, lr}
 800d670:	4906      	ldr	r1, [pc, #24]	@ (800d68c <iprintf+0x20>)
 800d672:	ab04      	add	r3, sp, #16
 800d674:	6808      	ldr	r0, [r1, #0]
 800d676:	f853 2b04 	ldr.w	r2, [r3], #4
 800d67a:	6881      	ldr	r1, [r0, #8]
 800d67c:	9301      	str	r3, [sp, #4]
 800d67e:	f001 fe7d 	bl	800f37c <_vfiprintf_r>
 800d682:	b003      	add	sp, #12
 800d684:	f85d eb04 	ldr.w	lr, [sp], #4
 800d688:	b004      	add	sp, #16
 800d68a:	4770      	bx	lr
 800d68c:	20000120 	.word	0x20000120

0800d690 <_puts_r>:
 800d690:	6a03      	ldr	r3, [r0, #32]
 800d692:	b570      	push	{r4, r5, r6, lr}
 800d694:	6884      	ldr	r4, [r0, #8]
 800d696:	4605      	mov	r5, r0
 800d698:	460e      	mov	r6, r1
 800d69a:	b90b      	cbnz	r3, 800d6a0 <_puts_r+0x10>
 800d69c:	f7ff ffb0 	bl	800d600 <__sinit>
 800d6a0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d6a2:	07db      	lsls	r3, r3, #31
 800d6a4:	d405      	bmi.n	800d6b2 <_puts_r+0x22>
 800d6a6:	89a3      	ldrh	r3, [r4, #12]
 800d6a8:	0598      	lsls	r0, r3, #22
 800d6aa:	d402      	bmi.n	800d6b2 <_puts_r+0x22>
 800d6ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d6ae:	f000 fab8 	bl	800dc22 <__retarget_lock_acquire_recursive>
 800d6b2:	89a3      	ldrh	r3, [r4, #12]
 800d6b4:	0719      	lsls	r1, r3, #28
 800d6b6:	d502      	bpl.n	800d6be <_puts_r+0x2e>
 800d6b8:	6923      	ldr	r3, [r4, #16]
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d135      	bne.n	800d72a <_puts_r+0x9a>
 800d6be:	4621      	mov	r1, r4
 800d6c0:	4628      	mov	r0, r5
 800d6c2:	f000 f931 	bl	800d928 <__swsetup_r>
 800d6c6:	b380      	cbz	r0, 800d72a <_puts_r+0x9a>
 800d6c8:	f04f 35ff 	mov.w	r5, #4294967295
 800d6cc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d6ce:	07da      	lsls	r2, r3, #31
 800d6d0:	d405      	bmi.n	800d6de <_puts_r+0x4e>
 800d6d2:	89a3      	ldrh	r3, [r4, #12]
 800d6d4:	059b      	lsls	r3, r3, #22
 800d6d6:	d402      	bmi.n	800d6de <_puts_r+0x4e>
 800d6d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d6da:	f000 faa3 	bl	800dc24 <__retarget_lock_release_recursive>
 800d6de:	4628      	mov	r0, r5
 800d6e0:	bd70      	pop	{r4, r5, r6, pc}
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	da04      	bge.n	800d6f0 <_puts_r+0x60>
 800d6e6:	69a2      	ldr	r2, [r4, #24]
 800d6e8:	429a      	cmp	r2, r3
 800d6ea:	dc17      	bgt.n	800d71c <_puts_r+0x8c>
 800d6ec:	290a      	cmp	r1, #10
 800d6ee:	d015      	beq.n	800d71c <_puts_r+0x8c>
 800d6f0:	6823      	ldr	r3, [r4, #0]
 800d6f2:	1c5a      	adds	r2, r3, #1
 800d6f4:	6022      	str	r2, [r4, #0]
 800d6f6:	7019      	strb	r1, [r3, #0]
 800d6f8:	68a3      	ldr	r3, [r4, #8]
 800d6fa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d6fe:	3b01      	subs	r3, #1
 800d700:	60a3      	str	r3, [r4, #8]
 800d702:	2900      	cmp	r1, #0
 800d704:	d1ed      	bne.n	800d6e2 <_puts_r+0x52>
 800d706:	2b00      	cmp	r3, #0
 800d708:	da11      	bge.n	800d72e <_puts_r+0x9e>
 800d70a:	4622      	mov	r2, r4
 800d70c:	210a      	movs	r1, #10
 800d70e:	4628      	mov	r0, r5
 800d710:	f000 f8cc 	bl	800d8ac <__swbuf_r>
 800d714:	3001      	adds	r0, #1
 800d716:	d0d7      	beq.n	800d6c8 <_puts_r+0x38>
 800d718:	250a      	movs	r5, #10
 800d71a:	e7d7      	b.n	800d6cc <_puts_r+0x3c>
 800d71c:	4622      	mov	r2, r4
 800d71e:	4628      	mov	r0, r5
 800d720:	f000 f8c4 	bl	800d8ac <__swbuf_r>
 800d724:	3001      	adds	r0, #1
 800d726:	d1e7      	bne.n	800d6f8 <_puts_r+0x68>
 800d728:	e7ce      	b.n	800d6c8 <_puts_r+0x38>
 800d72a:	3e01      	subs	r6, #1
 800d72c:	e7e4      	b.n	800d6f8 <_puts_r+0x68>
 800d72e:	6823      	ldr	r3, [r4, #0]
 800d730:	1c5a      	adds	r2, r3, #1
 800d732:	6022      	str	r2, [r4, #0]
 800d734:	220a      	movs	r2, #10
 800d736:	701a      	strb	r2, [r3, #0]
 800d738:	e7ee      	b.n	800d718 <_puts_r+0x88>
	...

0800d73c <puts>:
 800d73c:	4b02      	ldr	r3, [pc, #8]	@ (800d748 <puts+0xc>)
 800d73e:	4601      	mov	r1, r0
 800d740:	6818      	ldr	r0, [r3, #0]
 800d742:	f7ff bfa5 	b.w	800d690 <_puts_r>
 800d746:	bf00      	nop
 800d748:	20000120 	.word	0x20000120

0800d74c <sniprintf>:
 800d74c:	b40c      	push	{r2, r3}
 800d74e:	b530      	push	{r4, r5, lr}
 800d750:	4b17      	ldr	r3, [pc, #92]	@ (800d7b0 <sniprintf+0x64>)
 800d752:	1e0c      	subs	r4, r1, #0
 800d754:	681d      	ldr	r5, [r3, #0]
 800d756:	b09d      	sub	sp, #116	@ 0x74
 800d758:	da08      	bge.n	800d76c <sniprintf+0x20>
 800d75a:	238b      	movs	r3, #139	@ 0x8b
 800d75c:	602b      	str	r3, [r5, #0]
 800d75e:	f04f 30ff 	mov.w	r0, #4294967295
 800d762:	b01d      	add	sp, #116	@ 0x74
 800d764:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d768:	b002      	add	sp, #8
 800d76a:	4770      	bx	lr
 800d76c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800d770:	f8ad 3014 	strh.w	r3, [sp, #20]
 800d774:	bf14      	ite	ne
 800d776:	f104 33ff 	addne.w	r3, r4, #4294967295
 800d77a:	4623      	moveq	r3, r4
 800d77c:	9304      	str	r3, [sp, #16]
 800d77e:	9307      	str	r3, [sp, #28]
 800d780:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d784:	9002      	str	r0, [sp, #8]
 800d786:	9006      	str	r0, [sp, #24]
 800d788:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d78c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800d78e:	ab21      	add	r3, sp, #132	@ 0x84
 800d790:	a902      	add	r1, sp, #8
 800d792:	4628      	mov	r0, r5
 800d794:	9301      	str	r3, [sp, #4]
 800d796:	f001 fccb 	bl	800f130 <_svfiprintf_r>
 800d79a:	1c43      	adds	r3, r0, #1
 800d79c:	bfbc      	itt	lt
 800d79e:	238b      	movlt	r3, #139	@ 0x8b
 800d7a0:	602b      	strlt	r3, [r5, #0]
 800d7a2:	2c00      	cmp	r4, #0
 800d7a4:	d0dd      	beq.n	800d762 <sniprintf+0x16>
 800d7a6:	9b02      	ldr	r3, [sp, #8]
 800d7a8:	2200      	movs	r2, #0
 800d7aa:	701a      	strb	r2, [r3, #0]
 800d7ac:	e7d9      	b.n	800d762 <sniprintf+0x16>
 800d7ae:	bf00      	nop
 800d7b0:	20000120 	.word	0x20000120

0800d7b4 <__sread>:
 800d7b4:	b510      	push	{r4, lr}
 800d7b6:	460c      	mov	r4, r1
 800d7b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d7bc:	f000 f9be 	bl	800db3c <_read_r>
 800d7c0:	2800      	cmp	r0, #0
 800d7c2:	bfab      	itete	ge
 800d7c4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d7c6:	89a3      	ldrhlt	r3, [r4, #12]
 800d7c8:	181b      	addge	r3, r3, r0
 800d7ca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d7ce:	bfac      	ite	ge
 800d7d0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d7d2:	81a3      	strhlt	r3, [r4, #12]
 800d7d4:	bd10      	pop	{r4, pc}

0800d7d6 <__swrite>:
 800d7d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7da:	461f      	mov	r7, r3
 800d7dc:	898b      	ldrh	r3, [r1, #12]
 800d7de:	05db      	lsls	r3, r3, #23
 800d7e0:	4605      	mov	r5, r0
 800d7e2:	460c      	mov	r4, r1
 800d7e4:	4616      	mov	r6, r2
 800d7e6:	d505      	bpl.n	800d7f4 <__swrite+0x1e>
 800d7e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d7ec:	2302      	movs	r3, #2
 800d7ee:	2200      	movs	r2, #0
 800d7f0:	f000 f992 	bl	800db18 <_lseek_r>
 800d7f4:	89a3      	ldrh	r3, [r4, #12]
 800d7f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d7fa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d7fe:	81a3      	strh	r3, [r4, #12]
 800d800:	4632      	mov	r2, r6
 800d802:	463b      	mov	r3, r7
 800d804:	4628      	mov	r0, r5
 800d806:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d80a:	f000 b9cd 	b.w	800dba8 <_write_r>

0800d80e <__sseek>:
 800d80e:	b510      	push	{r4, lr}
 800d810:	460c      	mov	r4, r1
 800d812:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d816:	f000 f97f 	bl	800db18 <_lseek_r>
 800d81a:	1c43      	adds	r3, r0, #1
 800d81c:	89a3      	ldrh	r3, [r4, #12]
 800d81e:	bf15      	itete	ne
 800d820:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d822:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d826:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d82a:	81a3      	strheq	r3, [r4, #12]
 800d82c:	bf18      	it	ne
 800d82e:	81a3      	strhne	r3, [r4, #12]
 800d830:	bd10      	pop	{r4, pc}

0800d832 <__sclose>:
 800d832:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d836:	f000 b909 	b.w	800da4c <_close_r>

0800d83a <_vsniprintf_r>:
 800d83a:	b530      	push	{r4, r5, lr}
 800d83c:	4614      	mov	r4, r2
 800d83e:	2c00      	cmp	r4, #0
 800d840:	b09b      	sub	sp, #108	@ 0x6c
 800d842:	4605      	mov	r5, r0
 800d844:	461a      	mov	r2, r3
 800d846:	da05      	bge.n	800d854 <_vsniprintf_r+0x1a>
 800d848:	238b      	movs	r3, #139	@ 0x8b
 800d84a:	6003      	str	r3, [r0, #0]
 800d84c:	f04f 30ff 	mov.w	r0, #4294967295
 800d850:	b01b      	add	sp, #108	@ 0x6c
 800d852:	bd30      	pop	{r4, r5, pc}
 800d854:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800d858:	f8ad 300c 	strh.w	r3, [sp, #12]
 800d85c:	bf14      	ite	ne
 800d85e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800d862:	4623      	moveq	r3, r4
 800d864:	9302      	str	r3, [sp, #8]
 800d866:	9305      	str	r3, [sp, #20]
 800d868:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d86c:	9100      	str	r1, [sp, #0]
 800d86e:	9104      	str	r1, [sp, #16]
 800d870:	f8ad 300e 	strh.w	r3, [sp, #14]
 800d874:	4669      	mov	r1, sp
 800d876:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800d878:	f001 fc5a 	bl	800f130 <_svfiprintf_r>
 800d87c:	1c43      	adds	r3, r0, #1
 800d87e:	bfbc      	itt	lt
 800d880:	238b      	movlt	r3, #139	@ 0x8b
 800d882:	602b      	strlt	r3, [r5, #0]
 800d884:	2c00      	cmp	r4, #0
 800d886:	d0e3      	beq.n	800d850 <_vsniprintf_r+0x16>
 800d888:	9b00      	ldr	r3, [sp, #0]
 800d88a:	2200      	movs	r2, #0
 800d88c:	701a      	strb	r2, [r3, #0]
 800d88e:	e7df      	b.n	800d850 <_vsniprintf_r+0x16>

0800d890 <vsniprintf>:
 800d890:	b507      	push	{r0, r1, r2, lr}
 800d892:	9300      	str	r3, [sp, #0]
 800d894:	4613      	mov	r3, r2
 800d896:	460a      	mov	r2, r1
 800d898:	4601      	mov	r1, r0
 800d89a:	4803      	ldr	r0, [pc, #12]	@ (800d8a8 <vsniprintf+0x18>)
 800d89c:	6800      	ldr	r0, [r0, #0]
 800d89e:	f7ff ffcc 	bl	800d83a <_vsniprintf_r>
 800d8a2:	b003      	add	sp, #12
 800d8a4:	f85d fb04 	ldr.w	pc, [sp], #4
 800d8a8:	20000120 	.word	0x20000120

0800d8ac <__swbuf_r>:
 800d8ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8ae:	460e      	mov	r6, r1
 800d8b0:	4614      	mov	r4, r2
 800d8b2:	4605      	mov	r5, r0
 800d8b4:	b118      	cbz	r0, 800d8be <__swbuf_r+0x12>
 800d8b6:	6a03      	ldr	r3, [r0, #32]
 800d8b8:	b90b      	cbnz	r3, 800d8be <__swbuf_r+0x12>
 800d8ba:	f7ff fea1 	bl	800d600 <__sinit>
 800d8be:	69a3      	ldr	r3, [r4, #24]
 800d8c0:	60a3      	str	r3, [r4, #8]
 800d8c2:	89a3      	ldrh	r3, [r4, #12]
 800d8c4:	071a      	lsls	r2, r3, #28
 800d8c6:	d501      	bpl.n	800d8cc <__swbuf_r+0x20>
 800d8c8:	6923      	ldr	r3, [r4, #16]
 800d8ca:	b943      	cbnz	r3, 800d8de <__swbuf_r+0x32>
 800d8cc:	4621      	mov	r1, r4
 800d8ce:	4628      	mov	r0, r5
 800d8d0:	f000 f82a 	bl	800d928 <__swsetup_r>
 800d8d4:	b118      	cbz	r0, 800d8de <__swbuf_r+0x32>
 800d8d6:	f04f 37ff 	mov.w	r7, #4294967295
 800d8da:	4638      	mov	r0, r7
 800d8dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d8de:	6823      	ldr	r3, [r4, #0]
 800d8e0:	6922      	ldr	r2, [r4, #16]
 800d8e2:	1a98      	subs	r0, r3, r2
 800d8e4:	6963      	ldr	r3, [r4, #20]
 800d8e6:	b2f6      	uxtb	r6, r6
 800d8e8:	4283      	cmp	r3, r0
 800d8ea:	4637      	mov	r7, r6
 800d8ec:	dc05      	bgt.n	800d8fa <__swbuf_r+0x4e>
 800d8ee:	4621      	mov	r1, r4
 800d8f0:	4628      	mov	r0, r5
 800d8f2:	f001 fedf 	bl	800f6b4 <_fflush_r>
 800d8f6:	2800      	cmp	r0, #0
 800d8f8:	d1ed      	bne.n	800d8d6 <__swbuf_r+0x2a>
 800d8fa:	68a3      	ldr	r3, [r4, #8]
 800d8fc:	3b01      	subs	r3, #1
 800d8fe:	60a3      	str	r3, [r4, #8]
 800d900:	6823      	ldr	r3, [r4, #0]
 800d902:	1c5a      	adds	r2, r3, #1
 800d904:	6022      	str	r2, [r4, #0]
 800d906:	701e      	strb	r6, [r3, #0]
 800d908:	6962      	ldr	r2, [r4, #20]
 800d90a:	1c43      	adds	r3, r0, #1
 800d90c:	429a      	cmp	r2, r3
 800d90e:	d004      	beq.n	800d91a <__swbuf_r+0x6e>
 800d910:	89a3      	ldrh	r3, [r4, #12]
 800d912:	07db      	lsls	r3, r3, #31
 800d914:	d5e1      	bpl.n	800d8da <__swbuf_r+0x2e>
 800d916:	2e0a      	cmp	r6, #10
 800d918:	d1df      	bne.n	800d8da <__swbuf_r+0x2e>
 800d91a:	4621      	mov	r1, r4
 800d91c:	4628      	mov	r0, r5
 800d91e:	f001 fec9 	bl	800f6b4 <_fflush_r>
 800d922:	2800      	cmp	r0, #0
 800d924:	d0d9      	beq.n	800d8da <__swbuf_r+0x2e>
 800d926:	e7d6      	b.n	800d8d6 <__swbuf_r+0x2a>

0800d928 <__swsetup_r>:
 800d928:	b538      	push	{r3, r4, r5, lr}
 800d92a:	4b29      	ldr	r3, [pc, #164]	@ (800d9d0 <__swsetup_r+0xa8>)
 800d92c:	4605      	mov	r5, r0
 800d92e:	6818      	ldr	r0, [r3, #0]
 800d930:	460c      	mov	r4, r1
 800d932:	b118      	cbz	r0, 800d93c <__swsetup_r+0x14>
 800d934:	6a03      	ldr	r3, [r0, #32]
 800d936:	b90b      	cbnz	r3, 800d93c <__swsetup_r+0x14>
 800d938:	f7ff fe62 	bl	800d600 <__sinit>
 800d93c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d940:	0719      	lsls	r1, r3, #28
 800d942:	d422      	bmi.n	800d98a <__swsetup_r+0x62>
 800d944:	06da      	lsls	r2, r3, #27
 800d946:	d407      	bmi.n	800d958 <__swsetup_r+0x30>
 800d948:	2209      	movs	r2, #9
 800d94a:	602a      	str	r2, [r5, #0]
 800d94c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d950:	81a3      	strh	r3, [r4, #12]
 800d952:	f04f 30ff 	mov.w	r0, #4294967295
 800d956:	e033      	b.n	800d9c0 <__swsetup_r+0x98>
 800d958:	0758      	lsls	r0, r3, #29
 800d95a:	d512      	bpl.n	800d982 <__swsetup_r+0x5a>
 800d95c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d95e:	b141      	cbz	r1, 800d972 <__swsetup_r+0x4a>
 800d960:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d964:	4299      	cmp	r1, r3
 800d966:	d002      	beq.n	800d96e <__swsetup_r+0x46>
 800d968:	4628      	mov	r0, r5
 800d96a:	f000 ffb9 	bl	800e8e0 <_free_r>
 800d96e:	2300      	movs	r3, #0
 800d970:	6363      	str	r3, [r4, #52]	@ 0x34
 800d972:	89a3      	ldrh	r3, [r4, #12]
 800d974:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d978:	81a3      	strh	r3, [r4, #12]
 800d97a:	2300      	movs	r3, #0
 800d97c:	6063      	str	r3, [r4, #4]
 800d97e:	6923      	ldr	r3, [r4, #16]
 800d980:	6023      	str	r3, [r4, #0]
 800d982:	89a3      	ldrh	r3, [r4, #12]
 800d984:	f043 0308 	orr.w	r3, r3, #8
 800d988:	81a3      	strh	r3, [r4, #12]
 800d98a:	6923      	ldr	r3, [r4, #16]
 800d98c:	b94b      	cbnz	r3, 800d9a2 <__swsetup_r+0x7a>
 800d98e:	89a3      	ldrh	r3, [r4, #12]
 800d990:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d994:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d998:	d003      	beq.n	800d9a2 <__swsetup_r+0x7a>
 800d99a:	4621      	mov	r1, r4
 800d99c:	4628      	mov	r0, r5
 800d99e:	f001 fed7 	bl	800f750 <__smakebuf_r>
 800d9a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d9a6:	f013 0201 	ands.w	r2, r3, #1
 800d9aa:	d00a      	beq.n	800d9c2 <__swsetup_r+0x9a>
 800d9ac:	2200      	movs	r2, #0
 800d9ae:	60a2      	str	r2, [r4, #8]
 800d9b0:	6962      	ldr	r2, [r4, #20]
 800d9b2:	4252      	negs	r2, r2
 800d9b4:	61a2      	str	r2, [r4, #24]
 800d9b6:	6922      	ldr	r2, [r4, #16]
 800d9b8:	b942      	cbnz	r2, 800d9cc <__swsetup_r+0xa4>
 800d9ba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d9be:	d1c5      	bne.n	800d94c <__swsetup_r+0x24>
 800d9c0:	bd38      	pop	{r3, r4, r5, pc}
 800d9c2:	0799      	lsls	r1, r3, #30
 800d9c4:	bf58      	it	pl
 800d9c6:	6962      	ldrpl	r2, [r4, #20]
 800d9c8:	60a2      	str	r2, [r4, #8]
 800d9ca:	e7f4      	b.n	800d9b6 <__swsetup_r+0x8e>
 800d9cc:	2000      	movs	r0, #0
 800d9ce:	e7f7      	b.n	800d9c0 <__swsetup_r+0x98>
 800d9d0:	20000120 	.word	0x20000120

0800d9d4 <memset>:
 800d9d4:	4402      	add	r2, r0
 800d9d6:	4603      	mov	r3, r0
 800d9d8:	4293      	cmp	r3, r2
 800d9da:	d100      	bne.n	800d9de <memset+0xa>
 800d9dc:	4770      	bx	lr
 800d9de:	f803 1b01 	strb.w	r1, [r3], #1
 800d9e2:	e7f9      	b.n	800d9d8 <memset+0x4>

0800d9e4 <_raise_r>:
 800d9e4:	291f      	cmp	r1, #31
 800d9e6:	b538      	push	{r3, r4, r5, lr}
 800d9e8:	4605      	mov	r5, r0
 800d9ea:	460c      	mov	r4, r1
 800d9ec:	d904      	bls.n	800d9f8 <_raise_r+0x14>
 800d9ee:	2316      	movs	r3, #22
 800d9f0:	6003      	str	r3, [r0, #0]
 800d9f2:	f04f 30ff 	mov.w	r0, #4294967295
 800d9f6:	bd38      	pop	{r3, r4, r5, pc}
 800d9f8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d9fa:	b112      	cbz	r2, 800da02 <_raise_r+0x1e>
 800d9fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800da00:	b94b      	cbnz	r3, 800da16 <_raise_r+0x32>
 800da02:	4628      	mov	r0, r5
 800da04:	f000 f8be 	bl	800db84 <_getpid_r>
 800da08:	4622      	mov	r2, r4
 800da0a:	4601      	mov	r1, r0
 800da0c:	4628      	mov	r0, r5
 800da0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800da12:	f000 b8a5 	b.w	800db60 <_kill_r>
 800da16:	2b01      	cmp	r3, #1
 800da18:	d00a      	beq.n	800da30 <_raise_r+0x4c>
 800da1a:	1c59      	adds	r1, r3, #1
 800da1c:	d103      	bne.n	800da26 <_raise_r+0x42>
 800da1e:	2316      	movs	r3, #22
 800da20:	6003      	str	r3, [r0, #0]
 800da22:	2001      	movs	r0, #1
 800da24:	e7e7      	b.n	800d9f6 <_raise_r+0x12>
 800da26:	2100      	movs	r1, #0
 800da28:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800da2c:	4620      	mov	r0, r4
 800da2e:	4798      	blx	r3
 800da30:	2000      	movs	r0, #0
 800da32:	e7e0      	b.n	800d9f6 <_raise_r+0x12>

0800da34 <raise>:
 800da34:	4b02      	ldr	r3, [pc, #8]	@ (800da40 <raise+0xc>)
 800da36:	4601      	mov	r1, r0
 800da38:	6818      	ldr	r0, [r3, #0]
 800da3a:	f7ff bfd3 	b.w	800d9e4 <_raise_r>
 800da3e:	bf00      	nop
 800da40:	20000120 	.word	0x20000120

0800da44 <_localeconv_r>:
 800da44:	4800      	ldr	r0, [pc, #0]	@ (800da48 <_localeconv_r+0x4>)
 800da46:	4770      	bx	lr
 800da48:	20000260 	.word	0x20000260

0800da4c <_close_r>:
 800da4c:	b538      	push	{r3, r4, r5, lr}
 800da4e:	4d06      	ldr	r5, [pc, #24]	@ (800da68 <_close_r+0x1c>)
 800da50:	2300      	movs	r3, #0
 800da52:	4604      	mov	r4, r0
 800da54:	4608      	mov	r0, r1
 800da56:	602b      	str	r3, [r5, #0]
 800da58:	f7f8 fa50 	bl	8005efc <_close>
 800da5c:	1c43      	adds	r3, r0, #1
 800da5e:	d102      	bne.n	800da66 <_close_r+0x1a>
 800da60:	682b      	ldr	r3, [r5, #0]
 800da62:	b103      	cbz	r3, 800da66 <_close_r+0x1a>
 800da64:	6023      	str	r3, [r4, #0]
 800da66:	bd38      	pop	{r3, r4, r5, pc}
 800da68:	2001172c 	.word	0x2001172c

0800da6c <_reclaim_reent>:
 800da6c:	4b29      	ldr	r3, [pc, #164]	@ (800db14 <_reclaim_reent+0xa8>)
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	4283      	cmp	r3, r0
 800da72:	b570      	push	{r4, r5, r6, lr}
 800da74:	4604      	mov	r4, r0
 800da76:	d04b      	beq.n	800db10 <_reclaim_reent+0xa4>
 800da78:	69c3      	ldr	r3, [r0, #28]
 800da7a:	b1ab      	cbz	r3, 800daa8 <_reclaim_reent+0x3c>
 800da7c:	68db      	ldr	r3, [r3, #12]
 800da7e:	b16b      	cbz	r3, 800da9c <_reclaim_reent+0x30>
 800da80:	2500      	movs	r5, #0
 800da82:	69e3      	ldr	r3, [r4, #28]
 800da84:	68db      	ldr	r3, [r3, #12]
 800da86:	5959      	ldr	r1, [r3, r5]
 800da88:	2900      	cmp	r1, #0
 800da8a:	d13b      	bne.n	800db04 <_reclaim_reent+0x98>
 800da8c:	3504      	adds	r5, #4
 800da8e:	2d80      	cmp	r5, #128	@ 0x80
 800da90:	d1f7      	bne.n	800da82 <_reclaim_reent+0x16>
 800da92:	69e3      	ldr	r3, [r4, #28]
 800da94:	4620      	mov	r0, r4
 800da96:	68d9      	ldr	r1, [r3, #12]
 800da98:	f000 ff22 	bl	800e8e0 <_free_r>
 800da9c:	69e3      	ldr	r3, [r4, #28]
 800da9e:	6819      	ldr	r1, [r3, #0]
 800daa0:	b111      	cbz	r1, 800daa8 <_reclaim_reent+0x3c>
 800daa2:	4620      	mov	r0, r4
 800daa4:	f000 ff1c 	bl	800e8e0 <_free_r>
 800daa8:	6961      	ldr	r1, [r4, #20]
 800daaa:	b111      	cbz	r1, 800dab2 <_reclaim_reent+0x46>
 800daac:	4620      	mov	r0, r4
 800daae:	f000 ff17 	bl	800e8e0 <_free_r>
 800dab2:	69e1      	ldr	r1, [r4, #28]
 800dab4:	b111      	cbz	r1, 800dabc <_reclaim_reent+0x50>
 800dab6:	4620      	mov	r0, r4
 800dab8:	f000 ff12 	bl	800e8e0 <_free_r>
 800dabc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800dabe:	b111      	cbz	r1, 800dac6 <_reclaim_reent+0x5a>
 800dac0:	4620      	mov	r0, r4
 800dac2:	f000 ff0d 	bl	800e8e0 <_free_r>
 800dac6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dac8:	b111      	cbz	r1, 800dad0 <_reclaim_reent+0x64>
 800daca:	4620      	mov	r0, r4
 800dacc:	f000 ff08 	bl	800e8e0 <_free_r>
 800dad0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800dad2:	b111      	cbz	r1, 800dada <_reclaim_reent+0x6e>
 800dad4:	4620      	mov	r0, r4
 800dad6:	f000 ff03 	bl	800e8e0 <_free_r>
 800dada:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800dadc:	b111      	cbz	r1, 800dae4 <_reclaim_reent+0x78>
 800dade:	4620      	mov	r0, r4
 800dae0:	f000 fefe 	bl	800e8e0 <_free_r>
 800dae4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800dae6:	b111      	cbz	r1, 800daee <_reclaim_reent+0x82>
 800dae8:	4620      	mov	r0, r4
 800daea:	f000 fef9 	bl	800e8e0 <_free_r>
 800daee:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800daf0:	b111      	cbz	r1, 800daf8 <_reclaim_reent+0x8c>
 800daf2:	4620      	mov	r0, r4
 800daf4:	f000 fef4 	bl	800e8e0 <_free_r>
 800daf8:	6a23      	ldr	r3, [r4, #32]
 800dafa:	b14b      	cbz	r3, 800db10 <_reclaim_reent+0xa4>
 800dafc:	4620      	mov	r0, r4
 800dafe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800db02:	4718      	bx	r3
 800db04:	680e      	ldr	r6, [r1, #0]
 800db06:	4620      	mov	r0, r4
 800db08:	f000 feea 	bl	800e8e0 <_free_r>
 800db0c:	4631      	mov	r1, r6
 800db0e:	e7bb      	b.n	800da88 <_reclaim_reent+0x1c>
 800db10:	bd70      	pop	{r4, r5, r6, pc}
 800db12:	bf00      	nop
 800db14:	20000120 	.word	0x20000120

0800db18 <_lseek_r>:
 800db18:	b538      	push	{r3, r4, r5, lr}
 800db1a:	4d07      	ldr	r5, [pc, #28]	@ (800db38 <_lseek_r+0x20>)
 800db1c:	4604      	mov	r4, r0
 800db1e:	4608      	mov	r0, r1
 800db20:	4611      	mov	r1, r2
 800db22:	2200      	movs	r2, #0
 800db24:	602a      	str	r2, [r5, #0]
 800db26:	461a      	mov	r2, r3
 800db28:	f7f8 fa0f 	bl	8005f4a <_lseek>
 800db2c:	1c43      	adds	r3, r0, #1
 800db2e:	d102      	bne.n	800db36 <_lseek_r+0x1e>
 800db30:	682b      	ldr	r3, [r5, #0]
 800db32:	b103      	cbz	r3, 800db36 <_lseek_r+0x1e>
 800db34:	6023      	str	r3, [r4, #0]
 800db36:	bd38      	pop	{r3, r4, r5, pc}
 800db38:	2001172c 	.word	0x2001172c

0800db3c <_read_r>:
 800db3c:	b538      	push	{r3, r4, r5, lr}
 800db3e:	4d07      	ldr	r5, [pc, #28]	@ (800db5c <_read_r+0x20>)
 800db40:	4604      	mov	r4, r0
 800db42:	4608      	mov	r0, r1
 800db44:	4611      	mov	r1, r2
 800db46:	2200      	movs	r2, #0
 800db48:	602a      	str	r2, [r5, #0]
 800db4a:	461a      	mov	r2, r3
 800db4c:	f7f8 f99d 	bl	8005e8a <_read>
 800db50:	1c43      	adds	r3, r0, #1
 800db52:	d102      	bne.n	800db5a <_read_r+0x1e>
 800db54:	682b      	ldr	r3, [r5, #0]
 800db56:	b103      	cbz	r3, 800db5a <_read_r+0x1e>
 800db58:	6023      	str	r3, [r4, #0]
 800db5a:	bd38      	pop	{r3, r4, r5, pc}
 800db5c:	2001172c 	.word	0x2001172c

0800db60 <_kill_r>:
 800db60:	b538      	push	{r3, r4, r5, lr}
 800db62:	4d07      	ldr	r5, [pc, #28]	@ (800db80 <_kill_r+0x20>)
 800db64:	2300      	movs	r3, #0
 800db66:	4604      	mov	r4, r0
 800db68:	4608      	mov	r0, r1
 800db6a:	4611      	mov	r1, r2
 800db6c:	602b      	str	r3, [r5, #0]
 800db6e:	f7f8 f971 	bl	8005e54 <_kill>
 800db72:	1c43      	adds	r3, r0, #1
 800db74:	d102      	bne.n	800db7c <_kill_r+0x1c>
 800db76:	682b      	ldr	r3, [r5, #0]
 800db78:	b103      	cbz	r3, 800db7c <_kill_r+0x1c>
 800db7a:	6023      	str	r3, [r4, #0]
 800db7c:	bd38      	pop	{r3, r4, r5, pc}
 800db7e:	bf00      	nop
 800db80:	2001172c 	.word	0x2001172c

0800db84 <_getpid_r>:
 800db84:	f7f8 b95e 	b.w	8005e44 <_getpid>

0800db88 <_sbrk_r>:
 800db88:	b538      	push	{r3, r4, r5, lr}
 800db8a:	4d06      	ldr	r5, [pc, #24]	@ (800dba4 <_sbrk_r+0x1c>)
 800db8c:	2300      	movs	r3, #0
 800db8e:	4604      	mov	r4, r0
 800db90:	4608      	mov	r0, r1
 800db92:	602b      	str	r3, [r5, #0]
 800db94:	f7f8 f9e6 	bl	8005f64 <_sbrk>
 800db98:	1c43      	adds	r3, r0, #1
 800db9a:	d102      	bne.n	800dba2 <_sbrk_r+0x1a>
 800db9c:	682b      	ldr	r3, [r5, #0]
 800db9e:	b103      	cbz	r3, 800dba2 <_sbrk_r+0x1a>
 800dba0:	6023      	str	r3, [r4, #0]
 800dba2:	bd38      	pop	{r3, r4, r5, pc}
 800dba4:	2001172c 	.word	0x2001172c

0800dba8 <_write_r>:
 800dba8:	b538      	push	{r3, r4, r5, lr}
 800dbaa:	4d07      	ldr	r5, [pc, #28]	@ (800dbc8 <_write_r+0x20>)
 800dbac:	4604      	mov	r4, r0
 800dbae:	4608      	mov	r0, r1
 800dbb0:	4611      	mov	r1, r2
 800dbb2:	2200      	movs	r2, #0
 800dbb4:	602a      	str	r2, [r5, #0]
 800dbb6:	461a      	mov	r2, r3
 800dbb8:	f7f8 f984 	bl	8005ec4 <_write>
 800dbbc:	1c43      	adds	r3, r0, #1
 800dbbe:	d102      	bne.n	800dbc6 <_write_r+0x1e>
 800dbc0:	682b      	ldr	r3, [r5, #0]
 800dbc2:	b103      	cbz	r3, 800dbc6 <_write_r+0x1e>
 800dbc4:	6023      	str	r3, [r4, #0]
 800dbc6:	bd38      	pop	{r3, r4, r5, pc}
 800dbc8:	2001172c 	.word	0x2001172c

0800dbcc <__errno>:
 800dbcc:	4b01      	ldr	r3, [pc, #4]	@ (800dbd4 <__errno+0x8>)
 800dbce:	6818      	ldr	r0, [r3, #0]
 800dbd0:	4770      	bx	lr
 800dbd2:	bf00      	nop
 800dbd4:	20000120 	.word	0x20000120

0800dbd8 <__libc_init_array>:
 800dbd8:	b570      	push	{r4, r5, r6, lr}
 800dbda:	4d0d      	ldr	r5, [pc, #52]	@ (800dc10 <__libc_init_array+0x38>)
 800dbdc:	4c0d      	ldr	r4, [pc, #52]	@ (800dc14 <__libc_init_array+0x3c>)
 800dbde:	1b64      	subs	r4, r4, r5
 800dbe0:	10a4      	asrs	r4, r4, #2
 800dbe2:	2600      	movs	r6, #0
 800dbe4:	42a6      	cmp	r6, r4
 800dbe6:	d109      	bne.n	800dbfc <__libc_init_array+0x24>
 800dbe8:	4d0b      	ldr	r5, [pc, #44]	@ (800dc18 <__libc_init_array+0x40>)
 800dbea:	4c0c      	ldr	r4, [pc, #48]	@ (800dc1c <__libc_init_array+0x44>)
 800dbec:	f001 fec2 	bl	800f974 <_init>
 800dbf0:	1b64      	subs	r4, r4, r5
 800dbf2:	10a4      	asrs	r4, r4, #2
 800dbf4:	2600      	movs	r6, #0
 800dbf6:	42a6      	cmp	r6, r4
 800dbf8:	d105      	bne.n	800dc06 <__libc_init_array+0x2e>
 800dbfa:	bd70      	pop	{r4, r5, r6, pc}
 800dbfc:	f855 3b04 	ldr.w	r3, [r5], #4
 800dc00:	4798      	blx	r3
 800dc02:	3601      	adds	r6, #1
 800dc04:	e7ee      	b.n	800dbe4 <__libc_init_array+0xc>
 800dc06:	f855 3b04 	ldr.w	r3, [r5], #4
 800dc0a:	4798      	blx	r3
 800dc0c:	3601      	adds	r6, #1
 800dc0e:	e7f2      	b.n	800dbf6 <__libc_init_array+0x1e>
 800dc10:	08013458 	.word	0x08013458
 800dc14:	08013458 	.word	0x08013458
 800dc18:	08013458 	.word	0x08013458
 800dc1c:	08013464 	.word	0x08013464

0800dc20 <__retarget_lock_init_recursive>:
 800dc20:	4770      	bx	lr

0800dc22 <__retarget_lock_acquire_recursive>:
 800dc22:	4770      	bx	lr

0800dc24 <__retarget_lock_release_recursive>:
 800dc24:	4770      	bx	lr

0800dc26 <memcpy>:
 800dc26:	440a      	add	r2, r1
 800dc28:	4291      	cmp	r1, r2
 800dc2a:	f100 33ff 	add.w	r3, r0, #4294967295
 800dc2e:	d100      	bne.n	800dc32 <memcpy+0xc>
 800dc30:	4770      	bx	lr
 800dc32:	b510      	push	{r4, lr}
 800dc34:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dc38:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dc3c:	4291      	cmp	r1, r2
 800dc3e:	d1f9      	bne.n	800dc34 <memcpy+0xe>
 800dc40:	bd10      	pop	{r4, pc}

0800dc42 <quorem>:
 800dc42:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc46:	6903      	ldr	r3, [r0, #16]
 800dc48:	690c      	ldr	r4, [r1, #16]
 800dc4a:	42a3      	cmp	r3, r4
 800dc4c:	4607      	mov	r7, r0
 800dc4e:	db7e      	blt.n	800dd4e <quorem+0x10c>
 800dc50:	3c01      	subs	r4, #1
 800dc52:	f101 0814 	add.w	r8, r1, #20
 800dc56:	00a3      	lsls	r3, r4, #2
 800dc58:	f100 0514 	add.w	r5, r0, #20
 800dc5c:	9300      	str	r3, [sp, #0]
 800dc5e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dc62:	9301      	str	r3, [sp, #4]
 800dc64:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800dc68:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dc6c:	3301      	adds	r3, #1
 800dc6e:	429a      	cmp	r2, r3
 800dc70:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800dc74:	fbb2 f6f3 	udiv	r6, r2, r3
 800dc78:	d32e      	bcc.n	800dcd8 <quorem+0x96>
 800dc7a:	f04f 0a00 	mov.w	sl, #0
 800dc7e:	46c4      	mov	ip, r8
 800dc80:	46ae      	mov	lr, r5
 800dc82:	46d3      	mov	fp, sl
 800dc84:	f85c 3b04 	ldr.w	r3, [ip], #4
 800dc88:	b298      	uxth	r0, r3
 800dc8a:	fb06 a000 	mla	r0, r6, r0, sl
 800dc8e:	0c02      	lsrs	r2, r0, #16
 800dc90:	0c1b      	lsrs	r3, r3, #16
 800dc92:	fb06 2303 	mla	r3, r6, r3, r2
 800dc96:	f8de 2000 	ldr.w	r2, [lr]
 800dc9a:	b280      	uxth	r0, r0
 800dc9c:	b292      	uxth	r2, r2
 800dc9e:	1a12      	subs	r2, r2, r0
 800dca0:	445a      	add	r2, fp
 800dca2:	f8de 0000 	ldr.w	r0, [lr]
 800dca6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800dcaa:	b29b      	uxth	r3, r3
 800dcac:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800dcb0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800dcb4:	b292      	uxth	r2, r2
 800dcb6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800dcba:	45e1      	cmp	r9, ip
 800dcbc:	f84e 2b04 	str.w	r2, [lr], #4
 800dcc0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800dcc4:	d2de      	bcs.n	800dc84 <quorem+0x42>
 800dcc6:	9b00      	ldr	r3, [sp, #0]
 800dcc8:	58eb      	ldr	r3, [r5, r3]
 800dcca:	b92b      	cbnz	r3, 800dcd8 <quorem+0x96>
 800dccc:	9b01      	ldr	r3, [sp, #4]
 800dcce:	3b04      	subs	r3, #4
 800dcd0:	429d      	cmp	r5, r3
 800dcd2:	461a      	mov	r2, r3
 800dcd4:	d32f      	bcc.n	800dd36 <quorem+0xf4>
 800dcd6:	613c      	str	r4, [r7, #16]
 800dcd8:	4638      	mov	r0, r7
 800dcda:	f001 f8c5 	bl	800ee68 <__mcmp>
 800dcde:	2800      	cmp	r0, #0
 800dce0:	db25      	blt.n	800dd2e <quorem+0xec>
 800dce2:	4629      	mov	r1, r5
 800dce4:	2000      	movs	r0, #0
 800dce6:	f858 2b04 	ldr.w	r2, [r8], #4
 800dcea:	f8d1 c000 	ldr.w	ip, [r1]
 800dcee:	fa1f fe82 	uxth.w	lr, r2
 800dcf2:	fa1f f38c 	uxth.w	r3, ip
 800dcf6:	eba3 030e 	sub.w	r3, r3, lr
 800dcfa:	4403      	add	r3, r0
 800dcfc:	0c12      	lsrs	r2, r2, #16
 800dcfe:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800dd02:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800dd06:	b29b      	uxth	r3, r3
 800dd08:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dd0c:	45c1      	cmp	r9, r8
 800dd0e:	f841 3b04 	str.w	r3, [r1], #4
 800dd12:	ea4f 4022 	mov.w	r0, r2, asr #16
 800dd16:	d2e6      	bcs.n	800dce6 <quorem+0xa4>
 800dd18:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dd1c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dd20:	b922      	cbnz	r2, 800dd2c <quorem+0xea>
 800dd22:	3b04      	subs	r3, #4
 800dd24:	429d      	cmp	r5, r3
 800dd26:	461a      	mov	r2, r3
 800dd28:	d30b      	bcc.n	800dd42 <quorem+0x100>
 800dd2a:	613c      	str	r4, [r7, #16]
 800dd2c:	3601      	adds	r6, #1
 800dd2e:	4630      	mov	r0, r6
 800dd30:	b003      	add	sp, #12
 800dd32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd36:	6812      	ldr	r2, [r2, #0]
 800dd38:	3b04      	subs	r3, #4
 800dd3a:	2a00      	cmp	r2, #0
 800dd3c:	d1cb      	bne.n	800dcd6 <quorem+0x94>
 800dd3e:	3c01      	subs	r4, #1
 800dd40:	e7c6      	b.n	800dcd0 <quorem+0x8e>
 800dd42:	6812      	ldr	r2, [r2, #0]
 800dd44:	3b04      	subs	r3, #4
 800dd46:	2a00      	cmp	r2, #0
 800dd48:	d1ef      	bne.n	800dd2a <quorem+0xe8>
 800dd4a:	3c01      	subs	r4, #1
 800dd4c:	e7ea      	b.n	800dd24 <quorem+0xe2>
 800dd4e:	2000      	movs	r0, #0
 800dd50:	e7ee      	b.n	800dd30 <quorem+0xee>
 800dd52:	0000      	movs	r0, r0
 800dd54:	0000      	movs	r0, r0
	...

0800dd58 <_dtoa_r>:
 800dd58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd5c:	69c7      	ldr	r7, [r0, #28]
 800dd5e:	b099      	sub	sp, #100	@ 0x64
 800dd60:	ed8d 0b02 	vstr	d0, [sp, #8]
 800dd64:	ec55 4b10 	vmov	r4, r5, d0
 800dd68:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800dd6a:	9109      	str	r1, [sp, #36]	@ 0x24
 800dd6c:	4683      	mov	fp, r0
 800dd6e:	920e      	str	r2, [sp, #56]	@ 0x38
 800dd70:	9313      	str	r3, [sp, #76]	@ 0x4c
 800dd72:	b97f      	cbnz	r7, 800dd94 <_dtoa_r+0x3c>
 800dd74:	2010      	movs	r0, #16
 800dd76:	f7fe fea1 	bl	800cabc <malloc>
 800dd7a:	4602      	mov	r2, r0
 800dd7c:	f8cb 001c 	str.w	r0, [fp, #28]
 800dd80:	b920      	cbnz	r0, 800dd8c <_dtoa_r+0x34>
 800dd82:	4ba7      	ldr	r3, [pc, #668]	@ (800e020 <_dtoa_r+0x2c8>)
 800dd84:	21ef      	movs	r1, #239	@ 0xef
 800dd86:	48a7      	ldr	r0, [pc, #668]	@ (800e024 <_dtoa_r+0x2cc>)
 800dd88:	f001 fd5a 	bl	800f840 <__assert_func>
 800dd8c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800dd90:	6007      	str	r7, [r0, #0]
 800dd92:	60c7      	str	r7, [r0, #12]
 800dd94:	f8db 301c 	ldr.w	r3, [fp, #28]
 800dd98:	6819      	ldr	r1, [r3, #0]
 800dd9a:	b159      	cbz	r1, 800ddb4 <_dtoa_r+0x5c>
 800dd9c:	685a      	ldr	r2, [r3, #4]
 800dd9e:	604a      	str	r2, [r1, #4]
 800dda0:	2301      	movs	r3, #1
 800dda2:	4093      	lsls	r3, r2
 800dda4:	608b      	str	r3, [r1, #8]
 800dda6:	4658      	mov	r0, fp
 800dda8:	f000 fe24 	bl	800e9f4 <_Bfree>
 800ddac:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ddb0:	2200      	movs	r2, #0
 800ddb2:	601a      	str	r2, [r3, #0]
 800ddb4:	1e2b      	subs	r3, r5, #0
 800ddb6:	bfb9      	ittee	lt
 800ddb8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800ddbc:	9303      	strlt	r3, [sp, #12]
 800ddbe:	2300      	movge	r3, #0
 800ddc0:	6033      	strge	r3, [r6, #0]
 800ddc2:	9f03      	ldr	r7, [sp, #12]
 800ddc4:	4b98      	ldr	r3, [pc, #608]	@ (800e028 <_dtoa_r+0x2d0>)
 800ddc6:	bfbc      	itt	lt
 800ddc8:	2201      	movlt	r2, #1
 800ddca:	6032      	strlt	r2, [r6, #0]
 800ddcc:	43bb      	bics	r3, r7
 800ddce:	d112      	bne.n	800ddf6 <_dtoa_r+0x9e>
 800ddd0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ddd2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800ddd6:	6013      	str	r3, [r2, #0]
 800ddd8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800dddc:	4323      	orrs	r3, r4
 800ddde:	f000 854d 	beq.w	800e87c <_dtoa_r+0xb24>
 800dde2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800dde4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800e03c <_dtoa_r+0x2e4>
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	f000 854f 	beq.w	800e88c <_dtoa_r+0xb34>
 800ddee:	f10a 0303 	add.w	r3, sl, #3
 800ddf2:	f000 bd49 	b.w	800e888 <_dtoa_r+0xb30>
 800ddf6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ddfa:	2200      	movs	r2, #0
 800ddfc:	ec51 0b17 	vmov	r0, r1, d7
 800de00:	2300      	movs	r3, #0
 800de02:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800de06:	f7f2 fe37 	bl	8000a78 <__aeabi_dcmpeq>
 800de0a:	4680      	mov	r8, r0
 800de0c:	b158      	cbz	r0, 800de26 <_dtoa_r+0xce>
 800de0e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800de10:	2301      	movs	r3, #1
 800de12:	6013      	str	r3, [r2, #0]
 800de14:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800de16:	b113      	cbz	r3, 800de1e <_dtoa_r+0xc6>
 800de18:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800de1a:	4b84      	ldr	r3, [pc, #528]	@ (800e02c <_dtoa_r+0x2d4>)
 800de1c:	6013      	str	r3, [r2, #0]
 800de1e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800e040 <_dtoa_r+0x2e8>
 800de22:	f000 bd33 	b.w	800e88c <_dtoa_r+0xb34>
 800de26:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800de2a:	aa16      	add	r2, sp, #88	@ 0x58
 800de2c:	a917      	add	r1, sp, #92	@ 0x5c
 800de2e:	4658      	mov	r0, fp
 800de30:	f001 f8ca 	bl	800efc8 <__d2b>
 800de34:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800de38:	4681      	mov	r9, r0
 800de3a:	2e00      	cmp	r6, #0
 800de3c:	d077      	beq.n	800df2e <_dtoa_r+0x1d6>
 800de3e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800de40:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800de44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800de48:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800de4c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800de50:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800de54:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800de58:	4619      	mov	r1, r3
 800de5a:	2200      	movs	r2, #0
 800de5c:	4b74      	ldr	r3, [pc, #464]	@ (800e030 <_dtoa_r+0x2d8>)
 800de5e:	f7f2 f9eb 	bl	8000238 <__aeabi_dsub>
 800de62:	a369      	add	r3, pc, #420	@ (adr r3, 800e008 <_dtoa_r+0x2b0>)
 800de64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de68:	f7f2 fb9e 	bl	80005a8 <__aeabi_dmul>
 800de6c:	a368      	add	r3, pc, #416	@ (adr r3, 800e010 <_dtoa_r+0x2b8>)
 800de6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de72:	f7f2 f9e3 	bl	800023c <__adddf3>
 800de76:	4604      	mov	r4, r0
 800de78:	4630      	mov	r0, r6
 800de7a:	460d      	mov	r5, r1
 800de7c:	f7f2 fb2a 	bl	80004d4 <__aeabi_i2d>
 800de80:	a365      	add	r3, pc, #404	@ (adr r3, 800e018 <_dtoa_r+0x2c0>)
 800de82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de86:	f7f2 fb8f 	bl	80005a8 <__aeabi_dmul>
 800de8a:	4602      	mov	r2, r0
 800de8c:	460b      	mov	r3, r1
 800de8e:	4620      	mov	r0, r4
 800de90:	4629      	mov	r1, r5
 800de92:	f7f2 f9d3 	bl	800023c <__adddf3>
 800de96:	4604      	mov	r4, r0
 800de98:	460d      	mov	r5, r1
 800de9a:	f7f2 fe35 	bl	8000b08 <__aeabi_d2iz>
 800de9e:	2200      	movs	r2, #0
 800dea0:	4607      	mov	r7, r0
 800dea2:	2300      	movs	r3, #0
 800dea4:	4620      	mov	r0, r4
 800dea6:	4629      	mov	r1, r5
 800dea8:	f7f2 fdf0 	bl	8000a8c <__aeabi_dcmplt>
 800deac:	b140      	cbz	r0, 800dec0 <_dtoa_r+0x168>
 800deae:	4638      	mov	r0, r7
 800deb0:	f7f2 fb10 	bl	80004d4 <__aeabi_i2d>
 800deb4:	4622      	mov	r2, r4
 800deb6:	462b      	mov	r3, r5
 800deb8:	f7f2 fdde 	bl	8000a78 <__aeabi_dcmpeq>
 800debc:	b900      	cbnz	r0, 800dec0 <_dtoa_r+0x168>
 800debe:	3f01      	subs	r7, #1
 800dec0:	2f16      	cmp	r7, #22
 800dec2:	d851      	bhi.n	800df68 <_dtoa_r+0x210>
 800dec4:	4b5b      	ldr	r3, [pc, #364]	@ (800e034 <_dtoa_r+0x2dc>)
 800dec6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800deca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dece:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ded2:	f7f2 fddb 	bl	8000a8c <__aeabi_dcmplt>
 800ded6:	2800      	cmp	r0, #0
 800ded8:	d048      	beq.n	800df6c <_dtoa_r+0x214>
 800deda:	3f01      	subs	r7, #1
 800dedc:	2300      	movs	r3, #0
 800dede:	9312      	str	r3, [sp, #72]	@ 0x48
 800dee0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800dee2:	1b9b      	subs	r3, r3, r6
 800dee4:	1e5a      	subs	r2, r3, #1
 800dee6:	bf44      	itt	mi
 800dee8:	f1c3 0801 	rsbmi	r8, r3, #1
 800deec:	2300      	movmi	r3, #0
 800deee:	9208      	str	r2, [sp, #32]
 800def0:	bf54      	ite	pl
 800def2:	f04f 0800 	movpl.w	r8, #0
 800def6:	9308      	strmi	r3, [sp, #32]
 800def8:	2f00      	cmp	r7, #0
 800defa:	db39      	blt.n	800df70 <_dtoa_r+0x218>
 800defc:	9b08      	ldr	r3, [sp, #32]
 800defe:	970f      	str	r7, [sp, #60]	@ 0x3c
 800df00:	443b      	add	r3, r7
 800df02:	9308      	str	r3, [sp, #32]
 800df04:	2300      	movs	r3, #0
 800df06:	930a      	str	r3, [sp, #40]	@ 0x28
 800df08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800df0a:	2b09      	cmp	r3, #9
 800df0c:	d864      	bhi.n	800dfd8 <_dtoa_r+0x280>
 800df0e:	2b05      	cmp	r3, #5
 800df10:	bfc4      	itt	gt
 800df12:	3b04      	subgt	r3, #4
 800df14:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800df16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800df18:	f1a3 0302 	sub.w	r3, r3, #2
 800df1c:	bfcc      	ite	gt
 800df1e:	2400      	movgt	r4, #0
 800df20:	2401      	movle	r4, #1
 800df22:	2b03      	cmp	r3, #3
 800df24:	d863      	bhi.n	800dfee <_dtoa_r+0x296>
 800df26:	e8df f003 	tbb	[pc, r3]
 800df2a:	372a      	.short	0x372a
 800df2c:	5535      	.short	0x5535
 800df2e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800df32:	441e      	add	r6, r3
 800df34:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800df38:	2b20      	cmp	r3, #32
 800df3a:	bfc1      	itttt	gt
 800df3c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800df40:	409f      	lslgt	r7, r3
 800df42:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800df46:	fa24 f303 	lsrgt.w	r3, r4, r3
 800df4a:	bfd6      	itet	le
 800df4c:	f1c3 0320 	rsble	r3, r3, #32
 800df50:	ea47 0003 	orrgt.w	r0, r7, r3
 800df54:	fa04 f003 	lslle.w	r0, r4, r3
 800df58:	f7f2 faac 	bl	80004b4 <__aeabi_ui2d>
 800df5c:	2201      	movs	r2, #1
 800df5e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800df62:	3e01      	subs	r6, #1
 800df64:	9214      	str	r2, [sp, #80]	@ 0x50
 800df66:	e777      	b.n	800de58 <_dtoa_r+0x100>
 800df68:	2301      	movs	r3, #1
 800df6a:	e7b8      	b.n	800dede <_dtoa_r+0x186>
 800df6c:	9012      	str	r0, [sp, #72]	@ 0x48
 800df6e:	e7b7      	b.n	800dee0 <_dtoa_r+0x188>
 800df70:	427b      	negs	r3, r7
 800df72:	930a      	str	r3, [sp, #40]	@ 0x28
 800df74:	2300      	movs	r3, #0
 800df76:	eba8 0807 	sub.w	r8, r8, r7
 800df7a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800df7c:	e7c4      	b.n	800df08 <_dtoa_r+0x1b0>
 800df7e:	2300      	movs	r3, #0
 800df80:	930b      	str	r3, [sp, #44]	@ 0x2c
 800df82:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800df84:	2b00      	cmp	r3, #0
 800df86:	dc35      	bgt.n	800dff4 <_dtoa_r+0x29c>
 800df88:	2301      	movs	r3, #1
 800df8a:	9300      	str	r3, [sp, #0]
 800df8c:	9307      	str	r3, [sp, #28]
 800df8e:	461a      	mov	r2, r3
 800df90:	920e      	str	r2, [sp, #56]	@ 0x38
 800df92:	e00b      	b.n	800dfac <_dtoa_r+0x254>
 800df94:	2301      	movs	r3, #1
 800df96:	e7f3      	b.n	800df80 <_dtoa_r+0x228>
 800df98:	2300      	movs	r3, #0
 800df9a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800df9c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800df9e:	18fb      	adds	r3, r7, r3
 800dfa0:	9300      	str	r3, [sp, #0]
 800dfa2:	3301      	adds	r3, #1
 800dfa4:	2b01      	cmp	r3, #1
 800dfa6:	9307      	str	r3, [sp, #28]
 800dfa8:	bfb8      	it	lt
 800dfaa:	2301      	movlt	r3, #1
 800dfac:	f8db 001c 	ldr.w	r0, [fp, #28]
 800dfb0:	2100      	movs	r1, #0
 800dfb2:	2204      	movs	r2, #4
 800dfb4:	f102 0514 	add.w	r5, r2, #20
 800dfb8:	429d      	cmp	r5, r3
 800dfba:	d91f      	bls.n	800dffc <_dtoa_r+0x2a4>
 800dfbc:	6041      	str	r1, [r0, #4]
 800dfbe:	4658      	mov	r0, fp
 800dfc0:	f000 fcd8 	bl	800e974 <_Balloc>
 800dfc4:	4682      	mov	sl, r0
 800dfc6:	2800      	cmp	r0, #0
 800dfc8:	d13c      	bne.n	800e044 <_dtoa_r+0x2ec>
 800dfca:	4b1b      	ldr	r3, [pc, #108]	@ (800e038 <_dtoa_r+0x2e0>)
 800dfcc:	4602      	mov	r2, r0
 800dfce:	f240 11af 	movw	r1, #431	@ 0x1af
 800dfd2:	e6d8      	b.n	800dd86 <_dtoa_r+0x2e>
 800dfd4:	2301      	movs	r3, #1
 800dfd6:	e7e0      	b.n	800df9a <_dtoa_r+0x242>
 800dfd8:	2401      	movs	r4, #1
 800dfda:	2300      	movs	r3, #0
 800dfdc:	9309      	str	r3, [sp, #36]	@ 0x24
 800dfde:	940b      	str	r4, [sp, #44]	@ 0x2c
 800dfe0:	f04f 33ff 	mov.w	r3, #4294967295
 800dfe4:	9300      	str	r3, [sp, #0]
 800dfe6:	9307      	str	r3, [sp, #28]
 800dfe8:	2200      	movs	r2, #0
 800dfea:	2312      	movs	r3, #18
 800dfec:	e7d0      	b.n	800df90 <_dtoa_r+0x238>
 800dfee:	2301      	movs	r3, #1
 800dff0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dff2:	e7f5      	b.n	800dfe0 <_dtoa_r+0x288>
 800dff4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dff6:	9300      	str	r3, [sp, #0]
 800dff8:	9307      	str	r3, [sp, #28]
 800dffa:	e7d7      	b.n	800dfac <_dtoa_r+0x254>
 800dffc:	3101      	adds	r1, #1
 800dffe:	0052      	lsls	r2, r2, #1
 800e000:	e7d8      	b.n	800dfb4 <_dtoa_r+0x25c>
 800e002:	bf00      	nop
 800e004:	f3af 8000 	nop.w
 800e008:	636f4361 	.word	0x636f4361
 800e00c:	3fd287a7 	.word	0x3fd287a7
 800e010:	8b60c8b3 	.word	0x8b60c8b3
 800e014:	3fc68a28 	.word	0x3fc68a28
 800e018:	509f79fb 	.word	0x509f79fb
 800e01c:	3fd34413 	.word	0x3fd34413
 800e020:	0801311d 	.word	0x0801311d
 800e024:	08013134 	.word	0x08013134
 800e028:	7ff00000 	.word	0x7ff00000
 800e02c:	080130ed 	.word	0x080130ed
 800e030:	3ff80000 	.word	0x3ff80000
 800e034:	08013230 	.word	0x08013230
 800e038:	0801318c 	.word	0x0801318c
 800e03c:	08013119 	.word	0x08013119
 800e040:	080130ec 	.word	0x080130ec
 800e044:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e048:	6018      	str	r0, [r3, #0]
 800e04a:	9b07      	ldr	r3, [sp, #28]
 800e04c:	2b0e      	cmp	r3, #14
 800e04e:	f200 80a4 	bhi.w	800e19a <_dtoa_r+0x442>
 800e052:	2c00      	cmp	r4, #0
 800e054:	f000 80a1 	beq.w	800e19a <_dtoa_r+0x442>
 800e058:	2f00      	cmp	r7, #0
 800e05a:	dd33      	ble.n	800e0c4 <_dtoa_r+0x36c>
 800e05c:	4bad      	ldr	r3, [pc, #692]	@ (800e314 <_dtoa_r+0x5bc>)
 800e05e:	f007 020f 	and.w	r2, r7, #15
 800e062:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e066:	ed93 7b00 	vldr	d7, [r3]
 800e06a:	05f8      	lsls	r0, r7, #23
 800e06c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800e070:	ea4f 1427 	mov.w	r4, r7, asr #4
 800e074:	d516      	bpl.n	800e0a4 <_dtoa_r+0x34c>
 800e076:	4ba8      	ldr	r3, [pc, #672]	@ (800e318 <_dtoa_r+0x5c0>)
 800e078:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e07c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e080:	f7f2 fbbc 	bl	80007fc <__aeabi_ddiv>
 800e084:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e088:	f004 040f 	and.w	r4, r4, #15
 800e08c:	2603      	movs	r6, #3
 800e08e:	4da2      	ldr	r5, [pc, #648]	@ (800e318 <_dtoa_r+0x5c0>)
 800e090:	b954      	cbnz	r4, 800e0a8 <_dtoa_r+0x350>
 800e092:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e096:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e09a:	f7f2 fbaf 	bl	80007fc <__aeabi_ddiv>
 800e09e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e0a2:	e028      	b.n	800e0f6 <_dtoa_r+0x39e>
 800e0a4:	2602      	movs	r6, #2
 800e0a6:	e7f2      	b.n	800e08e <_dtoa_r+0x336>
 800e0a8:	07e1      	lsls	r1, r4, #31
 800e0aa:	d508      	bpl.n	800e0be <_dtoa_r+0x366>
 800e0ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e0b0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e0b4:	f7f2 fa78 	bl	80005a8 <__aeabi_dmul>
 800e0b8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e0bc:	3601      	adds	r6, #1
 800e0be:	1064      	asrs	r4, r4, #1
 800e0c0:	3508      	adds	r5, #8
 800e0c2:	e7e5      	b.n	800e090 <_dtoa_r+0x338>
 800e0c4:	f000 80d2 	beq.w	800e26c <_dtoa_r+0x514>
 800e0c8:	427c      	negs	r4, r7
 800e0ca:	4b92      	ldr	r3, [pc, #584]	@ (800e314 <_dtoa_r+0x5bc>)
 800e0cc:	4d92      	ldr	r5, [pc, #584]	@ (800e318 <_dtoa_r+0x5c0>)
 800e0ce:	f004 020f 	and.w	r2, r4, #15
 800e0d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e0d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0da:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e0de:	f7f2 fa63 	bl	80005a8 <__aeabi_dmul>
 800e0e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e0e6:	1124      	asrs	r4, r4, #4
 800e0e8:	2300      	movs	r3, #0
 800e0ea:	2602      	movs	r6, #2
 800e0ec:	2c00      	cmp	r4, #0
 800e0ee:	f040 80b2 	bne.w	800e256 <_dtoa_r+0x4fe>
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d1d3      	bne.n	800e09e <_dtoa_r+0x346>
 800e0f6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e0f8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	f000 80b7 	beq.w	800e270 <_dtoa_r+0x518>
 800e102:	4b86      	ldr	r3, [pc, #536]	@ (800e31c <_dtoa_r+0x5c4>)
 800e104:	2200      	movs	r2, #0
 800e106:	4620      	mov	r0, r4
 800e108:	4629      	mov	r1, r5
 800e10a:	f7f2 fcbf 	bl	8000a8c <__aeabi_dcmplt>
 800e10e:	2800      	cmp	r0, #0
 800e110:	f000 80ae 	beq.w	800e270 <_dtoa_r+0x518>
 800e114:	9b07      	ldr	r3, [sp, #28]
 800e116:	2b00      	cmp	r3, #0
 800e118:	f000 80aa 	beq.w	800e270 <_dtoa_r+0x518>
 800e11c:	9b00      	ldr	r3, [sp, #0]
 800e11e:	2b00      	cmp	r3, #0
 800e120:	dd37      	ble.n	800e192 <_dtoa_r+0x43a>
 800e122:	1e7b      	subs	r3, r7, #1
 800e124:	9304      	str	r3, [sp, #16]
 800e126:	4620      	mov	r0, r4
 800e128:	4b7d      	ldr	r3, [pc, #500]	@ (800e320 <_dtoa_r+0x5c8>)
 800e12a:	2200      	movs	r2, #0
 800e12c:	4629      	mov	r1, r5
 800e12e:	f7f2 fa3b 	bl	80005a8 <__aeabi_dmul>
 800e132:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e136:	9c00      	ldr	r4, [sp, #0]
 800e138:	3601      	adds	r6, #1
 800e13a:	4630      	mov	r0, r6
 800e13c:	f7f2 f9ca 	bl	80004d4 <__aeabi_i2d>
 800e140:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e144:	f7f2 fa30 	bl	80005a8 <__aeabi_dmul>
 800e148:	4b76      	ldr	r3, [pc, #472]	@ (800e324 <_dtoa_r+0x5cc>)
 800e14a:	2200      	movs	r2, #0
 800e14c:	f7f2 f876 	bl	800023c <__adddf3>
 800e150:	4605      	mov	r5, r0
 800e152:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800e156:	2c00      	cmp	r4, #0
 800e158:	f040 808d 	bne.w	800e276 <_dtoa_r+0x51e>
 800e15c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e160:	4b71      	ldr	r3, [pc, #452]	@ (800e328 <_dtoa_r+0x5d0>)
 800e162:	2200      	movs	r2, #0
 800e164:	f7f2 f868 	bl	8000238 <__aeabi_dsub>
 800e168:	4602      	mov	r2, r0
 800e16a:	460b      	mov	r3, r1
 800e16c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e170:	462a      	mov	r2, r5
 800e172:	4633      	mov	r3, r6
 800e174:	f7f2 fca8 	bl	8000ac8 <__aeabi_dcmpgt>
 800e178:	2800      	cmp	r0, #0
 800e17a:	f040 828b 	bne.w	800e694 <_dtoa_r+0x93c>
 800e17e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e182:	462a      	mov	r2, r5
 800e184:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800e188:	f7f2 fc80 	bl	8000a8c <__aeabi_dcmplt>
 800e18c:	2800      	cmp	r0, #0
 800e18e:	f040 8128 	bne.w	800e3e2 <_dtoa_r+0x68a>
 800e192:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800e196:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800e19a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	f2c0 815a 	blt.w	800e456 <_dtoa_r+0x6fe>
 800e1a2:	2f0e      	cmp	r7, #14
 800e1a4:	f300 8157 	bgt.w	800e456 <_dtoa_r+0x6fe>
 800e1a8:	4b5a      	ldr	r3, [pc, #360]	@ (800e314 <_dtoa_r+0x5bc>)
 800e1aa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e1ae:	ed93 7b00 	vldr	d7, [r3]
 800e1b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	ed8d 7b00 	vstr	d7, [sp]
 800e1ba:	da03      	bge.n	800e1c4 <_dtoa_r+0x46c>
 800e1bc:	9b07      	ldr	r3, [sp, #28]
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	f340 8101 	ble.w	800e3c6 <_dtoa_r+0x66e>
 800e1c4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e1c8:	4656      	mov	r6, sl
 800e1ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e1ce:	4620      	mov	r0, r4
 800e1d0:	4629      	mov	r1, r5
 800e1d2:	f7f2 fb13 	bl	80007fc <__aeabi_ddiv>
 800e1d6:	f7f2 fc97 	bl	8000b08 <__aeabi_d2iz>
 800e1da:	4680      	mov	r8, r0
 800e1dc:	f7f2 f97a 	bl	80004d4 <__aeabi_i2d>
 800e1e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e1e4:	f7f2 f9e0 	bl	80005a8 <__aeabi_dmul>
 800e1e8:	4602      	mov	r2, r0
 800e1ea:	460b      	mov	r3, r1
 800e1ec:	4620      	mov	r0, r4
 800e1ee:	4629      	mov	r1, r5
 800e1f0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800e1f4:	f7f2 f820 	bl	8000238 <__aeabi_dsub>
 800e1f8:	f806 4b01 	strb.w	r4, [r6], #1
 800e1fc:	9d07      	ldr	r5, [sp, #28]
 800e1fe:	eba6 040a 	sub.w	r4, r6, sl
 800e202:	42a5      	cmp	r5, r4
 800e204:	4602      	mov	r2, r0
 800e206:	460b      	mov	r3, r1
 800e208:	f040 8117 	bne.w	800e43a <_dtoa_r+0x6e2>
 800e20c:	f7f2 f816 	bl	800023c <__adddf3>
 800e210:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e214:	4604      	mov	r4, r0
 800e216:	460d      	mov	r5, r1
 800e218:	f7f2 fc56 	bl	8000ac8 <__aeabi_dcmpgt>
 800e21c:	2800      	cmp	r0, #0
 800e21e:	f040 80f9 	bne.w	800e414 <_dtoa_r+0x6bc>
 800e222:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e226:	4620      	mov	r0, r4
 800e228:	4629      	mov	r1, r5
 800e22a:	f7f2 fc25 	bl	8000a78 <__aeabi_dcmpeq>
 800e22e:	b118      	cbz	r0, 800e238 <_dtoa_r+0x4e0>
 800e230:	f018 0f01 	tst.w	r8, #1
 800e234:	f040 80ee 	bne.w	800e414 <_dtoa_r+0x6bc>
 800e238:	4649      	mov	r1, r9
 800e23a:	4658      	mov	r0, fp
 800e23c:	f000 fbda 	bl	800e9f4 <_Bfree>
 800e240:	2300      	movs	r3, #0
 800e242:	7033      	strb	r3, [r6, #0]
 800e244:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e246:	3701      	adds	r7, #1
 800e248:	601f      	str	r7, [r3, #0]
 800e24a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	f000 831d 	beq.w	800e88c <_dtoa_r+0xb34>
 800e252:	601e      	str	r6, [r3, #0]
 800e254:	e31a      	b.n	800e88c <_dtoa_r+0xb34>
 800e256:	07e2      	lsls	r2, r4, #31
 800e258:	d505      	bpl.n	800e266 <_dtoa_r+0x50e>
 800e25a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e25e:	f7f2 f9a3 	bl	80005a8 <__aeabi_dmul>
 800e262:	3601      	adds	r6, #1
 800e264:	2301      	movs	r3, #1
 800e266:	1064      	asrs	r4, r4, #1
 800e268:	3508      	adds	r5, #8
 800e26a:	e73f      	b.n	800e0ec <_dtoa_r+0x394>
 800e26c:	2602      	movs	r6, #2
 800e26e:	e742      	b.n	800e0f6 <_dtoa_r+0x39e>
 800e270:	9c07      	ldr	r4, [sp, #28]
 800e272:	9704      	str	r7, [sp, #16]
 800e274:	e761      	b.n	800e13a <_dtoa_r+0x3e2>
 800e276:	4b27      	ldr	r3, [pc, #156]	@ (800e314 <_dtoa_r+0x5bc>)
 800e278:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e27a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e27e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e282:	4454      	add	r4, sl
 800e284:	2900      	cmp	r1, #0
 800e286:	d053      	beq.n	800e330 <_dtoa_r+0x5d8>
 800e288:	4928      	ldr	r1, [pc, #160]	@ (800e32c <_dtoa_r+0x5d4>)
 800e28a:	2000      	movs	r0, #0
 800e28c:	f7f2 fab6 	bl	80007fc <__aeabi_ddiv>
 800e290:	4633      	mov	r3, r6
 800e292:	462a      	mov	r2, r5
 800e294:	f7f1 ffd0 	bl	8000238 <__aeabi_dsub>
 800e298:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e29c:	4656      	mov	r6, sl
 800e29e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e2a2:	f7f2 fc31 	bl	8000b08 <__aeabi_d2iz>
 800e2a6:	4605      	mov	r5, r0
 800e2a8:	f7f2 f914 	bl	80004d4 <__aeabi_i2d>
 800e2ac:	4602      	mov	r2, r0
 800e2ae:	460b      	mov	r3, r1
 800e2b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e2b4:	f7f1 ffc0 	bl	8000238 <__aeabi_dsub>
 800e2b8:	3530      	adds	r5, #48	@ 0x30
 800e2ba:	4602      	mov	r2, r0
 800e2bc:	460b      	mov	r3, r1
 800e2be:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e2c2:	f806 5b01 	strb.w	r5, [r6], #1
 800e2c6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e2ca:	f7f2 fbdf 	bl	8000a8c <__aeabi_dcmplt>
 800e2ce:	2800      	cmp	r0, #0
 800e2d0:	d171      	bne.n	800e3b6 <_dtoa_r+0x65e>
 800e2d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e2d6:	4911      	ldr	r1, [pc, #68]	@ (800e31c <_dtoa_r+0x5c4>)
 800e2d8:	2000      	movs	r0, #0
 800e2da:	f7f1 ffad 	bl	8000238 <__aeabi_dsub>
 800e2de:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e2e2:	f7f2 fbd3 	bl	8000a8c <__aeabi_dcmplt>
 800e2e6:	2800      	cmp	r0, #0
 800e2e8:	f040 8095 	bne.w	800e416 <_dtoa_r+0x6be>
 800e2ec:	42a6      	cmp	r6, r4
 800e2ee:	f43f af50 	beq.w	800e192 <_dtoa_r+0x43a>
 800e2f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e2f6:	4b0a      	ldr	r3, [pc, #40]	@ (800e320 <_dtoa_r+0x5c8>)
 800e2f8:	2200      	movs	r2, #0
 800e2fa:	f7f2 f955 	bl	80005a8 <__aeabi_dmul>
 800e2fe:	4b08      	ldr	r3, [pc, #32]	@ (800e320 <_dtoa_r+0x5c8>)
 800e300:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e304:	2200      	movs	r2, #0
 800e306:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e30a:	f7f2 f94d 	bl	80005a8 <__aeabi_dmul>
 800e30e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e312:	e7c4      	b.n	800e29e <_dtoa_r+0x546>
 800e314:	08013230 	.word	0x08013230
 800e318:	08013208 	.word	0x08013208
 800e31c:	3ff00000 	.word	0x3ff00000
 800e320:	40240000 	.word	0x40240000
 800e324:	401c0000 	.word	0x401c0000
 800e328:	40140000 	.word	0x40140000
 800e32c:	3fe00000 	.word	0x3fe00000
 800e330:	4631      	mov	r1, r6
 800e332:	4628      	mov	r0, r5
 800e334:	f7f2 f938 	bl	80005a8 <__aeabi_dmul>
 800e338:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e33c:	9415      	str	r4, [sp, #84]	@ 0x54
 800e33e:	4656      	mov	r6, sl
 800e340:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e344:	f7f2 fbe0 	bl	8000b08 <__aeabi_d2iz>
 800e348:	4605      	mov	r5, r0
 800e34a:	f7f2 f8c3 	bl	80004d4 <__aeabi_i2d>
 800e34e:	4602      	mov	r2, r0
 800e350:	460b      	mov	r3, r1
 800e352:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e356:	f7f1 ff6f 	bl	8000238 <__aeabi_dsub>
 800e35a:	3530      	adds	r5, #48	@ 0x30
 800e35c:	f806 5b01 	strb.w	r5, [r6], #1
 800e360:	4602      	mov	r2, r0
 800e362:	460b      	mov	r3, r1
 800e364:	42a6      	cmp	r6, r4
 800e366:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e36a:	f04f 0200 	mov.w	r2, #0
 800e36e:	d124      	bne.n	800e3ba <_dtoa_r+0x662>
 800e370:	4bac      	ldr	r3, [pc, #688]	@ (800e624 <_dtoa_r+0x8cc>)
 800e372:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e376:	f7f1 ff61 	bl	800023c <__adddf3>
 800e37a:	4602      	mov	r2, r0
 800e37c:	460b      	mov	r3, r1
 800e37e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e382:	f7f2 fba1 	bl	8000ac8 <__aeabi_dcmpgt>
 800e386:	2800      	cmp	r0, #0
 800e388:	d145      	bne.n	800e416 <_dtoa_r+0x6be>
 800e38a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e38e:	49a5      	ldr	r1, [pc, #660]	@ (800e624 <_dtoa_r+0x8cc>)
 800e390:	2000      	movs	r0, #0
 800e392:	f7f1 ff51 	bl	8000238 <__aeabi_dsub>
 800e396:	4602      	mov	r2, r0
 800e398:	460b      	mov	r3, r1
 800e39a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e39e:	f7f2 fb75 	bl	8000a8c <__aeabi_dcmplt>
 800e3a2:	2800      	cmp	r0, #0
 800e3a4:	f43f aef5 	beq.w	800e192 <_dtoa_r+0x43a>
 800e3a8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800e3aa:	1e73      	subs	r3, r6, #1
 800e3ac:	9315      	str	r3, [sp, #84]	@ 0x54
 800e3ae:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e3b2:	2b30      	cmp	r3, #48	@ 0x30
 800e3b4:	d0f8      	beq.n	800e3a8 <_dtoa_r+0x650>
 800e3b6:	9f04      	ldr	r7, [sp, #16]
 800e3b8:	e73e      	b.n	800e238 <_dtoa_r+0x4e0>
 800e3ba:	4b9b      	ldr	r3, [pc, #620]	@ (800e628 <_dtoa_r+0x8d0>)
 800e3bc:	f7f2 f8f4 	bl	80005a8 <__aeabi_dmul>
 800e3c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e3c4:	e7bc      	b.n	800e340 <_dtoa_r+0x5e8>
 800e3c6:	d10c      	bne.n	800e3e2 <_dtoa_r+0x68a>
 800e3c8:	4b98      	ldr	r3, [pc, #608]	@ (800e62c <_dtoa_r+0x8d4>)
 800e3ca:	2200      	movs	r2, #0
 800e3cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e3d0:	f7f2 f8ea 	bl	80005a8 <__aeabi_dmul>
 800e3d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e3d8:	f7f2 fb6c 	bl	8000ab4 <__aeabi_dcmpge>
 800e3dc:	2800      	cmp	r0, #0
 800e3de:	f000 8157 	beq.w	800e690 <_dtoa_r+0x938>
 800e3e2:	2400      	movs	r4, #0
 800e3e4:	4625      	mov	r5, r4
 800e3e6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e3e8:	43db      	mvns	r3, r3
 800e3ea:	9304      	str	r3, [sp, #16]
 800e3ec:	4656      	mov	r6, sl
 800e3ee:	2700      	movs	r7, #0
 800e3f0:	4621      	mov	r1, r4
 800e3f2:	4658      	mov	r0, fp
 800e3f4:	f000 fafe 	bl	800e9f4 <_Bfree>
 800e3f8:	2d00      	cmp	r5, #0
 800e3fa:	d0dc      	beq.n	800e3b6 <_dtoa_r+0x65e>
 800e3fc:	b12f      	cbz	r7, 800e40a <_dtoa_r+0x6b2>
 800e3fe:	42af      	cmp	r7, r5
 800e400:	d003      	beq.n	800e40a <_dtoa_r+0x6b2>
 800e402:	4639      	mov	r1, r7
 800e404:	4658      	mov	r0, fp
 800e406:	f000 faf5 	bl	800e9f4 <_Bfree>
 800e40a:	4629      	mov	r1, r5
 800e40c:	4658      	mov	r0, fp
 800e40e:	f000 faf1 	bl	800e9f4 <_Bfree>
 800e412:	e7d0      	b.n	800e3b6 <_dtoa_r+0x65e>
 800e414:	9704      	str	r7, [sp, #16]
 800e416:	4633      	mov	r3, r6
 800e418:	461e      	mov	r6, r3
 800e41a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e41e:	2a39      	cmp	r2, #57	@ 0x39
 800e420:	d107      	bne.n	800e432 <_dtoa_r+0x6da>
 800e422:	459a      	cmp	sl, r3
 800e424:	d1f8      	bne.n	800e418 <_dtoa_r+0x6c0>
 800e426:	9a04      	ldr	r2, [sp, #16]
 800e428:	3201      	adds	r2, #1
 800e42a:	9204      	str	r2, [sp, #16]
 800e42c:	2230      	movs	r2, #48	@ 0x30
 800e42e:	f88a 2000 	strb.w	r2, [sl]
 800e432:	781a      	ldrb	r2, [r3, #0]
 800e434:	3201      	adds	r2, #1
 800e436:	701a      	strb	r2, [r3, #0]
 800e438:	e7bd      	b.n	800e3b6 <_dtoa_r+0x65e>
 800e43a:	4b7b      	ldr	r3, [pc, #492]	@ (800e628 <_dtoa_r+0x8d0>)
 800e43c:	2200      	movs	r2, #0
 800e43e:	f7f2 f8b3 	bl	80005a8 <__aeabi_dmul>
 800e442:	2200      	movs	r2, #0
 800e444:	2300      	movs	r3, #0
 800e446:	4604      	mov	r4, r0
 800e448:	460d      	mov	r5, r1
 800e44a:	f7f2 fb15 	bl	8000a78 <__aeabi_dcmpeq>
 800e44e:	2800      	cmp	r0, #0
 800e450:	f43f aebb 	beq.w	800e1ca <_dtoa_r+0x472>
 800e454:	e6f0      	b.n	800e238 <_dtoa_r+0x4e0>
 800e456:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e458:	2a00      	cmp	r2, #0
 800e45a:	f000 80db 	beq.w	800e614 <_dtoa_r+0x8bc>
 800e45e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e460:	2a01      	cmp	r2, #1
 800e462:	f300 80bf 	bgt.w	800e5e4 <_dtoa_r+0x88c>
 800e466:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800e468:	2a00      	cmp	r2, #0
 800e46a:	f000 80b7 	beq.w	800e5dc <_dtoa_r+0x884>
 800e46e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800e472:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e474:	4646      	mov	r6, r8
 800e476:	9a08      	ldr	r2, [sp, #32]
 800e478:	2101      	movs	r1, #1
 800e47a:	441a      	add	r2, r3
 800e47c:	4658      	mov	r0, fp
 800e47e:	4498      	add	r8, r3
 800e480:	9208      	str	r2, [sp, #32]
 800e482:	f000 fb6b 	bl	800eb5c <__i2b>
 800e486:	4605      	mov	r5, r0
 800e488:	b15e      	cbz	r6, 800e4a2 <_dtoa_r+0x74a>
 800e48a:	9b08      	ldr	r3, [sp, #32]
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	dd08      	ble.n	800e4a2 <_dtoa_r+0x74a>
 800e490:	42b3      	cmp	r3, r6
 800e492:	9a08      	ldr	r2, [sp, #32]
 800e494:	bfa8      	it	ge
 800e496:	4633      	movge	r3, r6
 800e498:	eba8 0803 	sub.w	r8, r8, r3
 800e49c:	1af6      	subs	r6, r6, r3
 800e49e:	1ad3      	subs	r3, r2, r3
 800e4a0:	9308      	str	r3, [sp, #32]
 800e4a2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e4a4:	b1f3      	cbz	r3, 800e4e4 <_dtoa_r+0x78c>
 800e4a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	f000 80b7 	beq.w	800e61c <_dtoa_r+0x8c4>
 800e4ae:	b18c      	cbz	r4, 800e4d4 <_dtoa_r+0x77c>
 800e4b0:	4629      	mov	r1, r5
 800e4b2:	4622      	mov	r2, r4
 800e4b4:	4658      	mov	r0, fp
 800e4b6:	f000 fc11 	bl	800ecdc <__pow5mult>
 800e4ba:	464a      	mov	r2, r9
 800e4bc:	4601      	mov	r1, r0
 800e4be:	4605      	mov	r5, r0
 800e4c0:	4658      	mov	r0, fp
 800e4c2:	f000 fb61 	bl	800eb88 <__multiply>
 800e4c6:	4649      	mov	r1, r9
 800e4c8:	9004      	str	r0, [sp, #16]
 800e4ca:	4658      	mov	r0, fp
 800e4cc:	f000 fa92 	bl	800e9f4 <_Bfree>
 800e4d0:	9b04      	ldr	r3, [sp, #16]
 800e4d2:	4699      	mov	r9, r3
 800e4d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e4d6:	1b1a      	subs	r2, r3, r4
 800e4d8:	d004      	beq.n	800e4e4 <_dtoa_r+0x78c>
 800e4da:	4649      	mov	r1, r9
 800e4dc:	4658      	mov	r0, fp
 800e4de:	f000 fbfd 	bl	800ecdc <__pow5mult>
 800e4e2:	4681      	mov	r9, r0
 800e4e4:	2101      	movs	r1, #1
 800e4e6:	4658      	mov	r0, fp
 800e4e8:	f000 fb38 	bl	800eb5c <__i2b>
 800e4ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e4ee:	4604      	mov	r4, r0
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	f000 81cf 	beq.w	800e894 <_dtoa_r+0xb3c>
 800e4f6:	461a      	mov	r2, r3
 800e4f8:	4601      	mov	r1, r0
 800e4fa:	4658      	mov	r0, fp
 800e4fc:	f000 fbee 	bl	800ecdc <__pow5mult>
 800e500:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e502:	2b01      	cmp	r3, #1
 800e504:	4604      	mov	r4, r0
 800e506:	f300 8095 	bgt.w	800e634 <_dtoa_r+0x8dc>
 800e50a:	9b02      	ldr	r3, [sp, #8]
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	f040 8087 	bne.w	800e620 <_dtoa_r+0x8c8>
 800e512:	9b03      	ldr	r3, [sp, #12]
 800e514:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e518:	2b00      	cmp	r3, #0
 800e51a:	f040 8089 	bne.w	800e630 <_dtoa_r+0x8d8>
 800e51e:	9b03      	ldr	r3, [sp, #12]
 800e520:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e524:	0d1b      	lsrs	r3, r3, #20
 800e526:	051b      	lsls	r3, r3, #20
 800e528:	b12b      	cbz	r3, 800e536 <_dtoa_r+0x7de>
 800e52a:	9b08      	ldr	r3, [sp, #32]
 800e52c:	3301      	adds	r3, #1
 800e52e:	9308      	str	r3, [sp, #32]
 800e530:	f108 0801 	add.w	r8, r8, #1
 800e534:	2301      	movs	r3, #1
 800e536:	930a      	str	r3, [sp, #40]	@ 0x28
 800e538:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	f000 81b0 	beq.w	800e8a0 <_dtoa_r+0xb48>
 800e540:	6923      	ldr	r3, [r4, #16]
 800e542:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e546:	6918      	ldr	r0, [r3, #16]
 800e548:	f000 fabc 	bl	800eac4 <__hi0bits>
 800e54c:	f1c0 0020 	rsb	r0, r0, #32
 800e550:	9b08      	ldr	r3, [sp, #32]
 800e552:	4418      	add	r0, r3
 800e554:	f010 001f 	ands.w	r0, r0, #31
 800e558:	d077      	beq.n	800e64a <_dtoa_r+0x8f2>
 800e55a:	f1c0 0320 	rsb	r3, r0, #32
 800e55e:	2b04      	cmp	r3, #4
 800e560:	dd6b      	ble.n	800e63a <_dtoa_r+0x8e2>
 800e562:	9b08      	ldr	r3, [sp, #32]
 800e564:	f1c0 001c 	rsb	r0, r0, #28
 800e568:	4403      	add	r3, r0
 800e56a:	4480      	add	r8, r0
 800e56c:	4406      	add	r6, r0
 800e56e:	9308      	str	r3, [sp, #32]
 800e570:	f1b8 0f00 	cmp.w	r8, #0
 800e574:	dd05      	ble.n	800e582 <_dtoa_r+0x82a>
 800e576:	4649      	mov	r1, r9
 800e578:	4642      	mov	r2, r8
 800e57a:	4658      	mov	r0, fp
 800e57c:	f000 fc08 	bl	800ed90 <__lshift>
 800e580:	4681      	mov	r9, r0
 800e582:	9b08      	ldr	r3, [sp, #32]
 800e584:	2b00      	cmp	r3, #0
 800e586:	dd05      	ble.n	800e594 <_dtoa_r+0x83c>
 800e588:	4621      	mov	r1, r4
 800e58a:	461a      	mov	r2, r3
 800e58c:	4658      	mov	r0, fp
 800e58e:	f000 fbff 	bl	800ed90 <__lshift>
 800e592:	4604      	mov	r4, r0
 800e594:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e596:	2b00      	cmp	r3, #0
 800e598:	d059      	beq.n	800e64e <_dtoa_r+0x8f6>
 800e59a:	4621      	mov	r1, r4
 800e59c:	4648      	mov	r0, r9
 800e59e:	f000 fc63 	bl	800ee68 <__mcmp>
 800e5a2:	2800      	cmp	r0, #0
 800e5a4:	da53      	bge.n	800e64e <_dtoa_r+0x8f6>
 800e5a6:	1e7b      	subs	r3, r7, #1
 800e5a8:	9304      	str	r3, [sp, #16]
 800e5aa:	4649      	mov	r1, r9
 800e5ac:	2300      	movs	r3, #0
 800e5ae:	220a      	movs	r2, #10
 800e5b0:	4658      	mov	r0, fp
 800e5b2:	f000 fa41 	bl	800ea38 <__multadd>
 800e5b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e5b8:	4681      	mov	r9, r0
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	f000 8172 	beq.w	800e8a4 <_dtoa_r+0xb4c>
 800e5c0:	2300      	movs	r3, #0
 800e5c2:	4629      	mov	r1, r5
 800e5c4:	220a      	movs	r2, #10
 800e5c6:	4658      	mov	r0, fp
 800e5c8:	f000 fa36 	bl	800ea38 <__multadd>
 800e5cc:	9b00      	ldr	r3, [sp, #0]
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	4605      	mov	r5, r0
 800e5d2:	dc67      	bgt.n	800e6a4 <_dtoa_r+0x94c>
 800e5d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e5d6:	2b02      	cmp	r3, #2
 800e5d8:	dc41      	bgt.n	800e65e <_dtoa_r+0x906>
 800e5da:	e063      	b.n	800e6a4 <_dtoa_r+0x94c>
 800e5dc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e5de:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800e5e2:	e746      	b.n	800e472 <_dtoa_r+0x71a>
 800e5e4:	9b07      	ldr	r3, [sp, #28]
 800e5e6:	1e5c      	subs	r4, r3, #1
 800e5e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e5ea:	42a3      	cmp	r3, r4
 800e5ec:	bfbf      	itttt	lt
 800e5ee:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800e5f0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800e5f2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800e5f4:	1ae3      	sublt	r3, r4, r3
 800e5f6:	bfb4      	ite	lt
 800e5f8:	18d2      	addlt	r2, r2, r3
 800e5fa:	1b1c      	subge	r4, r3, r4
 800e5fc:	9b07      	ldr	r3, [sp, #28]
 800e5fe:	bfbc      	itt	lt
 800e600:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800e602:	2400      	movlt	r4, #0
 800e604:	2b00      	cmp	r3, #0
 800e606:	bfb5      	itete	lt
 800e608:	eba8 0603 	sublt.w	r6, r8, r3
 800e60c:	9b07      	ldrge	r3, [sp, #28]
 800e60e:	2300      	movlt	r3, #0
 800e610:	4646      	movge	r6, r8
 800e612:	e730      	b.n	800e476 <_dtoa_r+0x71e>
 800e614:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e616:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800e618:	4646      	mov	r6, r8
 800e61a:	e735      	b.n	800e488 <_dtoa_r+0x730>
 800e61c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e61e:	e75c      	b.n	800e4da <_dtoa_r+0x782>
 800e620:	2300      	movs	r3, #0
 800e622:	e788      	b.n	800e536 <_dtoa_r+0x7de>
 800e624:	3fe00000 	.word	0x3fe00000
 800e628:	40240000 	.word	0x40240000
 800e62c:	40140000 	.word	0x40140000
 800e630:	9b02      	ldr	r3, [sp, #8]
 800e632:	e780      	b.n	800e536 <_dtoa_r+0x7de>
 800e634:	2300      	movs	r3, #0
 800e636:	930a      	str	r3, [sp, #40]	@ 0x28
 800e638:	e782      	b.n	800e540 <_dtoa_r+0x7e8>
 800e63a:	d099      	beq.n	800e570 <_dtoa_r+0x818>
 800e63c:	9a08      	ldr	r2, [sp, #32]
 800e63e:	331c      	adds	r3, #28
 800e640:	441a      	add	r2, r3
 800e642:	4498      	add	r8, r3
 800e644:	441e      	add	r6, r3
 800e646:	9208      	str	r2, [sp, #32]
 800e648:	e792      	b.n	800e570 <_dtoa_r+0x818>
 800e64a:	4603      	mov	r3, r0
 800e64c:	e7f6      	b.n	800e63c <_dtoa_r+0x8e4>
 800e64e:	9b07      	ldr	r3, [sp, #28]
 800e650:	9704      	str	r7, [sp, #16]
 800e652:	2b00      	cmp	r3, #0
 800e654:	dc20      	bgt.n	800e698 <_dtoa_r+0x940>
 800e656:	9300      	str	r3, [sp, #0]
 800e658:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e65a:	2b02      	cmp	r3, #2
 800e65c:	dd1e      	ble.n	800e69c <_dtoa_r+0x944>
 800e65e:	9b00      	ldr	r3, [sp, #0]
 800e660:	2b00      	cmp	r3, #0
 800e662:	f47f aec0 	bne.w	800e3e6 <_dtoa_r+0x68e>
 800e666:	4621      	mov	r1, r4
 800e668:	2205      	movs	r2, #5
 800e66a:	4658      	mov	r0, fp
 800e66c:	f000 f9e4 	bl	800ea38 <__multadd>
 800e670:	4601      	mov	r1, r0
 800e672:	4604      	mov	r4, r0
 800e674:	4648      	mov	r0, r9
 800e676:	f000 fbf7 	bl	800ee68 <__mcmp>
 800e67a:	2800      	cmp	r0, #0
 800e67c:	f77f aeb3 	ble.w	800e3e6 <_dtoa_r+0x68e>
 800e680:	4656      	mov	r6, sl
 800e682:	2331      	movs	r3, #49	@ 0x31
 800e684:	f806 3b01 	strb.w	r3, [r6], #1
 800e688:	9b04      	ldr	r3, [sp, #16]
 800e68a:	3301      	adds	r3, #1
 800e68c:	9304      	str	r3, [sp, #16]
 800e68e:	e6ae      	b.n	800e3ee <_dtoa_r+0x696>
 800e690:	9c07      	ldr	r4, [sp, #28]
 800e692:	9704      	str	r7, [sp, #16]
 800e694:	4625      	mov	r5, r4
 800e696:	e7f3      	b.n	800e680 <_dtoa_r+0x928>
 800e698:	9b07      	ldr	r3, [sp, #28]
 800e69a:	9300      	str	r3, [sp, #0]
 800e69c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	f000 8104 	beq.w	800e8ac <_dtoa_r+0xb54>
 800e6a4:	2e00      	cmp	r6, #0
 800e6a6:	dd05      	ble.n	800e6b4 <_dtoa_r+0x95c>
 800e6a8:	4629      	mov	r1, r5
 800e6aa:	4632      	mov	r2, r6
 800e6ac:	4658      	mov	r0, fp
 800e6ae:	f000 fb6f 	bl	800ed90 <__lshift>
 800e6b2:	4605      	mov	r5, r0
 800e6b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d05a      	beq.n	800e770 <_dtoa_r+0xa18>
 800e6ba:	6869      	ldr	r1, [r5, #4]
 800e6bc:	4658      	mov	r0, fp
 800e6be:	f000 f959 	bl	800e974 <_Balloc>
 800e6c2:	4606      	mov	r6, r0
 800e6c4:	b928      	cbnz	r0, 800e6d2 <_dtoa_r+0x97a>
 800e6c6:	4b84      	ldr	r3, [pc, #528]	@ (800e8d8 <_dtoa_r+0xb80>)
 800e6c8:	4602      	mov	r2, r0
 800e6ca:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800e6ce:	f7ff bb5a 	b.w	800dd86 <_dtoa_r+0x2e>
 800e6d2:	692a      	ldr	r2, [r5, #16]
 800e6d4:	3202      	adds	r2, #2
 800e6d6:	0092      	lsls	r2, r2, #2
 800e6d8:	f105 010c 	add.w	r1, r5, #12
 800e6dc:	300c      	adds	r0, #12
 800e6de:	f7ff faa2 	bl	800dc26 <memcpy>
 800e6e2:	2201      	movs	r2, #1
 800e6e4:	4631      	mov	r1, r6
 800e6e6:	4658      	mov	r0, fp
 800e6e8:	f000 fb52 	bl	800ed90 <__lshift>
 800e6ec:	f10a 0301 	add.w	r3, sl, #1
 800e6f0:	9307      	str	r3, [sp, #28]
 800e6f2:	9b00      	ldr	r3, [sp, #0]
 800e6f4:	4453      	add	r3, sl
 800e6f6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e6f8:	9b02      	ldr	r3, [sp, #8]
 800e6fa:	f003 0301 	and.w	r3, r3, #1
 800e6fe:	462f      	mov	r7, r5
 800e700:	930a      	str	r3, [sp, #40]	@ 0x28
 800e702:	4605      	mov	r5, r0
 800e704:	9b07      	ldr	r3, [sp, #28]
 800e706:	4621      	mov	r1, r4
 800e708:	3b01      	subs	r3, #1
 800e70a:	4648      	mov	r0, r9
 800e70c:	9300      	str	r3, [sp, #0]
 800e70e:	f7ff fa98 	bl	800dc42 <quorem>
 800e712:	4639      	mov	r1, r7
 800e714:	9002      	str	r0, [sp, #8]
 800e716:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800e71a:	4648      	mov	r0, r9
 800e71c:	f000 fba4 	bl	800ee68 <__mcmp>
 800e720:	462a      	mov	r2, r5
 800e722:	9008      	str	r0, [sp, #32]
 800e724:	4621      	mov	r1, r4
 800e726:	4658      	mov	r0, fp
 800e728:	f000 fbba 	bl	800eea0 <__mdiff>
 800e72c:	68c2      	ldr	r2, [r0, #12]
 800e72e:	4606      	mov	r6, r0
 800e730:	bb02      	cbnz	r2, 800e774 <_dtoa_r+0xa1c>
 800e732:	4601      	mov	r1, r0
 800e734:	4648      	mov	r0, r9
 800e736:	f000 fb97 	bl	800ee68 <__mcmp>
 800e73a:	4602      	mov	r2, r0
 800e73c:	4631      	mov	r1, r6
 800e73e:	4658      	mov	r0, fp
 800e740:	920e      	str	r2, [sp, #56]	@ 0x38
 800e742:	f000 f957 	bl	800e9f4 <_Bfree>
 800e746:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e748:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e74a:	9e07      	ldr	r6, [sp, #28]
 800e74c:	ea43 0102 	orr.w	r1, r3, r2
 800e750:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e752:	4319      	orrs	r1, r3
 800e754:	d110      	bne.n	800e778 <_dtoa_r+0xa20>
 800e756:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e75a:	d029      	beq.n	800e7b0 <_dtoa_r+0xa58>
 800e75c:	9b08      	ldr	r3, [sp, #32]
 800e75e:	2b00      	cmp	r3, #0
 800e760:	dd02      	ble.n	800e768 <_dtoa_r+0xa10>
 800e762:	9b02      	ldr	r3, [sp, #8]
 800e764:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800e768:	9b00      	ldr	r3, [sp, #0]
 800e76a:	f883 8000 	strb.w	r8, [r3]
 800e76e:	e63f      	b.n	800e3f0 <_dtoa_r+0x698>
 800e770:	4628      	mov	r0, r5
 800e772:	e7bb      	b.n	800e6ec <_dtoa_r+0x994>
 800e774:	2201      	movs	r2, #1
 800e776:	e7e1      	b.n	800e73c <_dtoa_r+0x9e4>
 800e778:	9b08      	ldr	r3, [sp, #32]
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	db04      	blt.n	800e788 <_dtoa_r+0xa30>
 800e77e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e780:	430b      	orrs	r3, r1
 800e782:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e784:	430b      	orrs	r3, r1
 800e786:	d120      	bne.n	800e7ca <_dtoa_r+0xa72>
 800e788:	2a00      	cmp	r2, #0
 800e78a:	dded      	ble.n	800e768 <_dtoa_r+0xa10>
 800e78c:	4649      	mov	r1, r9
 800e78e:	2201      	movs	r2, #1
 800e790:	4658      	mov	r0, fp
 800e792:	f000 fafd 	bl	800ed90 <__lshift>
 800e796:	4621      	mov	r1, r4
 800e798:	4681      	mov	r9, r0
 800e79a:	f000 fb65 	bl	800ee68 <__mcmp>
 800e79e:	2800      	cmp	r0, #0
 800e7a0:	dc03      	bgt.n	800e7aa <_dtoa_r+0xa52>
 800e7a2:	d1e1      	bne.n	800e768 <_dtoa_r+0xa10>
 800e7a4:	f018 0f01 	tst.w	r8, #1
 800e7a8:	d0de      	beq.n	800e768 <_dtoa_r+0xa10>
 800e7aa:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e7ae:	d1d8      	bne.n	800e762 <_dtoa_r+0xa0a>
 800e7b0:	9a00      	ldr	r2, [sp, #0]
 800e7b2:	2339      	movs	r3, #57	@ 0x39
 800e7b4:	7013      	strb	r3, [r2, #0]
 800e7b6:	4633      	mov	r3, r6
 800e7b8:	461e      	mov	r6, r3
 800e7ba:	3b01      	subs	r3, #1
 800e7bc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800e7c0:	2a39      	cmp	r2, #57	@ 0x39
 800e7c2:	d052      	beq.n	800e86a <_dtoa_r+0xb12>
 800e7c4:	3201      	adds	r2, #1
 800e7c6:	701a      	strb	r2, [r3, #0]
 800e7c8:	e612      	b.n	800e3f0 <_dtoa_r+0x698>
 800e7ca:	2a00      	cmp	r2, #0
 800e7cc:	dd07      	ble.n	800e7de <_dtoa_r+0xa86>
 800e7ce:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e7d2:	d0ed      	beq.n	800e7b0 <_dtoa_r+0xa58>
 800e7d4:	9a00      	ldr	r2, [sp, #0]
 800e7d6:	f108 0301 	add.w	r3, r8, #1
 800e7da:	7013      	strb	r3, [r2, #0]
 800e7dc:	e608      	b.n	800e3f0 <_dtoa_r+0x698>
 800e7de:	9b07      	ldr	r3, [sp, #28]
 800e7e0:	9a07      	ldr	r2, [sp, #28]
 800e7e2:	f803 8c01 	strb.w	r8, [r3, #-1]
 800e7e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e7e8:	4293      	cmp	r3, r2
 800e7ea:	d028      	beq.n	800e83e <_dtoa_r+0xae6>
 800e7ec:	4649      	mov	r1, r9
 800e7ee:	2300      	movs	r3, #0
 800e7f0:	220a      	movs	r2, #10
 800e7f2:	4658      	mov	r0, fp
 800e7f4:	f000 f920 	bl	800ea38 <__multadd>
 800e7f8:	42af      	cmp	r7, r5
 800e7fa:	4681      	mov	r9, r0
 800e7fc:	f04f 0300 	mov.w	r3, #0
 800e800:	f04f 020a 	mov.w	r2, #10
 800e804:	4639      	mov	r1, r7
 800e806:	4658      	mov	r0, fp
 800e808:	d107      	bne.n	800e81a <_dtoa_r+0xac2>
 800e80a:	f000 f915 	bl	800ea38 <__multadd>
 800e80e:	4607      	mov	r7, r0
 800e810:	4605      	mov	r5, r0
 800e812:	9b07      	ldr	r3, [sp, #28]
 800e814:	3301      	adds	r3, #1
 800e816:	9307      	str	r3, [sp, #28]
 800e818:	e774      	b.n	800e704 <_dtoa_r+0x9ac>
 800e81a:	f000 f90d 	bl	800ea38 <__multadd>
 800e81e:	4629      	mov	r1, r5
 800e820:	4607      	mov	r7, r0
 800e822:	2300      	movs	r3, #0
 800e824:	220a      	movs	r2, #10
 800e826:	4658      	mov	r0, fp
 800e828:	f000 f906 	bl	800ea38 <__multadd>
 800e82c:	4605      	mov	r5, r0
 800e82e:	e7f0      	b.n	800e812 <_dtoa_r+0xaba>
 800e830:	9b00      	ldr	r3, [sp, #0]
 800e832:	2b00      	cmp	r3, #0
 800e834:	bfcc      	ite	gt
 800e836:	461e      	movgt	r6, r3
 800e838:	2601      	movle	r6, #1
 800e83a:	4456      	add	r6, sl
 800e83c:	2700      	movs	r7, #0
 800e83e:	4649      	mov	r1, r9
 800e840:	2201      	movs	r2, #1
 800e842:	4658      	mov	r0, fp
 800e844:	f000 faa4 	bl	800ed90 <__lshift>
 800e848:	4621      	mov	r1, r4
 800e84a:	4681      	mov	r9, r0
 800e84c:	f000 fb0c 	bl	800ee68 <__mcmp>
 800e850:	2800      	cmp	r0, #0
 800e852:	dcb0      	bgt.n	800e7b6 <_dtoa_r+0xa5e>
 800e854:	d102      	bne.n	800e85c <_dtoa_r+0xb04>
 800e856:	f018 0f01 	tst.w	r8, #1
 800e85a:	d1ac      	bne.n	800e7b6 <_dtoa_r+0xa5e>
 800e85c:	4633      	mov	r3, r6
 800e85e:	461e      	mov	r6, r3
 800e860:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e864:	2a30      	cmp	r2, #48	@ 0x30
 800e866:	d0fa      	beq.n	800e85e <_dtoa_r+0xb06>
 800e868:	e5c2      	b.n	800e3f0 <_dtoa_r+0x698>
 800e86a:	459a      	cmp	sl, r3
 800e86c:	d1a4      	bne.n	800e7b8 <_dtoa_r+0xa60>
 800e86e:	9b04      	ldr	r3, [sp, #16]
 800e870:	3301      	adds	r3, #1
 800e872:	9304      	str	r3, [sp, #16]
 800e874:	2331      	movs	r3, #49	@ 0x31
 800e876:	f88a 3000 	strb.w	r3, [sl]
 800e87a:	e5b9      	b.n	800e3f0 <_dtoa_r+0x698>
 800e87c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e87e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800e8dc <_dtoa_r+0xb84>
 800e882:	b11b      	cbz	r3, 800e88c <_dtoa_r+0xb34>
 800e884:	f10a 0308 	add.w	r3, sl, #8
 800e888:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800e88a:	6013      	str	r3, [r2, #0]
 800e88c:	4650      	mov	r0, sl
 800e88e:	b019      	add	sp, #100	@ 0x64
 800e890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e894:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e896:	2b01      	cmp	r3, #1
 800e898:	f77f ae37 	ble.w	800e50a <_dtoa_r+0x7b2>
 800e89c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e89e:	930a      	str	r3, [sp, #40]	@ 0x28
 800e8a0:	2001      	movs	r0, #1
 800e8a2:	e655      	b.n	800e550 <_dtoa_r+0x7f8>
 800e8a4:	9b00      	ldr	r3, [sp, #0]
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	f77f aed6 	ble.w	800e658 <_dtoa_r+0x900>
 800e8ac:	4656      	mov	r6, sl
 800e8ae:	4621      	mov	r1, r4
 800e8b0:	4648      	mov	r0, r9
 800e8b2:	f7ff f9c6 	bl	800dc42 <quorem>
 800e8b6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800e8ba:	f806 8b01 	strb.w	r8, [r6], #1
 800e8be:	9b00      	ldr	r3, [sp, #0]
 800e8c0:	eba6 020a 	sub.w	r2, r6, sl
 800e8c4:	4293      	cmp	r3, r2
 800e8c6:	ddb3      	ble.n	800e830 <_dtoa_r+0xad8>
 800e8c8:	4649      	mov	r1, r9
 800e8ca:	2300      	movs	r3, #0
 800e8cc:	220a      	movs	r2, #10
 800e8ce:	4658      	mov	r0, fp
 800e8d0:	f000 f8b2 	bl	800ea38 <__multadd>
 800e8d4:	4681      	mov	r9, r0
 800e8d6:	e7ea      	b.n	800e8ae <_dtoa_r+0xb56>
 800e8d8:	0801318c 	.word	0x0801318c
 800e8dc:	08013110 	.word	0x08013110

0800e8e0 <_free_r>:
 800e8e0:	b538      	push	{r3, r4, r5, lr}
 800e8e2:	4605      	mov	r5, r0
 800e8e4:	2900      	cmp	r1, #0
 800e8e6:	d041      	beq.n	800e96c <_free_r+0x8c>
 800e8e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e8ec:	1f0c      	subs	r4, r1, #4
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	bfb8      	it	lt
 800e8f2:	18e4      	addlt	r4, r4, r3
 800e8f4:	f7fe f994 	bl	800cc20 <__malloc_lock>
 800e8f8:	4a1d      	ldr	r2, [pc, #116]	@ (800e970 <_free_r+0x90>)
 800e8fa:	6813      	ldr	r3, [r2, #0]
 800e8fc:	b933      	cbnz	r3, 800e90c <_free_r+0x2c>
 800e8fe:	6063      	str	r3, [r4, #4]
 800e900:	6014      	str	r4, [r2, #0]
 800e902:	4628      	mov	r0, r5
 800e904:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e908:	f7fe b990 	b.w	800cc2c <__malloc_unlock>
 800e90c:	42a3      	cmp	r3, r4
 800e90e:	d908      	bls.n	800e922 <_free_r+0x42>
 800e910:	6820      	ldr	r0, [r4, #0]
 800e912:	1821      	adds	r1, r4, r0
 800e914:	428b      	cmp	r3, r1
 800e916:	bf01      	itttt	eq
 800e918:	6819      	ldreq	r1, [r3, #0]
 800e91a:	685b      	ldreq	r3, [r3, #4]
 800e91c:	1809      	addeq	r1, r1, r0
 800e91e:	6021      	streq	r1, [r4, #0]
 800e920:	e7ed      	b.n	800e8fe <_free_r+0x1e>
 800e922:	461a      	mov	r2, r3
 800e924:	685b      	ldr	r3, [r3, #4]
 800e926:	b10b      	cbz	r3, 800e92c <_free_r+0x4c>
 800e928:	42a3      	cmp	r3, r4
 800e92a:	d9fa      	bls.n	800e922 <_free_r+0x42>
 800e92c:	6811      	ldr	r1, [r2, #0]
 800e92e:	1850      	adds	r0, r2, r1
 800e930:	42a0      	cmp	r0, r4
 800e932:	d10b      	bne.n	800e94c <_free_r+0x6c>
 800e934:	6820      	ldr	r0, [r4, #0]
 800e936:	4401      	add	r1, r0
 800e938:	1850      	adds	r0, r2, r1
 800e93a:	4283      	cmp	r3, r0
 800e93c:	6011      	str	r1, [r2, #0]
 800e93e:	d1e0      	bne.n	800e902 <_free_r+0x22>
 800e940:	6818      	ldr	r0, [r3, #0]
 800e942:	685b      	ldr	r3, [r3, #4]
 800e944:	6053      	str	r3, [r2, #4]
 800e946:	4408      	add	r0, r1
 800e948:	6010      	str	r0, [r2, #0]
 800e94a:	e7da      	b.n	800e902 <_free_r+0x22>
 800e94c:	d902      	bls.n	800e954 <_free_r+0x74>
 800e94e:	230c      	movs	r3, #12
 800e950:	602b      	str	r3, [r5, #0]
 800e952:	e7d6      	b.n	800e902 <_free_r+0x22>
 800e954:	6820      	ldr	r0, [r4, #0]
 800e956:	1821      	adds	r1, r4, r0
 800e958:	428b      	cmp	r3, r1
 800e95a:	bf04      	itt	eq
 800e95c:	6819      	ldreq	r1, [r3, #0]
 800e95e:	685b      	ldreq	r3, [r3, #4]
 800e960:	6063      	str	r3, [r4, #4]
 800e962:	bf04      	itt	eq
 800e964:	1809      	addeq	r1, r1, r0
 800e966:	6021      	streq	r1, [r4, #0]
 800e968:	6054      	str	r4, [r2, #4]
 800e96a:	e7ca      	b.n	800e902 <_free_r+0x22>
 800e96c:	bd38      	pop	{r3, r4, r5, pc}
 800e96e:	bf00      	nop
 800e970:	200115ec 	.word	0x200115ec

0800e974 <_Balloc>:
 800e974:	b570      	push	{r4, r5, r6, lr}
 800e976:	69c6      	ldr	r6, [r0, #28]
 800e978:	4604      	mov	r4, r0
 800e97a:	460d      	mov	r5, r1
 800e97c:	b976      	cbnz	r6, 800e99c <_Balloc+0x28>
 800e97e:	2010      	movs	r0, #16
 800e980:	f7fe f89c 	bl	800cabc <malloc>
 800e984:	4602      	mov	r2, r0
 800e986:	61e0      	str	r0, [r4, #28]
 800e988:	b920      	cbnz	r0, 800e994 <_Balloc+0x20>
 800e98a:	4b18      	ldr	r3, [pc, #96]	@ (800e9ec <_Balloc+0x78>)
 800e98c:	4818      	ldr	r0, [pc, #96]	@ (800e9f0 <_Balloc+0x7c>)
 800e98e:	216b      	movs	r1, #107	@ 0x6b
 800e990:	f000 ff56 	bl	800f840 <__assert_func>
 800e994:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e998:	6006      	str	r6, [r0, #0]
 800e99a:	60c6      	str	r6, [r0, #12]
 800e99c:	69e6      	ldr	r6, [r4, #28]
 800e99e:	68f3      	ldr	r3, [r6, #12]
 800e9a0:	b183      	cbz	r3, 800e9c4 <_Balloc+0x50>
 800e9a2:	69e3      	ldr	r3, [r4, #28]
 800e9a4:	68db      	ldr	r3, [r3, #12]
 800e9a6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e9aa:	b9b8      	cbnz	r0, 800e9dc <_Balloc+0x68>
 800e9ac:	2101      	movs	r1, #1
 800e9ae:	fa01 f605 	lsl.w	r6, r1, r5
 800e9b2:	1d72      	adds	r2, r6, #5
 800e9b4:	0092      	lsls	r2, r2, #2
 800e9b6:	4620      	mov	r0, r4
 800e9b8:	f000 ff60 	bl	800f87c <_calloc_r>
 800e9bc:	b160      	cbz	r0, 800e9d8 <_Balloc+0x64>
 800e9be:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e9c2:	e00e      	b.n	800e9e2 <_Balloc+0x6e>
 800e9c4:	2221      	movs	r2, #33	@ 0x21
 800e9c6:	2104      	movs	r1, #4
 800e9c8:	4620      	mov	r0, r4
 800e9ca:	f000 ff57 	bl	800f87c <_calloc_r>
 800e9ce:	69e3      	ldr	r3, [r4, #28]
 800e9d0:	60f0      	str	r0, [r6, #12]
 800e9d2:	68db      	ldr	r3, [r3, #12]
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d1e4      	bne.n	800e9a2 <_Balloc+0x2e>
 800e9d8:	2000      	movs	r0, #0
 800e9da:	bd70      	pop	{r4, r5, r6, pc}
 800e9dc:	6802      	ldr	r2, [r0, #0]
 800e9de:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e9e2:	2300      	movs	r3, #0
 800e9e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e9e8:	e7f7      	b.n	800e9da <_Balloc+0x66>
 800e9ea:	bf00      	nop
 800e9ec:	0801311d 	.word	0x0801311d
 800e9f0:	0801319d 	.word	0x0801319d

0800e9f4 <_Bfree>:
 800e9f4:	b570      	push	{r4, r5, r6, lr}
 800e9f6:	69c6      	ldr	r6, [r0, #28]
 800e9f8:	4605      	mov	r5, r0
 800e9fa:	460c      	mov	r4, r1
 800e9fc:	b976      	cbnz	r6, 800ea1c <_Bfree+0x28>
 800e9fe:	2010      	movs	r0, #16
 800ea00:	f7fe f85c 	bl	800cabc <malloc>
 800ea04:	4602      	mov	r2, r0
 800ea06:	61e8      	str	r0, [r5, #28]
 800ea08:	b920      	cbnz	r0, 800ea14 <_Bfree+0x20>
 800ea0a:	4b09      	ldr	r3, [pc, #36]	@ (800ea30 <_Bfree+0x3c>)
 800ea0c:	4809      	ldr	r0, [pc, #36]	@ (800ea34 <_Bfree+0x40>)
 800ea0e:	218f      	movs	r1, #143	@ 0x8f
 800ea10:	f000 ff16 	bl	800f840 <__assert_func>
 800ea14:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ea18:	6006      	str	r6, [r0, #0]
 800ea1a:	60c6      	str	r6, [r0, #12]
 800ea1c:	b13c      	cbz	r4, 800ea2e <_Bfree+0x3a>
 800ea1e:	69eb      	ldr	r3, [r5, #28]
 800ea20:	6862      	ldr	r2, [r4, #4]
 800ea22:	68db      	ldr	r3, [r3, #12]
 800ea24:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ea28:	6021      	str	r1, [r4, #0]
 800ea2a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ea2e:	bd70      	pop	{r4, r5, r6, pc}
 800ea30:	0801311d 	.word	0x0801311d
 800ea34:	0801319d 	.word	0x0801319d

0800ea38 <__multadd>:
 800ea38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea3c:	690d      	ldr	r5, [r1, #16]
 800ea3e:	4607      	mov	r7, r0
 800ea40:	460c      	mov	r4, r1
 800ea42:	461e      	mov	r6, r3
 800ea44:	f101 0c14 	add.w	ip, r1, #20
 800ea48:	2000      	movs	r0, #0
 800ea4a:	f8dc 3000 	ldr.w	r3, [ip]
 800ea4e:	b299      	uxth	r1, r3
 800ea50:	fb02 6101 	mla	r1, r2, r1, r6
 800ea54:	0c1e      	lsrs	r6, r3, #16
 800ea56:	0c0b      	lsrs	r3, r1, #16
 800ea58:	fb02 3306 	mla	r3, r2, r6, r3
 800ea5c:	b289      	uxth	r1, r1
 800ea5e:	3001      	adds	r0, #1
 800ea60:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ea64:	4285      	cmp	r5, r0
 800ea66:	f84c 1b04 	str.w	r1, [ip], #4
 800ea6a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ea6e:	dcec      	bgt.n	800ea4a <__multadd+0x12>
 800ea70:	b30e      	cbz	r6, 800eab6 <__multadd+0x7e>
 800ea72:	68a3      	ldr	r3, [r4, #8]
 800ea74:	42ab      	cmp	r3, r5
 800ea76:	dc19      	bgt.n	800eaac <__multadd+0x74>
 800ea78:	6861      	ldr	r1, [r4, #4]
 800ea7a:	4638      	mov	r0, r7
 800ea7c:	3101      	adds	r1, #1
 800ea7e:	f7ff ff79 	bl	800e974 <_Balloc>
 800ea82:	4680      	mov	r8, r0
 800ea84:	b928      	cbnz	r0, 800ea92 <__multadd+0x5a>
 800ea86:	4602      	mov	r2, r0
 800ea88:	4b0c      	ldr	r3, [pc, #48]	@ (800eabc <__multadd+0x84>)
 800ea8a:	480d      	ldr	r0, [pc, #52]	@ (800eac0 <__multadd+0x88>)
 800ea8c:	21ba      	movs	r1, #186	@ 0xba
 800ea8e:	f000 fed7 	bl	800f840 <__assert_func>
 800ea92:	6922      	ldr	r2, [r4, #16]
 800ea94:	3202      	adds	r2, #2
 800ea96:	f104 010c 	add.w	r1, r4, #12
 800ea9a:	0092      	lsls	r2, r2, #2
 800ea9c:	300c      	adds	r0, #12
 800ea9e:	f7ff f8c2 	bl	800dc26 <memcpy>
 800eaa2:	4621      	mov	r1, r4
 800eaa4:	4638      	mov	r0, r7
 800eaa6:	f7ff ffa5 	bl	800e9f4 <_Bfree>
 800eaaa:	4644      	mov	r4, r8
 800eaac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800eab0:	3501      	adds	r5, #1
 800eab2:	615e      	str	r6, [r3, #20]
 800eab4:	6125      	str	r5, [r4, #16]
 800eab6:	4620      	mov	r0, r4
 800eab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eabc:	0801318c 	.word	0x0801318c
 800eac0:	0801319d 	.word	0x0801319d

0800eac4 <__hi0bits>:
 800eac4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800eac8:	4603      	mov	r3, r0
 800eaca:	bf36      	itet	cc
 800eacc:	0403      	lslcc	r3, r0, #16
 800eace:	2000      	movcs	r0, #0
 800ead0:	2010      	movcc	r0, #16
 800ead2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ead6:	bf3c      	itt	cc
 800ead8:	021b      	lslcc	r3, r3, #8
 800eada:	3008      	addcc	r0, #8
 800eadc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800eae0:	bf3c      	itt	cc
 800eae2:	011b      	lslcc	r3, r3, #4
 800eae4:	3004      	addcc	r0, #4
 800eae6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800eaea:	bf3c      	itt	cc
 800eaec:	009b      	lslcc	r3, r3, #2
 800eaee:	3002      	addcc	r0, #2
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	db05      	blt.n	800eb00 <__hi0bits+0x3c>
 800eaf4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800eaf8:	f100 0001 	add.w	r0, r0, #1
 800eafc:	bf08      	it	eq
 800eafe:	2020      	moveq	r0, #32
 800eb00:	4770      	bx	lr

0800eb02 <__lo0bits>:
 800eb02:	6803      	ldr	r3, [r0, #0]
 800eb04:	4602      	mov	r2, r0
 800eb06:	f013 0007 	ands.w	r0, r3, #7
 800eb0a:	d00b      	beq.n	800eb24 <__lo0bits+0x22>
 800eb0c:	07d9      	lsls	r1, r3, #31
 800eb0e:	d421      	bmi.n	800eb54 <__lo0bits+0x52>
 800eb10:	0798      	lsls	r0, r3, #30
 800eb12:	bf49      	itett	mi
 800eb14:	085b      	lsrmi	r3, r3, #1
 800eb16:	089b      	lsrpl	r3, r3, #2
 800eb18:	2001      	movmi	r0, #1
 800eb1a:	6013      	strmi	r3, [r2, #0]
 800eb1c:	bf5c      	itt	pl
 800eb1e:	6013      	strpl	r3, [r2, #0]
 800eb20:	2002      	movpl	r0, #2
 800eb22:	4770      	bx	lr
 800eb24:	b299      	uxth	r1, r3
 800eb26:	b909      	cbnz	r1, 800eb2c <__lo0bits+0x2a>
 800eb28:	0c1b      	lsrs	r3, r3, #16
 800eb2a:	2010      	movs	r0, #16
 800eb2c:	b2d9      	uxtb	r1, r3
 800eb2e:	b909      	cbnz	r1, 800eb34 <__lo0bits+0x32>
 800eb30:	3008      	adds	r0, #8
 800eb32:	0a1b      	lsrs	r3, r3, #8
 800eb34:	0719      	lsls	r1, r3, #28
 800eb36:	bf04      	itt	eq
 800eb38:	091b      	lsreq	r3, r3, #4
 800eb3a:	3004      	addeq	r0, #4
 800eb3c:	0799      	lsls	r1, r3, #30
 800eb3e:	bf04      	itt	eq
 800eb40:	089b      	lsreq	r3, r3, #2
 800eb42:	3002      	addeq	r0, #2
 800eb44:	07d9      	lsls	r1, r3, #31
 800eb46:	d403      	bmi.n	800eb50 <__lo0bits+0x4e>
 800eb48:	085b      	lsrs	r3, r3, #1
 800eb4a:	f100 0001 	add.w	r0, r0, #1
 800eb4e:	d003      	beq.n	800eb58 <__lo0bits+0x56>
 800eb50:	6013      	str	r3, [r2, #0]
 800eb52:	4770      	bx	lr
 800eb54:	2000      	movs	r0, #0
 800eb56:	4770      	bx	lr
 800eb58:	2020      	movs	r0, #32
 800eb5a:	4770      	bx	lr

0800eb5c <__i2b>:
 800eb5c:	b510      	push	{r4, lr}
 800eb5e:	460c      	mov	r4, r1
 800eb60:	2101      	movs	r1, #1
 800eb62:	f7ff ff07 	bl	800e974 <_Balloc>
 800eb66:	4602      	mov	r2, r0
 800eb68:	b928      	cbnz	r0, 800eb76 <__i2b+0x1a>
 800eb6a:	4b05      	ldr	r3, [pc, #20]	@ (800eb80 <__i2b+0x24>)
 800eb6c:	4805      	ldr	r0, [pc, #20]	@ (800eb84 <__i2b+0x28>)
 800eb6e:	f240 1145 	movw	r1, #325	@ 0x145
 800eb72:	f000 fe65 	bl	800f840 <__assert_func>
 800eb76:	2301      	movs	r3, #1
 800eb78:	6144      	str	r4, [r0, #20]
 800eb7a:	6103      	str	r3, [r0, #16]
 800eb7c:	bd10      	pop	{r4, pc}
 800eb7e:	bf00      	nop
 800eb80:	0801318c 	.word	0x0801318c
 800eb84:	0801319d 	.word	0x0801319d

0800eb88 <__multiply>:
 800eb88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb8c:	4614      	mov	r4, r2
 800eb8e:	690a      	ldr	r2, [r1, #16]
 800eb90:	6923      	ldr	r3, [r4, #16]
 800eb92:	429a      	cmp	r2, r3
 800eb94:	bfa8      	it	ge
 800eb96:	4623      	movge	r3, r4
 800eb98:	460f      	mov	r7, r1
 800eb9a:	bfa4      	itt	ge
 800eb9c:	460c      	movge	r4, r1
 800eb9e:	461f      	movge	r7, r3
 800eba0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800eba4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800eba8:	68a3      	ldr	r3, [r4, #8]
 800ebaa:	6861      	ldr	r1, [r4, #4]
 800ebac:	eb0a 0609 	add.w	r6, sl, r9
 800ebb0:	42b3      	cmp	r3, r6
 800ebb2:	b085      	sub	sp, #20
 800ebb4:	bfb8      	it	lt
 800ebb6:	3101      	addlt	r1, #1
 800ebb8:	f7ff fedc 	bl	800e974 <_Balloc>
 800ebbc:	b930      	cbnz	r0, 800ebcc <__multiply+0x44>
 800ebbe:	4602      	mov	r2, r0
 800ebc0:	4b44      	ldr	r3, [pc, #272]	@ (800ecd4 <__multiply+0x14c>)
 800ebc2:	4845      	ldr	r0, [pc, #276]	@ (800ecd8 <__multiply+0x150>)
 800ebc4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ebc8:	f000 fe3a 	bl	800f840 <__assert_func>
 800ebcc:	f100 0514 	add.w	r5, r0, #20
 800ebd0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ebd4:	462b      	mov	r3, r5
 800ebd6:	2200      	movs	r2, #0
 800ebd8:	4543      	cmp	r3, r8
 800ebda:	d321      	bcc.n	800ec20 <__multiply+0x98>
 800ebdc:	f107 0114 	add.w	r1, r7, #20
 800ebe0:	f104 0214 	add.w	r2, r4, #20
 800ebe4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800ebe8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800ebec:	9302      	str	r3, [sp, #8]
 800ebee:	1b13      	subs	r3, r2, r4
 800ebf0:	3b15      	subs	r3, #21
 800ebf2:	f023 0303 	bic.w	r3, r3, #3
 800ebf6:	3304      	adds	r3, #4
 800ebf8:	f104 0715 	add.w	r7, r4, #21
 800ebfc:	42ba      	cmp	r2, r7
 800ebfe:	bf38      	it	cc
 800ec00:	2304      	movcc	r3, #4
 800ec02:	9301      	str	r3, [sp, #4]
 800ec04:	9b02      	ldr	r3, [sp, #8]
 800ec06:	9103      	str	r1, [sp, #12]
 800ec08:	428b      	cmp	r3, r1
 800ec0a:	d80c      	bhi.n	800ec26 <__multiply+0x9e>
 800ec0c:	2e00      	cmp	r6, #0
 800ec0e:	dd03      	ble.n	800ec18 <__multiply+0x90>
 800ec10:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d05b      	beq.n	800ecd0 <__multiply+0x148>
 800ec18:	6106      	str	r6, [r0, #16]
 800ec1a:	b005      	add	sp, #20
 800ec1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec20:	f843 2b04 	str.w	r2, [r3], #4
 800ec24:	e7d8      	b.n	800ebd8 <__multiply+0x50>
 800ec26:	f8b1 a000 	ldrh.w	sl, [r1]
 800ec2a:	f1ba 0f00 	cmp.w	sl, #0
 800ec2e:	d024      	beq.n	800ec7a <__multiply+0xf2>
 800ec30:	f104 0e14 	add.w	lr, r4, #20
 800ec34:	46a9      	mov	r9, r5
 800ec36:	f04f 0c00 	mov.w	ip, #0
 800ec3a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ec3e:	f8d9 3000 	ldr.w	r3, [r9]
 800ec42:	fa1f fb87 	uxth.w	fp, r7
 800ec46:	b29b      	uxth	r3, r3
 800ec48:	fb0a 330b 	mla	r3, sl, fp, r3
 800ec4c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800ec50:	f8d9 7000 	ldr.w	r7, [r9]
 800ec54:	4463      	add	r3, ip
 800ec56:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ec5a:	fb0a c70b 	mla	r7, sl, fp, ip
 800ec5e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800ec62:	b29b      	uxth	r3, r3
 800ec64:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ec68:	4572      	cmp	r2, lr
 800ec6a:	f849 3b04 	str.w	r3, [r9], #4
 800ec6e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ec72:	d8e2      	bhi.n	800ec3a <__multiply+0xb2>
 800ec74:	9b01      	ldr	r3, [sp, #4]
 800ec76:	f845 c003 	str.w	ip, [r5, r3]
 800ec7a:	9b03      	ldr	r3, [sp, #12]
 800ec7c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ec80:	3104      	adds	r1, #4
 800ec82:	f1b9 0f00 	cmp.w	r9, #0
 800ec86:	d021      	beq.n	800eccc <__multiply+0x144>
 800ec88:	682b      	ldr	r3, [r5, #0]
 800ec8a:	f104 0c14 	add.w	ip, r4, #20
 800ec8e:	46ae      	mov	lr, r5
 800ec90:	f04f 0a00 	mov.w	sl, #0
 800ec94:	f8bc b000 	ldrh.w	fp, [ip]
 800ec98:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800ec9c:	fb09 770b 	mla	r7, r9, fp, r7
 800eca0:	4457      	add	r7, sl
 800eca2:	b29b      	uxth	r3, r3
 800eca4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800eca8:	f84e 3b04 	str.w	r3, [lr], #4
 800ecac:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ecb0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ecb4:	f8be 3000 	ldrh.w	r3, [lr]
 800ecb8:	fb09 330a 	mla	r3, r9, sl, r3
 800ecbc:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800ecc0:	4562      	cmp	r2, ip
 800ecc2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ecc6:	d8e5      	bhi.n	800ec94 <__multiply+0x10c>
 800ecc8:	9f01      	ldr	r7, [sp, #4]
 800ecca:	51eb      	str	r3, [r5, r7]
 800eccc:	3504      	adds	r5, #4
 800ecce:	e799      	b.n	800ec04 <__multiply+0x7c>
 800ecd0:	3e01      	subs	r6, #1
 800ecd2:	e79b      	b.n	800ec0c <__multiply+0x84>
 800ecd4:	0801318c 	.word	0x0801318c
 800ecd8:	0801319d 	.word	0x0801319d

0800ecdc <__pow5mult>:
 800ecdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ece0:	4615      	mov	r5, r2
 800ece2:	f012 0203 	ands.w	r2, r2, #3
 800ece6:	4607      	mov	r7, r0
 800ece8:	460e      	mov	r6, r1
 800ecea:	d007      	beq.n	800ecfc <__pow5mult+0x20>
 800ecec:	4c25      	ldr	r4, [pc, #148]	@ (800ed84 <__pow5mult+0xa8>)
 800ecee:	3a01      	subs	r2, #1
 800ecf0:	2300      	movs	r3, #0
 800ecf2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ecf6:	f7ff fe9f 	bl	800ea38 <__multadd>
 800ecfa:	4606      	mov	r6, r0
 800ecfc:	10ad      	asrs	r5, r5, #2
 800ecfe:	d03d      	beq.n	800ed7c <__pow5mult+0xa0>
 800ed00:	69fc      	ldr	r4, [r7, #28]
 800ed02:	b97c      	cbnz	r4, 800ed24 <__pow5mult+0x48>
 800ed04:	2010      	movs	r0, #16
 800ed06:	f7fd fed9 	bl	800cabc <malloc>
 800ed0a:	4602      	mov	r2, r0
 800ed0c:	61f8      	str	r0, [r7, #28]
 800ed0e:	b928      	cbnz	r0, 800ed1c <__pow5mult+0x40>
 800ed10:	4b1d      	ldr	r3, [pc, #116]	@ (800ed88 <__pow5mult+0xac>)
 800ed12:	481e      	ldr	r0, [pc, #120]	@ (800ed8c <__pow5mult+0xb0>)
 800ed14:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ed18:	f000 fd92 	bl	800f840 <__assert_func>
 800ed1c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ed20:	6004      	str	r4, [r0, #0]
 800ed22:	60c4      	str	r4, [r0, #12]
 800ed24:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ed28:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ed2c:	b94c      	cbnz	r4, 800ed42 <__pow5mult+0x66>
 800ed2e:	f240 2171 	movw	r1, #625	@ 0x271
 800ed32:	4638      	mov	r0, r7
 800ed34:	f7ff ff12 	bl	800eb5c <__i2b>
 800ed38:	2300      	movs	r3, #0
 800ed3a:	f8c8 0008 	str.w	r0, [r8, #8]
 800ed3e:	4604      	mov	r4, r0
 800ed40:	6003      	str	r3, [r0, #0]
 800ed42:	f04f 0900 	mov.w	r9, #0
 800ed46:	07eb      	lsls	r3, r5, #31
 800ed48:	d50a      	bpl.n	800ed60 <__pow5mult+0x84>
 800ed4a:	4631      	mov	r1, r6
 800ed4c:	4622      	mov	r2, r4
 800ed4e:	4638      	mov	r0, r7
 800ed50:	f7ff ff1a 	bl	800eb88 <__multiply>
 800ed54:	4631      	mov	r1, r6
 800ed56:	4680      	mov	r8, r0
 800ed58:	4638      	mov	r0, r7
 800ed5a:	f7ff fe4b 	bl	800e9f4 <_Bfree>
 800ed5e:	4646      	mov	r6, r8
 800ed60:	106d      	asrs	r5, r5, #1
 800ed62:	d00b      	beq.n	800ed7c <__pow5mult+0xa0>
 800ed64:	6820      	ldr	r0, [r4, #0]
 800ed66:	b938      	cbnz	r0, 800ed78 <__pow5mult+0x9c>
 800ed68:	4622      	mov	r2, r4
 800ed6a:	4621      	mov	r1, r4
 800ed6c:	4638      	mov	r0, r7
 800ed6e:	f7ff ff0b 	bl	800eb88 <__multiply>
 800ed72:	6020      	str	r0, [r4, #0]
 800ed74:	f8c0 9000 	str.w	r9, [r0]
 800ed78:	4604      	mov	r4, r0
 800ed7a:	e7e4      	b.n	800ed46 <__pow5mult+0x6a>
 800ed7c:	4630      	mov	r0, r6
 800ed7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ed82:	bf00      	nop
 800ed84:	080131f8 	.word	0x080131f8
 800ed88:	0801311d 	.word	0x0801311d
 800ed8c:	0801319d 	.word	0x0801319d

0800ed90 <__lshift>:
 800ed90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ed94:	460c      	mov	r4, r1
 800ed96:	6849      	ldr	r1, [r1, #4]
 800ed98:	6923      	ldr	r3, [r4, #16]
 800ed9a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ed9e:	68a3      	ldr	r3, [r4, #8]
 800eda0:	4607      	mov	r7, r0
 800eda2:	4691      	mov	r9, r2
 800eda4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800eda8:	f108 0601 	add.w	r6, r8, #1
 800edac:	42b3      	cmp	r3, r6
 800edae:	db0b      	blt.n	800edc8 <__lshift+0x38>
 800edb0:	4638      	mov	r0, r7
 800edb2:	f7ff fddf 	bl	800e974 <_Balloc>
 800edb6:	4605      	mov	r5, r0
 800edb8:	b948      	cbnz	r0, 800edce <__lshift+0x3e>
 800edba:	4602      	mov	r2, r0
 800edbc:	4b28      	ldr	r3, [pc, #160]	@ (800ee60 <__lshift+0xd0>)
 800edbe:	4829      	ldr	r0, [pc, #164]	@ (800ee64 <__lshift+0xd4>)
 800edc0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800edc4:	f000 fd3c 	bl	800f840 <__assert_func>
 800edc8:	3101      	adds	r1, #1
 800edca:	005b      	lsls	r3, r3, #1
 800edcc:	e7ee      	b.n	800edac <__lshift+0x1c>
 800edce:	2300      	movs	r3, #0
 800edd0:	f100 0114 	add.w	r1, r0, #20
 800edd4:	f100 0210 	add.w	r2, r0, #16
 800edd8:	4618      	mov	r0, r3
 800edda:	4553      	cmp	r3, sl
 800eddc:	db33      	blt.n	800ee46 <__lshift+0xb6>
 800edde:	6920      	ldr	r0, [r4, #16]
 800ede0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ede4:	f104 0314 	add.w	r3, r4, #20
 800ede8:	f019 091f 	ands.w	r9, r9, #31
 800edec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800edf0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800edf4:	d02b      	beq.n	800ee4e <__lshift+0xbe>
 800edf6:	f1c9 0e20 	rsb	lr, r9, #32
 800edfa:	468a      	mov	sl, r1
 800edfc:	2200      	movs	r2, #0
 800edfe:	6818      	ldr	r0, [r3, #0]
 800ee00:	fa00 f009 	lsl.w	r0, r0, r9
 800ee04:	4310      	orrs	r0, r2
 800ee06:	f84a 0b04 	str.w	r0, [sl], #4
 800ee0a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ee0e:	459c      	cmp	ip, r3
 800ee10:	fa22 f20e 	lsr.w	r2, r2, lr
 800ee14:	d8f3      	bhi.n	800edfe <__lshift+0x6e>
 800ee16:	ebac 0304 	sub.w	r3, ip, r4
 800ee1a:	3b15      	subs	r3, #21
 800ee1c:	f023 0303 	bic.w	r3, r3, #3
 800ee20:	3304      	adds	r3, #4
 800ee22:	f104 0015 	add.w	r0, r4, #21
 800ee26:	4584      	cmp	ip, r0
 800ee28:	bf38      	it	cc
 800ee2a:	2304      	movcc	r3, #4
 800ee2c:	50ca      	str	r2, [r1, r3]
 800ee2e:	b10a      	cbz	r2, 800ee34 <__lshift+0xa4>
 800ee30:	f108 0602 	add.w	r6, r8, #2
 800ee34:	3e01      	subs	r6, #1
 800ee36:	4638      	mov	r0, r7
 800ee38:	612e      	str	r6, [r5, #16]
 800ee3a:	4621      	mov	r1, r4
 800ee3c:	f7ff fdda 	bl	800e9f4 <_Bfree>
 800ee40:	4628      	mov	r0, r5
 800ee42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee46:	f842 0f04 	str.w	r0, [r2, #4]!
 800ee4a:	3301      	adds	r3, #1
 800ee4c:	e7c5      	b.n	800edda <__lshift+0x4a>
 800ee4e:	3904      	subs	r1, #4
 800ee50:	f853 2b04 	ldr.w	r2, [r3], #4
 800ee54:	f841 2f04 	str.w	r2, [r1, #4]!
 800ee58:	459c      	cmp	ip, r3
 800ee5a:	d8f9      	bhi.n	800ee50 <__lshift+0xc0>
 800ee5c:	e7ea      	b.n	800ee34 <__lshift+0xa4>
 800ee5e:	bf00      	nop
 800ee60:	0801318c 	.word	0x0801318c
 800ee64:	0801319d 	.word	0x0801319d

0800ee68 <__mcmp>:
 800ee68:	690a      	ldr	r2, [r1, #16]
 800ee6a:	4603      	mov	r3, r0
 800ee6c:	6900      	ldr	r0, [r0, #16]
 800ee6e:	1a80      	subs	r0, r0, r2
 800ee70:	b530      	push	{r4, r5, lr}
 800ee72:	d10e      	bne.n	800ee92 <__mcmp+0x2a>
 800ee74:	3314      	adds	r3, #20
 800ee76:	3114      	adds	r1, #20
 800ee78:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ee7c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ee80:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ee84:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ee88:	4295      	cmp	r5, r2
 800ee8a:	d003      	beq.n	800ee94 <__mcmp+0x2c>
 800ee8c:	d205      	bcs.n	800ee9a <__mcmp+0x32>
 800ee8e:	f04f 30ff 	mov.w	r0, #4294967295
 800ee92:	bd30      	pop	{r4, r5, pc}
 800ee94:	42a3      	cmp	r3, r4
 800ee96:	d3f3      	bcc.n	800ee80 <__mcmp+0x18>
 800ee98:	e7fb      	b.n	800ee92 <__mcmp+0x2a>
 800ee9a:	2001      	movs	r0, #1
 800ee9c:	e7f9      	b.n	800ee92 <__mcmp+0x2a>
	...

0800eea0 <__mdiff>:
 800eea0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eea4:	4689      	mov	r9, r1
 800eea6:	4606      	mov	r6, r0
 800eea8:	4611      	mov	r1, r2
 800eeaa:	4648      	mov	r0, r9
 800eeac:	4614      	mov	r4, r2
 800eeae:	f7ff ffdb 	bl	800ee68 <__mcmp>
 800eeb2:	1e05      	subs	r5, r0, #0
 800eeb4:	d112      	bne.n	800eedc <__mdiff+0x3c>
 800eeb6:	4629      	mov	r1, r5
 800eeb8:	4630      	mov	r0, r6
 800eeba:	f7ff fd5b 	bl	800e974 <_Balloc>
 800eebe:	4602      	mov	r2, r0
 800eec0:	b928      	cbnz	r0, 800eece <__mdiff+0x2e>
 800eec2:	4b3f      	ldr	r3, [pc, #252]	@ (800efc0 <__mdiff+0x120>)
 800eec4:	f240 2137 	movw	r1, #567	@ 0x237
 800eec8:	483e      	ldr	r0, [pc, #248]	@ (800efc4 <__mdiff+0x124>)
 800eeca:	f000 fcb9 	bl	800f840 <__assert_func>
 800eece:	2301      	movs	r3, #1
 800eed0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800eed4:	4610      	mov	r0, r2
 800eed6:	b003      	add	sp, #12
 800eed8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eedc:	bfbc      	itt	lt
 800eede:	464b      	movlt	r3, r9
 800eee0:	46a1      	movlt	r9, r4
 800eee2:	4630      	mov	r0, r6
 800eee4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800eee8:	bfba      	itte	lt
 800eeea:	461c      	movlt	r4, r3
 800eeec:	2501      	movlt	r5, #1
 800eeee:	2500      	movge	r5, #0
 800eef0:	f7ff fd40 	bl	800e974 <_Balloc>
 800eef4:	4602      	mov	r2, r0
 800eef6:	b918      	cbnz	r0, 800ef00 <__mdiff+0x60>
 800eef8:	4b31      	ldr	r3, [pc, #196]	@ (800efc0 <__mdiff+0x120>)
 800eefa:	f240 2145 	movw	r1, #581	@ 0x245
 800eefe:	e7e3      	b.n	800eec8 <__mdiff+0x28>
 800ef00:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800ef04:	6926      	ldr	r6, [r4, #16]
 800ef06:	60c5      	str	r5, [r0, #12]
 800ef08:	f109 0310 	add.w	r3, r9, #16
 800ef0c:	f109 0514 	add.w	r5, r9, #20
 800ef10:	f104 0e14 	add.w	lr, r4, #20
 800ef14:	f100 0b14 	add.w	fp, r0, #20
 800ef18:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ef1c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ef20:	9301      	str	r3, [sp, #4]
 800ef22:	46d9      	mov	r9, fp
 800ef24:	f04f 0c00 	mov.w	ip, #0
 800ef28:	9b01      	ldr	r3, [sp, #4]
 800ef2a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800ef2e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ef32:	9301      	str	r3, [sp, #4]
 800ef34:	fa1f f38a 	uxth.w	r3, sl
 800ef38:	4619      	mov	r1, r3
 800ef3a:	b283      	uxth	r3, r0
 800ef3c:	1acb      	subs	r3, r1, r3
 800ef3e:	0c00      	lsrs	r0, r0, #16
 800ef40:	4463      	add	r3, ip
 800ef42:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ef46:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ef4a:	b29b      	uxth	r3, r3
 800ef4c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ef50:	4576      	cmp	r6, lr
 800ef52:	f849 3b04 	str.w	r3, [r9], #4
 800ef56:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ef5a:	d8e5      	bhi.n	800ef28 <__mdiff+0x88>
 800ef5c:	1b33      	subs	r3, r6, r4
 800ef5e:	3b15      	subs	r3, #21
 800ef60:	f023 0303 	bic.w	r3, r3, #3
 800ef64:	3415      	adds	r4, #21
 800ef66:	3304      	adds	r3, #4
 800ef68:	42a6      	cmp	r6, r4
 800ef6a:	bf38      	it	cc
 800ef6c:	2304      	movcc	r3, #4
 800ef6e:	441d      	add	r5, r3
 800ef70:	445b      	add	r3, fp
 800ef72:	461e      	mov	r6, r3
 800ef74:	462c      	mov	r4, r5
 800ef76:	4544      	cmp	r4, r8
 800ef78:	d30e      	bcc.n	800ef98 <__mdiff+0xf8>
 800ef7a:	f108 0103 	add.w	r1, r8, #3
 800ef7e:	1b49      	subs	r1, r1, r5
 800ef80:	f021 0103 	bic.w	r1, r1, #3
 800ef84:	3d03      	subs	r5, #3
 800ef86:	45a8      	cmp	r8, r5
 800ef88:	bf38      	it	cc
 800ef8a:	2100      	movcc	r1, #0
 800ef8c:	440b      	add	r3, r1
 800ef8e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ef92:	b191      	cbz	r1, 800efba <__mdiff+0x11a>
 800ef94:	6117      	str	r7, [r2, #16]
 800ef96:	e79d      	b.n	800eed4 <__mdiff+0x34>
 800ef98:	f854 1b04 	ldr.w	r1, [r4], #4
 800ef9c:	46e6      	mov	lr, ip
 800ef9e:	0c08      	lsrs	r0, r1, #16
 800efa0:	fa1c fc81 	uxtah	ip, ip, r1
 800efa4:	4471      	add	r1, lr
 800efa6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800efaa:	b289      	uxth	r1, r1
 800efac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800efb0:	f846 1b04 	str.w	r1, [r6], #4
 800efb4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800efb8:	e7dd      	b.n	800ef76 <__mdiff+0xd6>
 800efba:	3f01      	subs	r7, #1
 800efbc:	e7e7      	b.n	800ef8e <__mdiff+0xee>
 800efbe:	bf00      	nop
 800efc0:	0801318c 	.word	0x0801318c
 800efc4:	0801319d 	.word	0x0801319d

0800efc8 <__d2b>:
 800efc8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800efcc:	460f      	mov	r7, r1
 800efce:	2101      	movs	r1, #1
 800efd0:	ec59 8b10 	vmov	r8, r9, d0
 800efd4:	4616      	mov	r6, r2
 800efd6:	f7ff fccd 	bl	800e974 <_Balloc>
 800efda:	4604      	mov	r4, r0
 800efdc:	b930      	cbnz	r0, 800efec <__d2b+0x24>
 800efde:	4602      	mov	r2, r0
 800efe0:	4b23      	ldr	r3, [pc, #140]	@ (800f070 <__d2b+0xa8>)
 800efe2:	4824      	ldr	r0, [pc, #144]	@ (800f074 <__d2b+0xac>)
 800efe4:	f240 310f 	movw	r1, #783	@ 0x30f
 800efe8:	f000 fc2a 	bl	800f840 <__assert_func>
 800efec:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800eff0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800eff4:	b10d      	cbz	r5, 800effa <__d2b+0x32>
 800eff6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800effa:	9301      	str	r3, [sp, #4]
 800effc:	f1b8 0300 	subs.w	r3, r8, #0
 800f000:	d023      	beq.n	800f04a <__d2b+0x82>
 800f002:	4668      	mov	r0, sp
 800f004:	9300      	str	r3, [sp, #0]
 800f006:	f7ff fd7c 	bl	800eb02 <__lo0bits>
 800f00a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f00e:	b1d0      	cbz	r0, 800f046 <__d2b+0x7e>
 800f010:	f1c0 0320 	rsb	r3, r0, #32
 800f014:	fa02 f303 	lsl.w	r3, r2, r3
 800f018:	430b      	orrs	r3, r1
 800f01a:	40c2      	lsrs	r2, r0
 800f01c:	6163      	str	r3, [r4, #20]
 800f01e:	9201      	str	r2, [sp, #4]
 800f020:	9b01      	ldr	r3, [sp, #4]
 800f022:	61a3      	str	r3, [r4, #24]
 800f024:	2b00      	cmp	r3, #0
 800f026:	bf0c      	ite	eq
 800f028:	2201      	moveq	r2, #1
 800f02a:	2202      	movne	r2, #2
 800f02c:	6122      	str	r2, [r4, #16]
 800f02e:	b1a5      	cbz	r5, 800f05a <__d2b+0x92>
 800f030:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800f034:	4405      	add	r5, r0
 800f036:	603d      	str	r5, [r7, #0]
 800f038:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800f03c:	6030      	str	r0, [r6, #0]
 800f03e:	4620      	mov	r0, r4
 800f040:	b003      	add	sp, #12
 800f042:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f046:	6161      	str	r1, [r4, #20]
 800f048:	e7ea      	b.n	800f020 <__d2b+0x58>
 800f04a:	a801      	add	r0, sp, #4
 800f04c:	f7ff fd59 	bl	800eb02 <__lo0bits>
 800f050:	9b01      	ldr	r3, [sp, #4]
 800f052:	6163      	str	r3, [r4, #20]
 800f054:	3020      	adds	r0, #32
 800f056:	2201      	movs	r2, #1
 800f058:	e7e8      	b.n	800f02c <__d2b+0x64>
 800f05a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f05e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800f062:	6038      	str	r0, [r7, #0]
 800f064:	6918      	ldr	r0, [r3, #16]
 800f066:	f7ff fd2d 	bl	800eac4 <__hi0bits>
 800f06a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f06e:	e7e5      	b.n	800f03c <__d2b+0x74>
 800f070:	0801318c 	.word	0x0801318c
 800f074:	0801319d 	.word	0x0801319d

0800f078 <__ssputs_r>:
 800f078:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f07c:	688e      	ldr	r6, [r1, #8]
 800f07e:	461f      	mov	r7, r3
 800f080:	42be      	cmp	r6, r7
 800f082:	680b      	ldr	r3, [r1, #0]
 800f084:	4682      	mov	sl, r0
 800f086:	460c      	mov	r4, r1
 800f088:	4690      	mov	r8, r2
 800f08a:	d82d      	bhi.n	800f0e8 <__ssputs_r+0x70>
 800f08c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f090:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f094:	d026      	beq.n	800f0e4 <__ssputs_r+0x6c>
 800f096:	6965      	ldr	r5, [r4, #20]
 800f098:	6909      	ldr	r1, [r1, #16]
 800f09a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f09e:	eba3 0901 	sub.w	r9, r3, r1
 800f0a2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f0a6:	1c7b      	adds	r3, r7, #1
 800f0a8:	444b      	add	r3, r9
 800f0aa:	106d      	asrs	r5, r5, #1
 800f0ac:	429d      	cmp	r5, r3
 800f0ae:	bf38      	it	cc
 800f0b0:	461d      	movcc	r5, r3
 800f0b2:	0553      	lsls	r3, r2, #21
 800f0b4:	d527      	bpl.n	800f106 <__ssputs_r+0x8e>
 800f0b6:	4629      	mov	r1, r5
 800f0b8:	f7fd fd32 	bl	800cb20 <_malloc_r>
 800f0bc:	4606      	mov	r6, r0
 800f0be:	b360      	cbz	r0, 800f11a <__ssputs_r+0xa2>
 800f0c0:	6921      	ldr	r1, [r4, #16]
 800f0c2:	464a      	mov	r2, r9
 800f0c4:	f7fe fdaf 	bl	800dc26 <memcpy>
 800f0c8:	89a3      	ldrh	r3, [r4, #12]
 800f0ca:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f0ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f0d2:	81a3      	strh	r3, [r4, #12]
 800f0d4:	6126      	str	r6, [r4, #16]
 800f0d6:	6165      	str	r5, [r4, #20]
 800f0d8:	444e      	add	r6, r9
 800f0da:	eba5 0509 	sub.w	r5, r5, r9
 800f0de:	6026      	str	r6, [r4, #0]
 800f0e0:	60a5      	str	r5, [r4, #8]
 800f0e2:	463e      	mov	r6, r7
 800f0e4:	42be      	cmp	r6, r7
 800f0e6:	d900      	bls.n	800f0ea <__ssputs_r+0x72>
 800f0e8:	463e      	mov	r6, r7
 800f0ea:	6820      	ldr	r0, [r4, #0]
 800f0ec:	4632      	mov	r2, r6
 800f0ee:	4641      	mov	r1, r8
 800f0f0:	f000 fb6a 	bl	800f7c8 <memmove>
 800f0f4:	68a3      	ldr	r3, [r4, #8]
 800f0f6:	1b9b      	subs	r3, r3, r6
 800f0f8:	60a3      	str	r3, [r4, #8]
 800f0fa:	6823      	ldr	r3, [r4, #0]
 800f0fc:	4433      	add	r3, r6
 800f0fe:	6023      	str	r3, [r4, #0]
 800f100:	2000      	movs	r0, #0
 800f102:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f106:	462a      	mov	r2, r5
 800f108:	f000 fbde 	bl	800f8c8 <_realloc_r>
 800f10c:	4606      	mov	r6, r0
 800f10e:	2800      	cmp	r0, #0
 800f110:	d1e0      	bne.n	800f0d4 <__ssputs_r+0x5c>
 800f112:	6921      	ldr	r1, [r4, #16]
 800f114:	4650      	mov	r0, sl
 800f116:	f7ff fbe3 	bl	800e8e0 <_free_r>
 800f11a:	230c      	movs	r3, #12
 800f11c:	f8ca 3000 	str.w	r3, [sl]
 800f120:	89a3      	ldrh	r3, [r4, #12]
 800f122:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f126:	81a3      	strh	r3, [r4, #12]
 800f128:	f04f 30ff 	mov.w	r0, #4294967295
 800f12c:	e7e9      	b.n	800f102 <__ssputs_r+0x8a>
	...

0800f130 <_svfiprintf_r>:
 800f130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f134:	4698      	mov	r8, r3
 800f136:	898b      	ldrh	r3, [r1, #12]
 800f138:	061b      	lsls	r3, r3, #24
 800f13a:	b09d      	sub	sp, #116	@ 0x74
 800f13c:	4607      	mov	r7, r0
 800f13e:	460d      	mov	r5, r1
 800f140:	4614      	mov	r4, r2
 800f142:	d510      	bpl.n	800f166 <_svfiprintf_r+0x36>
 800f144:	690b      	ldr	r3, [r1, #16]
 800f146:	b973      	cbnz	r3, 800f166 <_svfiprintf_r+0x36>
 800f148:	2140      	movs	r1, #64	@ 0x40
 800f14a:	f7fd fce9 	bl	800cb20 <_malloc_r>
 800f14e:	6028      	str	r0, [r5, #0]
 800f150:	6128      	str	r0, [r5, #16]
 800f152:	b930      	cbnz	r0, 800f162 <_svfiprintf_r+0x32>
 800f154:	230c      	movs	r3, #12
 800f156:	603b      	str	r3, [r7, #0]
 800f158:	f04f 30ff 	mov.w	r0, #4294967295
 800f15c:	b01d      	add	sp, #116	@ 0x74
 800f15e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f162:	2340      	movs	r3, #64	@ 0x40
 800f164:	616b      	str	r3, [r5, #20]
 800f166:	2300      	movs	r3, #0
 800f168:	9309      	str	r3, [sp, #36]	@ 0x24
 800f16a:	2320      	movs	r3, #32
 800f16c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f170:	f8cd 800c 	str.w	r8, [sp, #12]
 800f174:	2330      	movs	r3, #48	@ 0x30
 800f176:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800f314 <_svfiprintf_r+0x1e4>
 800f17a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f17e:	f04f 0901 	mov.w	r9, #1
 800f182:	4623      	mov	r3, r4
 800f184:	469a      	mov	sl, r3
 800f186:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f18a:	b10a      	cbz	r2, 800f190 <_svfiprintf_r+0x60>
 800f18c:	2a25      	cmp	r2, #37	@ 0x25
 800f18e:	d1f9      	bne.n	800f184 <_svfiprintf_r+0x54>
 800f190:	ebba 0b04 	subs.w	fp, sl, r4
 800f194:	d00b      	beq.n	800f1ae <_svfiprintf_r+0x7e>
 800f196:	465b      	mov	r3, fp
 800f198:	4622      	mov	r2, r4
 800f19a:	4629      	mov	r1, r5
 800f19c:	4638      	mov	r0, r7
 800f19e:	f7ff ff6b 	bl	800f078 <__ssputs_r>
 800f1a2:	3001      	adds	r0, #1
 800f1a4:	f000 80a7 	beq.w	800f2f6 <_svfiprintf_r+0x1c6>
 800f1a8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f1aa:	445a      	add	r2, fp
 800f1ac:	9209      	str	r2, [sp, #36]	@ 0x24
 800f1ae:	f89a 3000 	ldrb.w	r3, [sl]
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	f000 809f 	beq.w	800f2f6 <_svfiprintf_r+0x1c6>
 800f1b8:	2300      	movs	r3, #0
 800f1ba:	f04f 32ff 	mov.w	r2, #4294967295
 800f1be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f1c2:	f10a 0a01 	add.w	sl, sl, #1
 800f1c6:	9304      	str	r3, [sp, #16]
 800f1c8:	9307      	str	r3, [sp, #28]
 800f1ca:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f1ce:	931a      	str	r3, [sp, #104]	@ 0x68
 800f1d0:	4654      	mov	r4, sl
 800f1d2:	2205      	movs	r2, #5
 800f1d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f1d8:	484e      	ldr	r0, [pc, #312]	@ (800f314 <_svfiprintf_r+0x1e4>)
 800f1da:	f7f0 ffd1 	bl	8000180 <memchr>
 800f1de:	9a04      	ldr	r2, [sp, #16]
 800f1e0:	b9d8      	cbnz	r0, 800f21a <_svfiprintf_r+0xea>
 800f1e2:	06d0      	lsls	r0, r2, #27
 800f1e4:	bf44      	itt	mi
 800f1e6:	2320      	movmi	r3, #32
 800f1e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f1ec:	0711      	lsls	r1, r2, #28
 800f1ee:	bf44      	itt	mi
 800f1f0:	232b      	movmi	r3, #43	@ 0x2b
 800f1f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f1f6:	f89a 3000 	ldrb.w	r3, [sl]
 800f1fa:	2b2a      	cmp	r3, #42	@ 0x2a
 800f1fc:	d015      	beq.n	800f22a <_svfiprintf_r+0xfa>
 800f1fe:	9a07      	ldr	r2, [sp, #28]
 800f200:	4654      	mov	r4, sl
 800f202:	2000      	movs	r0, #0
 800f204:	f04f 0c0a 	mov.w	ip, #10
 800f208:	4621      	mov	r1, r4
 800f20a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f20e:	3b30      	subs	r3, #48	@ 0x30
 800f210:	2b09      	cmp	r3, #9
 800f212:	d94b      	bls.n	800f2ac <_svfiprintf_r+0x17c>
 800f214:	b1b0      	cbz	r0, 800f244 <_svfiprintf_r+0x114>
 800f216:	9207      	str	r2, [sp, #28]
 800f218:	e014      	b.n	800f244 <_svfiprintf_r+0x114>
 800f21a:	eba0 0308 	sub.w	r3, r0, r8
 800f21e:	fa09 f303 	lsl.w	r3, r9, r3
 800f222:	4313      	orrs	r3, r2
 800f224:	9304      	str	r3, [sp, #16]
 800f226:	46a2      	mov	sl, r4
 800f228:	e7d2      	b.n	800f1d0 <_svfiprintf_r+0xa0>
 800f22a:	9b03      	ldr	r3, [sp, #12]
 800f22c:	1d19      	adds	r1, r3, #4
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	9103      	str	r1, [sp, #12]
 800f232:	2b00      	cmp	r3, #0
 800f234:	bfbb      	ittet	lt
 800f236:	425b      	neglt	r3, r3
 800f238:	f042 0202 	orrlt.w	r2, r2, #2
 800f23c:	9307      	strge	r3, [sp, #28]
 800f23e:	9307      	strlt	r3, [sp, #28]
 800f240:	bfb8      	it	lt
 800f242:	9204      	strlt	r2, [sp, #16]
 800f244:	7823      	ldrb	r3, [r4, #0]
 800f246:	2b2e      	cmp	r3, #46	@ 0x2e
 800f248:	d10a      	bne.n	800f260 <_svfiprintf_r+0x130>
 800f24a:	7863      	ldrb	r3, [r4, #1]
 800f24c:	2b2a      	cmp	r3, #42	@ 0x2a
 800f24e:	d132      	bne.n	800f2b6 <_svfiprintf_r+0x186>
 800f250:	9b03      	ldr	r3, [sp, #12]
 800f252:	1d1a      	adds	r2, r3, #4
 800f254:	681b      	ldr	r3, [r3, #0]
 800f256:	9203      	str	r2, [sp, #12]
 800f258:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f25c:	3402      	adds	r4, #2
 800f25e:	9305      	str	r3, [sp, #20]
 800f260:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f324 <_svfiprintf_r+0x1f4>
 800f264:	7821      	ldrb	r1, [r4, #0]
 800f266:	2203      	movs	r2, #3
 800f268:	4650      	mov	r0, sl
 800f26a:	f7f0 ff89 	bl	8000180 <memchr>
 800f26e:	b138      	cbz	r0, 800f280 <_svfiprintf_r+0x150>
 800f270:	9b04      	ldr	r3, [sp, #16]
 800f272:	eba0 000a 	sub.w	r0, r0, sl
 800f276:	2240      	movs	r2, #64	@ 0x40
 800f278:	4082      	lsls	r2, r0
 800f27a:	4313      	orrs	r3, r2
 800f27c:	3401      	adds	r4, #1
 800f27e:	9304      	str	r3, [sp, #16]
 800f280:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f284:	4824      	ldr	r0, [pc, #144]	@ (800f318 <_svfiprintf_r+0x1e8>)
 800f286:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f28a:	2206      	movs	r2, #6
 800f28c:	f7f0 ff78 	bl	8000180 <memchr>
 800f290:	2800      	cmp	r0, #0
 800f292:	d036      	beq.n	800f302 <_svfiprintf_r+0x1d2>
 800f294:	4b21      	ldr	r3, [pc, #132]	@ (800f31c <_svfiprintf_r+0x1ec>)
 800f296:	bb1b      	cbnz	r3, 800f2e0 <_svfiprintf_r+0x1b0>
 800f298:	9b03      	ldr	r3, [sp, #12]
 800f29a:	3307      	adds	r3, #7
 800f29c:	f023 0307 	bic.w	r3, r3, #7
 800f2a0:	3308      	adds	r3, #8
 800f2a2:	9303      	str	r3, [sp, #12]
 800f2a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f2a6:	4433      	add	r3, r6
 800f2a8:	9309      	str	r3, [sp, #36]	@ 0x24
 800f2aa:	e76a      	b.n	800f182 <_svfiprintf_r+0x52>
 800f2ac:	fb0c 3202 	mla	r2, ip, r2, r3
 800f2b0:	460c      	mov	r4, r1
 800f2b2:	2001      	movs	r0, #1
 800f2b4:	e7a8      	b.n	800f208 <_svfiprintf_r+0xd8>
 800f2b6:	2300      	movs	r3, #0
 800f2b8:	3401      	adds	r4, #1
 800f2ba:	9305      	str	r3, [sp, #20]
 800f2bc:	4619      	mov	r1, r3
 800f2be:	f04f 0c0a 	mov.w	ip, #10
 800f2c2:	4620      	mov	r0, r4
 800f2c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f2c8:	3a30      	subs	r2, #48	@ 0x30
 800f2ca:	2a09      	cmp	r2, #9
 800f2cc:	d903      	bls.n	800f2d6 <_svfiprintf_r+0x1a6>
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	d0c6      	beq.n	800f260 <_svfiprintf_r+0x130>
 800f2d2:	9105      	str	r1, [sp, #20]
 800f2d4:	e7c4      	b.n	800f260 <_svfiprintf_r+0x130>
 800f2d6:	fb0c 2101 	mla	r1, ip, r1, r2
 800f2da:	4604      	mov	r4, r0
 800f2dc:	2301      	movs	r3, #1
 800f2de:	e7f0      	b.n	800f2c2 <_svfiprintf_r+0x192>
 800f2e0:	ab03      	add	r3, sp, #12
 800f2e2:	9300      	str	r3, [sp, #0]
 800f2e4:	462a      	mov	r2, r5
 800f2e6:	4b0e      	ldr	r3, [pc, #56]	@ (800f320 <_svfiprintf_r+0x1f0>)
 800f2e8:	a904      	add	r1, sp, #16
 800f2ea:	4638      	mov	r0, r7
 800f2ec:	f7fd fd44 	bl	800cd78 <_printf_float>
 800f2f0:	1c42      	adds	r2, r0, #1
 800f2f2:	4606      	mov	r6, r0
 800f2f4:	d1d6      	bne.n	800f2a4 <_svfiprintf_r+0x174>
 800f2f6:	89ab      	ldrh	r3, [r5, #12]
 800f2f8:	065b      	lsls	r3, r3, #25
 800f2fa:	f53f af2d 	bmi.w	800f158 <_svfiprintf_r+0x28>
 800f2fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f300:	e72c      	b.n	800f15c <_svfiprintf_r+0x2c>
 800f302:	ab03      	add	r3, sp, #12
 800f304:	9300      	str	r3, [sp, #0]
 800f306:	462a      	mov	r2, r5
 800f308:	4b05      	ldr	r3, [pc, #20]	@ (800f320 <_svfiprintf_r+0x1f0>)
 800f30a:	a904      	add	r1, sp, #16
 800f30c:	4638      	mov	r0, r7
 800f30e:	f7fd ffcb 	bl	800d2a8 <_printf_i>
 800f312:	e7ed      	b.n	800f2f0 <_svfiprintf_r+0x1c0>
 800f314:	080132f8 	.word	0x080132f8
 800f318:	08013302 	.word	0x08013302
 800f31c:	0800cd79 	.word	0x0800cd79
 800f320:	0800f079 	.word	0x0800f079
 800f324:	080132fe 	.word	0x080132fe

0800f328 <__sfputc_r>:
 800f328:	6893      	ldr	r3, [r2, #8]
 800f32a:	3b01      	subs	r3, #1
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	b410      	push	{r4}
 800f330:	6093      	str	r3, [r2, #8]
 800f332:	da08      	bge.n	800f346 <__sfputc_r+0x1e>
 800f334:	6994      	ldr	r4, [r2, #24]
 800f336:	42a3      	cmp	r3, r4
 800f338:	db01      	blt.n	800f33e <__sfputc_r+0x16>
 800f33a:	290a      	cmp	r1, #10
 800f33c:	d103      	bne.n	800f346 <__sfputc_r+0x1e>
 800f33e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f342:	f7fe bab3 	b.w	800d8ac <__swbuf_r>
 800f346:	6813      	ldr	r3, [r2, #0]
 800f348:	1c58      	adds	r0, r3, #1
 800f34a:	6010      	str	r0, [r2, #0]
 800f34c:	7019      	strb	r1, [r3, #0]
 800f34e:	4608      	mov	r0, r1
 800f350:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f354:	4770      	bx	lr

0800f356 <__sfputs_r>:
 800f356:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f358:	4606      	mov	r6, r0
 800f35a:	460f      	mov	r7, r1
 800f35c:	4614      	mov	r4, r2
 800f35e:	18d5      	adds	r5, r2, r3
 800f360:	42ac      	cmp	r4, r5
 800f362:	d101      	bne.n	800f368 <__sfputs_r+0x12>
 800f364:	2000      	movs	r0, #0
 800f366:	e007      	b.n	800f378 <__sfputs_r+0x22>
 800f368:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f36c:	463a      	mov	r2, r7
 800f36e:	4630      	mov	r0, r6
 800f370:	f7ff ffda 	bl	800f328 <__sfputc_r>
 800f374:	1c43      	adds	r3, r0, #1
 800f376:	d1f3      	bne.n	800f360 <__sfputs_r+0xa>
 800f378:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f37c <_vfiprintf_r>:
 800f37c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f380:	460d      	mov	r5, r1
 800f382:	b09d      	sub	sp, #116	@ 0x74
 800f384:	4614      	mov	r4, r2
 800f386:	4698      	mov	r8, r3
 800f388:	4606      	mov	r6, r0
 800f38a:	b118      	cbz	r0, 800f394 <_vfiprintf_r+0x18>
 800f38c:	6a03      	ldr	r3, [r0, #32]
 800f38e:	b90b      	cbnz	r3, 800f394 <_vfiprintf_r+0x18>
 800f390:	f7fe f936 	bl	800d600 <__sinit>
 800f394:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f396:	07d9      	lsls	r1, r3, #31
 800f398:	d405      	bmi.n	800f3a6 <_vfiprintf_r+0x2a>
 800f39a:	89ab      	ldrh	r3, [r5, #12]
 800f39c:	059a      	lsls	r2, r3, #22
 800f39e:	d402      	bmi.n	800f3a6 <_vfiprintf_r+0x2a>
 800f3a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f3a2:	f7fe fc3e 	bl	800dc22 <__retarget_lock_acquire_recursive>
 800f3a6:	89ab      	ldrh	r3, [r5, #12]
 800f3a8:	071b      	lsls	r3, r3, #28
 800f3aa:	d501      	bpl.n	800f3b0 <_vfiprintf_r+0x34>
 800f3ac:	692b      	ldr	r3, [r5, #16]
 800f3ae:	b99b      	cbnz	r3, 800f3d8 <_vfiprintf_r+0x5c>
 800f3b0:	4629      	mov	r1, r5
 800f3b2:	4630      	mov	r0, r6
 800f3b4:	f7fe fab8 	bl	800d928 <__swsetup_r>
 800f3b8:	b170      	cbz	r0, 800f3d8 <_vfiprintf_r+0x5c>
 800f3ba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f3bc:	07dc      	lsls	r4, r3, #31
 800f3be:	d504      	bpl.n	800f3ca <_vfiprintf_r+0x4e>
 800f3c0:	f04f 30ff 	mov.w	r0, #4294967295
 800f3c4:	b01d      	add	sp, #116	@ 0x74
 800f3c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3ca:	89ab      	ldrh	r3, [r5, #12]
 800f3cc:	0598      	lsls	r0, r3, #22
 800f3ce:	d4f7      	bmi.n	800f3c0 <_vfiprintf_r+0x44>
 800f3d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f3d2:	f7fe fc27 	bl	800dc24 <__retarget_lock_release_recursive>
 800f3d6:	e7f3      	b.n	800f3c0 <_vfiprintf_r+0x44>
 800f3d8:	2300      	movs	r3, #0
 800f3da:	9309      	str	r3, [sp, #36]	@ 0x24
 800f3dc:	2320      	movs	r3, #32
 800f3de:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f3e2:	f8cd 800c 	str.w	r8, [sp, #12]
 800f3e6:	2330      	movs	r3, #48	@ 0x30
 800f3e8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f598 <_vfiprintf_r+0x21c>
 800f3ec:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f3f0:	f04f 0901 	mov.w	r9, #1
 800f3f4:	4623      	mov	r3, r4
 800f3f6:	469a      	mov	sl, r3
 800f3f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f3fc:	b10a      	cbz	r2, 800f402 <_vfiprintf_r+0x86>
 800f3fe:	2a25      	cmp	r2, #37	@ 0x25
 800f400:	d1f9      	bne.n	800f3f6 <_vfiprintf_r+0x7a>
 800f402:	ebba 0b04 	subs.w	fp, sl, r4
 800f406:	d00b      	beq.n	800f420 <_vfiprintf_r+0xa4>
 800f408:	465b      	mov	r3, fp
 800f40a:	4622      	mov	r2, r4
 800f40c:	4629      	mov	r1, r5
 800f40e:	4630      	mov	r0, r6
 800f410:	f7ff ffa1 	bl	800f356 <__sfputs_r>
 800f414:	3001      	adds	r0, #1
 800f416:	f000 80a7 	beq.w	800f568 <_vfiprintf_r+0x1ec>
 800f41a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f41c:	445a      	add	r2, fp
 800f41e:	9209      	str	r2, [sp, #36]	@ 0x24
 800f420:	f89a 3000 	ldrb.w	r3, [sl]
 800f424:	2b00      	cmp	r3, #0
 800f426:	f000 809f 	beq.w	800f568 <_vfiprintf_r+0x1ec>
 800f42a:	2300      	movs	r3, #0
 800f42c:	f04f 32ff 	mov.w	r2, #4294967295
 800f430:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f434:	f10a 0a01 	add.w	sl, sl, #1
 800f438:	9304      	str	r3, [sp, #16]
 800f43a:	9307      	str	r3, [sp, #28]
 800f43c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f440:	931a      	str	r3, [sp, #104]	@ 0x68
 800f442:	4654      	mov	r4, sl
 800f444:	2205      	movs	r2, #5
 800f446:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f44a:	4853      	ldr	r0, [pc, #332]	@ (800f598 <_vfiprintf_r+0x21c>)
 800f44c:	f7f0 fe98 	bl	8000180 <memchr>
 800f450:	9a04      	ldr	r2, [sp, #16]
 800f452:	b9d8      	cbnz	r0, 800f48c <_vfiprintf_r+0x110>
 800f454:	06d1      	lsls	r1, r2, #27
 800f456:	bf44      	itt	mi
 800f458:	2320      	movmi	r3, #32
 800f45a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f45e:	0713      	lsls	r3, r2, #28
 800f460:	bf44      	itt	mi
 800f462:	232b      	movmi	r3, #43	@ 0x2b
 800f464:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f468:	f89a 3000 	ldrb.w	r3, [sl]
 800f46c:	2b2a      	cmp	r3, #42	@ 0x2a
 800f46e:	d015      	beq.n	800f49c <_vfiprintf_r+0x120>
 800f470:	9a07      	ldr	r2, [sp, #28]
 800f472:	4654      	mov	r4, sl
 800f474:	2000      	movs	r0, #0
 800f476:	f04f 0c0a 	mov.w	ip, #10
 800f47a:	4621      	mov	r1, r4
 800f47c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f480:	3b30      	subs	r3, #48	@ 0x30
 800f482:	2b09      	cmp	r3, #9
 800f484:	d94b      	bls.n	800f51e <_vfiprintf_r+0x1a2>
 800f486:	b1b0      	cbz	r0, 800f4b6 <_vfiprintf_r+0x13a>
 800f488:	9207      	str	r2, [sp, #28]
 800f48a:	e014      	b.n	800f4b6 <_vfiprintf_r+0x13a>
 800f48c:	eba0 0308 	sub.w	r3, r0, r8
 800f490:	fa09 f303 	lsl.w	r3, r9, r3
 800f494:	4313      	orrs	r3, r2
 800f496:	9304      	str	r3, [sp, #16]
 800f498:	46a2      	mov	sl, r4
 800f49a:	e7d2      	b.n	800f442 <_vfiprintf_r+0xc6>
 800f49c:	9b03      	ldr	r3, [sp, #12]
 800f49e:	1d19      	adds	r1, r3, #4
 800f4a0:	681b      	ldr	r3, [r3, #0]
 800f4a2:	9103      	str	r1, [sp, #12]
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	bfbb      	ittet	lt
 800f4a8:	425b      	neglt	r3, r3
 800f4aa:	f042 0202 	orrlt.w	r2, r2, #2
 800f4ae:	9307      	strge	r3, [sp, #28]
 800f4b0:	9307      	strlt	r3, [sp, #28]
 800f4b2:	bfb8      	it	lt
 800f4b4:	9204      	strlt	r2, [sp, #16]
 800f4b6:	7823      	ldrb	r3, [r4, #0]
 800f4b8:	2b2e      	cmp	r3, #46	@ 0x2e
 800f4ba:	d10a      	bne.n	800f4d2 <_vfiprintf_r+0x156>
 800f4bc:	7863      	ldrb	r3, [r4, #1]
 800f4be:	2b2a      	cmp	r3, #42	@ 0x2a
 800f4c0:	d132      	bne.n	800f528 <_vfiprintf_r+0x1ac>
 800f4c2:	9b03      	ldr	r3, [sp, #12]
 800f4c4:	1d1a      	adds	r2, r3, #4
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	9203      	str	r2, [sp, #12]
 800f4ca:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f4ce:	3402      	adds	r4, #2
 800f4d0:	9305      	str	r3, [sp, #20]
 800f4d2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f5a8 <_vfiprintf_r+0x22c>
 800f4d6:	7821      	ldrb	r1, [r4, #0]
 800f4d8:	2203      	movs	r2, #3
 800f4da:	4650      	mov	r0, sl
 800f4dc:	f7f0 fe50 	bl	8000180 <memchr>
 800f4e0:	b138      	cbz	r0, 800f4f2 <_vfiprintf_r+0x176>
 800f4e2:	9b04      	ldr	r3, [sp, #16]
 800f4e4:	eba0 000a 	sub.w	r0, r0, sl
 800f4e8:	2240      	movs	r2, #64	@ 0x40
 800f4ea:	4082      	lsls	r2, r0
 800f4ec:	4313      	orrs	r3, r2
 800f4ee:	3401      	adds	r4, #1
 800f4f0:	9304      	str	r3, [sp, #16]
 800f4f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f4f6:	4829      	ldr	r0, [pc, #164]	@ (800f59c <_vfiprintf_r+0x220>)
 800f4f8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f4fc:	2206      	movs	r2, #6
 800f4fe:	f7f0 fe3f 	bl	8000180 <memchr>
 800f502:	2800      	cmp	r0, #0
 800f504:	d03f      	beq.n	800f586 <_vfiprintf_r+0x20a>
 800f506:	4b26      	ldr	r3, [pc, #152]	@ (800f5a0 <_vfiprintf_r+0x224>)
 800f508:	bb1b      	cbnz	r3, 800f552 <_vfiprintf_r+0x1d6>
 800f50a:	9b03      	ldr	r3, [sp, #12]
 800f50c:	3307      	adds	r3, #7
 800f50e:	f023 0307 	bic.w	r3, r3, #7
 800f512:	3308      	adds	r3, #8
 800f514:	9303      	str	r3, [sp, #12]
 800f516:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f518:	443b      	add	r3, r7
 800f51a:	9309      	str	r3, [sp, #36]	@ 0x24
 800f51c:	e76a      	b.n	800f3f4 <_vfiprintf_r+0x78>
 800f51e:	fb0c 3202 	mla	r2, ip, r2, r3
 800f522:	460c      	mov	r4, r1
 800f524:	2001      	movs	r0, #1
 800f526:	e7a8      	b.n	800f47a <_vfiprintf_r+0xfe>
 800f528:	2300      	movs	r3, #0
 800f52a:	3401      	adds	r4, #1
 800f52c:	9305      	str	r3, [sp, #20]
 800f52e:	4619      	mov	r1, r3
 800f530:	f04f 0c0a 	mov.w	ip, #10
 800f534:	4620      	mov	r0, r4
 800f536:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f53a:	3a30      	subs	r2, #48	@ 0x30
 800f53c:	2a09      	cmp	r2, #9
 800f53e:	d903      	bls.n	800f548 <_vfiprintf_r+0x1cc>
 800f540:	2b00      	cmp	r3, #0
 800f542:	d0c6      	beq.n	800f4d2 <_vfiprintf_r+0x156>
 800f544:	9105      	str	r1, [sp, #20]
 800f546:	e7c4      	b.n	800f4d2 <_vfiprintf_r+0x156>
 800f548:	fb0c 2101 	mla	r1, ip, r1, r2
 800f54c:	4604      	mov	r4, r0
 800f54e:	2301      	movs	r3, #1
 800f550:	e7f0      	b.n	800f534 <_vfiprintf_r+0x1b8>
 800f552:	ab03      	add	r3, sp, #12
 800f554:	9300      	str	r3, [sp, #0]
 800f556:	462a      	mov	r2, r5
 800f558:	4b12      	ldr	r3, [pc, #72]	@ (800f5a4 <_vfiprintf_r+0x228>)
 800f55a:	a904      	add	r1, sp, #16
 800f55c:	4630      	mov	r0, r6
 800f55e:	f7fd fc0b 	bl	800cd78 <_printf_float>
 800f562:	4607      	mov	r7, r0
 800f564:	1c78      	adds	r0, r7, #1
 800f566:	d1d6      	bne.n	800f516 <_vfiprintf_r+0x19a>
 800f568:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f56a:	07d9      	lsls	r1, r3, #31
 800f56c:	d405      	bmi.n	800f57a <_vfiprintf_r+0x1fe>
 800f56e:	89ab      	ldrh	r3, [r5, #12]
 800f570:	059a      	lsls	r2, r3, #22
 800f572:	d402      	bmi.n	800f57a <_vfiprintf_r+0x1fe>
 800f574:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f576:	f7fe fb55 	bl	800dc24 <__retarget_lock_release_recursive>
 800f57a:	89ab      	ldrh	r3, [r5, #12]
 800f57c:	065b      	lsls	r3, r3, #25
 800f57e:	f53f af1f 	bmi.w	800f3c0 <_vfiprintf_r+0x44>
 800f582:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f584:	e71e      	b.n	800f3c4 <_vfiprintf_r+0x48>
 800f586:	ab03      	add	r3, sp, #12
 800f588:	9300      	str	r3, [sp, #0]
 800f58a:	462a      	mov	r2, r5
 800f58c:	4b05      	ldr	r3, [pc, #20]	@ (800f5a4 <_vfiprintf_r+0x228>)
 800f58e:	a904      	add	r1, sp, #16
 800f590:	4630      	mov	r0, r6
 800f592:	f7fd fe89 	bl	800d2a8 <_printf_i>
 800f596:	e7e4      	b.n	800f562 <_vfiprintf_r+0x1e6>
 800f598:	080132f8 	.word	0x080132f8
 800f59c:	08013302 	.word	0x08013302
 800f5a0:	0800cd79 	.word	0x0800cd79
 800f5a4:	0800f357 	.word	0x0800f357
 800f5a8:	080132fe 	.word	0x080132fe

0800f5ac <__sflush_r>:
 800f5ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f5b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f5b4:	0716      	lsls	r6, r2, #28
 800f5b6:	4605      	mov	r5, r0
 800f5b8:	460c      	mov	r4, r1
 800f5ba:	d454      	bmi.n	800f666 <__sflush_r+0xba>
 800f5bc:	684b      	ldr	r3, [r1, #4]
 800f5be:	2b00      	cmp	r3, #0
 800f5c0:	dc02      	bgt.n	800f5c8 <__sflush_r+0x1c>
 800f5c2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	dd48      	ble.n	800f65a <__sflush_r+0xae>
 800f5c8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f5ca:	2e00      	cmp	r6, #0
 800f5cc:	d045      	beq.n	800f65a <__sflush_r+0xae>
 800f5ce:	2300      	movs	r3, #0
 800f5d0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f5d4:	682f      	ldr	r7, [r5, #0]
 800f5d6:	6a21      	ldr	r1, [r4, #32]
 800f5d8:	602b      	str	r3, [r5, #0]
 800f5da:	d030      	beq.n	800f63e <__sflush_r+0x92>
 800f5dc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f5de:	89a3      	ldrh	r3, [r4, #12]
 800f5e0:	0759      	lsls	r1, r3, #29
 800f5e2:	d505      	bpl.n	800f5f0 <__sflush_r+0x44>
 800f5e4:	6863      	ldr	r3, [r4, #4]
 800f5e6:	1ad2      	subs	r2, r2, r3
 800f5e8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f5ea:	b10b      	cbz	r3, 800f5f0 <__sflush_r+0x44>
 800f5ec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f5ee:	1ad2      	subs	r2, r2, r3
 800f5f0:	2300      	movs	r3, #0
 800f5f2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f5f4:	6a21      	ldr	r1, [r4, #32]
 800f5f6:	4628      	mov	r0, r5
 800f5f8:	47b0      	blx	r6
 800f5fa:	1c43      	adds	r3, r0, #1
 800f5fc:	89a3      	ldrh	r3, [r4, #12]
 800f5fe:	d106      	bne.n	800f60e <__sflush_r+0x62>
 800f600:	6829      	ldr	r1, [r5, #0]
 800f602:	291d      	cmp	r1, #29
 800f604:	d82b      	bhi.n	800f65e <__sflush_r+0xb2>
 800f606:	4a2a      	ldr	r2, [pc, #168]	@ (800f6b0 <__sflush_r+0x104>)
 800f608:	410a      	asrs	r2, r1
 800f60a:	07d6      	lsls	r6, r2, #31
 800f60c:	d427      	bmi.n	800f65e <__sflush_r+0xb2>
 800f60e:	2200      	movs	r2, #0
 800f610:	6062      	str	r2, [r4, #4]
 800f612:	04d9      	lsls	r1, r3, #19
 800f614:	6922      	ldr	r2, [r4, #16]
 800f616:	6022      	str	r2, [r4, #0]
 800f618:	d504      	bpl.n	800f624 <__sflush_r+0x78>
 800f61a:	1c42      	adds	r2, r0, #1
 800f61c:	d101      	bne.n	800f622 <__sflush_r+0x76>
 800f61e:	682b      	ldr	r3, [r5, #0]
 800f620:	b903      	cbnz	r3, 800f624 <__sflush_r+0x78>
 800f622:	6560      	str	r0, [r4, #84]	@ 0x54
 800f624:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f626:	602f      	str	r7, [r5, #0]
 800f628:	b1b9      	cbz	r1, 800f65a <__sflush_r+0xae>
 800f62a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f62e:	4299      	cmp	r1, r3
 800f630:	d002      	beq.n	800f638 <__sflush_r+0x8c>
 800f632:	4628      	mov	r0, r5
 800f634:	f7ff f954 	bl	800e8e0 <_free_r>
 800f638:	2300      	movs	r3, #0
 800f63a:	6363      	str	r3, [r4, #52]	@ 0x34
 800f63c:	e00d      	b.n	800f65a <__sflush_r+0xae>
 800f63e:	2301      	movs	r3, #1
 800f640:	4628      	mov	r0, r5
 800f642:	47b0      	blx	r6
 800f644:	4602      	mov	r2, r0
 800f646:	1c50      	adds	r0, r2, #1
 800f648:	d1c9      	bne.n	800f5de <__sflush_r+0x32>
 800f64a:	682b      	ldr	r3, [r5, #0]
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d0c6      	beq.n	800f5de <__sflush_r+0x32>
 800f650:	2b1d      	cmp	r3, #29
 800f652:	d001      	beq.n	800f658 <__sflush_r+0xac>
 800f654:	2b16      	cmp	r3, #22
 800f656:	d11e      	bne.n	800f696 <__sflush_r+0xea>
 800f658:	602f      	str	r7, [r5, #0]
 800f65a:	2000      	movs	r0, #0
 800f65c:	e022      	b.n	800f6a4 <__sflush_r+0xf8>
 800f65e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f662:	b21b      	sxth	r3, r3
 800f664:	e01b      	b.n	800f69e <__sflush_r+0xf2>
 800f666:	690f      	ldr	r7, [r1, #16]
 800f668:	2f00      	cmp	r7, #0
 800f66a:	d0f6      	beq.n	800f65a <__sflush_r+0xae>
 800f66c:	0793      	lsls	r3, r2, #30
 800f66e:	680e      	ldr	r6, [r1, #0]
 800f670:	bf08      	it	eq
 800f672:	694b      	ldreq	r3, [r1, #20]
 800f674:	600f      	str	r7, [r1, #0]
 800f676:	bf18      	it	ne
 800f678:	2300      	movne	r3, #0
 800f67a:	eba6 0807 	sub.w	r8, r6, r7
 800f67e:	608b      	str	r3, [r1, #8]
 800f680:	f1b8 0f00 	cmp.w	r8, #0
 800f684:	dde9      	ble.n	800f65a <__sflush_r+0xae>
 800f686:	6a21      	ldr	r1, [r4, #32]
 800f688:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f68a:	4643      	mov	r3, r8
 800f68c:	463a      	mov	r2, r7
 800f68e:	4628      	mov	r0, r5
 800f690:	47b0      	blx	r6
 800f692:	2800      	cmp	r0, #0
 800f694:	dc08      	bgt.n	800f6a8 <__sflush_r+0xfc>
 800f696:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f69a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f69e:	81a3      	strh	r3, [r4, #12]
 800f6a0:	f04f 30ff 	mov.w	r0, #4294967295
 800f6a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f6a8:	4407      	add	r7, r0
 800f6aa:	eba8 0800 	sub.w	r8, r8, r0
 800f6ae:	e7e7      	b.n	800f680 <__sflush_r+0xd4>
 800f6b0:	dfbffffe 	.word	0xdfbffffe

0800f6b4 <_fflush_r>:
 800f6b4:	b538      	push	{r3, r4, r5, lr}
 800f6b6:	690b      	ldr	r3, [r1, #16]
 800f6b8:	4605      	mov	r5, r0
 800f6ba:	460c      	mov	r4, r1
 800f6bc:	b913      	cbnz	r3, 800f6c4 <_fflush_r+0x10>
 800f6be:	2500      	movs	r5, #0
 800f6c0:	4628      	mov	r0, r5
 800f6c2:	bd38      	pop	{r3, r4, r5, pc}
 800f6c4:	b118      	cbz	r0, 800f6ce <_fflush_r+0x1a>
 800f6c6:	6a03      	ldr	r3, [r0, #32]
 800f6c8:	b90b      	cbnz	r3, 800f6ce <_fflush_r+0x1a>
 800f6ca:	f7fd ff99 	bl	800d600 <__sinit>
 800f6ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	d0f3      	beq.n	800f6be <_fflush_r+0xa>
 800f6d6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f6d8:	07d0      	lsls	r0, r2, #31
 800f6da:	d404      	bmi.n	800f6e6 <_fflush_r+0x32>
 800f6dc:	0599      	lsls	r1, r3, #22
 800f6de:	d402      	bmi.n	800f6e6 <_fflush_r+0x32>
 800f6e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f6e2:	f7fe fa9e 	bl	800dc22 <__retarget_lock_acquire_recursive>
 800f6e6:	4628      	mov	r0, r5
 800f6e8:	4621      	mov	r1, r4
 800f6ea:	f7ff ff5f 	bl	800f5ac <__sflush_r>
 800f6ee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f6f0:	07da      	lsls	r2, r3, #31
 800f6f2:	4605      	mov	r5, r0
 800f6f4:	d4e4      	bmi.n	800f6c0 <_fflush_r+0xc>
 800f6f6:	89a3      	ldrh	r3, [r4, #12]
 800f6f8:	059b      	lsls	r3, r3, #22
 800f6fa:	d4e1      	bmi.n	800f6c0 <_fflush_r+0xc>
 800f6fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f6fe:	f7fe fa91 	bl	800dc24 <__retarget_lock_release_recursive>
 800f702:	e7dd      	b.n	800f6c0 <_fflush_r+0xc>

0800f704 <__swhatbuf_r>:
 800f704:	b570      	push	{r4, r5, r6, lr}
 800f706:	460c      	mov	r4, r1
 800f708:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f70c:	2900      	cmp	r1, #0
 800f70e:	b096      	sub	sp, #88	@ 0x58
 800f710:	4615      	mov	r5, r2
 800f712:	461e      	mov	r6, r3
 800f714:	da0d      	bge.n	800f732 <__swhatbuf_r+0x2e>
 800f716:	89a3      	ldrh	r3, [r4, #12]
 800f718:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f71c:	f04f 0100 	mov.w	r1, #0
 800f720:	bf14      	ite	ne
 800f722:	2340      	movne	r3, #64	@ 0x40
 800f724:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f728:	2000      	movs	r0, #0
 800f72a:	6031      	str	r1, [r6, #0]
 800f72c:	602b      	str	r3, [r5, #0]
 800f72e:	b016      	add	sp, #88	@ 0x58
 800f730:	bd70      	pop	{r4, r5, r6, pc}
 800f732:	466a      	mov	r2, sp
 800f734:	f000 f862 	bl	800f7fc <_fstat_r>
 800f738:	2800      	cmp	r0, #0
 800f73a:	dbec      	blt.n	800f716 <__swhatbuf_r+0x12>
 800f73c:	9901      	ldr	r1, [sp, #4]
 800f73e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f742:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f746:	4259      	negs	r1, r3
 800f748:	4159      	adcs	r1, r3
 800f74a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f74e:	e7eb      	b.n	800f728 <__swhatbuf_r+0x24>

0800f750 <__smakebuf_r>:
 800f750:	898b      	ldrh	r3, [r1, #12]
 800f752:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f754:	079d      	lsls	r5, r3, #30
 800f756:	4606      	mov	r6, r0
 800f758:	460c      	mov	r4, r1
 800f75a:	d507      	bpl.n	800f76c <__smakebuf_r+0x1c>
 800f75c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f760:	6023      	str	r3, [r4, #0]
 800f762:	6123      	str	r3, [r4, #16]
 800f764:	2301      	movs	r3, #1
 800f766:	6163      	str	r3, [r4, #20]
 800f768:	b003      	add	sp, #12
 800f76a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f76c:	ab01      	add	r3, sp, #4
 800f76e:	466a      	mov	r2, sp
 800f770:	f7ff ffc8 	bl	800f704 <__swhatbuf_r>
 800f774:	9f00      	ldr	r7, [sp, #0]
 800f776:	4605      	mov	r5, r0
 800f778:	4639      	mov	r1, r7
 800f77a:	4630      	mov	r0, r6
 800f77c:	f7fd f9d0 	bl	800cb20 <_malloc_r>
 800f780:	b948      	cbnz	r0, 800f796 <__smakebuf_r+0x46>
 800f782:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f786:	059a      	lsls	r2, r3, #22
 800f788:	d4ee      	bmi.n	800f768 <__smakebuf_r+0x18>
 800f78a:	f023 0303 	bic.w	r3, r3, #3
 800f78e:	f043 0302 	orr.w	r3, r3, #2
 800f792:	81a3      	strh	r3, [r4, #12]
 800f794:	e7e2      	b.n	800f75c <__smakebuf_r+0xc>
 800f796:	89a3      	ldrh	r3, [r4, #12]
 800f798:	6020      	str	r0, [r4, #0]
 800f79a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f79e:	81a3      	strh	r3, [r4, #12]
 800f7a0:	9b01      	ldr	r3, [sp, #4]
 800f7a2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f7a6:	b15b      	cbz	r3, 800f7c0 <__smakebuf_r+0x70>
 800f7a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f7ac:	4630      	mov	r0, r6
 800f7ae:	f000 f837 	bl	800f820 <_isatty_r>
 800f7b2:	b128      	cbz	r0, 800f7c0 <__smakebuf_r+0x70>
 800f7b4:	89a3      	ldrh	r3, [r4, #12]
 800f7b6:	f023 0303 	bic.w	r3, r3, #3
 800f7ba:	f043 0301 	orr.w	r3, r3, #1
 800f7be:	81a3      	strh	r3, [r4, #12]
 800f7c0:	89a3      	ldrh	r3, [r4, #12]
 800f7c2:	431d      	orrs	r5, r3
 800f7c4:	81a5      	strh	r5, [r4, #12]
 800f7c6:	e7cf      	b.n	800f768 <__smakebuf_r+0x18>

0800f7c8 <memmove>:
 800f7c8:	4288      	cmp	r0, r1
 800f7ca:	b510      	push	{r4, lr}
 800f7cc:	eb01 0402 	add.w	r4, r1, r2
 800f7d0:	d902      	bls.n	800f7d8 <memmove+0x10>
 800f7d2:	4284      	cmp	r4, r0
 800f7d4:	4623      	mov	r3, r4
 800f7d6:	d807      	bhi.n	800f7e8 <memmove+0x20>
 800f7d8:	1e43      	subs	r3, r0, #1
 800f7da:	42a1      	cmp	r1, r4
 800f7dc:	d008      	beq.n	800f7f0 <memmove+0x28>
 800f7de:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f7e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f7e6:	e7f8      	b.n	800f7da <memmove+0x12>
 800f7e8:	4402      	add	r2, r0
 800f7ea:	4601      	mov	r1, r0
 800f7ec:	428a      	cmp	r2, r1
 800f7ee:	d100      	bne.n	800f7f2 <memmove+0x2a>
 800f7f0:	bd10      	pop	{r4, pc}
 800f7f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f7f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f7fa:	e7f7      	b.n	800f7ec <memmove+0x24>

0800f7fc <_fstat_r>:
 800f7fc:	b538      	push	{r3, r4, r5, lr}
 800f7fe:	4d07      	ldr	r5, [pc, #28]	@ (800f81c <_fstat_r+0x20>)
 800f800:	2300      	movs	r3, #0
 800f802:	4604      	mov	r4, r0
 800f804:	4608      	mov	r0, r1
 800f806:	4611      	mov	r1, r2
 800f808:	602b      	str	r3, [r5, #0]
 800f80a:	f7f6 fb83 	bl	8005f14 <_fstat>
 800f80e:	1c43      	adds	r3, r0, #1
 800f810:	d102      	bne.n	800f818 <_fstat_r+0x1c>
 800f812:	682b      	ldr	r3, [r5, #0]
 800f814:	b103      	cbz	r3, 800f818 <_fstat_r+0x1c>
 800f816:	6023      	str	r3, [r4, #0]
 800f818:	bd38      	pop	{r3, r4, r5, pc}
 800f81a:	bf00      	nop
 800f81c:	2001172c 	.word	0x2001172c

0800f820 <_isatty_r>:
 800f820:	b538      	push	{r3, r4, r5, lr}
 800f822:	4d06      	ldr	r5, [pc, #24]	@ (800f83c <_isatty_r+0x1c>)
 800f824:	2300      	movs	r3, #0
 800f826:	4604      	mov	r4, r0
 800f828:	4608      	mov	r0, r1
 800f82a:	602b      	str	r3, [r5, #0]
 800f82c:	f7f6 fb82 	bl	8005f34 <_isatty>
 800f830:	1c43      	adds	r3, r0, #1
 800f832:	d102      	bne.n	800f83a <_isatty_r+0x1a>
 800f834:	682b      	ldr	r3, [r5, #0]
 800f836:	b103      	cbz	r3, 800f83a <_isatty_r+0x1a>
 800f838:	6023      	str	r3, [r4, #0]
 800f83a:	bd38      	pop	{r3, r4, r5, pc}
 800f83c:	2001172c 	.word	0x2001172c

0800f840 <__assert_func>:
 800f840:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f842:	4614      	mov	r4, r2
 800f844:	461a      	mov	r2, r3
 800f846:	4b09      	ldr	r3, [pc, #36]	@ (800f86c <__assert_func+0x2c>)
 800f848:	681b      	ldr	r3, [r3, #0]
 800f84a:	4605      	mov	r5, r0
 800f84c:	68d8      	ldr	r0, [r3, #12]
 800f84e:	b954      	cbnz	r4, 800f866 <__assert_func+0x26>
 800f850:	4b07      	ldr	r3, [pc, #28]	@ (800f870 <__assert_func+0x30>)
 800f852:	461c      	mov	r4, r3
 800f854:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f858:	9100      	str	r1, [sp, #0]
 800f85a:	462b      	mov	r3, r5
 800f85c:	4905      	ldr	r1, [pc, #20]	@ (800f874 <__assert_func+0x34>)
 800f85e:	f000 f86f 	bl	800f940 <fiprintf>
 800f862:	f7fd f923 	bl	800caac <abort>
 800f866:	4b04      	ldr	r3, [pc, #16]	@ (800f878 <__assert_func+0x38>)
 800f868:	e7f4      	b.n	800f854 <__assert_func+0x14>
 800f86a:	bf00      	nop
 800f86c:	20000120 	.word	0x20000120
 800f870:	0801334e 	.word	0x0801334e
 800f874:	08013320 	.word	0x08013320
 800f878:	08013313 	.word	0x08013313

0800f87c <_calloc_r>:
 800f87c:	b570      	push	{r4, r5, r6, lr}
 800f87e:	fba1 5402 	umull	r5, r4, r1, r2
 800f882:	b93c      	cbnz	r4, 800f894 <_calloc_r+0x18>
 800f884:	4629      	mov	r1, r5
 800f886:	f7fd f94b 	bl	800cb20 <_malloc_r>
 800f88a:	4606      	mov	r6, r0
 800f88c:	b928      	cbnz	r0, 800f89a <_calloc_r+0x1e>
 800f88e:	2600      	movs	r6, #0
 800f890:	4630      	mov	r0, r6
 800f892:	bd70      	pop	{r4, r5, r6, pc}
 800f894:	220c      	movs	r2, #12
 800f896:	6002      	str	r2, [r0, #0]
 800f898:	e7f9      	b.n	800f88e <_calloc_r+0x12>
 800f89a:	462a      	mov	r2, r5
 800f89c:	4621      	mov	r1, r4
 800f89e:	f7fe f899 	bl	800d9d4 <memset>
 800f8a2:	e7f5      	b.n	800f890 <_calloc_r+0x14>

0800f8a4 <__ascii_mbtowc>:
 800f8a4:	b082      	sub	sp, #8
 800f8a6:	b901      	cbnz	r1, 800f8aa <__ascii_mbtowc+0x6>
 800f8a8:	a901      	add	r1, sp, #4
 800f8aa:	b142      	cbz	r2, 800f8be <__ascii_mbtowc+0x1a>
 800f8ac:	b14b      	cbz	r3, 800f8c2 <__ascii_mbtowc+0x1e>
 800f8ae:	7813      	ldrb	r3, [r2, #0]
 800f8b0:	600b      	str	r3, [r1, #0]
 800f8b2:	7812      	ldrb	r2, [r2, #0]
 800f8b4:	1e10      	subs	r0, r2, #0
 800f8b6:	bf18      	it	ne
 800f8b8:	2001      	movne	r0, #1
 800f8ba:	b002      	add	sp, #8
 800f8bc:	4770      	bx	lr
 800f8be:	4610      	mov	r0, r2
 800f8c0:	e7fb      	b.n	800f8ba <__ascii_mbtowc+0x16>
 800f8c2:	f06f 0001 	mvn.w	r0, #1
 800f8c6:	e7f8      	b.n	800f8ba <__ascii_mbtowc+0x16>

0800f8c8 <_realloc_r>:
 800f8c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8cc:	4680      	mov	r8, r0
 800f8ce:	4615      	mov	r5, r2
 800f8d0:	460c      	mov	r4, r1
 800f8d2:	b921      	cbnz	r1, 800f8de <_realloc_r+0x16>
 800f8d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f8d8:	4611      	mov	r1, r2
 800f8da:	f7fd b921 	b.w	800cb20 <_malloc_r>
 800f8de:	b92a      	cbnz	r2, 800f8ec <_realloc_r+0x24>
 800f8e0:	f7fe fffe 	bl	800e8e0 <_free_r>
 800f8e4:	2400      	movs	r4, #0
 800f8e6:	4620      	mov	r0, r4
 800f8e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f8ec:	f000 f83a 	bl	800f964 <_malloc_usable_size_r>
 800f8f0:	4285      	cmp	r5, r0
 800f8f2:	4606      	mov	r6, r0
 800f8f4:	d802      	bhi.n	800f8fc <_realloc_r+0x34>
 800f8f6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800f8fa:	d8f4      	bhi.n	800f8e6 <_realloc_r+0x1e>
 800f8fc:	4629      	mov	r1, r5
 800f8fe:	4640      	mov	r0, r8
 800f900:	f7fd f90e 	bl	800cb20 <_malloc_r>
 800f904:	4607      	mov	r7, r0
 800f906:	2800      	cmp	r0, #0
 800f908:	d0ec      	beq.n	800f8e4 <_realloc_r+0x1c>
 800f90a:	42b5      	cmp	r5, r6
 800f90c:	462a      	mov	r2, r5
 800f90e:	4621      	mov	r1, r4
 800f910:	bf28      	it	cs
 800f912:	4632      	movcs	r2, r6
 800f914:	f7fe f987 	bl	800dc26 <memcpy>
 800f918:	4621      	mov	r1, r4
 800f91a:	4640      	mov	r0, r8
 800f91c:	f7fe ffe0 	bl	800e8e0 <_free_r>
 800f920:	463c      	mov	r4, r7
 800f922:	e7e0      	b.n	800f8e6 <_realloc_r+0x1e>

0800f924 <__ascii_wctomb>:
 800f924:	4603      	mov	r3, r0
 800f926:	4608      	mov	r0, r1
 800f928:	b141      	cbz	r1, 800f93c <__ascii_wctomb+0x18>
 800f92a:	2aff      	cmp	r2, #255	@ 0xff
 800f92c:	d904      	bls.n	800f938 <__ascii_wctomb+0x14>
 800f92e:	228a      	movs	r2, #138	@ 0x8a
 800f930:	601a      	str	r2, [r3, #0]
 800f932:	f04f 30ff 	mov.w	r0, #4294967295
 800f936:	4770      	bx	lr
 800f938:	700a      	strb	r2, [r1, #0]
 800f93a:	2001      	movs	r0, #1
 800f93c:	4770      	bx	lr
	...

0800f940 <fiprintf>:
 800f940:	b40e      	push	{r1, r2, r3}
 800f942:	b503      	push	{r0, r1, lr}
 800f944:	4601      	mov	r1, r0
 800f946:	ab03      	add	r3, sp, #12
 800f948:	4805      	ldr	r0, [pc, #20]	@ (800f960 <fiprintf+0x20>)
 800f94a:	f853 2b04 	ldr.w	r2, [r3], #4
 800f94e:	6800      	ldr	r0, [r0, #0]
 800f950:	9301      	str	r3, [sp, #4]
 800f952:	f7ff fd13 	bl	800f37c <_vfiprintf_r>
 800f956:	b002      	add	sp, #8
 800f958:	f85d eb04 	ldr.w	lr, [sp], #4
 800f95c:	b003      	add	sp, #12
 800f95e:	4770      	bx	lr
 800f960:	20000120 	.word	0x20000120

0800f964 <_malloc_usable_size_r>:
 800f964:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f968:	1f18      	subs	r0, r3, #4
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	bfbc      	itt	lt
 800f96e:	580b      	ldrlt	r3, [r1, r0]
 800f970:	18c0      	addlt	r0, r0, r3
 800f972:	4770      	bx	lr

0800f974 <_init>:
 800f974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f976:	bf00      	nop
 800f978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f97a:	bc08      	pop	{r3}
 800f97c:	469e      	mov	lr, r3
 800f97e:	4770      	bx	lr

0800f980 <_fini>:
 800f980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f982:	bf00      	nop
 800f984:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f986:	bc08      	pop	{r3}
 800f988:	469e      	mov	lr, r3
 800f98a:	4770      	bx	lr
