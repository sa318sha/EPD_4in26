
EPaper_v3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ee20  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000039f0  0800ef60  0800ef60  0000ff60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08012950  08012950  00013950  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  08012958  08012958  00013958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000008  08012960  08012960  00013960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001ec  20000008  08012968  00014008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000110d0  200001f4  08012b54  000141f4  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  200112c4  08012b54  000142c4  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000141f4  2**0
                  CONTENTS, READONLY
 10 .debug_info   000488eb  00000000  00000000  00014224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000748f  00000000  00000000  0005cb0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003218  00000000  00000000  00063fa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0002b926  00000000  00000000  000671b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0002e5ff  00000000  00000000  00092ade  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    001060eb  00000000  00000000  000c10dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001c71c8  2**0
                  CONTENTS, READONLY
 17 .debug_rnglists 0000263c  00000000  00000000  001c720b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000ecb4  00000000  00000000  001c9848  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000065  00000000  00000000  001d84fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001f4 	.word	0x200001f4
 800015c:	00000000 	.word	0x00000000
 8000160:	0800ef48 	.word	0x0800ef48

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001f8 	.word	0x200001f8
 800017c:	0800ef48 	.word	0x0800ef48

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_uldivmod>:
 8000b58:	b953      	cbnz	r3, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5a:	b94a      	cbnz	r2, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5c:	2900      	cmp	r1, #0
 8000b5e:	bf08      	it	eq
 8000b60:	2800      	cmpeq	r0, #0
 8000b62:	bf1c      	itt	ne
 8000b64:	f04f 31ff 	movne.w	r1, #4294967295
 8000b68:	f04f 30ff 	movne.w	r0, #4294967295
 8000b6c:	f000 b96a 	b.w	8000e44 <__aeabi_idiv0>
 8000b70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b78:	f000 f806 	bl	8000b88 <__udivmoddi4>
 8000b7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b84:	b004      	add	sp, #16
 8000b86:	4770      	bx	lr

08000b88 <__udivmoddi4>:
 8000b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b8c:	9d08      	ldr	r5, [sp, #32]
 8000b8e:	460c      	mov	r4, r1
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d14e      	bne.n	8000c32 <__udivmoddi4+0xaa>
 8000b94:	4694      	mov	ip, r2
 8000b96:	458c      	cmp	ip, r1
 8000b98:	4686      	mov	lr, r0
 8000b9a:	fab2 f282 	clz	r2, r2
 8000b9e:	d962      	bls.n	8000c66 <__udivmoddi4+0xde>
 8000ba0:	b14a      	cbz	r2, 8000bb6 <__udivmoddi4+0x2e>
 8000ba2:	f1c2 0320 	rsb	r3, r2, #32
 8000ba6:	4091      	lsls	r1, r2
 8000ba8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bb0:	4319      	orrs	r1, r3
 8000bb2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bba:	fa1f f68c 	uxth.w	r6, ip
 8000bbe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000bc2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bc6:	fb07 1114 	mls	r1, r7, r4, r1
 8000bca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bce:	fb04 f106 	mul.w	r1, r4, r6
 8000bd2:	4299      	cmp	r1, r3
 8000bd4:	d90a      	bls.n	8000bec <__udivmoddi4+0x64>
 8000bd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bda:	f104 30ff 	add.w	r0, r4, #4294967295
 8000bde:	f080 8112 	bcs.w	8000e06 <__udivmoddi4+0x27e>
 8000be2:	4299      	cmp	r1, r3
 8000be4:	f240 810f 	bls.w	8000e06 <__udivmoddi4+0x27e>
 8000be8:	3c02      	subs	r4, #2
 8000bea:	4463      	add	r3, ip
 8000bec:	1a59      	subs	r1, r3, r1
 8000bee:	fa1f f38e 	uxth.w	r3, lr
 8000bf2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bf6:	fb07 1110 	mls	r1, r7, r0, r1
 8000bfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bfe:	fb00 f606 	mul.w	r6, r0, r6
 8000c02:	429e      	cmp	r6, r3
 8000c04:	d90a      	bls.n	8000c1c <__udivmoddi4+0x94>
 8000c06:	eb1c 0303 	adds.w	r3, ip, r3
 8000c0a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c0e:	f080 80fc 	bcs.w	8000e0a <__udivmoddi4+0x282>
 8000c12:	429e      	cmp	r6, r3
 8000c14:	f240 80f9 	bls.w	8000e0a <__udivmoddi4+0x282>
 8000c18:	4463      	add	r3, ip
 8000c1a:	3802      	subs	r0, #2
 8000c1c:	1b9b      	subs	r3, r3, r6
 8000c1e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c22:	2100      	movs	r1, #0
 8000c24:	b11d      	cbz	r5, 8000c2e <__udivmoddi4+0xa6>
 8000c26:	40d3      	lsrs	r3, r2
 8000c28:	2200      	movs	r2, #0
 8000c2a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c32:	428b      	cmp	r3, r1
 8000c34:	d905      	bls.n	8000c42 <__udivmoddi4+0xba>
 8000c36:	b10d      	cbz	r5, 8000c3c <__udivmoddi4+0xb4>
 8000c38:	e9c5 0100 	strd	r0, r1, [r5]
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	4608      	mov	r0, r1
 8000c40:	e7f5      	b.n	8000c2e <__udivmoddi4+0xa6>
 8000c42:	fab3 f183 	clz	r1, r3
 8000c46:	2900      	cmp	r1, #0
 8000c48:	d146      	bne.n	8000cd8 <__udivmoddi4+0x150>
 8000c4a:	42a3      	cmp	r3, r4
 8000c4c:	d302      	bcc.n	8000c54 <__udivmoddi4+0xcc>
 8000c4e:	4290      	cmp	r0, r2
 8000c50:	f0c0 80f0 	bcc.w	8000e34 <__udivmoddi4+0x2ac>
 8000c54:	1a86      	subs	r6, r0, r2
 8000c56:	eb64 0303 	sbc.w	r3, r4, r3
 8000c5a:	2001      	movs	r0, #1
 8000c5c:	2d00      	cmp	r5, #0
 8000c5e:	d0e6      	beq.n	8000c2e <__udivmoddi4+0xa6>
 8000c60:	e9c5 6300 	strd	r6, r3, [r5]
 8000c64:	e7e3      	b.n	8000c2e <__udivmoddi4+0xa6>
 8000c66:	2a00      	cmp	r2, #0
 8000c68:	f040 8090 	bne.w	8000d8c <__udivmoddi4+0x204>
 8000c6c:	eba1 040c 	sub.w	r4, r1, ip
 8000c70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c74:	fa1f f78c 	uxth.w	r7, ip
 8000c78:	2101      	movs	r1, #1
 8000c7a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c82:	fb08 4416 	mls	r4, r8, r6, r4
 8000c86:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c8a:	fb07 f006 	mul.w	r0, r7, r6
 8000c8e:	4298      	cmp	r0, r3
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0x11c>
 8000c92:	eb1c 0303 	adds.w	r3, ip, r3
 8000c96:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c9a:	d202      	bcs.n	8000ca2 <__udivmoddi4+0x11a>
 8000c9c:	4298      	cmp	r0, r3
 8000c9e:	f200 80cd 	bhi.w	8000e3c <__udivmoddi4+0x2b4>
 8000ca2:	4626      	mov	r6, r4
 8000ca4:	1a1c      	subs	r4, r3, r0
 8000ca6:	fa1f f38e 	uxth.w	r3, lr
 8000caa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cae:	fb08 4410 	mls	r4, r8, r0, r4
 8000cb2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cb6:	fb00 f707 	mul.w	r7, r0, r7
 8000cba:	429f      	cmp	r7, r3
 8000cbc:	d908      	bls.n	8000cd0 <__udivmoddi4+0x148>
 8000cbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000cc2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cc6:	d202      	bcs.n	8000cce <__udivmoddi4+0x146>
 8000cc8:	429f      	cmp	r7, r3
 8000cca:	f200 80b0 	bhi.w	8000e2e <__udivmoddi4+0x2a6>
 8000cce:	4620      	mov	r0, r4
 8000cd0:	1bdb      	subs	r3, r3, r7
 8000cd2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cd6:	e7a5      	b.n	8000c24 <__udivmoddi4+0x9c>
 8000cd8:	f1c1 0620 	rsb	r6, r1, #32
 8000cdc:	408b      	lsls	r3, r1
 8000cde:	fa22 f706 	lsr.w	r7, r2, r6
 8000ce2:	431f      	orrs	r7, r3
 8000ce4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ce8:	fa04 f301 	lsl.w	r3, r4, r1
 8000cec:	ea43 030c 	orr.w	r3, r3, ip
 8000cf0:	40f4      	lsrs	r4, r6
 8000cf2:	fa00 f801 	lsl.w	r8, r0, r1
 8000cf6:	0c38      	lsrs	r0, r7, #16
 8000cf8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000cfc:	fbb4 fef0 	udiv	lr, r4, r0
 8000d00:	fa1f fc87 	uxth.w	ip, r7
 8000d04:	fb00 441e 	mls	r4, r0, lr, r4
 8000d08:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d0c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d10:	45a1      	cmp	r9, r4
 8000d12:	fa02 f201 	lsl.w	r2, r2, r1
 8000d16:	d90a      	bls.n	8000d2e <__udivmoddi4+0x1a6>
 8000d18:	193c      	adds	r4, r7, r4
 8000d1a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d1e:	f080 8084 	bcs.w	8000e2a <__udivmoddi4+0x2a2>
 8000d22:	45a1      	cmp	r9, r4
 8000d24:	f240 8081 	bls.w	8000e2a <__udivmoddi4+0x2a2>
 8000d28:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d2c:	443c      	add	r4, r7
 8000d2e:	eba4 0409 	sub.w	r4, r4, r9
 8000d32:	fa1f f983 	uxth.w	r9, r3
 8000d36:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d3a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d3e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d42:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d46:	45a4      	cmp	ip, r4
 8000d48:	d907      	bls.n	8000d5a <__udivmoddi4+0x1d2>
 8000d4a:	193c      	adds	r4, r7, r4
 8000d4c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d50:	d267      	bcs.n	8000e22 <__udivmoddi4+0x29a>
 8000d52:	45a4      	cmp	ip, r4
 8000d54:	d965      	bls.n	8000e22 <__udivmoddi4+0x29a>
 8000d56:	3b02      	subs	r3, #2
 8000d58:	443c      	add	r4, r7
 8000d5a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d5e:	fba0 9302 	umull	r9, r3, r0, r2
 8000d62:	eba4 040c 	sub.w	r4, r4, ip
 8000d66:	429c      	cmp	r4, r3
 8000d68:	46ce      	mov	lr, r9
 8000d6a:	469c      	mov	ip, r3
 8000d6c:	d351      	bcc.n	8000e12 <__udivmoddi4+0x28a>
 8000d6e:	d04e      	beq.n	8000e0e <__udivmoddi4+0x286>
 8000d70:	b155      	cbz	r5, 8000d88 <__udivmoddi4+0x200>
 8000d72:	ebb8 030e 	subs.w	r3, r8, lr
 8000d76:	eb64 040c 	sbc.w	r4, r4, ip
 8000d7a:	fa04 f606 	lsl.w	r6, r4, r6
 8000d7e:	40cb      	lsrs	r3, r1
 8000d80:	431e      	orrs	r6, r3
 8000d82:	40cc      	lsrs	r4, r1
 8000d84:	e9c5 6400 	strd	r6, r4, [r5]
 8000d88:	2100      	movs	r1, #0
 8000d8a:	e750      	b.n	8000c2e <__udivmoddi4+0xa6>
 8000d8c:	f1c2 0320 	rsb	r3, r2, #32
 8000d90:	fa20 f103 	lsr.w	r1, r0, r3
 8000d94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d98:	fa24 f303 	lsr.w	r3, r4, r3
 8000d9c:	4094      	lsls	r4, r2
 8000d9e:	430c      	orrs	r4, r1
 8000da0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da8:	fa1f f78c 	uxth.w	r7, ip
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3110 	mls	r1, r8, r0, r3
 8000db4:	0c23      	lsrs	r3, r4, #16
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb00 f107 	mul.w	r1, r0, r7
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x24c>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000dca:	d22c      	bcs.n	8000e26 <__udivmoddi4+0x29e>
 8000dcc:	4299      	cmp	r1, r3
 8000dce:	d92a      	bls.n	8000e26 <__udivmoddi4+0x29e>
 8000dd0:	3802      	subs	r0, #2
 8000dd2:	4463      	add	r3, ip
 8000dd4:	1a5b      	subs	r3, r3, r1
 8000dd6:	b2a4      	uxth	r4, r4
 8000dd8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ddc:	fb08 3311 	mls	r3, r8, r1, r3
 8000de0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000de4:	fb01 f307 	mul.w	r3, r1, r7
 8000de8:	42a3      	cmp	r3, r4
 8000dea:	d908      	bls.n	8000dfe <__udivmoddi4+0x276>
 8000dec:	eb1c 0404 	adds.w	r4, ip, r4
 8000df0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000df4:	d213      	bcs.n	8000e1e <__udivmoddi4+0x296>
 8000df6:	42a3      	cmp	r3, r4
 8000df8:	d911      	bls.n	8000e1e <__udivmoddi4+0x296>
 8000dfa:	3902      	subs	r1, #2
 8000dfc:	4464      	add	r4, ip
 8000dfe:	1ae4      	subs	r4, r4, r3
 8000e00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e04:	e739      	b.n	8000c7a <__udivmoddi4+0xf2>
 8000e06:	4604      	mov	r4, r0
 8000e08:	e6f0      	b.n	8000bec <__udivmoddi4+0x64>
 8000e0a:	4608      	mov	r0, r1
 8000e0c:	e706      	b.n	8000c1c <__udivmoddi4+0x94>
 8000e0e:	45c8      	cmp	r8, r9
 8000e10:	d2ae      	bcs.n	8000d70 <__udivmoddi4+0x1e8>
 8000e12:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e16:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e1a:	3801      	subs	r0, #1
 8000e1c:	e7a8      	b.n	8000d70 <__udivmoddi4+0x1e8>
 8000e1e:	4631      	mov	r1, r6
 8000e20:	e7ed      	b.n	8000dfe <__udivmoddi4+0x276>
 8000e22:	4603      	mov	r3, r0
 8000e24:	e799      	b.n	8000d5a <__udivmoddi4+0x1d2>
 8000e26:	4630      	mov	r0, r6
 8000e28:	e7d4      	b.n	8000dd4 <__udivmoddi4+0x24c>
 8000e2a:	46d6      	mov	lr, sl
 8000e2c:	e77f      	b.n	8000d2e <__udivmoddi4+0x1a6>
 8000e2e:	4463      	add	r3, ip
 8000e30:	3802      	subs	r0, #2
 8000e32:	e74d      	b.n	8000cd0 <__udivmoddi4+0x148>
 8000e34:	4606      	mov	r6, r0
 8000e36:	4623      	mov	r3, r4
 8000e38:	4608      	mov	r0, r1
 8000e3a:	e70f      	b.n	8000c5c <__udivmoddi4+0xd4>
 8000e3c:	3e02      	subs	r6, #2
 8000e3e:	4463      	add	r3, ip
 8000e40:	e730      	b.n	8000ca4 <__udivmoddi4+0x11c>
 8000e42:	bf00      	nop

08000e44 <__aeabi_idiv0>:
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop

08000e48 <_Z12log_message2hPKcz>:
 */
#include "Debug.h"
#include  <cstdint>
#include <cstdio>

void log_message2(uint8_t level, const char *format, ...) {
 8000e48:	b40e      	push	{r1, r2, r3}
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	b0a5      	sub	sp, #148	@ 0x94
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	4603      	mov	r3, r0
 8000e52:	71fb      	strb	r3, [r7, #7]
    if (level > LOG_LEVEL) {
 8000e54:	79fb      	ldrb	r3, [r7, #7]
 8000e56:	2b03      	cmp	r3, #3
 8000e58:	d811      	bhi.n	8000e7e <_Z12log_message2hPKcz+0x36>
        return;
    }

    char buffer[128];
    va_list args;
    va_start(args, format);
 8000e5a:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8000e5e:	60fb      	str	r3, [r7, #12]
    vsnprintf(buffer, sizeof(buffer), format, args);
 8000e60:	f107 0010 	add.w	r0, r7, #16
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8000e6a:	2180      	movs	r1, #128	@ 0x80
 8000e6c:	f00b fffa 	bl	800ce64 <vsniprintf>
    va_end(args);

    printf("%s", buffer);
 8000e70:	f107 0310 	add.w	r3, r7, #16
 8000e74:	4619      	mov	r1, r3
 8000e76:	4805      	ldr	r0, [pc, #20]	@ (8000e8c <_Z12log_message2hPKcz+0x44>)
 8000e78:	f00b fee2 	bl	800cc40 <iprintf>
 8000e7c:	e000      	b.n	8000e80 <_Z12log_message2hPKcz+0x38>
        return;
 8000e7e:	bf00      	nop
}
 8000e80:	3794      	adds	r7, #148	@ 0x94
 8000e82:	46bd      	mov	sp, r7
 8000e84:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000e88:	b003      	add	sp, #12
 8000e8a:	4770      	bx	lr
 8000e8c:	0800ef60 	.word	0x0800ef60

08000e90 <_ZN9EPD_4in26C1EP12GPIO_TypeDeftS1_tS1_tS1_tS1_tP19__SPI_HandleTypeDef>:
	busyPort(BUSY_GPIO_Port), busyPin(BUSY_Pin),
	pwrPort(PWR_GPIO_Port), pwrPin(PWR_Pin),
	spi(&hspi1)
{}

EPD_4in26::EPD_4in26(GPIO_TypeDef* rstPort, uint16_t rstPin,
 8000e90:	b480      	push	{r7}
 8000e92:	b085      	sub	sp, #20
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	60f8      	str	r0, [r7, #12]
 8000e98:	60b9      	str	r1, [r7, #8]
 8000e9a:	603b      	str	r3, [r7, #0]
 8000e9c:	4613      	mov	r3, r2
 8000e9e:	80fb      	strh	r3, [r7, #6]
		GPIO_TypeDef* dcPort, uint16_t dcPin,
		GPIO_TypeDef* csPort, uint16_t csPin,
		GPIO_TypeDef* busyPort, uint16_t busyPin,
		GPIO_TypeDef* pwrPort, uint16_t pwrPin,
		SPI_HandleTypeDef* spiHandle):
	rstPort(rstPort), rstPin(rstPin),
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	68ba      	ldr	r2, [r7, #8]
 8000ea4:	601a      	str	r2, [r3, #0]
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	88fa      	ldrh	r2, [r7, #6]
 8000eaa:	809a      	strh	r2, [r3, #4]
	dcPort(dcPort), dcPin(dcPin),
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	683a      	ldr	r2, [r7, #0]
 8000eb0:	609a      	str	r2, [r3, #8]
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	8b3a      	ldrh	r2, [r7, #24]
 8000eb6:	819a      	strh	r2, [r3, #12]
	csPort(csPort), csPin(csPin),
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	69fa      	ldr	r2, [r7, #28]
 8000ebc:	611a      	str	r2, [r3, #16]
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	8c3a      	ldrh	r2, [r7, #32]
 8000ec2:	829a      	strh	r2, [r3, #20]
	busyPort(busyPort), busyPin(busyPin),
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ec8:	619a      	str	r2, [r3, #24]
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8000ece:	839a      	strh	r2, [r3, #28]
	pwrPort(pwrPort), pwrPin(pwrPin),
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000ed4:	621a      	str	r2, [r3, #32]
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8000eda:	849a      	strh	r2, [r3, #36]	@ 0x24
	spi(spiHandle)
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000ee0:	629a      	str	r2, [r3, #40]	@ 0x28
{

}
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	3714      	adds	r7, #20
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr

08000ef0 <_ZN9EPD_4in267pinInitEv>:
0x00,	0x00,
};


int EPD_4in26::pinInit(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(dcPort, dcPin, GPIO_PIN_RESET);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	6898      	ldr	r0, [r3, #8]
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	899b      	ldrh	r3, [r3, #12]
 8000f00:	2200      	movs	r2, #0
 8000f02:	4619      	mov	r1, r3
 8000f04:	f004 ff76 	bl	8005df4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(csPort, csPin, GPIO_PIN_RESET);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6918      	ldr	r0, [r3, #16]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	8a9b      	ldrh	r3, [r3, #20]
 8000f10:	2200      	movs	r2, #0
 8000f12:	4619      	mov	r1, r3
 8000f14:	f004 ff6e 	bl	8005df4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(pwrPort, pwrPin, GPIO_PIN_SET);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6a18      	ldr	r0, [r3, #32]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000f20:	2201      	movs	r2, #1
 8000f22:	4619      	mov	r1, r3
 8000f24:	f004 ff66 	bl	8005df4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(rstPort, rstPin, GPIO_PIN_SET);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6818      	ldr	r0, [r3, #0]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	889b      	ldrh	r3, [r3, #4]
 8000f30:	2201      	movs	r2, #1
 8000f32:	4619      	mov	r1, r3
 8000f34:	f004 ff5e 	bl	8005df4 <HAL_GPIO_WritePin>
    return 0;
 8000f38:	2300      	movs	r3, #0
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}

08000f42 <_ZN9EPD_4in2615EPD_4in26_ResetEv>:
/******************************************************************************
function :	Software reset
parameter:
******************************************************************************/
void EPD_4in26::EPD_4in26_Reset(void)
{
 8000f42:	b580      	push	{r7, lr}
 8000f44:	b082      	sub	sp, #8
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(rstPort, rstPin, GPIO_PIN_SET);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6818      	ldr	r0, [r3, #0]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	889b      	ldrh	r3, [r3, #4]
 8000f52:	2201      	movs	r2, #1
 8000f54:	4619      	mov	r1, r3
 8000f56:	f004 ff4d 	bl	8005df4 <HAL_GPIO_WritePin>
	vTaskDelay(100);
 8000f5a:	2064      	movs	r0, #100	@ 0x64
 8000f5c:	f009 fb1a 	bl	800a594 <vTaskDelay>
	HAL_GPIO_WritePin(rstPort, rstPin, GPIO_PIN_RESET);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6818      	ldr	r0, [r3, #0]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	889b      	ldrh	r3, [r3, #4]
 8000f68:	2200      	movs	r2, #0
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	f004 ff42 	bl	8005df4 <HAL_GPIO_WritePin>
    vTaskDelay(2);
 8000f70:	2002      	movs	r0, #2
 8000f72:	f009 fb0f 	bl	800a594 <vTaskDelay>
	HAL_GPIO_WritePin(rstPort, rstPin, GPIO_PIN_SET);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6818      	ldr	r0, [r3, #0]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	889b      	ldrh	r3, [r3, #4]
 8000f7e:	2201      	movs	r2, #1
 8000f80:	4619      	mov	r1, r3
 8000f82:	f004 ff37 	bl	8005df4 <HAL_GPIO_WritePin>
    vTaskDelay(100);
 8000f86:	2064      	movs	r0, #100	@ 0x64
 8000f88:	f009 fb04 	bl	800a594 <vTaskDelay>
}
 8000f8c:	bf00      	nop
 8000f8e:	3708      	adds	r7, #8
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <_ZN9EPD_4in2621EPD_4in26_SendCommandEh>:
function :	send command
parameter:
     Reg : Command register
******************************************************************************/
void EPD_4in26::EPD_4in26_SendCommand(UBYTE Reg)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	460b      	mov	r3, r1
 8000f9e:	70fb      	strb	r3, [r7, #3]

	__HAL_SPI_DISABLE(spi);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000fb2:	601a      	str	r2, [r3, #0]
	HAL_Delay(1);
 8000fb4:	2001      	movs	r0, #1
 8000fb6:	f004 fc91 	bl	80058dc <HAL_Delay>
	__HAL_SPI_ENABLE(spi);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000fcc:	601a      	str	r2, [r3, #0]

	// Flush the RX buffer manually before starting transmission
	__HAL_SPI_CLEAR_OVRFLAG(spi);
 8000fce:	2300      	movs	r3, #0
 8000fd0:	60fb      	str	r3, [r7, #12]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	68db      	ldr	r3, [r3, #12]
 8000fda:	60fb      	str	r3, [r7, #12]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	689b      	ldr	r3, [r3, #8]
 8000fe4:	60fb      	str	r3, [r7, #12]
 8000fe6:	68fb      	ldr	r3, [r7, #12]

    HAL_GPIO_WritePin(dcPort, dcPin, GPIO_PIN_RESET);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6898      	ldr	r0, [r3, #8]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	899b      	ldrh	r3, [r3, #12]
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	f004 fefe 	bl	8005df4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(csPort, csPin, GPIO_PIN_RESET);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6918      	ldr	r0, [r3, #16]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	8a9b      	ldrh	r3, [r3, #20]
 8001000:	2200      	movs	r2, #0
 8001002:	4619      	mov	r1, r3
 8001004:	f004 fef6 	bl	8005df4 <HAL_GPIO_WritePin>

    vTaskDelay(1);
 8001008:	2001      	movs	r0, #1
 800100a:	f009 fac3 	bl	800a594 <vTaskDelay>

    HAL_SPI_Transmit(spi, &Reg, 1, HAL_MAX_DELAY);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8001012:	1cf9      	adds	r1, r7, #3
 8001014:	f04f 33ff 	mov.w	r3, #4294967295
 8001018:	2201      	movs	r2, #1
 800101a:	f006 fdc8 	bl	8007bae <HAL_SPI_Transmit>

    vTaskDelay(1);
 800101e:	2001      	movs	r0, #1
 8001020:	f009 fab8 	bl	800a594 <vTaskDelay>

    HAL_GPIO_WritePin(csPort, csPin, GPIO_PIN_SET);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6918      	ldr	r0, [r3, #16]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	8a9b      	ldrh	r3, [r3, #20]
 800102c:	2201      	movs	r2, #1
 800102e:	4619      	mov	r1, r3
 8001030:	f004 fee0 	bl	8005df4 <HAL_GPIO_WritePin>
}
 8001034:	bf00      	nop
 8001036:	3710      	adds	r7, #16
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}

0800103c <_ZN9EPD_4in2618EPD_4in26_SendDataEh>:
function :	send data
parameter:
    Data : Write data
******************************************************************************/
void EPD_4in26::EPD_4in26_SendData(UBYTE Data)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	460b      	mov	r3, r1
 8001046:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(dcPort, dcPin, GPIO_PIN_SET);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6898      	ldr	r0, [r3, #8]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	899b      	ldrh	r3, [r3, #12]
 8001050:	2201      	movs	r2, #1
 8001052:	4619      	mov	r1, r3
 8001054:	f004 fece 	bl	8005df4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(csPort, csPin, GPIO_PIN_RESET);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6918      	ldr	r0, [r3, #16]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	8a9b      	ldrh	r3, [r3, #20]
 8001060:	2200      	movs	r2, #0
 8001062:	4619      	mov	r1, r3
 8001064:	f004 fec6 	bl	8005df4 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(spi, &Data, 1, HAL_MAX_DELAY);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800106c:	1cf9      	adds	r1, r7, #3
 800106e:	f04f 33ff 	mov.w	r3, #4294967295
 8001072:	2201      	movs	r2, #1
 8001074:	f006 fd9b 	bl	8007bae <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(csPort, csPin, GPIO_PIN_SET);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6918      	ldr	r0, [r3, #16]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	8a9b      	ldrh	r3, [r3, #20]
 8001080:	2201      	movs	r2, #1
 8001082:	4619      	mov	r1, r3
 8001084:	f004 feb6 	bl	8005df4 <HAL_GPIO_WritePin>
}
 8001088:	bf00      	nop
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}

08001090 <_ZN9EPD_4in2619EPD_4in26_SendData2EPhm>:

void EPD_4in26::EPD_4in26_SendData2(UBYTE *pData, UDOUBLE len)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	60f8      	str	r0, [r7, #12]
 8001098:	60b9      	str	r1, [r7, #8]
 800109a:	607a      	str	r2, [r7, #4]
    HAL_GPIO_WritePin(dcPort, dcPin, GPIO_PIN_SET);
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	6898      	ldr	r0, [r3, #8]
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	899b      	ldrh	r3, [r3, #12]
 80010a4:	2201      	movs	r2, #1
 80010a6:	4619      	mov	r1, r3
 80010a8:	f004 fea4 	bl	8005df4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(csPort, csPin, GPIO_PIN_RESET);
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	6918      	ldr	r0, [r3, #16]
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	8a9b      	ldrh	r3, [r3, #20]
 80010b4:	2200      	movs	r2, #0
 80010b6:	4619      	mov	r1, r3
 80010b8:	f004 fe9c 	bl	8005df4 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(spi, pData, len, HAL_MAX_DELAY);
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	b29a      	uxth	r2, r3
 80010c4:	f04f 33ff 	mov.w	r3, #4294967295
 80010c8:	68b9      	ldr	r1, [r7, #8]
 80010ca:	f006 fd70 	bl	8007bae <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(csPort, csPin, GPIO_PIN_SET);
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	6918      	ldr	r0, [r3, #16]
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	8a9b      	ldrh	r3, [r3, #20]
 80010d6:	2201      	movs	r2, #1
 80010d8:	4619      	mov	r1, r3
 80010da:	f004 fe8b 	bl	8005df4 <HAL_GPIO_WritePin>
}
 80010de:	bf00      	nop
 80010e0:	3710      	adds	r7, #16
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <_ZN9EPD_4in2618EPD_4in26_ReadBusyEv>:
//		DEV_Delay_ms(20);
//	}
//	DEV_Delay_ms(20);
//    Debug("e-Paper busy release\r\n");
void EPD_4in26::EPD_4in26_ReadBusy(void)
{
 80010e6:	b580      	push	{r7, lr}
 80010e8:	b082      	sub	sp, #8
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	6078      	str	r0, [r7, #4]
		while(1)
		{	 //=1 BUSY
			if(HAL_GPIO_ReadPin(busyPort, busyPin) == GPIO_PIN_RESET)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	699a      	ldr	r2, [r3, #24]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	8b9b      	ldrh	r3, [r3, #28]
 80010f6:	4619      	mov	r1, r3
 80010f8:	4610      	mov	r0, r2
 80010fa:	f004 fe63 	bl	8005dc4 <HAL_GPIO_ReadPin>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	bf0c      	ite	eq
 8001104:	2301      	moveq	r3, #1
 8001106:	2300      	movne	r3, #0
 8001108:	b2db      	uxtb	r3, r3
 800110a:	2b00      	cmp	r3, #0
 800110c:	d103      	bne.n	8001116 <_ZN9EPD_4in2618EPD_4in26_ReadBusyEv+0x30>
				break;
			vTaskDelay(20);
 800110e:	2014      	movs	r0, #20
 8001110:	f009 fa40 	bl	800a594 <vTaskDelay>
			if(HAL_GPIO_ReadPin(busyPort, busyPin) == GPIO_PIN_RESET)
 8001114:	e7eb      	b.n	80010ee <_ZN9EPD_4in2618EPD_4in26_ReadBusyEv+0x8>
				break;
 8001116:	bf00      	nop
		}
		vTaskDelay(20);
 8001118:	2014      	movs	r0, #20
 800111a:	f009 fa3b 	bl	800a594 <vTaskDelay>
        Debug("e-Paper busy release\r\n");
    }
    vTaskDelay(20);
//    Debug("e-Paper busy release\r\n");
#endif
}
 800111e:	bf00      	nop
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}

08001126 <_ZN9EPD_4in2623EPD_4in26_TurnOnDisplayEv>:
/******************************************************************************
function :	Turn On Display
parameter:
******************************************************************************/
void EPD_4in26::EPD_4in26_TurnOnDisplay(void)
{
 8001126:	b580      	push	{r7, lr}
 8001128:	b082      	sub	sp, #8
 800112a:	af00      	add	r7, sp, #0
 800112c:	6078      	str	r0, [r7, #4]
	EPD_4in26_SendCommand(0x22); //Display Update Control
 800112e:	2122      	movs	r1, #34	@ 0x22
 8001130:	6878      	ldr	r0, [r7, #4]
 8001132:	f7ff ff2f 	bl	8000f94 <_ZN9EPD_4in2621EPD_4in26_SendCommandEh>
	EPD_4in26_SendData(0xF7);
 8001136:	21f7      	movs	r1, #247	@ 0xf7
 8001138:	6878      	ldr	r0, [r7, #4]
 800113a:	f7ff ff7f 	bl	800103c <_ZN9EPD_4in2618EPD_4in26_SendDataEh>
	EPD_4in26_SendCommand(0x20); //Activate Display Update Sequence
 800113e:	2120      	movs	r1, #32
 8001140:	6878      	ldr	r0, [r7, #4]
 8001142:	f7ff ff27 	bl	8000f94 <_ZN9EPD_4in2621EPD_4in26_SendCommandEh>
	EPD_4in26_ReadBusy();
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f7ff ffcd 	bl	80010e6 <_ZN9EPD_4in2618EPD_4in26_ReadBusyEv>
}
 800114c:	bf00      	nop
 800114e:	3708      	adds	r7, #8
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}

08001154 <_ZN9EPD_4in2620EPD_4in26_SetWindowsEtttt>:
/******************************************************************************
function :	Setting the display window
parameter:
******************************************************************************/
void EPD_4in26::EPD_4in26_SetWindows(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	60f8      	str	r0, [r7, #12]
 800115c:	4608      	mov	r0, r1
 800115e:	4611      	mov	r1, r2
 8001160:	461a      	mov	r2, r3
 8001162:	4603      	mov	r3, r0
 8001164:	817b      	strh	r3, [r7, #10]
 8001166:	460b      	mov	r3, r1
 8001168:	813b      	strh	r3, [r7, #8]
 800116a:	4613      	mov	r3, r2
 800116c:	80fb      	strh	r3, [r7, #6]
    EPD_4in26_SendCommand(0x44); // SET_RAM_X_ADDRESS_START_END_POSITION
 800116e:	2144      	movs	r1, #68	@ 0x44
 8001170:	68f8      	ldr	r0, [r7, #12]
 8001172:	f7ff ff0f 	bl	8000f94 <_ZN9EPD_4in2621EPD_4in26_SendCommandEh>
    EPD_4in26_SendData(Xstart & 0xFF);
 8001176:	897b      	ldrh	r3, [r7, #10]
 8001178:	b2db      	uxtb	r3, r3
 800117a:	4619      	mov	r1, r3
 800117c:	68f8      	ldr	r0, [r7, #12]
 800117e:	f7ff ff5d 	bl	800103c <_ZN9EPD_4in2618EPD_4in26_SendDataEh>
    EPD_4in26_SendData((Xstart>>8) & 0x03);
 8001182:	897b      	ldrh	r3, [r7, #10]
 8001184:	0a1b      	lsrs	r3, r3, #8
 8001186:	b29b      	uxth	r3, r3
 8001188:	b2db      	uxtb	r3, r3
 800118a:	f003 0303 	and.w	r3, r3, #3
 800118e:	b2db      	uxtb	r3, r3
 8001190:	4619      	mov	r1, r3
 8001192:	68f8      	ldr	r0, [r7, #12]
 8001194:	f7ff ff52 	bl	800103c <_ZN9EPD_4in2618EPD_4in26_SendDataEh>
    EPD_4in26_SendData(Xend & 0xFF);
 8001198:	88fb      	ldrh	r3, [r7, #6]
 800119a:	b2db      	uxtb	r3, r3
 800119c:	4619      	mov	r1, r3
 800119e:	68f8      	ldr	r0, [r7, #12]
 80011a0:	f7ff ff4c 	bl	800103c <_ZN9EPD_4in2618EPD_4in26_SendDataEh>
    EPD_4in26_SendData((Xend>>8) & 0x03);
 80011a4:	88fb      	ldrh	r3, [r7, #6]
 80011a6:	0a1b      	lsrs	r3, r3, #8
 80011a8:	b29b      	uxth	r3, r3
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	f003 0303 	and.w	r3, r3, #3
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	4619      	mov	r1, r3
 80011b4:	68f8      	ldr	r0, [r7, #12]
 80011b6:	f7ff ff41 	bl	800103c <_ZN9EPD_4in2618EPD_4in26_SendDataEh>

    EPD_4in26_SendCommand(0x45); // SET_RAM_Y_ADDRESS_START_END_POSITION
 80011ba:	2145      	movs	r1, #69	@ 0x45
 80011bc:	68f8      	ldr	r0, [r7, #12]
 80011be:	f7ff fee9 	bl	8000f94 <_ZN9EPD_4in2621EPD_4in26_SendCommandEh>
    EPD_4in26_SendData(Ystart & 0xFF);
 80011c2:	893b      	ldrh	r3, [r7, #8]
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	4619      	mov	r1, r3
 80011c8:	68f8      	ldr	r0, [r7, #12]
 80011ca:	f7ff ff37 	bl	800103c <_ZN9EPD_4in2618EPD_4in26_SendDataEh>
    EPD_4in26_SendData((Ystart>>8) & 0x03);
 80011ce:	893b      	ldrh	r3, [r7, #8]
 80011d0:	0a1b      	lsrs	r3, r3, #8
 80011d2:	b29b      	uxth	r3, r3
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	f003 0303 	and.w	r3, r3, #3
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	4619      	mov	r1, r3
 80011de:	68f8      	ldr	r0, [r7, #12]
 80011e0:	f7ff ff2c 	bl	800103c <_ZN9EPD_4in2618EPD_4in26_SendDataEh>
    EPD_4in26_SendData(Yend & 0xFF);
 80011e4:	8b3b      	ldrh	r3, [r7, #24]
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	4619      	mov	r1, r3
 80011ea:	68f8      	ldr	r0, [r7, #12]
 80011ec:	f7ff ff26 	bl	800103c <_ZN9EPD_4in2618EPD_4in26_SendDataEh>
    EPD_4in26_SendData((Yend>>8) & 0x03);
 80011f0:	8b3b      	ldrh	r3, [r7, #24]
 80011f2:	0a1b      	lsrs	r3, r3, #8
 80011f4:	b29b      	uxth	r3, r3
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	f003 0303 	and.w	r3, r3, #3
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	4619      	mov	r1, r3
 8001200:	68f8      	ldr	r0, [r7, #12]
 8001202:	f7ff ff1b 	bl	800103c <_ZN9EPD_4in2618EPD_4in26_SendDataEh>
}
 8001206:	bf00      	nop
 8001208:	3710      	adds	r7, #16
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}

0800120e <_ZN9EPD_4in2619EPD_4in26_SetCursorEtt>:
/******************************************************************************
function :	Set Cursor
parameter:
******************************************************************************/
void EPD_4in26::EPD_4in26_SetCursor(UWORD Xstart, UWORD Ystart)
{
 800120e:	b580      	push	{r7, lr}
 8001210:	b082      	sub	sp, #8
 8001212:	af00      	add	r7, sp, #0
 8001214:	6078      	str	r0, [r7, #4]
 8001216:	460b      	mov	r3, r1
 8001218:	807b      	strh	r3, [r7, #2]
 800121a:	4613      	mov	r3, r2
 800121c:	803b      	strh	r3, [r7, #0]
    EPD_4in26_SendCommand(0x4E); // SET_RAM_X_ADDRESS_COUNTER
 800121e:	214e      	movs	r1, #78	@ 0x4e
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f7ff feb7 	bl	8000f94 <_ZN9EPD_4in2621EPD_4in26_SendCommandEh>
    EPD_4in26_SendData(Xstart & 0xFF);
 8001226:	887b      	ldrh	r3, [r7, #2]
 8001228:	b2db      	uxtb	r3, r3
 800122a:	4619      	mov	r1, r3
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	f7ff ff05 	bl	800103c <_ZN9EPD_4in2618EPD_4in26_SendDataEh>
    EPD_4in26_SendData((Xstart>>8) & 0x03);
 8001232:	887b      	ldrh	r3, [r7, #2]
 8001234:	0a1b      	lsrs	r3, r3, #8
 8001236:	b29b      	uxth	r3, r3
 8001238:	b2db      	uxtb	r3, r3
 800123a:	f003 0303 	and.w	r3, r3, #3
 800123e:	b2db      	uxtb	r3, r3
 8001240:	4619      	mov	r1, r3
 8001242:	6878      	ldr	r0, [r7, #4]
 8001244:	f7ff fefa 	bl	800103c <_ZN9EPD_4in2618EPD_4in26_SendDataEh>

    EPD_4in26_SendCommand(0x4F); // SET_RAM_Y_ADDRESS_COUNTER
 8001248:	214f      	movs	r1, #79	@ 0x4f
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f7ff fea2 	bl	8000f94 <_ZN9EPD_4in2621EPD_4in26_SendCommandEh>
    EPD_4in26_SendData(Ystart & 0xFF);
 8001250:	883b      	ldrh	r3, [r7, #0]
 8001252:	b2db      	uxtb	r3, r3
 8001254:	4619      	mov	r1, r3
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	f7ff fef0 	bl	800103c <_ZN9EPD_4in2618EPD_4in26_SendDataEh>
    EPD_4in26_SendData((Ystart>>8) & 0x03);
 800125c:	883b      	ldrh	r3, [r7, #0]
 800125e:	0a1b      	lsrs	r3, r3, #8
 8001260:	b29b      	uxth	r3, r3
 8001262:	b2db      	uxtb	r3, r3
 8001264:	f003 0303 	and.w	r3, r3, #3
 8001268:	b2db      	uxtb	r3, r3
 800126a:	4619      	mov	r1, r3
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f7ff fee5 	bl	800103c <_ZN9EPD_4in2618EPD_4in26_SendDataEh>
}
 8001272:	bf00      	nop
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}

0800127a <_ZN9EPD_4in2614EPD_4in26_InitEv>:
/******************************************************************************
function :	Initialize the e-Paper register
parameter:
******************************************************************************/
void EPD_4in26::EPD_4in26_Init(void)
{
 800127a:	b580      	push	{r7, lr}
 800127c:	b084      	sub	sp, #16
 800127e:	af02      	add	r7, sp, #8
 8001280:	6078      	str	r0, [r7, #4]
	EPD_4in26_Reset();
 8001282:	6878      	ldr	r0, [r7, #4]
 8001284:	f7ff fe5d 	bl	8000f42 <_ZN9EPD_4in2615EPD_4in26_ResetEv>
	DEV_Delay_ms(100);
 8001288:	2064      	movs	r0, #100	@ 0x64
 800128a:	f009 f983 	bl	800a594 <vTaskDelay>

	EPD_4in26_ReadBusy();
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f7ff ff29 	bl	80010e6 <_ZN9EPD_4in2618EPD_4in26_ReadBusyEv>
	EPD_4in26_SendCommand(0x12);  //SWRESET
 8001294:	2112      	movs	r1, #18
 8001296:	6878      	ldr	r0, [r7, #4]
 8001298:	f7ff fe7c 	bl	8000f94 <_ZN9EPD_4in2621EPD_4in26_SendCommandEh>
	EPD_4in26_ReadBusy();
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	f7ff ff22 	bl	80010e6 <_ZN9EPD_4in2618EPD_4in26_ReadBusyEv>

	EPD_4in26_SendCommand(0x18); // use the internal temperature sensor
 80012a2:	2118      	movs	r1, #24
 80012a4:	6878      	ldr	r0, [r7, #4]
 80012a6:	f7ff fe75 	bl	8000f94 <_ZN9EPD_4in2621EPD_4in26_SendCommandEh>
	EPD_4in26_SendData(0x80);
 80012aa:	2180      	movs	r1, #128	@ 0x80
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	f7ff fec5 	bl	800103c <_ZN9EPD_4in2618EPD_4in26_SendDataEh>

	EPD_4in26_SendCommand(0x0C); //set soft start
 80012b2:	210c      	movs	r1, #12
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f7ff fe6d 	bl	8000f94 <_ZN9EPD_4in2621EPD_4in26_SendCommandEh>
	EPD_4in26_SendData(0xAE);
 80012ba:	21ae      	movs	r1, #174	@ 0xae
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f7ff febd 	bl	800103c <_ZN9EPD_4in2618EPD_4in26_SendDataEh>
	EPD_4in26_SendData(0xC7);
 80012c2:	21c7      	movs	r1, #199	@ 0xc7
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f7ff feb9 	bl	800103c <_ZN9EPD_4in2618EPD_4in26_SendDataEh>
	EPD_4in26_SendData(0xC3);
 80012ca:	21c3      	movs	r1, #195	@ 0xc3
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	f7ff feb5 	bl	800103c <_ZN9EPD_4in2618EPD_4in26_SendDataEh>
	EPD_4in26_SendData(0xC0);
 80012d2:	21c0      	movs	r1, #192	@ 0xc0
 80012d4:	6878      	ldr	r0, [r7, #4]
 80012d6:	f7ff feb1 	bl	800103c <_ZN9EPD_4in2618EPD_4in26_SendDataEh>
	EPD_4in26_SendData(0x80);
 80012da:	2180      	movs	r1, #128	@ 0x80
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f7ff fead 	bl	800103c <_ZN9EPD_4in2618EPD_4in26_SendDataEh>

	EPD_4in26_SendCommand(0x01);   //      drive output control
 80012e2:	2101      	movs	r1, #1
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	f7ff fe55 	bl	8000f94 <_ZN9EPD_4in2621EPD_4in26_SendCommandEh>
	EPD_4in26_SendData((EPD_4in26_HEIGHT-1)%256); //  Y
 80012ea:	21df      	movs	r1, #223	@ 0xdf
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f7ff fea5 	bl	800103c <_ZN9EPD_4in2618EPD_4in26_SendDataEh>
	EPD_4in26_SendData((EPD_4in26_HEIGHT-1)/256); //  Y
 80012f2:	2101      	movs	r1, #1
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	f7ff fea1 	bl	800103c <_ZN9EPD_4in2618EPD_4in26_SendDataEh>
	EPD_4in26_SendData(0x02);
 80012fa:	2102      	movs	r1, #2
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	f7ff fe9d 	bl	800103c <_ZN9EPD_4in2618EPD_4in26_SendDataEh>

	EPD_4in26_SendCommand(0x3C);        // Border       Border setting
 8001302:	213c      	movs	r1, #60	@ 0x3c
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	f7ff fe45 	bl	8000f94 <_ZN9EPD_4in2621EPD_4in26_SendCommandEh>
	EPD_4in26_SendData(0x01);
 800130a:	2101      	movs	r1, #1
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	f7ff fe95 	bl	800103c <_ZN9EPD_4in2618EPD_4in26_SendDataEh>

	EPD_4in26_SendCommand(0x11);        //    data  entry  mode
 8001312:	2111      	movs	r1, #17
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	f7ff fe3d 	bl	8000f94 <_ZN9EPD_4in2621EPD_4in26_SendCommandEh>
	EPD_4in26_SendData(0x01);           //       X-mode  x+ y-
 800131a:	2101      	movs	r1, #1
 800131c:	6878      	ldr	r0, [r7, #4]
 800131e:	f7ff fe8d 	bl	800103c <_ZN9EPD_4in2618EPD_4in26_SendDataEh>

	EPD_4in26_SetWindows(0, EPD_4in26_HEIGHT-1, EPD_4in26_WIDTH-1, 0);
 8001322:	2300      	movs	r3, #0
 8001324:	9300      	str	r3, [sp, #0]
 8001326:	f240 331f 	movw	r3, #799	@ 0x31f
 800132a:	f240 12df 	movw	r2, #479	@ 0x1df
 800132e:	2100      	movs	r1, #0
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	f7ff ff0f 	bl	8001154 <_ZN9EPD_4in2620EPD_4in26_SetWindowsEtttt>

	EPD_4in26_SetCursor(0, 0);
 8001336:	2200      	movs	r2, #0
 8001338:	2100      	movs	r1, #0
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	f7ff ff67 	bl	800120e <_ZN9EPD_4in2619EPD_4in26_SetCursorEtt>

	EPD_4in26_ReadBusy();
 8001340:	6878      	ldr	r0, [r7, #4]
 8001342:	f7ff fed0 	bl	80010e6 <_ZN9EPD_4in2618EPD_4in26_ReadBusyEv>
}
 8001346:	bf00      	nop
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}

0800134e <_ZN9EPD_4in2622EPD_4in26_Display_BaseEPKh>:
	}
	EPD_4in26_TurnOnDisplay();
}

void EPD_4in26::EPD_4in26_Display_Base( const  UBYTE *Image)
{
 800134e:	b580      	push	{r7, lr}
 8001350:	b084      	sub	sp, #16
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
 8001356:	6039      	str	r1, [r7, #0]
	UWORD i;
	UWORD height = EPD_4in26_HEIGHT;
 8001358:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 800135c:	81bb      	strh	r3, [r7, #12]
	UWORD width = EPD_4in26_WIDTH/8;
 800135e:	2364      	movs	r3, #100	@ 0x64
 8001360:	817b      	strh	r3, [r7, #10]

//	EPD_4in26_SetWindows(0, EPD_4in26_HEIGHT-1, EPD_4in26_WIDTH-1, 0);
//
//	EPD_4in26_SetCursor(0, 0);

	EPD_4in26_SendCommand(0x24);   //write RAM for black(0)/white (1)
 8001362:	2124      	movs	r1, #36	@ 0x24
 8001364:	6878      	ldr	r0, [r7, #4]
 8001366:	f7ff fe15 	bl	8000f94 <_ZN9EPD_4in2621EPD_4in26_SendCommandEh>
	for(i=0; i<height; i++)
 800136a:	2300      	movs	r3, #0
 800136c:	81fb      	strh	r3, [r7, #14]
 800136e:	e00e      	b.n	800138e <_ZN9EPD_4in2622EPD_4in26_Display_BaseEPKh+0x40>
	{
		EPD_4in26_SendData2((UBYTE *)(Image+i*width), width);
 8001370:	89fb      	ldrh	r3, [r7, #14]
 8001372:	897a      	ldrh	r2, [r7, #10]
 8001374:	fb02 f303 	mul.w	r3, r2, r3
 8001378:	461a      	mov	r2, r3
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	4413      	add	r3, r2
 800137e:	897a      	ldrh	r2, [r7, #10]
 8001380:	4619      	mov	r1, r3
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f7ff fe84 	bl	8001090 <_ZN9EPD_4in2619EPD_4in26_SendData2EPhm>
	for(i=0; i<height; i++)
 8001388:	89fb      	ldrh	r3, [r7, #14]
 800138a:	3301      	adds	r3, #1
 800138c:	81fb      	strh	r3, [r7, #14]
 800138e:	89fa      	ldrh	r2, [r7, #14]
 8001390:	89bb      	ldrh	r3, [r7, #12]
 8001392:	429a      	cmp	r2, r3
 8001394:	d3ec      	bcc.n	8001370 <_ZN9EPD_4in2622EPD_4in26_Display_BaseEPKh+0x22>
	}

	EPD_4in26_SendCommand(0x26);   //write RAM for black(0)/white (1)
 8001396:	2126      	movs	r1, #38	@ 0x26
 8001398:	6878      	ldr	r0, [r7, #4]
 800139a:	f7ff fdfb 	bl	8000f94 <_ZN9EPD_4in2621EPD_4in26_SendCommandEh>
	for(i=0; i<height; i++)
 800139e:	2300      	movs	r3, #0
 80013a0:	81fb      	strh	r3, [r7, #14]
 80013a2:	e00e      	b.n	80013c2 <_ZN9EPD_4in2622EPD_4in26_Display_BaseEPKh+0x74>
	{
		EPD_4in26_SendData2((UBYTE *)(Image+i*width), width);
 80013a4:	89fb      	ldrh	r3, [r7, #14]
 80013a6:	897a      	ldrh	r2, [r7, #10]
 80013a8:	fb02 f303 	mul.w	r3, r2, r3
 80013ac:	461a      	mov	r2, r3
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	4413      	add	r3, r2
 80013b2:	897a      	ldrh	r2, [r7, #10]
 80013b4:	4619      	mov	r1, r3
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	f7ff fe6a 	bl	8001090 <_ZN9EPD_4in2619EPD_4in26_SendData2EPhm>
	for(i=0; i<height; i++)
 80013bc:	89fb      	ldrh	r3, [r7, #14]
 80013be:	3301      	adds	r3, #1
 80013c0:	81fb      	strh	r3, [r7, #14]
 80013c2:	89fa      	ldrh	r2, [r7, #14]
 80013c4:	89bb      	ldrh	r3, [r7, #12]
 80013c6:	429a      	cmp	r2, r3
 80013c8:	d3ec      	bcc.n	80013a4 <_ZN9EPD_4in2622EPD_4in26_Display_BaseEPKh+0x56>
	}
	EPD_4in26_TurnOnDisplay();
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f7ff feab 	bl	8001126 <_ZN9EPD_4in2623EPD_4in26_TurnOnDisplayEv>
}
 80013d0:	bf00      	nop
 80013d2:	3710      	adds	r7, #16
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <_ZSt23__is_constant_evaluatedv>:
  // This can be used without checking if the compiler supports the feature.
  // The macro _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED can be used to check if
  // the compiler support is present to make this function work as expected.
  _GLIBCXX_CONSTEXPR inline bool
  __is_constant_evaluated() _GLIBCXX_NOEXCEPT
  {
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
#if __cpp_if_consteval >= 202106L
# define _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED 1
    if consteval { return true; } else { return false; }
#elif __cplusplus >= 201103L && __has_builtin(__builtin_is_constant_evaluated)
# define _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED 1
    return __builtin_is_constant_evaluated();
 80013dc:	2300      	movs	r3, #0
#else
    return false;
#endif
  }
 80013de:	4618      	mov	r0, r3
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr

080013e8 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	6039      	str	r1, [r7, #0]
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	4618      	mov	r0, r3
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <_ZNK15FreeRTOSDeleterclEPv>:
#include <memory>
#include "FreeRTOS.h"
#include "main.h"
// Custom deleter for FreeRTOS allocated memory
struct FreeRTOSDeleter {
    void operator()(void* ptr) const {
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	6039      	str	r1, [r7, #0]
        vPortFree(ptr);
 800140a:	6838      	ldr	r0, [r7, #0]
 800140c:	f00a fcf2 	bl	800bdf4 <vPortFree>
    }
 8001410:	bf00      	nop
 8001412:	3708      	adds	r7, #8
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}

08001418 <_ZN11FrameBuffer11getInstanceEtttt>:

public:

	FrameBuffer() = delete;

    static FrameBuffer& getInstance(UWORD Width = EPD_4in26_WIDTH, UWORD Height= EPD_4in26_HEIGHT, UWORD Rotate = ROTATE_0, UWORD Color = WHITE) {
 8001418:	b590      	push	{r4, r7, lr}
 800141a:	b087      	sub	sp, #28
 800141c:	af02      	add	r7, sp, #8
 800141e:	4604      	mov	r4, r0
 8001420:	4608      	mov	r0, r1
 8001422:	4611      	mov	r1, r2
 8001424:	461a      	mov	r2, r3
 8001426:	4623      	mov	r3, r4
 8001428:	80fb      	strh	r3, [r7, #6]
 800142a:	4603      	mov	r3, r0
 800142c:	80bb      	strh	r3, [r7, #4]
 800142e:	460b      	mov	r3, r1
 8001430:	807b      	strh	r3, [r7, #2]
 8001432:	4613      	mov	r3, r2
 8001434:	803b      	strh	r3, [r7, #0]
        if (!instance) {
 8001436:	4818      	ldr	r0, [pc, #96]	@ (8001498 <_ZN11FrameBuffer11getInstanceEtttt+0x80>)
 8001438:	f000 fe68 	bl	800210c <_ZNKSt10unique_ptrI11FrameBuffer15FreeRTOSDeleterEcvbEv>
 800143c:	4603      	mov	r3, r0
 800143e:	f083 0301 	eor.w	r3, r3, #1
 8001442:	b2db      	uxtb	r3, r3
 8001444:	2b00      	cmp	r3, #0
 8001446:	d01e      	beq.n	8001486 <_ZN11FrameBuffer11getInstanceEtttt+0x6e>
        	void* mem = pvPortMalloc(sizeof(FrameBuffer));  // Allocate the singleton instance
 8001448:	2018      	movs	r0, #24
 800144a:	f00a fbff 	bl	800bc4c <pvPortMalloc>
 800144e:	60f8      	str	r0, [r7, #12]
//            instance = std::unique_ptr<FrameBuffer>(new FrameBuffer(Width, Height, Rotate, Color)); // Use `new` since the constructor is private
        	if (mem) {
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d013      	beq.n	800147e <_ZN11FrameBuffer11getInstanceEtttt+0x66>
				instance.reset(new (mem) FrameBuffer(Width, Height, Rotate, Color)); // Placement new
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	4619      	mov	r1, r3
 800145a:	2018      	movs	r0, #24
 800145c:	f7ff ffc4 	bl	80013e8 <_ZnwjPv>
 8001460:	4604      	mov	r4, r0
 8001462:	8878      	ldrh	r0, [r7, #2]
 8001464:	88ba      	ldrh	r2, [r7, #4]
 8001466:	88f9      	ldrh	r1, [r7, #6]
 8001468:	883b      	ldrh	r3, [r7, #0]
 800146a:	9300      	str	r3, [sp, #0]
 800146c:	4603      	mov	r3, r0
 800146e:	4620      	mov	r0, r4
 8001470:	f001 fe29 	bl	80030c6 <_ZN11FrameBufferC1Etttt>
 8001474:	4621      	mov	r1, r4
 8001476:	4808      	ldr	r0, [pc, #32]	@ (8001498 <_ZN11FrameBuffer11getInstanceEtttt+0x80>)
 8001478:	f000 fe59 	bl	800212e <_ZNSt10unique_ptrI11FrameBuffer15FreeRTOSDeleterE5resetEPS0_>
 800147c:	e003      	b.n	8001486 <_ZN11FrameBuffer11getInstanceEtttt+0x6e>
			} else {
				LOG_ERROR("FreeRTOS allocation failed for FrameBuffer instance!");
 800147e:	4907      	ldr	r1, [pc, #28]	@ (800149c <_ZN11FrameBuffer11getInstanceEtttt+0x84>)
 8001480:	2001      	movs	r0, #1
 8001482:	f7ff fce1 	bl	8000e48 <_Z12log_message2hPKcz>
			}
        }
        return *instance;
 8001486:	4804      	ldr	r0, [pc, #16]	@ (8001498 <_ZN11FrameBuffer11getInstanceEtttt+0x80>)
 8001488:	f000 fe65 	bl	8002156 <_ZNKSt10unique_ptrI11FrameBuffer15FreeRTOSDeleterEdeEv>
 800148c:	4603      	mov	r3, r0
    }
 800148e:	4618      	mov	r0, r3
 8001490:	3714      	adds	r7, #20
 8001492:	46bd      	mov	sp, r7
 8001494:	bd90      	pop	{r4, r7, pc}
 8001496:	bf00      	nop
 8001498:	20000210 	.word	0x20000210
 800149c:	0800ef64 	.word	0x0800ef64

080014a0 <_ZN11FrameBuffer8getImageEv>:

	UBYTE* getImage() {
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
		return Image.get();
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	4618      	mov	r0, r3
 80014ac:	f000 fe6e 	bl	800218c <_ZNKSt10unique_ptrIA_h15FreeRTOSDeleterE3getEv>
 80014b0:	4603      	mov	r3, r0
	}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
	...

080014bc <_ZN8DrawableC1EPFvvEttt>:
class Drawable {

public:
//	?
	using Callback = void (*)();
	Drawable(Callback onSelect = nullptr,UWORD Rotate_ = ROTATE_0, UWORD Mirror_ = MIRROR_NONE, UWORD layer_ = 0):
 80014bc:	b480      	push	{r7}
 80014be:	b085      	sub	sp, #20
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	60f8      	str	r0, [r7, #12]
 80014c4:	60b9      	str	r1, [r7, #8]
 80014c6:	4611      	mov	r1, r2
 80014c8:	461a      	mov	r2, r3
 80014ca:	460b      	mov	r3, r1
 80014cc:	80fb      	strh	r3, [r7, #6]
 80014ce:	4613      	mov	r3, r2
 80014d0:	80bb      	strh	r3, [r7, #4]
		localRotate(Rotate_), localMirror(Mirror_), layer(layer_), onSelect(onSelect)
 80014d2:	4a0b      	ldr	r2, [pc, #44]	@ (8001500 <_ZN8DrawableC1EPFvvEttt+0x44>)
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	88fa      	ldrh	r2, [r7, #6]
 80014dc:	809a      	strh	r2, [r3, #4]
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	88ba      	ldrh	r2, [r7, #4]
 80014e2:	80da      	strh	r2, [r3, #6]
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	8b3a      	ldrh	r2, [r7, #24]
 80014e8:	811a      	strh	r2, [r3, #8]
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	68ba      	ldr	r2, [r7, #8]
 80014ee:	60da      	str	r2, [r3, #12]
//	, selected(false)
	{}
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	4618      	mov	r0, r3
 80014f4:	3714      	adds	r7, #20
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	080124cc 	.word	0x080124cc

08001504 <_ZN8Drawable10onInteractEv>:
    virtual void draw(FrameBuffer& fb, UWORD xMove = 0, UWORD yMove =0) = 0;
    virtual void onInteract(){
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
    	if(onSelect)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d002      	beq.n	800151a <_ZN8Drawable10onInteractEv+0x16>
    		onSelect();
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	4798      	blx	r3
    };
 800151a:	bf00      	nop
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}

08001522 <_ZN8Drawable9clearAreaER11FrameBuffer>:
    virtual void clearArea(FrameBuffer& fb){}
 8001522:	b480      	push	{r7}
 8001524:	b083      	sub	sp, #12
 8001526:	af00      	add	r7, sp, #0
 8001528:	6078      	str	r0, [r7, #4]
 800152a:	6039      	str	r1, [r7, #0]
 800152c:	bf00      	nop
 800152e:	370c      	adds	r7, #12
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr

08001538 <_ZN8Drawable9highlightEb>:
    virtual void highlight(bool isSelected){};
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	460b      	mov	r3, r1
 8001542:	70fb      	strb	r3, [r7, #3]
 8001544:	bf00      	nop
 8001546:	370c      	adds	r7, #12
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr

08001550 <_ZN8Drawable12interactableEv>:
    void triggerAction() {
    	if (onSelect)
    		onSelect();
    }

    bool interactable(){
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
    	if (onSelect)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <_ZN8Drawable12interactableEv+0x14>
    		return true;
 8001560:	2301      	movs	r3, #1
 8001562:	e000      	b.n	8001566 <_ZN8Drawable12interactableEv+0x16>
    	return false;
 8001564:	2300      	movs	r3, #0
    }
 8001566:	4618      	mov	r0, r3
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
	...

08001574 <_ZN8DrawableD1Ev>:

    void addCallback(Callback cb){
    	onSelect = cb;
    }

    virtual ~Drawable() = default;
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	4a04      	ldr	r2, [pc, #16]	@ (8001590 <_ZN8DrawableD1Ev+0x1c>)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	601a      	str	r2, [r3, #0]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4618      	mov	r0, r3
 8001586:	370c      	adds	r7, #12
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr
 8001590:	080124cc 	.word	0x080124cc

08001594 <_ZN8DrawableD0Ev>:
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	f7ff ffe9 	bl	8001574 <_ZN8DrawableD1Ev>
 80015a2:	2110      	movs	r1, #16
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	f00a fd45 	bl	800c034 <_ZdlPvj>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4618      	mov	r0, r3
 80015ae:	3708      	adds	r7, #8
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <_ZNSt12_Vector_baseIP8DrawableSaIS1_EE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f000 fe02 	bl	80021c6 <_ZNSaIP8DrawableED1Ev>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4618      	mov	r0, r3
 80015c6:	3708      	adds	r7, #8
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}

080015cc <_ZNSt12_Vector_baseIP8DrawableSaIS1_EEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	4618      	mov	r0, r3
 80015d8:	f000 fde5 	bl	80021a6 <_ZNSt12_Vector_baseIP8DrawableSaIS1_EE12_Vector_implC1Ev>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	4618      	mov	r0, r3
 80015e0:	3708      	adds	r7, #8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}

080015e6 <_ZNSt6vectorIP8DrawableSaIS1_EEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 80015e6:	b580      	push	{r7, lr}
 80015e8:	b082      	sub	sp, #8
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	6078      	str	r0, [r7, #4]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7ff ffeb 	bl	80015cc <_ZNSt12_Vector_baseIP8DrawableSaIS1_EEC1Ev>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4618      	mov	r0, r3
 80015fa:	3708      	adds	r7, #8
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}

08001600 <_ZN9ContainerC1Etttt>:
#include "Drawable.h"
#include <vector>

class Container: public Drawable {
public:
	Container(UWORD xStart, UWORD yStart, UWORD xEnd, UWORD yEnd):
 8001600:	b580      	push	{r7, lr}
 8001602:	b086      	sub	sp, #24
 8001604:	af02      	add	r7, sp, #8
 8001606:	60f8      	str	r0, [r7, #12]
 8001608:	4608      	mov	r0, r1
 800160a:	4611      	mov	r1, r2
 800160c:	461a      	mov	r2, r3
 800160e:	4603      	mov	r3, r0
 8001610:	817b      	strh	r3, [r7, #10]
 8001612:	460b      	mov	r3, r1
 8001614:	813b      	strh	r3, [r7, #8]
 8001616:	4613      	mov	r3, r2
 8001618:	80fb      	strh	r3, [r7, #6]
		Drawable(),
		xStart(xStart), yStart(yStart), xEnd(xEnd), yEnd(yEnd)
 800161a:	68f8      	ldr	r0, [r7, #12]
 800161c:	2300      	movs	r3, #0
 800161e:	9300      	str	r3, [sp, #0]
 8001620:	2300      	movs	r3, #0
 8001622:	2200      	movs	r2, #0
 8001624:	2100      	movs	r1, #0
 8001626:	f7ff ff49 	bl	80014bc <_ZN8DrawableC1EPFvvEttt>
 800162a:	4a0c      	ldr	r2, [pc, #48]	@ (800165c <_ZN9ContainerC1Etttt+0x5c>)
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	601a      	str	r2, [r3, #0]
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	897a      	ldrh	r2, [r7, #10]
 8001634:	821a      	strh	r2, [r3, #16]
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	893a      	ldrh	r2, [r7, #8]
 800163a:	825a      	strh	r2, [r3, #18]
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	88fa      	ldrh	r2, [r7, #6]
 8001640:	829a      	strh	r2, [r3, #20]
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	8b3a      	ldrh	r2, [r7, #24]
 8001646:	82da      	strh	r2, [r3, #22]
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	3318      	adds	r3, #24
 800164c:	4618      	mov	r0, r3
 800164e:	f7ff ffca 	bl	80015e6 <_ZNSt6vectorIP8DrawableSaIS1_EEC1Ev>
//	, XLength(XEnd-XStart), YLength(YEnd - YStart)
	{

	}
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	4618      	mov	r0, r3
 8001656:	3710      	adds	r7, #16
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	080124ac 	.word	0x080124ac

08001660 <_ZN9Container4drawER11FrameBuffertt>:
//	void draw()
    void draw(FrameBuffer& fb, UWORD xMove = 0, UWORD yMove =0) override{
 8001660:	b590      	push	{r4, r7, lr}
 8001662:	b08b      	sub	sp, #44	@ 0x2c
 8001664:	af00      	add	r7, sp, #0
 8001666:	60f8      	str	r0, [r7, #12]
 8001668:	60b9      	str	r1, [r7, #8]
 800166a:	4611      	mov	r1, r2
 800166c:	461a      	mov	r2, r3
 800166e:	460b      	mov	r3, r1
 8001670:	80fb      	strh	r3, [r7, #6]
 8001672:	4613      	mov	r3, r2
 8001674:	80bb      	strh	r3, [r7, #4]
    	//TODO displace draws in the container?

//    	FrambeBuffer duplicate = Framebuffer(XLength, YLength, fb.getRotate(),fb.getColor());
    	UWORD x = xStart + xMove;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	8a1a      	ldrh	r2, [r3, #16]
 800167a:	88fb      	ldrh	r3, [r7, #6]
 800167c:	4413      	add	r3, r2
 800167e:	84fb      	strh	r3, [r7, #38]	@ 0x26
    	UWORD y = yStart + yMove;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	8a5a      	ldrh	r2, [r3, #18]
 8001684:	88bb      	ldrh	r3, [r7, #4]
 8001686:	4413      	add	r3, r2
 8001688:	84bb      	strh	r3, [r7, #36]	@ 0x24


    	for (Drawable* draws: drawables){
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	3318      	adds	r3, #24
 800168e:	623b      	str	r3, [r7, #32]
 8001690:	6a38      	ldr	r0, [r7, #32]
 8001692:	f000 fdd8 	bl	8002246 <_ZNSt6vectorIP8DrawableSaIS1_EE5beginEv>
 8001696:	4603      	mov	r3, r0
 8001698:	61bb      	str	r3, [r7, #24]
 800169a:	6a38      	ldr	r0, [r7, #32]
 800169c:	f000 fde3 	bl	8002266 <_ZNSt6vectorIP8DrawableSaIS1_EE3endEv>
 80016a0:	4603      	mov	r3, r0
 80016a2:	617b      	str	r3, [r7, #20]
 80016a4:	e014      	b.n	80016d0 <_ZN9Container4drawER11FrameBuffertt+0x70>
 80016a6:	f107 0318 	add.w	r3, r7, #24
 80016aa:	4618      	mov	r0, r3
 80016ac:	f000 fe14 	bl	80022d8 <_ZNK9__gnu_cxx17__normal_iteratorIPP8DrawableSt6vectorIS2_SaIS2_EEEdeEv>
 80016b0:	4603      	mov	r3, r0
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	61fb      	str	r3, [r7, #28]
    		draws->draw(fb, x,y);
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	681c      	ldr	r4, [r3, #0]
 80016bc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80016be:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80016c0:	68b9      	ldr	r1, [r7, #8]
 80016c2:	69f8      	ldr	r0, [r7, #28]
 80016c4:	47a0      	blx	r4
    	for (Drawable* draws: drawables){
 80016c6:	f107 0318 	add.w	r3, r7, #24
 80016ca:	4618      	mov	r0, r3
 80016cc:	f000 fdf4 	bl	80022b8 <_ZN9__gnu_cxx17__normal_iteratorIPP8DrawableSt6vectorIS2_SaIS2_EEEppEv>
 80016d0:	f107 0214 	add.w	r2, r7, #20
 80016d4:	f107 0318 	add.w	r3, r7, #24
 80016d8:	4611      	mov	r1, r2
 80016da:	4618      	mov	r0, r3
 80016dc:	f000 fdd4 	bl	8002288 <_ZN9__gnu_cxxneIPP8DrawableSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d1df      	bne.n	80016a6 <_ZN9Container4drawER11FrameBuffertt+0x46>
    	}

//    	fb.apply(duplicate);
    }
 80016e6:	bf00      	nop
 80016e8:	bf00      	nop
 80016ea:	372c      	adds	r7, #44	@ 0x2c
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd90      	pop	{r4, r7, pc}

080016f0 <_ZN9Container9highlightEb>:

    void highlight(bool isSelected) override{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b086      	sub	sp, #24
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	460b      	mov	r3, r1
 80016fa:	70fb      	strb	r3, [r7, #3]
    	for (Drawable* draws: drawables){
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	3318      	adds	r3, #24
 8001700:	617b      	str	r3, [r7, #20]
 8001702:	6978      	ldr	r0, [r7, #20]
 8001704:	f000 fd9f 	bl	8002246 <_ZNSt6vectorIP8DrawableSaIS1_EE5beginEv>
 8001708:	4603      	mov	r3, r0
 800170a:	60fb      	str	r3, [r7, #12]
 800170c:	6978      	ldr	r0, [r7, #20]
 800170e:	f000 fdaa 	bl	8002266 <_ZNSt6vectorIP8DrawableSaIS1_EE3endEv>
 8001712:	4603      	mov	r3, r0
 8001714:	60bb      	str	r3, [r7, #8]
 8001716:	e014      	b.n	8001742 <_ZN9Container9highlightEb+0x52>
 8001718:	f107 030c 	add.w	r3, r7, #12
 800171c:	4618      	mov	r0, r3
 800171e:	f000 fddb 	bl	80022d8 <_ZNK9__gnu_cxx17__normal_iteratorIPP8DrawableSt6vectorIS2_SaIS2_EEEdeEv>
 8001722:	4603      	mov	r3, r0
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	613b      	str	r3, [r7, #16]
			draws->highlight(isSelected);
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	330c      	adds	r3, #12
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	78fa      	ldrb	r2, [r7, #3]
 8001732:	4611      	mov	r1, r2
 8001734:	6938      	ldr	r0, [r7, #16]
 8001736:	4798      	blx	r3
    	for (Drawable* draws: drawables){
 8001738:	f107 030c 	add.w	r3, r7, #12
 800173c:	4618      	mov	r0, r3
 800173e:	f000 fdbb 	bl	80022b8 <_ZN9__gnu_cxx17__normal_iteratorIPP8DrawableSt6vectorIS2_SaIS2_EEEppEv>
 8001742:	f107 0208 	add.w	r2, r7, #8
 8001746:	f107 030c 	add.w	r3, r7, #12
 800174a:	4611      	mov	r1, r2
 800174c:	4618      	mov	r0, r3
 800174e:	f000 fd9b 	bl	8002288 <_ZN9__gnu_cxxneIPP8DrawableSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d1df      	bne.n	8001718 <_ZN9Container9highlightEb+0x28>
		}
    }
 8001758:	bf00      	nop
 800175a:	bf00      	nop
 800175c:	3718      	adds	r7, #24
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}

08001762 <_ZN9Container11addDrawableEP8Drawable>:

    void addDrawable(Drawable * draw){
 8001762:	b580      	push	{r7, lr}
 8001764:	b082      	sub	sp, #8
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
 800176a:	6039      	str	r1, [r7, #0]
    	drawables.push_back(draw);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	3318      	adds	r3, #24
 8001770:	463a      	mov	r2, r7
 8001772:	4611      	mov	r1, r2
 8001774:	4618      	mov	r0, r3
 8001776:	f000 fdbb 	bl	80022f0 <_ZNSt6vectorIP8DrawableSaIS1_EE9push_backERKS1_>
    }
 800177a:	bf00      	nop
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}

08001782 <_ZN6ScreenC1Etttt>:

class Screen {
public:
//	friend class EPD_4in26;

    Screen(UWORD Width_ = EPD_4in26_WIDTH, UWORD Height_  = EPD_4in26_HEIGHT, UWORD colour = WHITE, UWORD Rotate= ROTATE_0):
 8001782:	b580      	push	{r7, lr}
 8001784:	b084      	sub	sp, #16
 8001786:	af00      	add	r7, sp, #0
 8001788:	60f8      	str	r0, [r7, #12]
 800178a:	4608      	mov	r0, r1
 800178c:	4611      	mov	r1, r2
 800178e:	461a      	mov	r2, r3
 8001790:	4603      	mov	r3, r0
 8001792:	817b      	strh	r3, [r7, #10]
 8001794:	460b      	mov	r3, r1
 8001796:	813b      	strh	r3, [r7, #8]
 8001798:	4613      	mov	r3, r2
 800179a:	80fb      	strh	r3, [r7, #6]
//    	defaultfb( Width_, Height_, Rotate, colour),
		Colour(colour)
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	88fa      	ldrh	r2, [r7, #6]
 80017a0:	801a      	strh	r2, [r3, #0]
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	3304      	adds	r3, #4
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7ff ff1d 	bl	80015e6 <_ZNSt6vectorIP8DrawableSaIS1_EEC1Ev>
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	f04f 32ff 	mov.w	r2, #4294967295
 80017b2:	611a      	str	r2, [r3, #16]
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	3314      	adds	r3, #20
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7ff ff14 	bl	80015e6 <_ZNSt6vectorIP8DrawableSaIS1_EEC1Ev>
    {
    	clear(Colour);
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	881b      	ldrh	r3, [r3, #0]
 80017c2:	4619      	mov	r1, r3
 80017c4:	68f8      	ldr	r0, [r7, #12]
 80017c6:	f000 f8a3 	bl	8001910 <_ZN6Screen5clearEt>
//        imageBuffer = image_;
    }
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	4618      	mov	r0, r3
 80017ce:	3710      	adds	r7, #16
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}

080017d4 <_ZN6Screen11addDrawableEP8Drawable>:

    ~Screen() {
//    	delete[] imageBuffer;
    }

    void addDrawable(Drawable* obj) {
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	6039      	str	r1, [r7, #0]
    	elements.push_back(obj);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	3304      	adds	r3, #4
 80017e2:	463a      	mov	r2, r7
 80017e4:	4611      	mov	r1, r2
 80017e6:	4618      	mov	r0, r3
 80017e8:	f000 fd82 	bl	80022f0 <_ZNSt6vectorIP8DrawableSaIS1_EE9push_backERKS1_>

    	if(obj->interactable()){
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	4618      	mov	r0, r3
 80017f0:	f7ff feae 	bl	8001550 <_ZN8Drawable12interactableEv>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d016      	beq.n	8001828 <_ZN6Screen11addDrawableEP8Drawable+0x54>
    		if(selectableElements.size() == 0){
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	3314      	adds	r3, #20
 80017fe:	4618      	mov	r0, r3
 8001800:	f000 fd9b 	bl	800233a <_ZNKSt6vectorIP8DrawableSaIS1_EE4sizeEv>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	bf0c      	ite	eq
 800180a:	2301      	moveq	r3, #1
 800180c:	2300      	movne	r3, #0
 800180e:	b2db      	uxtb	r3, r3
 8001810:	2b00      	cmp	r3, #0
 8001812:	d002      	beq.n	800181a <_ZN6Screen11addDrawableEP8Drawable+0x46>
    			currentSelection = 0;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2200      	movs	r2, #0
 8001818:	611a      	str	r2, [r3, #16]
    		}
    		selectableElements.push_back(obj);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	3314      	adds	r3, #20
 800181e:	463a      	mov	r2, r7
 8001820:	4611      	mov	r1, r2
 8001822:	4618      	mov	r0, r3
 8001824:	f000 fd64 	bl	80022f0 <_ZNSt6vectorIP8DrawableSaIS1_EE9push_backERKS1_>
    	}
    }
 8001828:	bf00      	nop
 800182a:	3708      	adds	r7, #8
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}

08001830 <_ZN6Screen8getImageEv>:

//    void addSelectable(Drawable * obj)

    inline UBYTE* getImage() {
 8001830:	b580      	push	{r7, lr}
 8001832:	b084      	sub	sp, #16
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
    	FrameBuffer& fb = FrameBuffer::getInstance();
 8001838:	23ff      	movs	r3, #255	@ 0xff
 800183a:	2200      	movs	r2, #0
 800183c:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8001840:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8001844:	f7ff fde8 	bl	8001418 <_ZN11FrameBuffer11getInstanceEtttt>
 8001848:	60f8      	str	r0, [r7, #12]

    	return fb.getImage();
 800184a:	68f8      	ldr	r0, [r7, #12]
 800184c:	f7ff fe28 	bl	80014a0 <_ZN11FrameBuffer8getImageEv>
 8001850:	4603      	mov	r3, r0
    }
 8001852:	4618      	mov	r0, r3
 8001854:	3710      	adds	r7, #16
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}

0800185a <_ZN6Screen6renderEv>:

    //complete rerender of the screen -> including clear - expensive -> placce for optimization
    void render() {
 800185a:	b590      	push	{r4, r7, lr}
 800185c:	b089      	sub	sp, #36	@ 0x24
 800185e:	af00      	add	r7, sp, #0
 8001860:	6078      	str	r0, [r7, #4]
    	clear(Colour);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	881b      	ldrh	r3, [r3, #0]
 8001866:	4619      	mov	r1, r3
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	f000 f851 	bl	8001910 <_ZN6Screen5clearEt>

    	//safety highlight
    	if(currentSelection > -1){
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	691b      	ldr	r3, [r3, #16]
 8001872:	2b00      	cmp	r3, #0
 8001874:	db10      	blt.n	8001898 <_ZN6Screen6renderEv+0x3e>
    		selectableElements[currentSelection]->highlight(true);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	f103 0214 	add.w	r2, r3, #20
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	691b      	ldr	r3, [r3, #16]
 8001880:	4619      	mov	r1, r3
 8001882:	4610      	mov	r0, r2
 8001884:	f000 fd69 	bl	800235a <_ZNSt6vectorIP8DrawableSaIS1_EEixEj>
 8001888:	4603      	mov	r3, r0
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	320c      	adds	r2, #12
 8001890:	6812      	ldr	r2, [r2, #0]
 8001892:	2101      	movs	r1, #1
 8001894:	4618      	mov	r0, r3
 8001896:	4790      	blx	r2

    	}
    	FrameBuffer& fb = FrameBuffer::getInstance();
 8001898:	23ff      	movs	r3, #255	@ 0xff
 800189a:	2200      	movs	r2, #0
 800189c:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 80018a0:	f44f 7048 	mov.w	r0, #800	@ 0x320
 80018a4:	f7ff fdb8 	bl	8001418 <_ZN11FrameBuffer11getInstanceEtttt>
 80018a8:	61f8      	str	r0, [r7, #28]

        for (auto obj : elements) {
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	3304      	adds	r3, #4
 80018ae:	61bb      	str	r3, [r7, #24]
 80018b0:	69b8      	ldr	r0, [r7, #24]
 80018b2:	f000 fcc8 	bl	8002246 <_ZNSt6vectorIP8DrawableSaIS1_EE5beginEv>
 80018b6:	4603      	mov	r3, r0
 80018b8:	613b      	str	r3, [r7, #16]
 80018ba:	69b8      	ldr	r0, [r7, #24]
 80018bc:	f000 fcd3 	bl	8002266 <_ZNSt6vectorIP8DrawableSaIS1_EE3endEv>
 80018c0:	4603      	mov	r3, r0
 80018c2:	60fb      	str	r3, [r7, #12]
 80018c4:	e014      	b.n	80018f0 <_ZN6Screen6renderEv+0x96>
 80018c6:	f107 0310 	add.w	r3, r7, #16
 80018ca:	4618      	mov	r0, r3
 80018cc:	f000 fd04 	bl	80022d8 <_ZNK9__gnu_cxx17__normal_iteratorIPP8DrawableSt6vectorIS2_SaIS2_EEEdeEv>
 80018d0:	4603      	mov	r3, r0
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	617b      	str	r3, [r7, #20]

        	//TODO: ugly fix in render for clearing, need a smarter way to do this
//        	obj->clearArea(defaultfb);

            obj->draw(fb);
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	681c      	ldr	r4, [r3, #0]
 80018dc:	2300      	movs	r3, #0
 80018de:	2200      	movs	r2, #0
 80018e0:	69f9      	ldr	r1, [r7, #28]
 80018e2:	6978      	ldr	r0, [r7, #20]
 80018e4:	47a0      	blx	r4
        for (auto obj : elements) {
 80018e6:	f107 0310 	add.w	r3, r7, #16
 80018ea:	4618      	mov	r0, r3
 80018ec:	f000 fce4 	bl	80022b8 <_ZN9__gnu_cxx17__normal_iteratorIPP8DrawableSt6vectorIS2_SaIS2_EEEppEv>
 80018f0:	f107 020c 	add.w	r2, r7, #12
 80018f4:	f107 0310 	add.w	r3, r7, #16
 80018f8:	4611      	mov	r1, r2
 80018fa:	4618      	mov	r0, r3
 80018fc:	f000 fcc4 	bl	8002288 <_ZN9__gnu_cxxneIPP8DrawableSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d1df      	bne.n	80018c6 <_ZN6Screen6renderEv+0x6c>
        }
    }
 8001906:	bf00      	nop
 8001908:	bf00      	nop
 800190a:	3724      	adds	r7, #36	@ 0x24
 800190c:	46bd      	mov	sp, r7
 800190e:	bd90      	pop	{r4, r7, pc}

08001910 <_ZN6Screen5clearEt>:

    void clear(UWORD colour){
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	460b      	mov	r3, r1
 800191a:	807b      	strh	r3, [r7, #2]
    	FrameBuffer& fb = FrameBuffer::getInstance();
 800191c:	23ff      	movs	r3, #255	@ 0xff
 800191e:	2200      	movs	r2, #0
 8001920:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8001924:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8001928:	f7ff fd76 	bl	8001418 <_ZN11FrameBuffer11getInstanceEtttt>
 800192c:	60f8      	str	r0, [r7, #12]

    	fb.Paint_Clear(colour);
 800192e:	887b      	ldrh	r3, [r7, #2]
 8001930:	4619      	mov	r1, r3
 8001932:	68f8      	ldr	r0, [r7, #12]
 8001934:	f001 fdea 	bl	800350c <_ZN11FrameBuffer11Paint_ClearEt>
    }
 8001938:	bf00      	nop
 800193a:	3710      	adds	r7, #16
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}

08001940 <_ZN9Rectangle4drawER11FrameBuffertt>:
  /* data */
public:

//	using Callback = std::function<void()>;

    void draw(FrameBuffer& fb, UWORD xStart = 0, UWORD yStart =0) override {
 8001940:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001942:	b089      	sub	sp, #36	@ 0x24
 8001944:	af04      	add	r7, sp, #16
 8001946:	60f8      	str	r0, [r7, #12]
 8001948:	60b9      	str	r1, [r7, #8]
 800194a:	4611      	mov	r1, r2
 800194c:	461a      	mov	r2, r3
 800194e:	460b      	mov	r3, r1
 8001950:	80fb      	strh	r3, [r7, #6]
 8001952:	4613      	mov	r3, r2
 8001954:	80bb      	strh	r3, [r7, #4]
    	fb.Paint_DrawRectangle(this->xStart + xStart, this->yStart+ yStart, xEnd+ xStart, yEnd+ yStart, color, lineWidth, fill);
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	8a1a      	ldrh	r2, [r3, #16]
 800195a:	88fb      	ldrh	r3, [r7, #6]
 800195c:	4413      	add	r3, r2
 800195e:	b29c      	uxth	r4, r3
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	8a5a      	ldrh	r2, [r3, #18]
 8001964:	88bb      	ldrh	r3, [r7, #4]
 8001966:	4413      	add	r3, r2
 8001968:	b29d      	uxth	r5, r3
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	8a9a      	ldrh	r2, [r3, #20]
 800196e:	88fb      	ldrh	r3, [r7, #6]
 8001970:	4413      	add	r3, r2
 8001972:	b29e      	uxth	r6, r3
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	8ada      	ldrh	r2, [r3, #22]
 8001978:	88bb      	ldrh	r3, [r7, #4]
 800197a:	4413      	add	r3, r2
 800197c:	b29b      	uxth	r3, r3
 800197e:	68fa      	ldr	r2, [r7, #12]
 8001980:	8b12      	ldrh	r2, [r2, #24]
 8001982:	68f9      	ldr	r1, [r7, #12]
 8001984:	7e89      	ldrb	r1, [r1, #26]
 8001986:	68f8      	ldr	r0, [r7, #12]
 8001988:	7ec0      	ldrb	r0, [r0, #27]
 800198a:	9003      	str	r0, [sp, #12]
 800198c:	9102      	str	r1, [sp, #8]
 800198e:	9201      	str	r2, [sp, #4]
 8001990:	9300      	str	r3, [sp, #0]
 8001992:	4633      	mov	r3, r6
 8001994:	462a      	mov	r2, r5
 8001996:	4621      	mov	r1, r4
 8001998:	68b8      	ldr	r0, [r7, #8]
 800199a:	f001 ffd7 	bl	800394c <_ZN11FrameBuffer19Paint_DrawRectangleEttttt9DOT_PIXEL9DRAW_FILL>
    }
 800199e:	bf00      	nop
 80019a0:	3714      	adds	r7, #20
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080019a6 <_ZN9Rectangle9clearAreaER11FrameBuffer>:

    void clearArea(FrameBuffer& fb) override {
 80019a6:	b590      	push	{r4, r7, lr}
 80019a8:	b085      	sub	sp, #20
 80019aa:	af02      	add	r7, sp, #8
 80019ac:	6078      	str	r0, [r7, #4]
 80019ae:	6039      	str	r1, [r7, #0]
    	fb.Paint_ClearWindows(xStart, yStart, xEnd, yEnd, color==BLACK?WHITE:BLACK);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	8a19      	ldrh	r1, [r3, #16]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	8a58      	ldrh	r0, [r3, #18]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	8a9c      	ldrh	r4, [r3, #20]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	8adb      	ldrh	r3, [r3, #22]
 80019c0:	687a      	ldr	r2, [r7, #4]
 80019c2:	8b12      	ldrh	r2, [r2, #24]
 80019c4:	2a00      	cmp	r2, #0
 80019c6:	d101      	bne.n	80019cc <_ZN9Rectangle9clearAreaER11FrameBuffer+0x26>
 80019c8:	22ff      	movs	r2, #255	@ 0xff
 80019ca:	e000      	b.n	80019ce <_ZN9Rectangle9clearAreaER11FrameBuffer+0x28>
 80019cc:	2200      	movs	r2, #0
 80019ce:	9201      	str	r2, [sp, #4]
 80019d0:	9300      	str	r3, [sp, #0]
 80019d2:	4623      	mov	r3, r4
 80019d4:	4602      	mov	r2, r0
 80019d6:	6838      	ldr	r0, [r7, #0]
 80019d8:	f001 fe3f 	bl	800365a <_ZN11FrameBuffer18Paint_ClearWindowsEttttt>
    }
 80019dc:	bf00      	nop
 80019de:	370c      	adds	r7, #12
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd90      	pop	{r4, r7, pc}

080019e4 <_ZN9Rectangle9highlightEb>:

    void highlight(bool isSelected) override{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	460b      	mov	r3, r1
 80019ee:	70fb      	strb	r3, [r7, #3]
    	if(!interactable())
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7ff fdac 	bl	8001550 <_ZN8Drawable12interactableEv>
 80019f8:	4603      	mov	r3, r0
 80019fa:	f083 0301 	eor.w	r3, r3, #1
 80019fe:	b2db      	uxtb	r3, r3
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d10a      	bne.n	8001a1a <_ZN9Rectangle9highlightEb+0x36>
    		return;
    	if(isSelected){
 8001a04:	78fb      	ldrb	r3, [r7, #3]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d003      	beq.n	8001a12 <_ZN9Rectangle9highlightEb+0x2e>
    		this->fill = DRAW_FILL_FULL;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	76da      	strb	r2, [r3, #27]
 8001a10:	e004      	b.n	8001a1c <_ZN9Rectangle9highlightEb+0x38>
    	}else {
    		this->fill = DRAW_FILL_EMPTY;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2200      	movs	r2, #0
 8001a16:	76da      	strb	r2, [r3, #27]
 8001a18:	e000      	b.n	8001a1c <_ZN9Rectangle9highlightEb+0x38>
    		return;
 8001a1a:	bf00      	nop
    	}
    }
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
	...

08001a24 <_ZN9RectangleC1Ettttt9DOT_PIXEL9DRAW_FILLPFvvEttt>:

    Rectangle(UWORD xStart, UWORD yStart, UWORD xEnd, UWORD yEnd, UWORD color, DOT_PIXEL lineWidth, DRAW_FILL fill,
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b086      	sub	sp, #24
 8001a28:	af02      	add	r7, sp, #8
 8001a2a:	60f8      	str	r0, [r7, #12]
 8001a2c:	4608      	mov	r0, r1
 8001a2e:	4611      	mov	r1, r2
 8001a30:	461a      	mov	r2, r3
 8001a32:	4603      	mov	r3, r0
 8001a34:	817b      	strh	r3, [r7, #10]
 8001a36:	460b      	mov	r3, r1
 8001a38:	813b      	strh	r3, [r7, #8]
 8001a3a:	4613      	mov	r3, r2
 8001a3c:	80fb      	strh	r3, [r7, #6]
    		Callback onSelect = nullptr,
    		UWORD Rotate_ = ROTATE_0, UWORD Mirror_ = MIRROR_NONE, UWORD layer_ = 0 ):
    	Drawable(onSelect, Rotate_, Mirror_,  layer_),
    	xStart(xStart), yStart(yStart), xEnd(xEnd), yEnd(yEnd), color(color), lineWidth(lineWidth), fill(fill) {}
 8001a3e:	68f8      	ldr	r0, [r7, #12]
 8001a40:	8e39      	ldrh	r1, [r7, #48]	@ 0x30
 8001a42:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8001a44:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001a46:	9300      	str	r3, [sp, #0]
 8001a48:	460b      	mov	r3, r1
 8001a4a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001a4c:	f7ff fd36 	bl	80014bc <_ZN8DrawableC1EPFvvEttt>
 8001a50:	4a0f      	ldr	r2, [pc, #60]	@ (8001a90 <_ZN9RectangleC1Ettttt9DOT_PIXEL9DRAW_FILLPFvvEttt+0x6c>)
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	601a      	str	r2, [r3, #0]
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	897a      	ldrh	r2, [r7, #10]
 8001a5a:	821a      	strh	r2, [r3, #16]
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	893a      	ldrh	r2, [r7, #8]
 8001a60:	825a      	strh	r2, [r3, #18]
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	88fa      	ldrh	r2, [r7, #6]
 8001a66:	829a      	strh	r2, [r3, #20]
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	8b3a      	ldrh	r2, [r7, #24]
 8001a6c:	82da      	strh	r2, [r3, #22]
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	8bba      	ldrh	r2, [r7, #28]
 8001a72:	831a      	strh	r2, [r3, #24]
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001a7a:	769a      	strb	r2, [r3, #26]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8001a82:	76da      	strb	r2, [r3, #27]
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	4618      	mov	r0, r3
 8001a88:	3710      	adds	r7, #16
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	0801248c 	.word	0x0801248c

08001a94 <_ZN9RectangleD1Ev>:
    ~Rectangle(){}
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	4a05      	ldr	r2, [pc, #20]	@ (8001ab4 <_ZN9RectangleD1Ev+0x20>)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	601a      	str	r2, [r3, #0]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7ff fd65 	bl	8001574 <_ZN8DrawableD1Ev>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4618      	mov	r0, r3
 8001aae:	3708      	adds	r7, #8
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	0801248c 	.word	0x0801248c

08001ab8 <_ZN9RectangleD0Ev>:
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	f7ff ffe7 	bl	8001a94 <_ZN9RectangleD1Ev>
 8001ac6:	211c      	movs	r1, #28
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f00a fab3 	bl	800c034 <_ZdlPvj>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3708      	adds	r7, #8
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <_ZNSt12_Vector_baseIP6ScreenSaIS1_EEC1Ev>:
      _Vector_base() = default;
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f000 fc49 	bl	800237a <_ZNSt12_Vector_baseIP6ScreenSaIS1_EE12_Vector_implC1Ev>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	4618      	mov	r0, r3
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <_ZNSt6vectorIP6ScreenSaIS1_EEC1Ev>:
      vector() = default;
 8001af2:	b580      	push	{r7, lr}
 8001af4:	b082      	sub	sp, #8
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	6078      	str	r0, [r7, #4]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff ffeb 	bl	8001ad8 <_ZNSt12_Vector_baseIP6ScreenSaIS1_EEC1Ev>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4618      	mov	r0, r3
 8001b06:	3708      	adds	r7, #8
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <_ZN13ScreenManagerC1EP9EPD_4in26>:
#include "EPD_4in26.h"

class ScreenManager {
public:
	ScreenManager() = delete;
	ScreenManager(EPD_4in26 * _EPDController):  EPDController(_EPDController), currentScreen(nullptr) {}
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	6039      	str	r1, [r7, #0]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	683a      	ldr	r2, [r7, #0]
 8001b1a:	601a      	str	r2, [r3, #0]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	605a      	str	r2, [r3, #4]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	3308      	adds	r3, #8
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7ff ffe3 	bl	8001af2 <_ZNSt6vectorIP6ScreenSaIS1_EEC1Ev>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3708      	adds	r7, #8
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
	...

08001b38 <_ZN6BitMapC1EPKhttttt>:

#include "Drawable.h"

class BitMap: public Drawable{
public:
	BitMap(const UBYTE* img, UWORD xStart = 0, UWORD yStart = 0,UWORD width = 0, UWORD height = 0, UWORD flipColour = WHITE):
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b086      	sub	sp, #24
 8001b3c:	af02      	add	r7, sp, #8
 8001b3e:	60f8      	str	r0, [r7, #12]
 8001b40:	60b9      	str	r1, [r7, #8]
 8001b42:	4611      	mov	r1, r2
 8001b44:	461a      	mov	r2, r3
 8001b46:	460b      	mov	r3, r1
 8001b48:	80fb      	strh	r3, [r7, #6]
 8001b4a:	4613      	mov	r3, r2
 8001b4c:	80bb      	strh	r3, [r7, #4]
		Drawable(),
		img(img), xStart(xStart), yStart(yStart), width(width), height(height), flipColour(flipColour){}
 8001b4e:	68f8      	ldr	r0, [r7, #12]
 8001b50:	2300      	movs	r3, #0
 8001b52:	9300      	str	r3, [sp, #0]
 8001b54:	2300      	movs	r3, #0
 8001b56:	2200      	movs	r2, #0
 8001b58:	2100      	movs	r1, #0
 8001b5a:	f7ff fcaf 	bl	80014bc <_ZN8DrawableC1EPFvvEttt>
 8001b5e:	4a0d      	ldr	r2, [pc, #52]	@ (8001b94 <_ZN6BitMapC1EPKhttttt+0x5c>)
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	601a      	str	r2, [r3, #0]
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	68ba      	ldr	r2, [r7, #8]
 8001b68:	611a      	str	r2, [r3, #16]
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	88fa      	ldrh	r2, [r7, #6]
 8001b6e:	829a      	strh	r2, [r3, #20]
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	88ba      	ldrh	r2, [r7, #4]
 8001b74:	82da      	strh	r2, [r3, #22]
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	8b3a      	ldrh	r2, [r7, #24]
 8001b7a:	831a      	strh	r2, [r3, #24]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	8bba      	ldrh	r2, [r7, #28]
 8001b80:	835a      	strh	r2, [r3, #26]
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	8c3a      	ldrh	r2, [r7, #32]
 8001b86:	839a      	strh	r2, [r3, #28]
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3710      	adds	r7, #16
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	0801246c 	.word	0x0801246c

08001b98 <_ZN6BitMap4drawER11FrameBuffertt>:

	void draw(FrameBuffer& fb, UWORD xMove= 0, UWORD yMove=0) override{
 8001b98:	b5b0      	push	{r4, r5, r7, lr}
 8001b9a:	b088      	sub	sp, #32
 8001b9c:	af04      	add	r7, sp, #16
 8001b9e:	60f8      	str	r0, [r7, #12]
 8001ba0:	60b9      	str	r1, [r7, #8]
 8001ba2:	4611      	mov	r1, r2
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	80fb      	strh	r3, [r7, #6]
 8001baa:	4613      	mov	r3, r2
 8001bac:	80bb      	strh	r3, [r7, #4]
//		LOG_WARN("x: %i, y: %i", this->xStart + xMove,this->yStart + yMove);
		fb.Paint_DrawBitMap_Paste(img, this->xStart + xMove, this->yStart + yMove, width , height , flipColour);
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	6918      	ldr	r0, [r3, #16]
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	8a9a      	ldrh	r2, [r3, #20]
 8001bb6:	88fb      	ldrh	r3, [r7, #6]
 8001bb8:	4413      	add	r3, r2
 8001bba:	b29c      	uxth	r4, r3
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	8ada      	ldrh	r2, [r3, #22]
 8001bc0:	88bb      	ldrh	r3, [r7, #4]
 8001bc2:	4413      	add	r3, r2
 8001bc4:	b29d      	uxth	r5, r3
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	8b1b      	ldrh	r3, [r3, #24]
 8001bca:	68fa      	ldr	r2, [r7, #12]
 8001bcc:	8b52      	ldrh	r2, [r2, #26]
 8001bce:	68f9      	ldr	r1, [r7, #12]
 8001bd0:	8b89      	ldrh	r1, [r1, #28]
 8001bd2:	b2c9      	uxtb	r1, r1
 8001bd4:	9102      	str	r1, [sp, #8]
 8001bd6:	9201      	str	r2, [sp, #4]
 8001bd8:	9300      	str	r3, [sp, #0]
 8001bda:	462b      	mov	r3, r5
 8001bdc:	4622      	mov	r2, r4
 8001bde:	4601      	mov	r1, r0
 8001be0:	68b8      	ldr	r0, [r7, #8]
 8001be2:	f002 f995 	bl	8003f10 <_ZN11FrameBuffer22Paint_DrawBitMap_PasteEPKhtttth>
	}
 8001be6:	bf00      	nop
 8001be8:	3710      	adds	r7, #16
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bdb0      	pop	{r4, r5, r7, pc}

08001bee <_ZN6BitMap9highlightEb>:

	void highlight(bool isSelected) override{};
 8001bee:	b480      	push	{r7}
 8001bf0:	b083      	sub	sp, #12
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
 8001bf6:	460b      	mov	r3, r1
 8001bf8:	70fb      	strb	r3, [r7, #3]
 8001bfa:	bf00      	nop
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr

08001c06 <_ZN8DrawText4drawER11FrameBuffertt>:
	UWORD Color_Foreground;
	UWORD Color_Background;
  /* data */
public:

    void draw(FrameBuffer& fb, UWORD xMove = 0, UWORD yMove = 0) override{
 8001c06:	b5b0      	push	{r4, r5, r7, lr}
 8001c08:	b088      	sub	sp, #32
 8001c0a:	af04      	add	r7, sp, #16
 8001c0c:	60f8      	str	r0, [r7, #12]
 8001c0e:	60b9      	str	r1, [r7, #8]
 8001c10:	4611      	mov	r1, r2
 8001c12:	461a      	mov	r2, r3
 8001c14:	460b      	mov	r3, r1
 8001c16:	80fb      	strh	r3, [r7, #6]
 8001c18:	4613      	mov	r3, r2
 8001c1a:	80bb      	strh	r3, [r7, #4]
    	if(pTime == nullptr)
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	699b      	ldr	r3, [r3, #24]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d11b      	bne.n	8001c5c <_ZN8DrawText4drawER11FrameBuffertt+0x56>
    		fb.Paint_DrawString_EN( Xstart + xMove,  Ystart + yMove,  pString, Font,  Color_Foreground,  Color_Background); // we want to pass in a array
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	8a1a      	ldrh	r2, [r3, #16]
 8001c28:	88fb      	ldrh	r3, [r7, #6]
 8001c2a:	4413      	add	r3, r2
 8001c2c:	b298      	uxth	r0, r3
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	8a5a      	ldrh	r2, [r3, #18]
 8001c32:	88bb      	ldrh	r3, [r7, #4]
 8001c34:	4413      	add	r3, r2
 8001c36:	b29c      	uxth	r4, r3
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	695d      	ldr	r5, [r3, #20]
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	69db      	ldr	r3, [r3, #28]
 8001c40:	68fa      	ldr	r2, [r7, #12]
 8001c42:	8c12      	ldrh	r2, [r2, #32]
 8001c44:	68f9      	ldr	r1, [r7, #12]
 8001c46:	8c49      	ldrh	r1, [r1, #34]	@ 0x22
 8001c48:	9102      	str	r1, [sp, #8]
 8001c4a:	9201      	str	r2, [sp, #4]
 8001c4c:	9300      	str	r3, [sp, #0]
 8001c4e:	462b      	mov	r3, r5
 8001c50:	4622      	mov	r2, r4
 8001c52:	4601      	mov	r1, r0
 8001c54:	68b8      	ldr	r0, [r7, #8]
 8001c56:	f001 ffa9 	bl	8003bac <_ZN11FrameBuffer19Paint_DrawString_ENEttPKcP6_tFonttt>
    	else{
    		fb.Paint_DrawTime(Xstart + xMove, Ystart + yMove, pTime, Font, Color_Foreground, Color_Background);
    	}
    }
 8001c5a:	e01a      	b.n	8001c92 <_ZN8DrawText4drawER11FrameBuffertt+0x8c>
    		fb.Paint_DrawTime(Xstart + xMove, Ystart + yMove, pTime, Font, Color_Foreground, Color_Background);
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	8a1a      	ldrh	r2, [r3, #16]
 8001c60:	88fb      	ldrh	r3, [r7, #6]
 8001c62:	4413      	add	r3, r2
 8001c64:	b298      	uxth	r0, r3
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	8a5a      	ldrh	r2, [r3, #18]
 8001c6a:	88bb      	ldrh	r3, [r7, #4]
 8001c6c:	4413      	add	r3, r2
 8001c6e:	b29c      	uxth	r4, r3
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	699d      	ldr	r5, [r3, #24]
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	69db      	ldr	r3, [r3, #28]
 8001c78:	68fa      	ldr	r2, [r7, #12]
 8001c7a:	8c12      	ldrh	r2, [r2, #32]
 8001c7c:	68f9      	ldr	r1, [r7, #12]
 8001c7e:	8c49      	ldrh	r1, [r1, #34]	@ 0x22
 8001c80:	9102      	str	r1, [sp, #8]
 8001c82:	9201      	str	r2, [sp, #4]
 8001c84:	9300      	str	r3, [sp, #0]
 8001c86:	462b      	mov	r3, r5
 8001c88:	4622      	mov	r2, r4
 8001c8a:	4601      	mov	r1, r0
 8001c8c:	68b8      	ldr	r0, [r7, #8]
 8001c8e:	f001 ffe3 	bl	8003c58 <_ZN11FrameBuffer14Paint_DrawTimeEttP10PAINT_TIMEP6_tFonttt>
    }
 8001c92:	bf00      	nop
 8001c94:	3710      	adds	r7, #16
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bdb0      	pop	{r4, r5, r7, pc}

08001c9a <_ZN8DrawText9highlightEb>:

    void highlight(bool isSelected) override{
 8001c9a:	b480      	push	{r7}
 8001c9c:	b083      	sub	sp, #12
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	6078      	str	r0, [r7, #4]
 8001ca2:	460b      	mov	r3, r1
 8001ca4:	70fb      	strb	r3, [r7, #3]

    }
 8001ca6:	bf00      	nop
 8001ca8:	370c      	adds	r7, #12
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
	...

08001cb4 <_ZN8DrawTextC1EttPKcP6_tFonttt>:

    DrawText() = delete;

    DrawText(UWORD Xstart, UWORD Ystart, const char * pString, sFONT* Font, UWORD Color_Foreground, UWORD Color_Background):
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b086      	sub	sp, #24
 8001cb8:	af02      	add	r7, sp, #8
 8001cba:	60f8      	str	r0, [r7, #12]
 8001cbc:	607b      	str	r3, [r7, #4]
 8001cbe:	460b      	mov	r3, r1
 8001cc0:	817b      	strh	r3, [r7, #10]
 8001cc2:	4613      	mov	r3, r2
 8001cc4:	813b      	strh	r3, [r7, #8]
    	Drawable(),
		Xstart(Xstart), Ystart(Ystart), pString(pString), pTime(nullptr), Font(Font), Color_Foreground(Color_Foreground), Color_Background(Color_Background) {}
 8001cc6:	68f8      	ldr	r0, [r7, #12]
 8001cc8:	2300      	movs	r3, #0
 8001cca:	9300      	str	r3, [sp, #0]
 8001ccc:	2300      	movs	r3, #0
 8001cce:	2200      	movs	r2, #0
 8001cd0:	2100      	movs	r1, #0
 8001cd2:	f7ff fbf3 	bl	80014bc <_ZN8DrawableC1EPFvvEttt>
 8001cd6:	4a0e      	ldr	r2, [pc, #56]	@ (8001d10 <_ZN8DrawTextC1EttPKcP6_tFonttt+0x5c>)
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	601a      	str	r2, [r3, #0]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	897a      	ldrh	r2, [r7, #10]
 8001ce0:	821a      	strh	r2, [r3, #16]
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	893a      	ldrh	r2, [r7, #8]
 8001ce6:	825a      	strh	r2, [r3, #18]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	615a      	str	r2, [r3, #20]
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	619a      	str	r2, [r3, #24]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	69ba      	ldr	r2, [r7, #24]
 8001cf8:	61da      	str	r2, [r3, #28]
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	8bba      	ldrh	r2, [r7, #28]
 8001cfe:	841a      	strh	r2, [r3, #32]
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	8c3a      	ldrh	r2, [r7, #32]
 8001d04:	845a      	strh	r2, [r3, #34]	@ 0x22
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3710      	adds	r7, #16
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	0801244c 	.word	0x0801244c

08001d14 <_ZN8DrawTextC1EttP10PAINT_TIMEP6_tFonttt>:

    DrawText(UWORD Xstart, UWORD Ystart, PAINT_TIME *pTime, sFONT* Font,UWORD Color_Foreground, UWORD Color_Background):
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b086      	sub	sp, #24
 8001d18:	af02      	add	r7, sp, #8
 8001d1a:	60f8      	str	r0, [r7, #12]
 8001d1c:	607b      	str	r3, [r7, #4]
 8001d1e:	460b      	mov	r3, r1
 8001d20:	817b      	strh	r3, [r7, #10]
 8001d22:	4613      	mov	r3, r2
 8001d24:	813b      	strh	r3, [r7, #8]
		Drawable(),
		Xstart(Xstart), Ystart(Ystart), pString(nullptr), pTime(pTime), Font(Font), Color_Foreground(Color_Foreground), Color_Background(Color_Background) {}
 8001d26:	68f8      	ldr	r0, [r7, #12]
 8001d28:	2300      	movs	r3, #0
 8001d2a:	9300      	str	r3, [sp, #0]
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	2200      	movs	r2, #0
 8001d30:	2100      	movs	r1, #0
 8001d32:	f7ff fbc3 	bl	80014bc <_ZN8DrawableC1EPFvvEttt>
 8001d36:	4a0e      	ldr	r2, [pc, #56]	@ (8001d70 <_ZN8DrawTextC1EttP10PAINT_TIMEP6_tFonttt+0x5c>)
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	601a      	str	r2, [r3, #0]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	897a      	ldrh	r2, [r7, #10]
 8001d40:	821a      	strh	r2, [r3, #16]
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	893a      	ldrh	r2, [r7, #8]
 8001d46:	825a      	strh	r2, [r3, #18]
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	615a      	str	r2, [r3, #20]
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	687a      	ldr	r2, [r7, #4]
 8001d52:	619a      	str	r2, [r3, #24]
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	69ba      	ldr	r2, [r7, #24]
 8001d58:	61da      	str	r2, [r3, #28]
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	8bba      	ldrh	r2, [r7, #28]
 8001d5e:	841a      	strh	r2, [r3, #32]
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	8c3a      	ldrh	r2, [r7, #32]
 8001d64:	845a      	strh	r2, [r3, #34]	@ 0x22
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3710      	adds	r7, #16
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	0801244c 	.word	0x0801244c

08001d74 <_ZN8DrawTextD1Ev>:


    ~DrawText(){}
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	4a05      	ldr	r2, [pc, #20]	@ (8001d94 <_ZN8DrawTextD1Ev+0x20>)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	601a      	str	r2, [r3, #0]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7ff fbf5 	bl	8001574 <_ZN8DrawableD1Ev>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3708      	adds	r7, #8
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	0801244c 	.word	0x0801244c

08001d98 <_ZN8DrawTextD0Ev>:
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f7ff ffe7 	bl	8001d74 <_ZN8DrawTextD1Ev>
 8001da6:	2124      	movs	r1, #36	@ 0x24
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	f00a f943 	bl	800c034 <_ZdlPvj>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4618      	mov	r0, r3
 8001db2:	3708      	adds	r7, #8
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}

08001db8 <_Z21EPD_MainMenuWithQueuev>:
//	Next,
//	Previous,
//};


void EPD_MainMenuWithQueue(){
 8001db8:	b580      	push	{r7, lr}
 8001dba:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 8001dbe:	af08      	add	r7, sp, #32


	float setPoint = 23.5;
 8001dc0:	4bc1      	ldr	r3, [pc, #772]	@ (80020c8 <_Z21EPD_MainMenuWithQueuev+0x310>)
 8001dc2:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
	char buffer[50]; // Buffer for formatted string

	float temparature = 24.5;
 8001dc6:	4bc1      	ldr	r3, [pc, #772]	@ (80020cc <_Z21EPD_MainMenuWithQueuev+0x314>)
 8001dc8:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
	char temparatureBuffer[50]; // Buffer for formatted string

	UWORD containerYLength = 100;
 8001dcc:	2364      	movs	r3, #100	@ 0x64
 8001dce:	f8a7 31ee 	strh.w	r3, [r7, #494]	@ 0x1ee
	UWORD containerYStart = EPD_4in26_HEIGHT - containerYLength;
 8001dd2:	f8b7 31ee 	ldrh.w	r3, [r7, #494]	@ 0x1ee
 8001dd6:	f5c3 73f0 	rsb	r3, r3, #480	@ 0x1e0
 8001dda:	f8a7 31ec 	strh.w	r3, [r7, #492]	@ 0x1ec

	UWORD ContainerxLength = 150;
 8001dde:	2396      	movs	r3, #150	@ 0x96
 8001de0:	f8a7 31ea 	strh.w	r3, [r7, #490]	@ 0x1ea
	UWORD ContainerxStart = 325;
 8001de4:	f240 1345 	movw	r3, #325	@ 0x145
 8001de8:	f8a7 31e8 	strh.w	r3, [r7, #488]	@ 0x1e8


	PAINT_TIME time;

	time.Hour = 10;
 8001dec:	230a      	movs	r3, #10
 8001dee:	f887 3178 	strb.w	r3, [r7, #376]	@ 0x178
	time.Min = 50;
 8001df2:	2332      	movs	r3, #50	@ 0x32
 8001df4:	f887 3179 	strb.w	r3, [r7, #377]	@ 0x179
	time.hasSeconds = false;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	f887 317b 	strb.w	r3, [r7, #379]	@ 0x17b
							    		DC_GPIO_Port, DC_Pin,
										SPI_CS_GPIO_Port, SPI_CS_Pin,
							    		BUSY_GPIO_Port, BUSY_Pin,
							    		PWR_GPIO_Port, PWR_Pin,
										&hspi1
										);
 8001dfe:	f507 70a4 	add.w	r0, r7, #328	@ 0x148
 8001e02:	4bb3      	ldr	r3, [pc, #716]	@ (80020d0 <_Z21EPD_MainMenuWithQueuev+0x318>)
 8001e04:	9307      	str	r3, [sp, #28]
 8001e06:	2340      	movs	r3, #64	@ 0x40
 8001e08:	9306      	str	r3, [sp, #24]
 8001e0a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001e0e:	9305      	str	r3, [sp, #20]
 8001e10:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e14:	9304      	str	r3, [sp, #16]
 8001e16:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001e1a:	9303      	str	r3, [sp, #12]
 8001e1c:	2308      	movs	r3, #8
 8001e1e:	9302      	str	r3, [sp, #8]
 8001e20:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001e24:	9301      	str	r3, [sp, #4]
 8001e26:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001e2a:	9300      	str	r3, [sp, #0]
 8001e2c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001e30:	2220      	movs	r2, #32
 8001e32:	f04f 4190 	mov.w	r1, #1207959552	@ 0x48000000
 8001e36:	f7ff f82b 	bl	8000e90 <_ZN9EPD_4in26C1EP12GPIO_TypeDeftS1_tS1_tS1_tS1_tP19__SPI_HandleTypeDef>


	ScreenManager screenManager(&ePaper);
 8001e3a:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 8001e3e:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8001e42:	4611      	mov	r1, r2
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7ff fe61 	bl	8001b0c <_ZN13ScreenManagerC1EP9EPD_4in26>


	Screen screen1 = Screen();
 8001e4a:	f507 708a 	add.w	r0, r7, #276	@ 0x114
 8001e4e:	2300      	movs	r3, #0
 8001e50:	9300      	str	r3, [sp, #0]
 8001e52:	23ff      	movs	r3, #255	@ 0xff
 8001e54:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001e58:	f44f 7148 	mov.w	r1, #800	@ 0x320
 8001e5c:	f7ff fc91 	bl	8001782 <_ZN6ScreenC1Etttt>

	Container container1 = Container(ContainerxStart,containerYStart,138,65);
 8001e60:	f8b7 21ec 	ldrh.w	r2, [r7, #492]	@ 0x1ec
 8001e64:	f8b7 11e8 	ldrh.w	r1, [r7, #488]	@ 0x1e8
 8001e68:	f107 00f0 	add.w	r0, r7, #240	@ 0xf0
 8001e6c:	2341      	movs	r3, #65	@ 0x41
 8001e6e:	9300      	str	r3, [sp, #0]
 8001e70:	238a      	movs	r3, #138	@ 0x8a
 8001e72:	f7ff fbc5 	bl	8001600 <_ZN9ContainerC1Etttt>

	Rectangle rect1 = Rectangle(0, 0, ContainerxLength, containerYLength, BLACK, DOT_PIXEL_2X2, DRAW_FILL_EMPTY);
 8001e76:	f8b7 21ea 	ldrh.w	r2, [r7, #490]	@ 0x1ea
 8001e7a:	f107 00d4 	add.w	r0, r7, #212	@ 0xd4
 8001e7e:	2300      	movs	r3, #0
 8001e80:	9307      	str	r3, [sp, #28]
 8001e82:	2300      	movs	r3, #0
 8001e84:	9306      	str	r3, [sp, #24]
 8001e86:	2300      	movs	r3, #0
 8001e88:	9305      	str	r3, [sp, #20]
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	9304      	str	r3, [sp, #16]
 8001e8e:	2300      	movs	r3, #0
 8001e90:	9303      	str	r3, [sp, #12]
 8001e92:	2302      	movs	r3, #2
 8001e94:	9302      	str	r3, [sp, #8]
 8001e96:	2300      	movs	r3, #0
 8001e98:	9301      	str	r3, [sp, #4]
 8001e9a:	f8b7 31ee 	ldrh.w	r3, [r7, #494]	@ 0x1ee
 8001e9e:	9300      	str	r3, [sp, #0]
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	2100      	movs	r1, #0
 8001ea6:	f7ff fdbd 	bl	8001a24 <_ZN9RectangleC1Ettttt9DOT_PIXEL9DRAW_FILLPFvvEttt>

	BitMap bitmap = BitMap(gImage_icon, 27, 2, 96, 96, WHITE);
 8001eaa:	f107 00b4 	add.w	r0, r7, #180	@ 0xb4
 8001eae:	23ff      	movs	r3, #255	@ 0xff
 8001eb0:	9302      	str	r3, [sp, #8]
 8001eb2:	2360      	movs	r3, #96	@ 0x60
 8001eb4:	9301      	str	r3, [sp, #4]
 8001eb6:	2360      	movs	r3, #96	@ 0x60
 8001eb8:	9300      	str	r3, [sp, #0]
 8001eba:	2302      	movs	r3, #2
 8001ebc:	221b      	movs	r2, #27
 8001ebe:	4985      	ldr	r1, [pc, #532]	@ (80020d4 <_Z21EPD_MainMenuWithQueuev+0x31c>)
 8001ec0:	f7ff fe3a 	bl	8001b38 <_ZN6BitMapC1EPKhttttt>

	container1.addDrawable(&rect1);
 8001ec4:	f107 02d4 	add.w	r2, r7, #212	@ 0xd4
 8001ec8:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 8001ecc:	4611      	mov	r1, r2
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f7ff fc47 	bl	8001762 <_ZN9Container11addDrawableEP8Drawable>
	container1.addDrawable(&bitmap);
 8001ed4:	f107 02b4 	add.w	r2, r7, #180	@ 0xb4
 8001ed8:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 8001edc:	4611      	mov	r1, r2
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f7ff fc3f 	bl	8001762 <_ZN9Container11addDrawableEP8Drawable>


	snprintf(buffer, sizeof(buffer), "Setpoint: %.1fC", setPoint);
 8001ee4:	f8d7 01f4 	ldr.w	r0, [r7, #500]	@ 0x1f4
 8001ee8:	f7fe fb06 	bl	80004f8 <__aeabi_f2d>
 8001eec:	4602      	mov	r2, r0
 8001eee:	460b      	mov	r3, r1
 8001ef0:	f507 70da 	add.w	r0, r7, #436	@ 0x1b4
 8001ef4:	e9cd 2300 	strd	r2, r3, [sp]
 8001ef8:	4a77      	ldr	r2, [pc, #476]	@ (80020d8 <_Z21EPD_MainMenuWithQueuev+0x320>)
 8001efa:	2132      	movs	r1, #50	@ 0x32
 8001efc:	f00a ff10 	bl	800cd20 <sniprintf>
	snprintf(temparatureBuffer, sizeof(temparatureBuffer), "Temperature: %.1fC", temparature);
 8001f00:	f8d7 01f0 	ldr.w	r0, [r7, #496]	@ 0x1f0
 8001f04:	f7fe faf8 	bl	80004f8 <__aeabi_f2d>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	460b      	mov	r3, r1
 8001f0c:	f507 70c0 	add.w	r0, r7, #384	@ 0x180
 8001f10:	e9cd 2300 	strd	r2, r3, [sp]
 8001f14:	4a71      	ldr	r2, [pc, #452]	@ (80020dc <_Z21EPD_MainMenuWithQueuev+0x324>)
 8001f16:	2132      	movs	r1, #50	@ 0x32
 8001f18:	f00a ff02 	bl	800cd20 <sniprintf>

	DrawText setPointText = DrawText(358,121,buffer,&Font16, WHITE, BLACK);
 8001f1c:	f507 73da 	add.w	r3, r7, #436	@ 0x1b4
 8001f20:	f107 0090 	add.w	r0, r7, #144	@ 0x90
 8001f24:	2200      	movs	r2, #0
 8001f26:	9202      	str	r2, [sp, #8]
 8001f28:	22ff      	movs	r2, #255	@ 0xff
 8001f2a:	9201      	str	r2, [sp, #4]
 8001f2c:	4a6c      	ldr	r2, [pc, #432]	@ (80020e0 <_Z21EPD_MainMenuWithQueuev+0x328>)
 8001f2e:	9200      	str	r2, [sp, #0]
 8001f30:	2279      	movs	r2, #121	@ 0x79
 8001f32:	f44f 71b3 	mov.w	r1, #358	@ 0x166
 8001f36:	f7ff febd 	bl	8001cb4 <_ZN8DrawTextC1EttPKcP6_tFonttt>
	DrawText actualTemperature = DrawText(302,174,temparatureBuffer,&Font24, WHITE, BLACK);
 8001f3a:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001f3e:	f107 006c 	add.w	r0, r7, #108	@ 0x6c
 8001f42:	2200      	movs	r2, #0
 8001f44:	9202      	str	r2, [sp, #8]
 8001f46:	22ff      	movs	r2, #255	@ 0xff
 8001f48:	9201      	str	r2, [sp, #4]
 8001f4a:	4a66      	ldr	r2, [pc, #408]	@ (80020e4 <_Z21EPD_MainMenuWithQueuev+0x32c>)
 8001f4c:	9200      	str	r2, [sp, #0]
 8001f4e:	22ae      	movs	r2, #174	@ 0xae
 8001f50:	f44f 7197 	mov.w	r1, #302	@ 0x12e
 8001f54:	f7ff feae 	bl	8001cb4 <_ZN8DrawTextC1EttPKcP6_tFonttt>


	DrawText timeText = DrawText(338,36,&time,&Font24, WHITE, BLACK);
 8001f58:	f507 73ba 	add.w	r3, r7, #372	@ 0x174
 8001f5c:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 8001f60:	2200      	movs	r2, #0
 8001f62:	9202      	str	r2, [sp, #8]
 8001f64:	22ff      	movs	r2, #255	@ 0xff
 8001f66:	9201      	str	r2, [sp, #4]
 8001f68:	4a5e      	ldr	r2, [pc, #376]	@ (80020e4 <_Z21EPD_MainMenuWithQueuev+0x32c>)
 8001f6a:	9200      	str	r2, [sp, #0]
 8001f6c:	2224      	movs	r2, #36	@ 0x24
 8001f6e:	f44f 71a9 	mov.w	r1, #338	@ 0x152
 8001f72:	f7ff fecf 	bl	8001d14 <_ZN8DrawTextC1EttP10PAINT_TIMEP6_tFonttt>

	BitMap battery = BitMap(gImage_battery, 0, 0, 64, 64, WHITE);
 8001f76:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8001f7a:	23ff      	movs	r3, #255	@ 0xff
 8001f7c:	9302      	str	r3, [sp, #8]
 8001f7e:	2340      	movs	r3, #64	@ 0x40
 8001f80:	9301      	str	r3, [sp, #4]
 8001f82:	2340      	movs	r3, #64	@ 0x40
 8001f84:	9300      	str	r3, [sp, #0]
 8001f86:	2300      	movs	r3, #0
 8001f88:	2200      	movs	r2, #0
 8001f8a:	4957      	ldr	r1, [pc, #348]	@ (80020e8 <_Z21EPD_MainMenuWithQueuev+0x330>)
 8001f8c:	f7ff fdd4 	bl	8001b38 <_ZN6BitMapC1EPKhttttt>

	BitMap wifi = BitMap(gImage_wifi,730,0, 64,64,WHITE);
 8001f90:	f107 0008 	add.w	r0, r7, #8
 8001f94:	23ff      	movs	r3, #255	@ 0xff
 8001f96:	9302      	str	r3, [sp, #8]
 8001f98:	2340      	movs	r3, #64	@ 0x40
 8001f9a:	9301      	str	r3, [sp, #4]
 8001f9c:	2340      	movs	r3, #64	@ 0x40
 8001f9e:	9300      	str	r3, [sp, #0]
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	f240 22da 	movw	r2, #730	@ 0x2da
 8001fa6:	4951      	ldr	r1, [pc, #324]	@ (80020ec <_Z21EPD_MainMenuWithQueuev+0x334>)
 8001fa8:	f7ff fdc6 	bl	8001b38 <_ZN6BitMapC1EPKhttttt>

	screen1.addDrawable(&container1);
 8001fac:	f107 02f0 	add.w	r2, r7, #240	@ 0xf0
 8001fb0:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8001fb4:	4611      	mov	r1, r2
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f7ff fc0c 	bl	80017d4 <_ZN6Screen11addDrawableEP8Drawable>
	screen1.addDrawable(&setPointText);
 8001fbc:	f107 0290 	add.w	r2, r7, #144	@ 0x90
 8001fc0:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8001fc4:	4611      	mov	r1, r2
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f7ff fc04 	bl	80017d4 <_ZN6Screen11addDrawableEP8Drawable>
	screen1.addDrawable(&actualTemperature);
 8001fcc:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8001fd0:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8001fd4:	4611      	mov	r1, r2
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7ff fbfc 	bl	80017d4 <_ZN6Screen11addDrawableEP8Drawable>
	screen1.addDrawable(&timeText);
 8001fdc:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8001fe0:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8001fe4:	4611      	mov	r1, r2
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7ff fbf4 	bl	80017d4 <_ZN6Screen11addDrawableEP8Drawable>
	screen1.addDrawable(&battery);
 8001fec:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8001ff0:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8001ff4:	4611      	mov	r1, r2
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f7ff fbec 	bl	80017d4 <_ZN6Screen11addDrawableEP8Drawable>
	screen1.addDrawable(&wifi);
 8001ffc:	f107 0208 	add.w	r2, r7, #8
 8002000:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8002004:	4611      	mov	r1, r2
 8002006:	4618      	mov	r0, r3
 8002008:	f7ff fbe4 	bl	80017d4 <_ZN6Screen11addDrawableEP8Drawable>

	screenManager.addScreen(&screen1);
 800200c:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 8002010:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8002014:	4611      	mov	r1, r2
 8002016:	4618      	mov	r0, r3
 8002018:	f002 fa27 	bl	800446a <_ZN13ScreenManager9addScreenEP6Screen>

	screenManager.initFirstTime();
 800201c:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8002020:	4618      	mov	r0, r3
 8002022:	f002 fa08 	bl	8004436 <_ZN13ScreenManager13initFirstTimeEv>
//
	screenManager.displayActiveScreen();
 8002026:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 800202a:	4618      	mov	r0, r3
 800202c:	f002 fa3d 	bl	80044aa <_ZN13ScreenManager19displayActiveScreenEv>

	Button receivedState;


	while(1){
		if (xQueueReceive(buttonQueue, &receivedState, portMAX_DELAY) == pdPASS) {
 8002030:	4b2f      	ldr	r3, [pc, #188]	@ (80020f0 <_Z21EPD_MainMenuWithQueuev+0x338>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	1d39      	adds	r1, r7, #4
 8002036:	f04f 32ff 	mov.w	r2, #4294967295
 800203a:	4618      	mov	r0, r3
 800203c:	f007 fe4e 	bl	8009cdc <xQueueReceive>
 8002040:	4603      	mov	r3, r0
 8002042:	2b01      	cmp	r3, #1
 8002044:	bf0c      	ite	eq
 8002046:	2301      	moveq	r3, #1
 8002048:	2300      	movne	r3, #0
 800204a:	b2db      	uxtb	r3, r3
 800204c:	2b00      	cmp	r3, #0
 800204e:	d0ef      	beq.n	8002030 <_Z21EPD_MainMenuWithQueuev+0x278>
			switch(receivedState){
 8002050:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8002054:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	2b05      	cmp	r3, #5
 800205c:	d8e8      	bhi.n	8002030 <_Z21EPD_MainMenuWithQueuev+0x278>
 800205e:	a201      	add	r2, pc, #4	@ (adr r2, 8002064 <_Z21EPD_MainMenuWithQueuev+0x2ac>)
 8002060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002064:	0800207d 	.word	0x0800207d
 8002068:	08002087 	.word	0x08002087
 800206c:	08002091 	.word	0x08002091
 8002070:	0800209b 	.word	0x0800209b
 8002074:	080020af 	.word	0x080020af
 8002078:	080020b9 	.word	0x080020b9
			case Button::Up:
	        	LOG_INFO("Button pressed up");
 800207c:	491d      	ldr	r1, [pc, #116]	@ (80020f4 <_Z21EPD_MainMenuWithQueuev+0x33c>)
 800207e:	2003      	movs	r0, #3
 8002080:	f7fe fee2 	bl	8000e48 <_Z12log_message2hPKcz>
	        	break;
 8002084:	e01e      	b.n	80020c4 <_Z21EPD_MainMenuWithQueuev+0x30c>
			case Button::Down:
	        	LOG_INFO("Button pressed down ");
 8002086:	491c      	ldr	r1, [pc, #112]	@ (80020f8 <_Z21EPD_MainMenuWithQueuev+0x340>)
 8002088:	2003      	movs	r0, #3
 800208a:	f7fe fedd 	bl	8000e48 <_Z12log_message2hPKcz>
	        	break;
 800208e:	e019      	b.n	80020c4 <_Z21EPD_MainMenuWithQueuev+0x30c>
			case Button::Left:
	        	LOG_INFO("Button pressed left");
 8002090:	491a      	ldr	r1, [pc, #104]	@ (80020fc <_Z21EPD_MainMenuWithQueuev+0x344>)
 8002092:	2003      	movs	r0, #3
 8002094:	f7fe fed8 	bl	8000e48 <_Z12log_message2hPKcz>
	        	break;
 8002098:	e014      	b.n	80020c4 <_Z21EPD_MainMenuWithQueuev+0x30c>
			case Button::Middle:
				screenManager.onInteract();
 800209a:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 800209e:	4618      	mov	r0, r3
 80020a0:	f002 fa20 	bl	80044e4 <_ZN13ScreenManager10onInteractEv>
	        	LOG_INFO("Button pressed middle");
 80020a4:	4916      	ldr	r1, [pc, #88]	@ (8002100 <_Z21EPD_MainMenuWithQueuev+0x348>)
 80020a6:	2003      	movs	r0, #3
 80020a8:	f7fe fece 	bl	8000e48 <_Z12log_message2hPKcz>
	        	break;
 80020ac:	e00a      	b.n	80020c4 <_Z21EPD_MainMenuWithQueuev+0x30c>
			case Button::Right:
	        	LOG_INFO("Button pressed right");
 80020ae:	4915      	ldr	r1, [pc, #84]	@ (8002104 <_Z21EPD_MainMenuWithQueuev+0x34c>)
 80020b0:	2003      	movs	r0, #3
 80020b2:	f7fe fec9 	bl	8000e48 <_Z12log_message2hPKcz>
	        	break;
 80020b6:	e005      	b.n	80020c4 <_Z21EPD_MainMenuWithQueuev+0x30c>

			case Button::Error:
				LOG_ERROR("INVALID STATE");
 80020b8:	4913      	ldr	r1, [pc, #76]	@ (8002108 <_Z21EPD_MainMenuWithQueuev+0x350>)
 80020ba:	2001      	movs	r0, #1
 80020bc:	f7fe fec4 	bl	8000e48 <_Z12log_message2hPKcz>
				break;
 80020c0:	bf00      	nop
 80020c2:	e7b5      	b.n	8002030 <_Z21EPD_MainMenuWithQueuev+0x278>
		if (xQueueReceive(buttonQueue, &receivedState, portMAX_DELAY) == pdPASS) {
 80020c4:	e7b4      	b.n	8002030 <_Z21EPD_MainMenuWithQueuev+0x278>
 80020c6:	bf00      	nop
 80020c8:	41bc0000 	.word	0x41bc0000
 80020cc:	41c40000 	.word	0x41c40000
 80020d0:	20000224 	.word	0x20000224
 80020d4:	08011fc4 	.word	0x08011fc4
 80020d8:	0800efa4 	.word	0x0800efa4
 80020dc:	0800efb4 	.word	0x0800efb4
 80020e0:	20000008 	.word	0x20000008
 80020e4:	20000010 	.word	0x20000010
 80020e8:	08011dc4 	.word	0x08011dc4
 80020ec:	08011bc4 	.word	0x08011bc4
 80020f0:	20000298 	.word	0x20000298
 80020f4:	0800efc8 	.word	0x0800efc8
 80020f8:	0800efe4 	.word	0x0800efe4
 80020fc:	0800f004 	.word	0x0800f004
 8002100:	0800f024 	.word	0x0800f024
 8002104:	0800f044 	.word	0x0800f044
 8002108:	0800f064 	.word	0x0800f064

0800210c <_ZNKSt10unique_ptrI11FrameBuffer15FreeRTOSDeleterEcvbEv>:
      get_deleter() const noexcept
      { return _M_t._M_deleter(); }

      /// Return @c true if the stored pointer is not null.
      _GLIBCXX23_CONSTEXPR
      explicit operator bool() const noexcept
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	f000 f940 	bl	800239a <_ZNKSt10unique_ptrI11FrameBuffer15FreeRTOSDeleterE3getEv>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	bf14      	ite	ne
 8002120:	2301      	movne	r3, #1
 8002122:	2300      	moveq	r3, #0
 8002124:	b2db      	uxtb	r3, r3
 8002126:	4618      	mov	r0, r3
 8002128:	3708      	adds	r7, #8
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}

0800212e <_ZNSt10unique_ptrI11FrameBuffer15FreeRTOSDeleterE5resetEPS0_>:
       *
       * The deleter will be invoked if a pointer is already owned.
       */
      _GLIBCXX23_CONSTEXPR
      void
      reset(pointer __p = pointer()) noexcept
 800212e:	b590      	push	{r4, r7, lr}
 8002130:	b083      	sub	sp, #12
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]
 8002136:	6039      	str	r1, [r7, #0]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	_M_t.reset(std::move(__p));
 8002138:	687c      	ldr	r4, [r7, #4]
 800213a:	463b      	mov	r3, r7
 800213c:	4618      	mov	r0, r3
 800213e:	f000 f939 	bl	80023b4 <_ZSt4moveIRP11FrameBufferEONSt16remove_referenceIT_E4typeEOS4_>
 8002142:	4603      	mov	r3, r0
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4619      	mov	r1, r3
 8002148:	4620      	mov	r0, r4
 800214a:	f000 f93e 	bl	80023ca <_ZNSt15__uniq_ptr_implI11FrameBuffer15FreeRTOSDeleterE5resetEPS0_>
      }
 800214e:	bf00      	nop
 8002150:	370c      	adds	r7, #12
 8002152:	46bd      	mov	sp, r7
 8002154:	bd90      	pop	{r4, r7, pc}

08002156 <_ZNKSt10unique_ptrI11FrameBuffer15FreeRTOSDeleterEdeEv>:
      operator*() const noexcept(noexcept(*std::declval<pointer>()))
 8002156:	b580      	push	{r7, lr}
 8002158:	b082      	sub	sp, #8
 800215a:	af00      	add	r7, sp, #0
 800215c:	6078      	str	r0, [r7, #4]
	__glibcxx_assert(get() != pointer());
 800215e:	f7ff f93b 	bl	80013d8 <_ZSt23__is_constant_evaluatedv>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d007      	beq.n	8002178 <_ZNKSt10unique_ptrI11FrameBuffer15FreeRTOSDeleterEdeEv+0x22>
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f000 f916 	bl	800239a <_ZNKSt10unique_ptrI11FrameBuffer15FreeRTOSDeleterE3getEv>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d101      	bne.n	8002178 <_ZNKSt10unique_ptrI11FrameBuffer15FreeRTOSDeleterEdeEv+0x22>
 8002174:	2301      	movs	r3, #1
 8002176:	e000      	b.n	800217a <_ZNKSt10unique_ptrI11FrameBuffer15FreeRTOSDeleterEdeEv+0x24>
 8002178:	2300      	movs	r3, #0
 800217a:	2b00      	cmp	r3, #0
	return *get();
 800217c:	6878      	ldr	r0, [r7, #4]
 800217e:	f000 f90c 	bl	800239a <_ZNKSt10unique_ptrI11FrameBuffer15FreeRTOSDeleterE3getEv>
 8002182:	4603      	mov	r3, r0
      }
 8002184:	4618      	mov	r0, r3
 8002186:	3708      	adds	r7, #8
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}

0800218c <_ZNKSt10unique_ptrIA_h15FreeRTOSDeleterE3getEv>:
      }

      /// Return the stored pointer.
      _GLIBCXX23_CONSTEXPR
      pointer
      get() const noexcept
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	4618      	mov	r0, r3
 8002198:	f000 f937 	bl	800240a <_ZNKSt15__uniq_ptr_implIh15FreeRTOSDeleterE6_M_ptrEv>
 800219c:	4603      	mov	r3, r0
 800219e:	4618      	mov	r0, r3
 80021a0:	3708      	adds	r7, #8
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}

080021a6 <_ZNSt12_Vector_baseIP8DrawableSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 80021a6:	b580      	push	{r7, lr}
 80021a8:	b082      	sub	sp, #8
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f000 f939 	bl	8002426 <_ZNSaIP8DrawableEC1Ev>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	4618      	mov	r0, r3
 80021b8:	f000 f941 	bl	800243e <_ZNSt12_Vector_baseIP8DrawableSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	4618      	mov	r0, r3
 80021c0:	3708      	adds	r7, #8
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}

080021c6 <_ZNSaIP8DrawableED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 80021c6:	b580      	push	{r7, lr}
 80021c8:	b082      	sub	sp, #8
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f000 f949 	bl	8002466 <_ZNSt15__new_allocatorIP8DrawableED1Ev>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	4618      	mov	r0, r3
 80021d8:	3708      	adds	r7, #8
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <_ZNSt12_Vector_baseIP8DrawableSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 80021de:	b580      	push	{r7, lr}
 80021e0:	b082      	sub	sp, #8
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	689a      	ldr	r2, [r3, #8]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 80021f6:	461a      	mov	r2, r3
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f000 f93f 	bl	800247c <_ZNSt12_Vector_baseIP8DrawableSaIS1_EE13_M_deallocateEPS1_j>
      }
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4618      	mov	r0, r3
 8002202:	f7ff f9d7 	bl	80015b4 <_ZNSt12_Vector_baseIP8DrawableSaIS1_EE12_Vector_implD1Ev>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4618      	mov	r0, r3
 800220a:	3708      	adds	r7, #8
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}

08002210 <_ZNSt6vectorIP8DrawableSaIS1_EED1Ev>:
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      _GLIBCXX20_CONSTEXPR
      ~vector() _GLIBCXX_NOEXCEPT
 8002210:	b5b0      	push	{r4, r5, r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681c      	ldr	r4, [r3, #0]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	4618      	mov	r0, r3
 8002224:	f000 f93d 	bl	80024a2 <_ZNSt12_Vector_baseIP8DrawableSaIS1_EE19_M_get_Tp_allocatorEv>
 8002228:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800222a:	461a      	mov	r2, r3
 800222c:	4629      	mov	r1, r5
 800222e:	4620      	mov	r0, r4
 8002230:	f000 f942 	bl	80024b8 <_ZSt8_DestroyIPP8DrawableS1_EvT_S3_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	4618      	mov	r0, r3
 8002238:	f7ff ffd1 	bl	80021de <_ZNSt12_Vector_baseIP8DrawableSaIS1_EED1Ev>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	4618      	mov	r0, r3
 8002240:	3708      	adds	r7, #8
 8002242:	46bd      	mov	sp, r7
 8002244:	bdb0      	pop	{r4, r5, r7, pc}

08002246 <_ZNSt6vectorIP8DrawableSaIS1_EE5beginEv>:
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      iterator
      begin() _GLIBCXX_NOEXCEPT
 8002246:	b580      	push	{r7, lr}
 8002248:	b084      	sub	sp, #16
 800224a:	af00      	add	r7, sp, #0
 800224c:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	f107 030c 	add.w	r3, r7, #12
 8002254:	4611      	mov	r1, r2
 8002256:	4618      	mov	r0, r3
 8002258:	f000 f93c 	bl	80024d4 <_ZN9__gnu_cxx17__normal_iteratorIPP8DrawableSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	4618      	mov	r0, r3
 8002260:	3710      	adds	r7, #16
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}

08002266 <_ZNSt6vectorIP8DrawableSaIS1_EE3endEv>:
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      iterator
      end() _GLIBCXX_NOEXCEPT
 8002266:	b580      	push	{r7, lr}
 8002268:	b084      	sub	sp, #16
 800226a:	af00      	add	r7, sp, #0
 800226c:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	1d1a      	adds	r2, r3, #4
 8002272:	f107 030c 	add.w	r3, r7, #12
 8002276:	4611      	mov	r1, r2
 8002278:	4618      	mov	r0, r3
 800227a:	f000 f92b 	bl	80024d4 <_ZN9__gnu_cxx17__normal_iteratorIPP8DrawableSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	4618      	mov	r0, r3
 8002282:	3710      	adds	r7, #16
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}

08002288 <_ZN9__gnu_cxxneIPP8DrawableSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8002288:	b590      	push	{r4, r7, lr}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	6039      	str	r1, [r7, #0]
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() != __rhs.base(); }
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f000 f92e 	bl	80024f4 <_ZNK9__gnu_cxx17__normal_iteratorIPP8DrawableSt6vectorIS2_SaIS2_EEE4baseEv>
 8002298:	4603      	mov	r3, r0
 800229a:	681c      	ldr	r4, [r3, #0]
 800229c:	6838      	ldr	r0, [r7, #0]
 800229e:	f000 f929 	bl	80024f4 <_ZNK9__gnu_cxx17__normal_iteratorIPP8DrawableSt6vectorIS2_SaIS2_EEE4baseEv>
 80022a2:	4603      	mov	r3, r0
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	429c      	cmp	r4, r3
 80022a8:	bf14      	ite	ne
 80022aa:	2301      	movne	r3, #1
 80022ac:	2300      	moveq	r3, #0
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	4618      	mov	r0, r3
 80022b2:	370c      	adds	r7, #12
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd90      	pop	{r4, r7, pc}

080022b8 <_ZN9__gnu_cxx17__normal_iteratorIPP8DrawableSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
	++_M_current;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	1d1a      	adds	r2, r3, #4
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	601a      	str	r2, [r3, #0]
	return *this;
 80022ca:	687b      	ldr	r3, [r7, #4]
      }
 80022cc:	4618      	mov	r0, r3
 80022ce:	370c      	adds	r7, #12
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr

080022d8 <_ZNK9__gnu_cxx17__normal_iteratorIPP8DrawableSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4618      	mov	r0, r3
 80022e6:	370c      	adds	r7, #12
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr

080022f0 <_ZNSt6vectorIP8DrawableSaIS1_EE9push_backERKS1_>:
       *  done in constant time if the %vector has preallocated space
       *  available.
       */
      _GLIBCXX20_CONSTEXPR
      void
      push_back(const value_type& __x)
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	6039      	str	r1, [r7, #0]
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	685a      	ldr	r2, [r3, #4]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	429a      	cmp	r2, r3
 8002304:	d00c      	beq.n	8002320 <_ZNSt6vectorIP8DrawableSaIS1_EE9push_backERKS1_+0x30>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	683a      	ldr	r2, [r7, #0]
 800230e:	4619      	mov	r1, r3
 8002310:	f000 f8fb 	bl	800250a <_ZNSt16allocator_traitsISaIP8DrawableEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
				     __x);
	    ++this->_M_impl._M_finish;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	1d1a      	adds	r2, r3, #4
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
	  }
	else
	  _M_realloc_insert(end(), __x);
      }
 800231e:	e008      	b.n	8002332 <_ZNSt6vectorIP8DrawableSaIS1_EE9push_backERKS1_+0x42>
	  _M_realloc_insert(end(), __x);
 8002320:	6878      	ldr	r0, [r7, #4]
 8002322:	f7ff ffa0 	bl	8002266 <_ZNSt6vectorIP8DrawableSaIS1_EE3endEv>
 8002326:	4603      	mov	r3, r0
 8002328:	683a      	ldr	r2, [r7, #0]
 800232a:	4619      	mov	r1, r3
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f000 f915 	bl	800255c <_ZNSt6vectorIP8DrawableSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 8002332:	bf00      	nop
 8002334:	3708      	adds	r7, #8
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}

0800233a <_ZNKSt6vectorIP8DrawableSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800233a:	b480      	push	{r7}
 800233c:	b083      	sub	sp, #12
 800233e:	af00      	add	r7, sp, #0
 8002340:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685a      	ldr	r2, [r3, #4]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	109b      	asrs	r3, r3, #2
 800234e:	4618      	mov	r0, r3
 8002350:	370c      	adds	r7, #12
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr

0800235a <_ZNSt6vectorIP8DrawableSaIS1_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 800235a:	b480      	push	{r7}
 800235c:	b083      	sub	sp, #12
 800235e:	af00      	add	r7, sp, #0
 8002360:	6078      	str	r0, [r7, #4]
 8002362:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	4413      	add	r3, r2
      }
 800236e:	4618      	mov	r0, r3
 8002370:	370c      	adds	r7, #12
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr

0800237a <_ZNSt12_Vector_baseIP6ScreenSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800237a:	b580      	push	{r7, lr}
 800237c:	b082      	sub	sp, #8
 800237e:	af00      	add	r7, sp, #0
 8002380:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f000 f9a6 	bl	80026d4 <_ZNSaIP6ScreenEC1Ev>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	4618      	mov	r0, r3
 800238c:	f000 f9ae 	bl	80026ec <_ZNSt12_Vector_baseIP6ScreenSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	4618      	mov	r0, r3
 8002394:	3708      	adds	r7, #8
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}

0800239a <_ZNKSt10unique_ptrI11FrameBuffer15FreeRTOSDeleterE3getEv>:
      get() const noexcept
 800239a:	b580      	push	{r7, lr}
 800239c:	b082      	sub	sp, #8
 800239e:	af00      	add	r7, sp, #0
 80023a0:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4618      	mov	r0, r3
 80023a6:	f000 f9ec 	bl	8002782 <_ZNKSt15__uniq_ptr_implI11FrameBuffer15FreeRTOSDeleterE6_M_ptrEv>
 80023aa:	4603      	mov	r3, r0
 80023ac:	4618      	mov	r0, r3
 80023ae:	3708      	adds	r7, #8
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}

080023b4 <_ZSt4moveIRP11FrameBufferEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	4618      	mov	r0, r3
 80023c0:	370c      	adds	r7, #12
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr

080023ca <_ZNSt15__uniq_ptr_implI11FrameBuffer15FreeRTOSDeleterE5resetEPS0_>:
      void reset(pointer __p) noexcept
 80023ca:	b580      	push	{r7, lr}
 80023cc:	b084      	sub	sp, #16
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	6078      	str	r0, [r7, #4]
 80023d2:	6039      	str	r1, [r7, #0]
	const pointer __old_p = _M_ptr();
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	f000 f9e2 	bl	800279e <_ZNSt15__uniq_ptr_implI11FrameBuffer15FreeRTOSDeleterE6_M_ptrEv>
 80023da:	4603      	mov	r3, r0
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	60fb      	str	r3, [r7, #12]
	_M_ptr() = __p;
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f000 f9dc 	bl	800279e <_ZNSt15__uniq_ptr_implI11FrameBuffer15FreeRTOSDeleterE6_M_ptrEv>
 80023e6:	4602      	mov	r2, r0
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	6013      	str	r3, [r2, #0]
	if (__old_p)
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d007      	beq.n	8002402 <_ZNSt15__uniq_ptr_implI11FrameBuffer15FreeRTOSDeleterE5resetEPS0_+0x38>
	  _M_deleter()(__old_p);
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f000 f9e0 	bl	80027b8 <_ZNSt15__uniq_ptr_implI11FrameBuffer15FreeRTOSDeleterE10_M_deleterEv>
 80023f8:	4603      	mov	r3, r0
 80023fa:	68f9      	ldr	r1, [r7, #12]
 80023fc:	4618      	mov	r0, r3
 80023fe:	f7fe ffff 	bl	8001400 <_ZNK15FreeRTOSDeleterclEPv>
      }
 8002402:	bf00      	nop
 8002404:	3710      	adds	r7, #16
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}

0800240a <_ZNKSt15__uniq_ptr_implIh15FreeRTOSDeleterE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 800240a:	b580      	push	{r7, lr}
 800240c:	b082      	sub	sp, #8
 800240e:	af00      	add	r7, sp, #0
 8002410:	6078      	str	r0, [r7, #4]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4618      	mov	r0, r3
 8002416:	f000 f9dc 	bl	80027d2 <_ZSt3getILj0EJPh15FreeRTOSDeleterEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS6_>
 800241a:	4603      	mov	r3, r0
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4618      	mov	r0, r3
 8002420:	3708      	adds	r7, #8
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}

08002426 <_ZNSaIP8DrawableEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8002426:	b580      	push	{r7, lr}
 8002428:	b082      	sub	sp, #8
 800242a:	af00      	add	r7, sp, #0
 800242c:	6078      	str	r0, [r7, #4]
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f000 f9dc 	bl	80027ec <_ZNSt15__new_allocatorIP8DrawableEC1Ev>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	4618      	mov	r0, r3
 8002438:	3708      	adds	r7, #8
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}

0800243e <_ZNSt12_Vector_baseIP8DrawableSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800243e:	b480      	push	{r7}
 8002440:	b083      	sub	sp, #12
 8002442:	af00      	add	r7, sp, #0
 8002444:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2200      	movs	r2, #0
 800244a:	601a      	str	r2, [r3, #0]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2200      	movs	r2, #0
 8002450:	605a      	str	r2, [r3, #4]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2200      	movs	r2, #0
 8002456:	609a      	str	r2, [r3, #8]
	{ }
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	4618      	mov	r0, r3
 800245c:	370c      	adds	r7, #12
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr

08002466 <_ZNSt15__new_allocatorIP8DrawableED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	__new_allocator(const __new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8002466:	b480      	push	{r7}
 8002468:	b083      	sub	sp, #12
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4618      	mov	r0, r3
 8002472:	370c      	adds	r7, #12
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr

0800247c <_ZNSt12_Vector_baseIP8DrawableSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 800247c:	b580      	push	{r7, lr}
 800247e:	b084      	sub	sp, #16
 8002480:	af00      	add	r7, sp, #0
 8002482:	60f8      	str	r0, [r7, #12]
 8002484:	60b9      	str	r1, [r7, #8]
 8002486:	607a      	str	r2, [r7, #4]
	if (__p)
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d005      	beq.n	800249a <_ZNSt12_Vector_baseIP8DrawableSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	68b9      	ldr	r1, [r7, #8]
 8002494:	4618      	mov	r0, r3
 8002496:	f000 f9b4 	bl	8002802 <_ZNSt16allocator_traitsISaIP8DrawableEE10deallocateERS2_PS1_j>
      }
 800249a:	bf00      	nop
 800249c:	3710      	adds	r7, #16
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}

080024a2 <_ZNSt12_Vector_baseIP8DrawableSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80024a2:	b480      	push	{r7}
 80024a4:	b083      	sub	sp, #12
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4618      	mov	r0, r3
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr

080024b8 <_ZSt8_DestroyIPP8DrawableS1_EvT_S3_RSaIT0_E>:
    }

  template<typename _ForwardIterator, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
 80024be:	60f8      	str	r0, [r7, #12]
 80024c0:	60b9      	str	r1, [r7, #8]
 80024c2:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 80024c4:	68b9      	ldr	r1, [r7, #8]
 80024c6:	68f8      	ldr	r0, [r7, #12]
 80024c8:	f000 f9aa 	bl	8002820 <_ZSt8_DestroyIPP8DrawableEvT_S3_>
    }
 80024cc:	bf00      	nop
 80024ce:	3710      	adds	r7, #16
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <_ZN9__gnu_cxx17__normal_iteratorIPP8DrawableSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	601a      	str	r2, [r3, #0]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4618      	mov	r0, r3
 80024ea:	370c      	adds	r7, #12
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr

080024f4 <_ZNK9__gnu_cxx17__normal_iteratorIPP8DrawableSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	4618      	mov	r0, r3
 8002500:	370c      	adds	r7, #12
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr

0800250a <_ZNSt16allocator_traitsISaIP8DrawableEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800250a:	b580      	push	{r7, lr}
 800250c:	b084      	sub	sp, #16
 800250e:	af00      	add	r7, sp, #0
 8002510:	60f8      	str	r0, [r7, #12]
 8002512:	60b9      	str	r1, [r7, #8]
 8002514:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f000 f98f 	bl	800283a <_ZSt7forwardIRKP8DrawableEOT_RNSt16remove_referenceIS4_E4typeE>
 800251c:	4603      	mov	r3, r0
 800251e:	461a      	mov	r2, r3
 8002520:	68b9      	ldr	r1, [r7, #8]
 8002522:	68f8      	ldr	r0, [r7, #12]
 8002524:	f000 f994 	bl	8002850 <_ZNSt15__new_allocatorIP8DrawableE9constructIS1_JRKS1_EEEvPT_DpOT0_>
	}
 8002528:	bf00      	nop
 800252a:	3710      	adds	r7, #16
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}

08002530 <_ZNSt6vectorIP8DrawableSaIS1_EE15_S_use_relocateEv>:
      _S_use_relocate()
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 8002536:	4618      	mov	r0, r3
 8002538:	f000 f805 	bl	8002546 <_ZNSt6vectorIP8DrawableSaIS1_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 800253c:	4603      	mov	r3, r0
      }
 800253e:	4618      	mov	r0, r3
 8002540:	3708      	adds	r7, #8
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}

08002546 <_ZNSt6vectorIP8DrawableSaIS1_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 8002546:	b480      	push	{r7}
 8002548:	b083      	sub	sp, #12
 800254a:	af00      	add	r7, sp, #0
 800254c:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 800254e:	2301      	movs	r3, #1
      }
 8002550:	4618      	mov	r0, r3
 8002552:	370c      	adds	r7, #12
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr

0800255c <_ZNSt6vectorIP8DrawableSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      _GLIBCXX20_CONSTEXPR
      void
      vector<_Tp, _Alloc>::
 800255c:	b5b0      	push	{r4, r5, r7, lr}
 800255e:	b08c      	sub	sp, #48	@ 0x30
 8002560:	af00      	add	r7, sp, #0
 8002562:	60f8      	str	r0, [r7, #12]
 8002564:	60b9      	str	r1, [r7, #8]
 8002566:	607a      	str	r2, [r7, #4]
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8002568:	4a59      	ldr	r2, [pc, #356]	@ (80026d0 <_ZNSt6vectorIP8DrawableSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x174>)
 800256a:	2101      	movs	r1, #1
 800256c:	68f8      	ldr	r0, [r7, #12]
 800256e:	f000 f985 	bl	800287c <_ZNKSt6vectorIP8DrawableSaIS1_EE12_M_check_lenEjPKc>
 8002572:	62b8      	str	r0, [r7, #40]	@ 0x28
      pointer __old_start = this->_M_impl._M_start;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	627b      	str	r3, [r7, #36]	@ 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 8002580:	68f8      	ldr	r0, [r7, #12]
 8002582:	f7ff fe60 	bl	8002246 <_ZNSt6vectorIP8DrawableSaIS1_EE5beginEv>
 8002586:	4603      	mov	r3, r0
 8002588:	617b      	str	r3, [r7, #20]
 800258a:	f107 0214 	add.w	r2, r7, #20
 800258e:	f107 0308 	add.w	r3, r7, #8
 8002592:	4611      	mov	r1, r2
 8002594:	4618      	mov	r0, r3
 8002596:	f000 f9b8 	bl	800290a <_ZN9__gnu_cxxmiIPP8DrawableSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800259a:	4603      	mov	r3, r0
 800259c:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80025a2:	4618      	mov	r0, r3
 80025a4:	f000 f9c6 	bl	8002934 <_ZNSt12_Vector_baseIP8DrawableSaIS1_EE11_M_allocateEj>
 80025a8:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 80025ae:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 80025b4:	69ba      	ldr	r2, [r7, #24]
 80025b6:	18d5      	adds	r5, r2, r3
 80025b8:	6878      	ldr	r0, [r7, #4]
 80025ba:	f000 f93e 	bl	800283a <_ZSt7forwardIRKP8DrawableEOT_RNSt16remove_referenceIS4_E4typeE>
 80025be:	4603      	mov	r3, r0
 80025c0:	461a      	mov	r2, r3
 80025c2:	4629      	mov	r1, r5
 80025c4:	4620      	mov	r0, r4
 80025c6:	f7ff ffa0 	bl	800250a <_ZNSt16allocator_traitsISaIP8DrawableEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 80025ca:	2300      	movs	r3, #0
 80025cc:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 80025ce:	f7ff ffaf 	bl	8002530 <_ZNSt6vectorIP8DrawableSaIS1_EE15_S_use_relocateEv>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d027      	beq.n	8002628 <_ZNSt6vectorIP8DrawableSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xcc>
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80025d8:	f107 0308 	add.w	r3, r7, #8
 80025dc:	4618      	mov	r0, r3
 80025de:	f7ff ff89 	bl	80024f4 <_ZNK9__gnu_cxx17__normal_iteratorIPP8DrawableSt6vectorIS2_SaIS2_EEE4baseEv>
 80025e2:	4603      	mov	r3, r0
 80025e4:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	4618      	mov	r0, r3
 80025ea:	f7ff ff5a 	bl	80024a2 <_ZNSt12_Vector_baseIP8DrawableSaIS1_EE19_M_get_Tp_allocatorEv>
 80025ee:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80025f0:	69ba      	ldr	r2, [r7, #24]
 80025f2:	4621      	mov	r1, r4
 80025f4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80025f6:	f000 f9b1 	bl	800295c <_ZNSt6vectorIP8DrawableSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 80025fa:	62f8      	str	r0, [r7, #44]	@ 0x2c

	      ++__new_finish;
 80025fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025fe:	3304      	adds	r3, #4
 8002600:	62fb      	str	r3, [r7, #44]	@ 0x2c

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8002602:	f107 0308 	add.w	r3, r7, #8
 8002606:	4618      	mov	r0, r3
 8002608:	f7ff ff74 	bl	80024f4 <_ZNK9__gnu_cxx17__normal_iteratorIPP8DrawableSt6vectorIS2_SaIS2_EEE4baseEv>
 800260c:	4603      	mov	r3, r0
 800260e:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	4618      	mov	r0, r3
 8002614:	f7ff ff45 	bl	80024a2 <_ZNSt12_Vector_baseIP8DrawableSaIS1_EE19_M_get_Tp_allocatorEv>
 8002618:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800261a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800261c:	6a39      	ldr	r1, [r7, #32]
 800261e:	4620      	mov	r0, r4
 8002620:	f000 f99c 	bl	800295c <_ZNSt6vectorIP8DrawableSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8002624:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8002626:	e026      	b.n	8002676 <_ZNSt6vectorIP8DrawableSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x11a>
	  else
#endif
	    {
	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__old_start, __position.base(),
 8002628:	f107 0308 	add.w	r3, r7, #8
 800262c:	4618      	mov	r0, r3
 800262e:	f7ff ff61 	bl	80024f4 <_ZNK9__gnu_cxx17__normal_iteratorIPP8DrawableSt6vectorIS2_SaIS2_EEE4baseEv>
 8002632:	4603      	mov	r3, r0
 8002634:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	4618      	mov	r0, r3
 800263a:	f7ff ff32 	bl	80024a2 <_ZNSt12_Vector_baseIP8DrawableSaIS1_EE19_M_get_Tp_allocatorEv>
 800263e:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 8002640:	69ba      	ldr	r2, [r7, #24]
 8002642:	4621      	mov	r1, r4
 8002644:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002646:	f000 f99d 	bl	8002984 <_ZSt34__uninitialized_move_if_noexcept_aIPP8DrawableS2_SaIS1_EET0_T_S5_S4_RT1_>
 800264a:	62f8      	str	r0, [r7, #44]	@ 0x2c

	      ++__new_finish;
 800264c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800264e:	3304      	adds	r3, #4
 8002650:	62fb      	str	r3, [r7, #44]	@ 0x2c

	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__position.base(), __old_finish,
 8002652:	f107 0308 	add.w	r3, r7, #8
 8002656:	4618      	mov	r0, r3
 8002658:	f7ff ff4c 	bl	80024f4 <_ZNK9__gnu_cxx17__normal_iteratorIPP8DrawableSt6vectorIS2_SaIS2_EEE4baseEv>
 800265c:	4603      	mov	r3, r0
 800265e:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	4618      	mov	r0, r3
 8002664:	f7ff ff1d 	bl	80024a2 <_ZNSt12_Vector_baseIP8DrawableSaIS1_EE19_M_get_Tp_allocatorEv>
 8002668:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 800266a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800266c:	6a39      	ldr	r1, [r7, #32]
 800266e:	4620      	mov	r0, r4
 8002670:	f000 f988 	bl	8002984 <_ZSt34__uninitialized_move_if_noexcept_aIPP8DrawableS2_SaIS1_EET0_T_S5_S4_RT1_>
 8002674:	62f8      	str	r0, [r7, #44]	@ 0x2c
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 8002676:	f7ff ff5b 	bl	8002530 <_ZNSt6vectorIP8DrawableSaIS1_EE15_S_use_relocateEv>
 800267a:	4603      	mov	r3, r0
 800267c:	f083 0301 	eor.w	r3, r3, #1
 8002680:	b2db      	uxtb	r3, r3
 8002682:	2b00      	cmp	r3, #0
 8002684:	d009      	beq.n	800269a <_ZNSt6vectorIP8DrawableSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x13e>
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	4618      	mov	r0, r3
 800268a:	f7ff ff0a 	bl	80024a2 <_ZNSt12_Vector_baseIP8DrawableSaIS1_EE19_M_get_Tp_allocatorEv>
 800268e:	4603      	mov	r3, r0
 8002690:	461a      	mov	r2, r3
 8002692:	6a39      	ldr	r1, [r7, #32]
 8002694:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002696:	f7ff ff0f 	bl	80024b8 <_ZSt8_DestroyIPP8DrawableS1_EvT_S3_RSaIT0_E>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 800269a:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	689a      	ldr	r2, [r3, #8]
 80026a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 80026a6:	461a      	mov	r2, r3
 80026a8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80026aa:	f7ff fee7 	bl	800247c <_ZNSt12_Vector_baseIP8DrawableSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	69ba      	ldr	r2, [r7, #24]
 80026b2:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80026b8:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80026ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	69ba      	ldr	r2, [r7, #24]
 80026c0:	441a      	add	r2, r3
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	609a      	str	r2, [r3, #8]
    }
 80026c6:	bf00      	nop
 80026c8:	3730      	adds	r7, #48	@ 0x30
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bdb0      	pop	{r4, r5, r7, pc}
 80026ce:	bf00      	nop
 80026d0:	0800f0f0 	.word	0x0800f0f0

080026d4 <_ZNSaIP6ScreenEC1Ev>:
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	f000 f96a 	bl	80029b6 <_ZNSt15__new_allocatorIP6ScreenEC1Ev>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4618      	mov	r0, r3
 80026e6:	3708      	adds	r7, #8
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}

080026ec <_ZNSt12_Vector_baseIP6ScreenSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 80026ec:	b480      	push	{r7}
 80026ee:	b083      	sub	sp, #12
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2200      	movs	r2, #0
 80026f8:	601a      	str	r2, [r3, #0]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2200      	movs	r2, #0
 80026fe:	605a      	str	r2, [r3, #4]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2200      	movs	r2, #0
 8002704:	609a      	str	r2, [r3, #8]
	{ }
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4618      	mov	r0, r3
 800270a:	370c      	adds	r7, #12
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr

08002714 <_ZNSt12_Vector_baseIP6ScreenSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 8002714:	b580      	push	{r7, lr}
 8002716:	b084      	sub	sp, #16
 8002718:	af00      	add	r7, sp, #0
 800271a:	60f8      	str	r0, [r7, #12]
 800271c:	60b9      	str	r1, [r7, #8]
 800271e:	607a      	str	r2, [r7, #4]
	if (__p)
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d005      	beq.n	8002732 <_ZNSt12_Vector_baseIP6ScreenSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	68b9      	ldr	r1, [r7, #8]
 800272c:	4618      	mov	r0, r3
 800272e:	f000 f94d 	bl	80029cc <_ZNSt16allocator_traitsISaIP6ScreenEE10deallocateERS2_PS1_j>
      }
 8002732:	bf00      	nop
 8002734:	3710      	adds	r7, #16
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}

0800273a <_ZNSt12_Vector_baseIP6ScreenSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800273a:	b480      	push	{r7}
 800273c:	b083      	sub	sp, #12
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4618      	mov	r0, r3
 8002746:	370c      	adds	r7, #12
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr

08002750 <_ZSt8_DestroyIPP6ScreenS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8002750:	b580      	push	{r7, lr}
 8002752:	b084      	sub	sp, #16
 8002754:	af00      	add	r7, sp, #0
 8002756:	60f8      	str	r0, [r7, #12]
 8002758:	60b9      	str	r1, [r7, #8]
 800275a:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 800275c:	68b9      	ldr	r1, [r7, #8]
 800275e:	68f8      	ldr	r0, [r7, #12]
 8002760:	f000 f943 	bl	80029ea <_ZSt8_DestroyIPP6ScreenEvT_S3_>
    }
 8002764:	bf00      	nop
 8002766:	3710      	adds	r7, #16
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}

0800276c <_ZNKSt12_Vector_baseIP8DrawableSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	4618      	mov	r0, r3
 8002778:	370c      	adds	r7, #12
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr

08002782 <_ZNKSt15__uniq_ptr_implI11FrameBuffer15FreeRTOSDeleterE6_M_ptrEv>:
 8002782:	b580      	push	{r7, lr}
 8002784:	b082      	sub	sp, #8
 8002786:	af00      	add	r7, sp, #0
 8002788:	6078      	str	r0, [r7, #4]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4618      	mov	r0, r3
 800278e:	f000 f939 	bl	8002a04 <_ZSt3getILj0EJP11FrameBuffer15FreeRTOSDeleterEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS7_>
 8002792:	4603      	mov	r3, r0
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4618      	mov	r0, r3
 8002798:	3708      	adds	r7, #8
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}

0800279e <_ZNSt15__uniq_ptr_implI11FrameBuffer15FreeRTOSDeleterE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 800279e:	b580      	push	{r7, lr}
 80027a0:	b082      	sub	sp, #8
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	6078      	str	r0, [r7, #4]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4618      	mov	r0, r3
 80027aa:	f000 f938 	bl	8002a1e <_ZSt3getILj0EJP11FrameBuffer15FreeRTOSDeleterEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>
 80027ae:	4603      	mov	r3, r0
 80027b0:	4618      	mov	r0, r3
 80027b2:	3708      	adds	r7, #8
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}

080027b8 <_ZNSt15__uniq_ptr_implI11FrameBuffer15FreeRTOSDeleterE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	4618      	mov	r0, r3
 80027c4:	f000 f938 	bl	8002a38 <_ZSt3getILj1EJP11FrameBuffer15FreeRTOSDeleterEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>
 80027c8:	4603      	mov	r3, r0
 80027ca:	4618      	mov	r0, r3
 80027cc:	3708      	adds	r7, #8
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}

080027d2 <_ZSt3getILj0EJPh15FreeRTOSDeleterEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS6_>:
    { return std::__get_helper<__i>(__t); }

  /// Return a const reference to the ith element of a const tuple.
  template<size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 80027d2:	b580      	push	{r7, lr}
 80027d4:	b082      	sub	sp, #8
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	4618      	mov	r0, r3
 80027de:	f000 f937 	bl	8002a50 <_ZSt12__get_helperILj0EPhJ15FreeRTOSDeleterEERKT0_RKSt11_Tuple_implIXT_EJS2_DpT1_EE>
 80027e2:	4603      	mov	r3, r0
 80027e4:	4618      	mov	r0, r3
 80027e6:	3708      	adds	r7, #8
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}

080027ec <_ZNSt15__new_allocatorIP8DrawableEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	4618      	mov	r0, r3
 80027f8:	370c      	adds	r7, #12
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr

08002802 <_ZNSt16allocator_traitsISaIP8DrawableEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8002802:	b580      	push	{r7, lr}
 8002804:	b084      	sub	sp, #16
 8002806:	af00      	add	r7, sp, #0
 8002808:	60f8      	str	r0, [r7, #12]
 800280a:	60b9      	str	r1, [r7, #8]
 800280c:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	68b9      	ldr	r1, [r7, #8]
 8002812:	68f8      	ldr	r0, [r7, #12]
 8002814:	f000 f928 	bl	8002a68 <_ZNSt15__new_allocatorIP8DrawableE10deallocateEPS1_j>
 8002818:	bf00      	nop
 800281a:	3710      	adds	r7, #16
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}

08002820 <_ZSt8_DestroyIPP8DrawableEvT_S3_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	6039      	str	r1, [r7, #0]
#if __cplusplus >= 202002L
      if (std::__is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 800282a:	6839      	ldr	r1, [r7, #0]
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	f000 f92b 	bl	8002a88 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP8DrawableEEvT_S5_>
    }
 8002832:	bf00      	nop
 8002834:	3708      	adds	r7, #8
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}

0800283a <_ZSt7forwardIRKP8DrawableEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800283a:	b480      	push	{r7}
 800283c:	b083      	sub	sp, #12
 800283e:	af00      	add	r7, sp, #0
 8002840:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4618      	mov	r0, r3
 8002846:	370c      	adds	r7, #12
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr

08002850 <_ZNSt15__new_allocatorIP8DrawableE9constructIS1_JRKS1_EEEvPT_DpOT0_>:
      { return _M_max_size(); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 8002850:	b590      	push	{r4, r7, lr}
 8002852:	b085      	sub	sp, #20
 8002854:	af00      	add	r7, sp, #0
 8002856:	60f8      	str	r0, [r7, #12]
 8002858:	60b9      	str	r1, [r7, #8]
 800285a:	607a      	str	r2, [r7, #4]
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	4619      	mov	r1, r3
 8002860:	2004      	movs	r0, #4
 8002862:	f7fe fdc1 	bl	80013e8 <_ZnwjPv>
 8002866:	4604      	mov	r4, r0
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	f7ff ffe6 	bl	800283a <_ZSt7forwardIRKP8DrawableEOT_RNSt16remove_referenceIS4_E4typeE>
 800286e:	4603      	mov	r3, r0
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	6023      	str	r3, [r4, #0]
 8002874:	bf00      	nop
 8002876:	3714      	adds	r7, #20
 8002878:	46bd      	mov	sp, r7
 800287a:	bd90      	pop	{r4, r7, pc}

0800287c <_ZNKSt6vectorIP8DrawableSaIS1_EE12_M_check_lenEjPKc>:
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      _GLIBCXX20_CONSTEXPR
      size_type
      _M_check_len(size_type __n, const char* __s) const
 800287c:	b590      	push	{r4, r7, lr}
 800287e:	b087      	sub	sp, #28
 8002880:	af00      	add	r7, sp, #0
 8002882:	60f8      	str	r0, [r7, #12]
 8002884:	60b9      	str	r1, [r7, #8]
 8002886:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 8002888:	68f8      	ldr	r0, [r7, #12]
 800288a:	f000 f908 	bl	8002a9e <_ZNKSt6vectorIP8DrawableSaIS1_EE8max_sizeEv>
 800288e:	4604      	mov	r4, r0
 8002890:	68f8      	ldr	r0, [r7, #12]
 8002892:	f7ff fd52 	bl	800233a <_ZNKSt6vectorIP8DrawableSaIS1_EE4sizeEv>
 8002896:	4603      	mov	r3, r0
 8002898:	1ae2      	subs	r2, r4, r3
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	429a      	cmp	r2, r3
 800289e:	bf34      	ite	cc
 80028a0:	2301      	movcc	r3, #1
 80028a2:	2300      	movcs	r3, #0
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d002      	beq.n	80028b0 <_ZNKSt6vectorIP8DrawableSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f009 fbdb 	bl	800c066 <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + (std::max)(size(), __n);
 80028b0:	68f8      	ldr	r0, [r7, #12]
 80028b2:	f7ff fd42 	bl	800233a <_ZNKSt6vectorIP8DrawableSaIS1_EE4sizeEv>
 80028b6:	4604      	mov	r4, r0
 80028b8:	68f8      	ldr	r0, [r7, #12]
 80028ba:	f7ff fd3e 	bl	800233a <_ZNKSt6vectorIP8DrawableSaIS1_EE4sizeEv>
 80028be:	4603      	mov	r3, r0
 80028c0:	613b      	str	r3, [r7, #16]
 80028c2:	f107 0208 	add.w	r2, r7, #8
 80028c6:	f107 0310 	add.w	r3, r7, #16
 80028ca:	4611      	mov	r1, r2
 80028cc:	4618      	mov	r0, r3
 80028ce:	f000 f8f7 	bl	8002ac0 <_ZSt3maxIjERKT_S2_S2_>
 80028d2:	4603      	mov	r3, r0
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4423      	add	r3, r4
 80028d8:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80028da:	68f8      	ldr	r0, [r7, #12]
 80028dc:	f7ff fd2d 	bl	800233a <_ZNKSt6vectorIP8DrawableSaIS1_EE4sizeEv>
 80028e0:	4602      	mov	r2, r0
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d306      	bcc.n	80028f6 <_ZNKSt6vectorIP8DrawableSaIS1_EE12_M_check_lenEjPKc+0x7a>
 80028e8:	68f8      	ldr	r0, [r7, #12]
 80028ea:	f000 f8d8 	bl	8002a9e <_ZNKSt6vectorIP8DrawableSaIS1_EE8max_sizeEv>
 80028ee:	4602      	mov	r2, r0
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d904      	bls.n	8002900 <_ZNKSt6vectorIP8DrawableSaIS1_EE12_M_check_lenEjPKc+0x84>
 80028f6:	68f8      	ldr	r0, [r7, #12]
 80028f8:	f000 f8d1 	bl	8002a9e <_ZNKSt6vectorIP8DrawableSaIS1_EE8max_sizeEv>
 80028fc:	4603      	mov	r3, r0
 80028fe:	e000      	b.n	8002902 <_ZNKSt6vectorIP8DrawableSaIS1_EE12_M_check_lenEjPKc+0x86>
 8002900:	697b      	ldr	r3, [r7, #20]
      }
 8002902:	4618      	mov	r0, r3
 8002904:	371c      	adds	r7, #28
 8002906:	46bd      	mov	sp, r7
 8002908:	bd90      	pop	{r4, r7, pc}

0800290a <_ZN9__gnu_cxxmiIPP8DrawableSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800290a:	b590      	push	{r4, r7, lr}
 800290c:	b083      	sub	sp, #12
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
 8002912:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	f7ff fded 	bl	80024f4 <_ZNK9__gnu_cxx17__normal_iteratorIPP8DrawableSt6vectorIS2_SaIS2_EEE4baseEv>
 800291a:	4603      	mov	r3, r0
 800291c:	681c      	ldr	r4, [r3, #0]
 800291e:	6838      	ldr	r0, [r7, #0]
 8002920:	f7ff fde8 	bl	80024f4 <_ZNK9__gnu_cxx17__normal_iteratorIPP8DrawableSt6vectorIS2_SaIS2_EEE4baseEv>
 8002924:	4603      	mov	r3, r0
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	1ae3      	subs	r3, r4, r3
 800292a:	109b      	asrs	r3, r3, #2
 800292c:	4618      	mov	r0, r3
 800292e:	370c      	adds	r7, #12
 8002930:	46bd      	mov	sp, r7
 8002932:	bd90      	pop	{r4, r7, pc}

08002934 <_ZNSt12_Vector_baseIP8DrawableSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8002934:	b580      	push	{r7, lr}
 8002936:	b082      	sub	sp, #8
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d006      	beq.n	8002952 <_ZNSt12_Vector_baseIP8DrawableSaIS1_EE11_M_allocateEj+0x1e>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6839      	ldr	r1, [r7, #0]
 8002948:	4618      	mov	r0, r3
 800294a:	f000 f8cd 	bl	8002ae8 <_ZNSt16allocator_traitsISaIP8DrawableEE8allocateERS2_j>
 800294e:	4603      	mov	r3, r0
 8002950:	e000      	b.n	8002954 <_ZNSt12_Vector_baseIP8DrawableSaIS1_EE11_M_allocateEj+0x20>
 8002952:	2300      	movs	r3, #0
      }
 8002954:	4618      	mov	r0, r3
 8002956:	3708      	adds	r7, #8
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}

0800295c <_ZNSt6vectorIP8DrawableSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 800295c:	b590      	push	{r4, r7, lr}
 800295e:	b087      	sub	sp, #28
 8002960:	af02      	add	r7, sp, #8
 8002962:	60f8      	str	r0, [r7, #12]
 8002964:	60b9      	str	r1, [r7, #8]
 8002966:	607a      	str	r2, [r7, #4]
 8002968:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 800296a:	f88d 4000 	strb.w	r4, [sp]
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	687a      	ldr	r2, [r7, #4]
 8002972:	68b9      	ldr	r1, [r7, #8]
 8002974:	68f8      	ldr	r0, [r7, #12]
 8002976:	f000 f8c6 	bl	8002b06 <_ZNSt6vectorIP8DrawableSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 800297a:	4603      	mov	r3, r0
      }
 800297c:	4618      	mov	r0, r3
 800297e:	3714      	adds	r7, #20
 8002980:	46bd      	mov	sp, r7
 8002982:	bd90      	pop	{r4, r7, pc}

08002984 <_ZSt34__uninitialized_move_if_noexcept_aIPP8DrawableS2_SaIS1_EET0_T_S5_S4_RT1_>:

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    _GLIBCXX20_CONSTEXPR
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8002984:	b590      	push	{r4, r7, lr}
 8002986:	b085      	sub	sp, #20
 8002988:	af00      	add	r7, sp, #0
 800298a:	60f8      	str	r0, [r7, #12]
 800298c:	60b9      	str	r1, [r7, #8]
 800298e:	607a      	str	r2, [r7, #4]
 8002990:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8002992:	68f8      	ldr	r0, [r7, #12]
 8002994:	f000 f8c9 	bl	8002b2a <_ZSt32__make_move_if_noexcept_iteratorIP8DrawableSt13move_iteratorIPS1_EET0_PT_>
 8002998:	4604      	mov	r4, r0
 800299a:	68b8      	ldr	r0, [r7, #8]
 800299c:	f000 f8c5 	bl	8002b2a <_ZSt32__make_move_if_noexcept_iteratorIP8DrawableSt13move_iteratorIPS1_EET0_PT_>
 80029a0:	4601      	mov	r1, r0
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	4620      	mov	r0, r4
 80029a8:	f000 f8ce 	bl	8002b48 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP8DrawableES3_S2_ET0_T_S6_S5_RSaIT1_E>
 80029ac:	4603      	mov	r3, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
    }
 80029ae:	4618      	mov	r0, r3
 80029b0:	3714      	adds	r7, #20
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd90      	pop	{r4, r7, pc}

080029b6 <_ZNSt15__new_allocatorIP6ScreenEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80029b6:	b480      	push	{r7}
 80029b8:	b083      	sub	sp, #12
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4618      	mov	r0, r3
 80029c2:	370c      	adds	r7, #12
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr

080029cc <_ZNSt16allocator_traitsISaIP6ScreenEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	60f8      	str	r0, [r7, #12]
 80029d4:	60b9      	str	r1, [r7, #8]
 80029d6:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	68b9      	ldr	r1, [r7, #8]
 80029dc:	68f8      	ldr	r0, [r7, #12]
 80029de:	f000 f8c4 	bl	8002b6a <_ZNSt15__new_allocatorIP6ScreenE10deallocateEPS1_j>
 80029e2:	bf00      	nop
 80029e4:	3710      	adds	r7, #16
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}

080029ea <_ZSt8_DestroyIPP6ScreenEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80029ea:	b580      	push	{r7, lr}
 80029ec:	b082      	sub	sp, #8
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	6078      	str	r0, [r7, #4]
 80029f2:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 80029f4:	6839      	ldr	r1, [r7, #0]
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f000 f8c7 	bl	8002b8a <_ZNSt12_Destroy_auxILb1EE9__destroyIPP6ScreenEEvT_S5_>
    }
 80029fc:	bf00      	nop
 80029fe:	3708      	adds	r7, #8
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}

08002a04 <_ZSt3getILj0EJP11FrameBuffer15FreeRTOSDeleterEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS7_>:
    get(const tuple<_Elements...>& __t) noexcept
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f000 f8c6 	bl	8002ba0 <_ZSt12__get_helperILj0EP11FrameBufferJ15FreeRTOSDeleterEERKT0_RKSt11_Tuple_implIXT_EJS3_DpT1_EE>
 8002a14:	4603      	mov	r3, r0
 8002a16:	4618      	mov	r0, r3
 8002a18:	3708      	adds	r7, #8
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}

08002a1e <_ZSt3getILj0EJP11FrameBuffer15FreeRTOSDeleterEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>:
    get(tuple<_Elements...>& __t) noexcept
 8002a1e:	b580      	push	{r7, lr}
 8002a20:	b082      	sub	sp, #8
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f000 f8c5 	bl	8002bb8 <_ZSt12__get_helperILj0EP11FrameBufferJ15FreeRTOSDeleterEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	4618      	mov	r0, r3
 8002a32:	3708      	adds	r7, #8
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <_ZSt3getILj1EJP11FrameBuffer15FreeRTOSDeleterEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>:
    get(tuple<_Elements...>& __t) noexcept
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f000 f8c5 	bl	8002bd0 <_ZSt12__get_helperILj1E15FreeRTOSDeleterJEERT0_RSt11_Tuple_implIXT_EJS1_DpT1_EE>
 8002a46:	4603      	mov	r3, r0
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3708      	adds	r7, #8
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <_ZSt12__get_helperILj0EPhJ15FreeRTOSDeleterEERKT0_RKSt11_Tuple_implIXT_EJS2_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f000 f8c5 	bl	8002be8 <_ZNSt11_Tuple_implILj0EJPh15FreeRTOSDeleterEE7_M_headERKS2_>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	4618      	mov	r0, r3
 8002a62:	3708      	adds	r7, #8
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}

08002a68 <_ZNSt15__new_allocatorIP8DrawableE10deallocateEPS1_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	60f8      	str	r0, [r7, #12]
 8002a70:	60b9      	str	r1, [r7, #8]
 8002a72:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	4619      	mov	r1, r3
 8002a7a:	68b8      	ldr	r0, [r7, #8]
 8002a7c:	f009 fada 	bl	800c034 <_ZdlPvj>
      }
 8002a80:	bf00      	nop
 8002a82:	3710      	adds	r7, #16
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP8DrawableEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8002a88:	b480      	push	{r7}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
 8002a90:	6039      	str	r1, [r7, #0]
 8002a92:	bf00      	nop
 8002a94:	370c      	adds	r7, #12
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr

08002a9e <_ZNKSt6vectorIP8DrawableSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8002a9e:	b580      	push	{r7, lr}
 8002aa0:	b082      	sub	sp, #8
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f7ff fe5f 	bl	800276c <_ZNKSt12_Vector_baseIP8DrawableSaIS1_EE19_M_get_Tp_allocatorEv>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f000 f8a6 	bl	8002c02 <_ZNSt6vectorIP8DrawableSaIS1_EE11_S_max_sizeERKS2_>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3708      	adds	r7, #8
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}

08002ac0 <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d201      	bcs.n	8002ada <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	e000      	b.n	8002adc <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8002ada:	687b      	ldr	r3, [r7, #4]
    }
 8002adc:	4618      	mov	r0, r3
 8002ade:	370c      	adds	r7, #12
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr

08002ae8 <_ZNSt16allocator_traitsISaIP8DrawableEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8002af2:	2200      	movs	r2, #0
 8002af4:	6839      	ldr	r1, [r7, #0]
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f000 f89d 	bl	8002c36 <_ZNSt15__new_allocatorIP8DrawableE8allocateEjPKv>
 8002afc:	4603      	mov	r3, r0
 8002afe:	4618      	mov	r0, r3
 8002b00:	3708      	adds	r7, #8
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}

08002b06 <_ZNSt6vectorIP8DrawableSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8002b06:	b580      	push	{r7, lr}
 8002b08:	b084      	sub	sp, #16
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	60f8      	str	r0, [r7, #12]
 8002b0e:	60b9      	str	r1, [r7, #8]
 8002b10:	607a      	str	r2, [r7, #4]
 8002b12:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	68b9      	ldr	r1, [r7, #8]
 8002b1a:	68f8      	ldr	r0, [r7, #12]
 8002b1c:	f000 f8b4 	bl	8002c88 <_ZSt12__relocate_aIPP8DrawableS2_SaIS1_EET0_T_S5_S4_RT1_>
 8002b20:	4603      	mov	r3, r0
      }
 8002b22:	4618      	mov	r0, r3
 8002b24:	3710      	adds	r7, #16
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}

08002b2a <_ZSt32__make_move_if_noexcept_iteratorIP8DrawableSt13move_iteratorIPS1_EET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = __conditional_t<__move_if_noexcept_cond<_Tp>::value,
		      const _Tp*, move_iterator<_Tp*>>>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 8002b2a:	b580      	push	{r7, lr}
 8002b2c:	b084      	sub	sp, #16
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8002b32:	f107 030c 	add.w	r3, r7, #12
 8002b36:	6879      	ldr	r1, [r7, #4]
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f000 f8c2 	bl	8002cc2 <_ZNSt13move_iteratorIPP8DrawableEC1ES2_>
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	4618      	mov	r0, r3
 8002b42:	3710      	adds	r7, #16
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}

08002b48 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP8DrawableES3_S2_ET0_T_S6_S5_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b084      	sub	sp, #16
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	60f8      	str	r0, [r7, #12]
 8002b50:	60b9      	str	r1, [r7, #8]
 8002b52:	607a      	str	r2, [r7, #4]
 8002b54:	603b      	str	r3, [r7, #0]
      return std::uninitialized_copy(__first, __last, __result);
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	68b9      	ldr	r1, [r7, #8]
 8002b5a:	68f8      	ldr	r0, [r7, #12]
 8002b5c:	f000 f8c3 	bl	8002ce6 <_ZSt18uninitialized_copyISt13move_iteratorIPP8DrawableES3_ET0_T_S6_S5_>
 8002b60:	4603      	mov	r3, r0
    }
 8002b62:	4618      	mov	r0, r3
 8002b64:	3710      	adds	r7, #16
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}

08002b6a <_ZNSt15__new_allocatorIP6ScreenE10deallocateEPS1_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 8002b6a:	b580      	push	{r7, lr}
 8002b6c:	b084      	sub	sp, #16
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	60f8      	str	r0, [r7, #12]
 8002b72:	60b9      	str	r1, [r7, #8]
 8002b74:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	68b8      	ldr	r0, [r7, #8]
 8002b7e:	f009 fa59 	bl	800c034 <_ZdlPvj>
      }
 8002b82:	bf00      	nop
 8002b84:	3710      	adds	r7, #16
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}

08002b8a <_ZNSt12_Destroy_auxILb1EE9__destroyIPP6ScreenEEvT_S5_>:
 8002b8a:	b480      	push	{r7}
 8002b8c:	b083      	sub	sp, #12
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	6078      	str	r0, [r7, #4]
 8002b92:	6039      	str	r1, [r7, #0]
 8002b94:	bf00      	nop
 8002b96:	370c      	adds	r7, #12
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr

08002ba0 <_ZSt12__get_helperILj0EP11FrameBufferJ15FreeRTOSDeleterEERKT0_RKSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b082      	sub	sp, #8
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f000 f8b0 	bl	8002d0e <_ZNSt11_Tuple_implILj0EJP11FrameBuffer15FreeRTOSDeleterEE7_M_headERKS3_>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	3708      	adds	r7, #8
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}

08002bb8 <_ZSt12__get_helperILj0EP11FrameBufferJ15FreeRTOSDeleterEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	f000 f8b1 	bl	8002d28 <_ZNSt11_Tuple_implILj0EJP11FrameBuffer15FreeRTOSDeleterEE7_M_headERS3_>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3708      	adds	r7, #8
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <_ZSt12__get_helperILj1E15FreeRTOSDeleterJEERT0_RSt11_Tuple_implIXT_EJS1_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f000 f8b2 	bl	8002d42 <_ZNSt11_Tuple_implILj1EJ15FreeRTOSDeleterEE7_M_headERS1_>
 8002bde:	4603      	mov	r3, r0
 8002be0:	4618      	mov	r0, r3
 8002be2:	3708      	adds	r7, #8
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <_ZNSt11_Tuple_implILj0EJPh15FreeRTOSDeleterEE7_M_headERKS2_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f000 f8b1 	bl	8002d5a <_ZNSt10_Head_baseILj0EPhLb0EE7_M_headERKS1_>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3708      	adds	r7, #8
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}

08002c02 <_ZNSt6vectorIP8DrawableSaIS1_EE11_S_max_sizeERKS2_>:
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
      }

      static _GLIBCXX20_CONSTEXPR size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8002c02:	b580      	push	{r7, lr}
 8002c04:	b084      	sub	sp, #16
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 8002c0a:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
 8002c0e:	60fb      	str	r3, [r7, #12]
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f000 f8ad 	bl	8002d70 <_ZNSt16allocator_traitsISaIP8DrawableEE8max_sizeERKS2_>
 8002c16:	4603      	mov	r3, r0
 8002c18:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8002c1a:	f107 0208 	add.w	r2, r7, #8
 8002c1e:	f107 030c 	add.w	r3, r7, #12
 8002c22:	4611      	mov	r1, r2
 8002c24:	4618      	mov	r0, r3
 8002c26:	f000 f8af 	bl	8002d88 <_ZSt3minIjERKT_S2_S2_>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	681b      	ldr	r3, [r3, #0]
      }
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3710      	adds	r7, #16
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}

08002c36 <_ZNSt15__new_allocatorIP8DrawableE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8002c36:	b580      	push	{r7, lr}
 8002c38:	b084      	sub	sp, #16
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	60f8      	str	r0, [r7, #12]
 8002c3e:	60b9      	str	r1, [r7, #8]
 8002c40:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8002c42:	68f8      	ldr	r0, [r7, #12]
 8002c44:	f000 f8b4 	bl	8002db0 <_ZNKSt15__new_allocatorIP8DrawableE11_M_max_sizeEv>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	bf8c      	ite	hi
 8002c50:	2301      	movhi	r3, #1
 8002c52:	2300      	movls	r3, #0
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	bf14      	ite	ne
 8002c5a:	2301      	movne	r3, #1
 8002c5c:	2300      	moveq	r3, #0
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d007      	beq.n	8002c74 <_ZNSt15__new_allocatorIP8DrawableE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c6a:	d301      	bcc.n	8002c70 <_ZNSt15__new_allocatorIP8DrawableE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8002c6c:	f009 f9f8 	bl	800c060 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8002c70:	f009 f9f3 	bl	800c05a <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f009 f9dd 	bl	800c038 <_Znwj>
 8002c7e:	4603      	mov	r3, r0
      }
 8002c80:	4618      	mov	r0, r3
 8002c82:	3710      	adds	r7, #16
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}

08002c88 <_ZSt12__relocate_aIPP8DrawableS2_SaIS1_EET0_T_S5_S4_RT1_>:

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    _GLIBCXX20_CONSTEXPR
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8002c88:	b5b0      	push	{r4, r5, r7, lr}
 8002c8a:	b084      	sub	sp, #16
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	60f8      	str	r0, [r7, #12]
 8002c90:	60b9      	str	r1, [r7, #8]
 8002c92:	607a      	str	r2, [r7, #4]
 8002c94:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return std::__relocate_a_1(std::__niter_base(__first),
 8002c96:	68f8      	ldr	r0, [r7, #12]
 8002c98:	f000 f896 	bl	8002dc8 <_ZSt12__niter_baseIPP8DrawableET_S3_>
 8002c9c:	4604      	mov	r4, r0
 8002c9e:	68b8      	ldr	r0, [r7, #8]
 8002ca0:	f000 f892 	bl	8002dc8 <_ZSt12__niter_baseIPP8DrawableET_S3_>
 8002ca4:	4605      	mov	r5, r0
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f000 f88e 	bl	8002dc8 <_ZSt12__niter_baseIPP8DrawableET_S3_>
 8002cac:	4602      	mov	r2, r0
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	4629      	mov	r1, r5
 8002cb2:	4620      	mov	r0, r4
 8002cb4:	f000 f893 	bl	8002dde <_ZSt14__relocate_a_1IP8DrawableS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 8002cb8:	4603      	mov	r3, r0
				 std::__niter_base(__last),
				 std::__niter_base(__result), __alloc);
    }
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3710      	adds	r7, #16
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bdb0      	pop	{r4, r5, r7, pc}

08002cc2 <_ZNSt13move_iteratorIPP8DrawableEC1ES2_>:
      move_iterator(iterator_type __i)
 8002cc2:	b580      	push	{r7, lr}
 8002cc4:	b082      	sub	sp, #8
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	6078      	str	r0, [r7, #4]
 8002cca:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 8002ccc:	463b      	mov	r3, r7
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f000 f8a3 	bl	8002e1a <_ZSt4moveIRPP8DrawableEONSt16remove_referenceIT_E4typeEOS5_>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	601a      	str	r2, [r3, #0]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3708      	adds	r7, #8
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}

08002ce6 <_ZSt18uninitialized_copyISt13move_iteratorIPP8DrawableES3_ET0_T_S6_S5_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8002ce6:	b580      	push	{r7, lr}
 8002ce8:	b086      	sub	sp, #24
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	60f8      	str	r0, [r7, #12]
 8002cee:	60b9      	str	r1, [r7, #8]
 8002cf0:	607a      	str	r2, [r7, #4]
      const bool __can_memmove = __is_trivial(_ValueType1);
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	75fb      	strb	r3, [r7, #23]
      const bool __assignable
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	75bb      	strb	r3, [r7, #22]
	__uninit_copy(__first, __last, __result);
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	68b9      	ldr	r1, [r7, #8]
 8002cfe:	68f8      	ldr	r0, [r7, #12]
 8002d00:	f000 f896 	bl	8002e30 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP8DrawableES5_EET0_T_S8_S7_>
 8002d04:	4603      	mov	r3, r0
    }
 8002d06:	4618      	mov	r0, r3
 8002d08:	3718      	adds	r7, #24
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}

08002d0e <_ZNSt11_Tuple_implILj0EJP11FrameBuffer15FreeRTOSDeleterEE7_M_headERKS3_>:
 8002d0e:	b580      	push	{r7, lr}
 8002d10:	b082      	sub	sp, #8
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	6078      	str	r0, [r7, #4]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f000 f899 	bl	8002e50 <_ZNSt10_Head_baseILj0EP11FrameBufferLb0EE7_M_headERKS2_>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	4618      	mov	r0, r3
 8002d22:	3708      	adds	r7, #8
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <_ZNSt11_Tuple_implILj0EJP11FrameBuffer15FreeRTOSDeleterEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b082      	sub	sp, #8
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	4618      	mov	r0, r3
 8002d34:	f000 f897 	bl	8002e66 <_ZNSt10_Head_baseILj0EP11FrameBufferLb0EE7_M_headERS2_>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3708      	adds	r7, #8
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}

08002d42 <_ZNSt11_Tuple_implILj1EJ15FreeRTOSDeleterEE7_M_headERS1_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8002d42:	b580      	push	{r7, lr}
 8002d44:	b082      	sub	sp, #8
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f000 f896 	bl	8002e7c <_ZNSt10_Head_baseILj1E15FreeRTOSDeleterLb1EE7_M_headERS1_>
 8002d50:	4603      	mov	r3, r0
 8002d52:	4618      	mov	r0, r3
 8002d54:	3708      	adds	r7, #8
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}

08002d5a <_ZNSt10_Head_baseILj0EPhLb0EE7_M_headERKS1_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 8002d5a:	b480      	push	{r7}
 8002d5c:	b083      	sub	sp, #12
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	6078      	str	r0, [r7, #4]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4618      	mov	r0, r3
 8002d66:	370c      	adds	r7, #12
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr

08002d70 <_ZNSt16allocator_traitsISaIP8DrawableEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b082      	sub	sp, #8
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	f000 f88a 	bl	8002e92 <_ZNKSt15__new_allocatorIP8DrawableE8max_sizeEv>
 8002d7e:	4603      	mov	r3, r0
      }
 8002d80:	4618      	mov	r0, r3
 8002d82:	3708      	adds	r7, #8
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}

08002d88 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d201      	bcs.n	8002da2 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	e000      	b.n	8002da4 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8002da2:	687b      	ldr	r3, [r7, #4]
    }
 8002da4:	4618      	mov	r0, r3
 8002da6:	370c      	adds	r7, #12
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr

08002db0 <_ZNKSt15__new_allocatorIP8DrawableE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8002db8:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	370c      	adds	r7, #12
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr

08002dc8 <_ZSt12__niter_baseIPP8DrawableET_S3_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the __normal_iterator wrapper. See copy, fill, ...
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __niter_base(_Iterator __it)
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it; }
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	370c      	adds	r7, #12
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr

08002dde <_ZSt14__relocate_a_1IP8DrawableS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8002dde:	b580      	push	{r7, lr}
 8002de0:	b086      	sub	sp, #24
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	60f8      	str	r0, [r7, #12]
 8002de6:	60b9      	str	r1, [r7, #8]
 8002de8:	607a      	str	r2, [r7, #4]
 8002dea:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8002dec:	68ba      	ldr	r2, [r7, #8]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	109b      	asrs	r3, r3, #2
 8002df4:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	dd06      	ble.n	8002e0a <_ZSt14__relocate_a_1IP8DrawableS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	461a      	mov	r2, r3
 8002e02:	68f9      	ldr	r1, [r7, #12]
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	f00a f8cf 	bl	800cfa8 <memmove>
      return __result + __count;
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	4413      	add	r3, r2
    }
 8002e12:	4618      	mov	r0, r3
 8002e14:	3718      	adds	r7, #24
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}

08002e1a <_ZSt4moveIRPP8DrawableEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8002e1a:	b480      	push	{r7}
 8002e1c:	b083      	sub	sp, #12
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4618      	mov	r0, r3
 8002e26:	370c      	adds	r7, #12
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr

08002e30 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP8DrawableES5_EET0_T_S8_S7_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	60f8      	str	r0, [r7, #12]
 8002e38:	60b9      	str	r1, [r7, #8]
 8002e3a:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	68b9      	ldr	r1, [r7, #8]
 8002e40:	68f8      	ldr	r0, [r7, #12]
 8002e42:	f000 f832 	bl	8002eaa <_ZSt4copyISt13move_iteratorIPP8DrawableES3_ET0_T_S6_S5_>
 8002e46:	4603      	mov	r3, r0
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3710      	adds	r7, #16
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <_ZNSt10_Head_baseILj0EP11FrameBufferLb0EE7_M_headERKS2_>:
 8002e50:	b480      	push	{r7}
 8002e52:	b083      	sub	sp, #12
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	370c      	adds	r7, #12
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr

08002e66 <_ZNSt10_Head_baseILj0EP11FrameBufferLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8002e66:	b480      	push	{r7}
 8002e68:	b083      	sub	sp, #12
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	6078      	str	r0, [r7, #4]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4618      	mov	r0, r3
 8002e72:	370c      	adds	r7, #12
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr

08002e7c <_ZNSt10_Head_baseILj1E15FreeRTOSDeleterLb1EE7_M_headERS1_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	4618      	mov	r0, r3
 8002e88:	370c      	adds	r7, #12
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr

08002e92 <_ZNKSt15__new_allocatorIP8DrawableE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8002e92:	b580      	push	{r7, lr}
 8002e94:	b082      	sub	sp, #8
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f7ff ff88 	bl	8002db0 <_ZNKSt15__new_allocatorIP8DrawableE11_M_max_sizeEv>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3708      	adds	r7, #8
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}

08002eaa <_ZSt4copyISt13move_iteratorIPP8DrawableES3_ET0_T_S6_S5_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 8002eaa:	b590      	push	{r4, r7, lr}
 8002eac:	b085      	sub	sp, #20
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	60f8      	str	r0, [r7, #12]
 8002eb2:	60b9      	str	r1, [r7, #8]
 8002eb4:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::reference>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8002eb6:	68f8      	ldr	r0, [r7, #12]
 8002eb8:	f000 f81b 	bl	8002ef2 <_ZSt12__miter_baseIPP8DrawableEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8002ebc:	4604      	mov	r4, r0
 8002ebe:	68b8      	ldr	r0, [r7, #8]
 8002ec0:	f000 f817 	bl	8002ef2 <_ZSt12__miter_baseIPP8DrawableEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	4619      	mov	r1, r3
 8002eca:	4620      	mov	r0, r4
 8002ecc:	f000 f822 	bl	8002f14 <_ZSt13__copy_move_aILb1EPP8DrawableS2_ET1_T0_S4_S3_>
 8002ed0:	4603      	mov	r3, r0
    }
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3714      	adds	r7, #20
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd90      	pop	{r4, r7, pc}

08002eda <_ZSt12__niter_wrapIPP8DrawableET_RKS3_S3_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8002eda:	b480      	push	{r7}
 8002edc:	b083      	sub	sp, #12
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	6078      	str	r0, [r7, #4]
 8002ee2:	6039      	str	r1, [r7, #0]
    { return __res; }
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	370c      	adds	r7, #12
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr

08002ef2 <_ZSt12__miter_baseIPP8DrawableEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
    };

  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    auto
    __miter_base(move_iterator<_Iterator> __it)
 8002ef2:	b580      	push	{r7, lr}
 8002ef4:	b082      	sub	sp, #8
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 8002efa:	1d3b      	adds	r3, r7, #4
 8002efc:	4618      	mov	r0, r3
 8002efe:	f000 f82c 	bl	8002f5a <_ZNKSt13move_iteratorIPP8DrawableE4baseEv>
 8002f02:	4603      	mov	r3, r0
 8002f04:	4618      	mov	r0, r3
 8002f06:	f000 f834 	bl	8002f72 <_ZSt12__miter_baseIPP8DrawableET_S3_>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3708      	adds	r7, #8
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <_ZSt13__copy_move_aILb1EPP8DrawableS2_ET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8002f14:	b5b0      	push	{r4, r5, r7, lr}
 8002f16:	b084      	sub	sp, #16
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	60f8      	str	r0, [r7, #12]
 8002f1c:	60b9      	str	r1, [r7, #8]
 8002f1e:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8002f20:	68f8      	ldr	r0, [r7, #12]
 8002f22:	f7ff ff51 	bl	8002dc8 <_ZSt12__niter_baseIPP8DrawableET_S3_>
 8002f26:	4604      	mov	r4, r0
 8002f28:	68b8      	ldr	r0, [r7, #8]
 8002f2a:	f7ff ff4d 	bl	8002dc8 <_ZSt12__niter_baseIPP8DrawableET_S3_>
 8002f2e:	4605      	mov	r5, r0
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	4618      	mov	r0, r3
 8002f34:	f7ff ff48 	bl	8002dc8 <_ZSt12__niter_baseIPP8DrawableET_S3_>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	4629      	mov	r1, r5
 8002f3e:	4620      	mov	r0, r4
 8002f40:	f000 f822 	bl	8002f88 <_ZSt14__copy_move_a1ILb1EPP8DrawableS2_ET1_T0_S4_S3_>
 8002f44:	4602      	mov	r2, r0
 8002f46:	1d3b      	adds	r3, r7, #4
 8002f48:	4611      	mov	r1, r2
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f7ff ffc5 	bl	8002eda <_ZSt12__niter_wrapIPP8DrawableET_RKS3_S3_>
 8002f50:	4603      	mov	r3, r0
    }
 8002f52:	4618      	mov	r0, r3
 8002f54:	3710      	adds	r7, #16
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bdb0      	pop	{r4, r5, r7, pc}

08002f5a <_ZNKSt13move_iteratorIPP8DrawableE4baseEv>:
      base() const
 8002f5a:	b480      	push	{r7}
 8002f5c:	b083      	sub	sp, #12
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4618      	mov	r0, r3
 8002f68:	370c      	adds	r7, #12
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr

08002f72 <_ZSt12__miter_baseIPP8DrawableET_S3_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 8002f72:	b480      	push	{r7}
 8002f74:	b083      	sub	sp, #12
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	6078      	str	r0, [r7, #4]
    { return __it; }
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	370c      	adds	r7, #12
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr

08002f88 <_ZSt14__copy_move_a1ILb1EPP8DrawableS2_ET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b084      	sub	sp, #16
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	60f8      	str	r0, [r7, #12]
 8002f90:	60b9      	str	r1, [r7, #8]
 8002f92:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	68b9      	ldr	r1, [r7, #8]
 8002f98:	68f8      	ldr	r0, [r7, #12]
 8002f9a:	f000 f805 	bl	8002fa8 <_ZSt14__copy_move_a2ILb1EPP8DrawableS2_ET1_T0_S4_S3_>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3710      	adds	r7, #16
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}

08002fa8 <_ZSt14__copy_move_a2ILb1EPP8DrawableS2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b084      	sub	sp, #16
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	60f8      	str	r0, [r7, #12]
 8002fb0:	60b9      	str	r1, [r7, #8]
 8002fb2:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8002fb4:	687a      	ldr	r2, [r7, #4]
 8002fb6:	68b9      	ldr	r1, [r7, #8]
 8002fb8:	68f8      	ldr	r0, [r7, #12]
 8002fba:	f000 f805 	bl	8002fc8 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP8DrawableEEPT_PKS5_S8_S6_>
 8002fbe:	4603      	mov	r3, r0
    }
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3710      	adds	r7, #16
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}

08002fc8 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP8DrawableEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b086      	sub	sp, #24
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	60f8      	str	r0, [r7, #12]
 8002fd0:	60b9      	str	r1, [r7, #8]
 8002fd2:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8002fd4:	68ba      	ldr	r2, [r7, #8]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	109b      	asrs	r3, r3, #2
 8002fdc:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d006      	beq.n	8002ff2 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP8DrawableEEPT_PKS5_S8_S6_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	461a      	mov	r2, r3
 8002fea:	68f9      	ldr	r1, [r7, #12]
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	f009 ffdb 	bl	800cfa8 <memmove>
	  return __result + _Num;
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	4413      	add	r3, r2
	}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3718      	adds	r7, #24
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
	...

08003004 <_ZN6BitMapD1Ev>:
class BitMap: public Drawable{
 8003004:	b580      	push	{r7, lr}
 8003006:	b082      	sub	sp, #8
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
 800300c:	4a05      	ldr	r2, [pc, #20]	@ (8003024 <_ZN6BitMapD1Ev+0x20>)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	601a      	str	r2, [r3, #0]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4618      	mov	r0, r3
 8003016:	f7fe faad 	bl	8001574 <_ZN8DrawableD1Ev>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4618      	mov	r0, r3
 800301e:	3708      	adds	r7, #8
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}
 8003024:	0801246c 	.word	0x0801246c

08003028 <_ZN6BitMapD0Ev>:
 8003028:	b580      	push	{r7, lr}
 800302a:	b082      	sub	sp, #8
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f7ff ffe7 	bl	8003004 <_ZN6BitMapD1Ev>
 8003036:	2120      	movs	r1, #32
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f008 fffb 	bl	800c034 <_ZdlPvj>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4618      	mov	r0, r3
 8003042:	3708      	adds	r7, #8
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}

08003048 <_ZN9ContainerD1Ev>:
class Container: public Drawable {
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
 8003050:	4a08      	ldr	r2, [pc, #32]	@ (8003074 <_ZN9ContainerD1Ev+0x2c>)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	601a      	str	r2, [r3, #0]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	3318      	adds	r3, #24
 800305a:	4618      	mov	r0, r3
 800305c:	f7ff f8d8 	bl	8002210 <_ZNSt6vectorIP8DrawableSaIS1_EED1Ev>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	4618      	mov	r0, r3
 8003064:	f7fe fa86 	bl	8001574 <_ZN8DrawableD1Ev>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	4618      	mov	r0, r3
 800306c:	3708      	adds	r7, #8
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	080124ac 	.word	0x080124ac

08003078 <_ZN9ContainerD0Ev>:
 8003078:	b580      	push	{r7, lr}
 800307a:	b082      	sub	sp, #8
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	f7ff ffe1 	bl	8003048 <_ZN9ContainerD1Ev>
 8003086:	2124      	movs	r1, #36	@ 0x24
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	f008 ffd3 	bl	800c034 <_ZdlPvj>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4618      	mov	r0, r3
 8003092:	3708      	adds	r7, #8
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}

08003098 <_ZNSt11_Tuple_implILj1EJ15FreeRTOSDeleterEEC2Ev>:
      _Tuple_impl()
 8003098:	b580      	push	{r7, lr}
 800309a:	b082      	sub	sp, #8
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
      : _Base() { }
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f000 f805 	bl	80030b0 <_ZNSt10_Head_baseILj1E15FreeRTOSDeleterLb1EEC2Ev>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4618      	mov	r0, r3
 80030aa:	3708      	adds	r7, #8
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}

080030b0 <_ZNSt10_Head_baseILj1E15FreeRTOSDeleterLb1EEC2Ev>:
      constexpr _Head_base()
 80030b0:	b480      	push	{r7}
 80030b2:	b083      	sub	sp, #12
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	4618      	mov	r0, r3
 80030bc:	370c      	adds	r7, #12
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr

080030c6 <_ZN11FrameBufferC1Etttt>:
//#define Imagesize (((EPD_4in26_WIDTH % 8 == 0)? (EPD_4in26_WIDTH / 8 ): (EPD_4in26_WIDTH / 8 + 1)) * EPD_4in26_HEIGHT)

std::unique_ptr<FrameBuffer, FreeRTOSDeleter> FrameBuffer::instance = nullptr;
// !!!!!!!!!!!!!!!!! IMPORTANT -> this width and height dont correlate to the width and height of image it correlates to the
// width and height of the partial iamge you want to draw (usefull when you only want to draw one part of the screen
FrameBuffer::FrameBuffer(UWORD Width, UWORD Height, UWORD Rotate, UWORD Color){
 80030c6:	b580      	push	{r7, lr}
 80030c8:	b086      	sub	sp, #24
 80030ca:	af02      	add	r7, sp, #8
 80030cc:	60f8      	str	r0, [r7, #12]
 80030ce:	4608      	mov	r0, r1
 80030d0:	4611      	mov	r1, r2
 80030d2:	461a      	mov	r2, r3
 80030d4:	4603      	mov	r3, r0
 80030d6:	817b      	strh	r3, [r7, #10]
 80030d8:	460b      	mov	r3, r1
 80030da:	813b      	strh	r3, [r7, #8]
 80030dc:	4613      	mov	r3, r2
 80030de:	80fb      	strh	r3, [r7, #6]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	4618      	mov	r0, r3
 80030e4:	f000 ffbe 	bl	8004064 <_ZNSt10unique_ptrIA_h15FreeRTOSDeleterEC1IS1_vEEv>
	Paint_initImage(Width,Height,Rotate,Color);
 80030e8:	88f8      	ldrh	r0, [r7, #6]
 80030ea:	893a      	ldrh	r2, [r7, #8]
 80030ec:	8979      	ldrh	r1, [r7, #10]
 80030ee:	8b3b      	ldrh	r3, [r7, #24]
 80030f0:	9300      	str	r3, [sp, #0]
 80030f2:	4603      	mov	r3, r0
 80030f4:	68f8      	ldr	r0, [r7, #12]
 80030f6:	f000 f825 	bl	8003144 <_ZN11FrameBuffer15Paint_initImageEtttt>
}
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	4618      	mov	r0, r3
 80030fe:	3710      	adds	r7, #16
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}

08003104 <_ZNSt15__uniq_ptr_dataIh15FreeRTOSDeleterLb1ELb1EEaSEOS1_>:
      __uniq_ptr_data& operator=(__uniq_ptr_data&&) = default;
 8003104:	b580      	push	{r7, lr}
 8003106:	b082      	sub	sp, #8
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	6039      	str	r1, [r7, #0]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	683a      	ldr	r2, [r7, #0]
 8003112:	4611      	mov	r1, r2
 8003114:	4618      	mov	r0, r3
 8003116:	f000 ffd4 	bl	80040c2 <_ZNSt15__uniq_ptr_implIh15FreeRTOSDeleterEaSEOS1_>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4618      	mov	r0, r3
 800311e:	3708      	adds	r7, #8
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}

08003124 <_ZNSt10unique_ptrIA_h15FreeRTOSDeleterEaSEOS2_>:
      operator=(unique_ptr&&) = default;
 8003124:	b580      	push	{r7, lr}
 8003126:	b082      	sub	sp, #8
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	6039      	str	r1, [r7, #0]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	683a      	ldr	r2, [r7, #0]
 8003132:	4611      	mov	r1, r2
 8003134:	4618      	mov	r0, r3
 8003136:	f7ff ffe5 	bl	8003104 <_ZNSt15__uniq_ptr_dataIh15FreeRTOSDeleterLb1ELb1EEaSEOS1_>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4618      	mov	r0, r3
 800313e:	3708      	adds	r7, #8
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}

08003144 <_ZN11FrameBuffer15Paint_initImageEtttt>:
    Color   :   Whether the picture is inverted
******************************************************************************/



void FrameBuffer::Paint_initImage(UWORD Width, UWORD Height, UWORD Rotate, UWORD Color){
 8003144:	b590      	push	{r4, r7, lr}
 8003146:	b087      	sub	sp, #28
 8003148:	af00      	add	r7, sp, #0
 800314a:	60f8      	str	r0, [r7, #12]
 800314c:	4608      	mov	r0, r1
 800314e:	4611      	mov	r1, r2
 8003150:	461a      	mov	r2, r3
 8003152:	4603      	mov	r3, r0
 8003154:	817b      	strh	r3, [r7, #10]
 8003156:	460b      	mov	r3, r1
 8003158:	813b      	strh	r3, [r7, #8]
 800315a:	4613      	mov	r3, r2
 800315c:	80fb      	strh	r3, [r7, #6]
	UWORD Imagesize  =(((Width % 8 == 0)? (Width / 8 ): (Width / 8 + 1)) * Height);
 800315e:	897b      	ldrh	r3, [r7, #10]
 8003160:	f003 0307 	and.w	r3, r3, #7
 8003164:	2b00      	cmp	r3, #0
 8003166:	d103      	bne.n	8003170 <_ZN11FrameBuffer15Paint_initImageEtttt+0x2c>
 8003168:	897b      	ldrh	r3, [r7, #10]
 800316a:	08db      	lsrs	r3, r3, #3
 800316c:	b29b      	uxth	r3, r3
 800316e:	e004      	b.n	800317a <_ZN11FrameBuffer15Paint_initImageEtttt+0x36>
 8003170:	897b      	ldrh	r3, [r7, #10]
 8003172:	08db      	lsrs	r3, r3, #3
 8003174:	b29b      	uxth	r3, r3
 8003176:	3301      	adds	r3, #1
 8003178:	b29b      	uxth	r3, r3
 800317a:	893a      	ldrh	r2, [r7, #8]
 800317c:	fb12 f303 	smulbb	r3, r2, r3
 8003180:	82fb      	strh	r3, [r7, #22]


    this->Image = make_unique_freertos_array(Imagesize);
 8003182:	68fc      	ldr	r4, [r7, #12]
 8003184:	8afa      	ldrh	r2, [r7, #22]
 8003186:	f107 0310 	add.w	r3, r7, #16
 800318a:	4611      	mov	r1, r2
 800318c:	4618      	mov	r0, r3
 800318e:	f001 f8e5 	bl	800435c <_Z26make_unique_freertos_arrayj>
 8003192:	f107 0310 	add.w	r3, r7, #16
 8003196:	4619      	mov	r1, r3
 8003198:	4620      	mov	r0, r4
 800319a:	f7ff ffc3 	bl	8003124 <_ZNSt10unique_ptrIA_h15FreeRTOSDeleterEaSEOS2_>
 800319e:	f107 0310 	add.w	r3, r7, #16
 80031a2:	4618      	mov	r0, r3
 80031a4:	f000 ff6e 	bl	8004084 <_ZNSt10unique_ptrIA_h15FreeRTOSDeleterED1Ev>
    if (!this->Image) {
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	4618      	mov	r0, r3
 80031ac:	f000 ffa5 	bl	80040fa <_ZNKSt10unique_ptrIA_h15FreeRTOSDeleterEcvbEv>
 80031b0:	4603      	mov	r3, r0
 80031b2:	f083 0301 	eor.w	r3, r3, #1
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d002      	beq.n	80031c2 <_ZN11FrameBuffer15Paint_initImageEtttt+0x7e>
		printf("FrameBuffer allocation failed!\n");
 80031bc:	481f      	ldr	r0, [pc, #124]	@ (800323c <_ZN11FrameBuffer15Paint_initImageEtttt+0xf8>)
 80031be:	f009 fda7 	bl	800cd10 <puts>
    }
	this->WidthMemory = Width;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	897a      	ldrh	r2, [r7, #10]
 80031c6:	811a      	strh	r2, [r3, #8]
    this->HeightMemory = Height;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	893a      	ldrh	r2, [r7, #8]
 80031cc:	815a      	strh	r2, [r3, #10]
    this->Color = Color;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80031d2:	819a      	strh	r2, [r3, #12]
	this->Scale = 2;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2202      	movs	r2, #2
 80031d8:	82da      	strh	r2, [r3, #22]

    this->WidthByte = (Width % 8 == 0)? (Width / 8 ): (Width / 8 + 1);
 80031da:	897b      	ldrh	r3, [r7, #10]
 80031dc:	f003 0307 	and.w	r3, r3, #7
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d103      	bne.n	80031ec <_ZN11FrameBuffer15Paint_initImageEtttt+0xa8>
 80031e4:	897b      	ldrh	r3, [r7, #10]
 80031e6:	08db      	lsrs	r3, r3, #3
 80031e8:	b29b      	uxth	r3, r3
 80031ea:	e004      	b.n	80031f6 <_ZN11FrameBuffer15Paint_initImageEtttt+0xb2>
 80031ec:	897b      	ldrh	r3, [r7, #10]
 80031ee:	08db      	lsrs	r3, r3, #3
 80031f0:	b29b      	uxth	r3, r3
 80031f2:	3301      	adds	r3, #1
 80031f4:	b29b      	uxth	r3, r3
 80031f6:	68fa      	ldr	r2, [r7, #12]
 80031f8:	8253      	strh	r3, [r2, #18]
    this->HeightByte = Height;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	893a      	ldrh	r2, [r7, #8]
 80031fe:	829a      	strh	r2, [r3, #20]
//    printf("WidthByte = %d, HeightByte = %d\r\n", this->WidthByte, this->HeightByte);
//    printf(" EPD_WIDTH / 8 = %d\r\n",  122 / 8);

    this->Rotate = Rotate;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	88fa      	ldrh	r2, [r7, #6]
 8003204:	81da      	strh	r2, [r3, #14]
    this->Mirror = MIRROR_NONE;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2200      	movs	r2, #0
 800320a:	821a      	strh	r2, [r3, #16]

    if(Rotate == ROTATE_0 || Rotate == ROTATE_180) {
 800320c:	88fb      	ldrh	r3, [r7, #6]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d002      	beq.n	8003218 <_ZN11FrameBuffer15Paint_initImageEtttt+0xd4>
 8003212:	88fb      	ldrh	r3, [r7, #6]
 8003214:	2bb4      	cmp	r3, #180	@ 0xb4
 8003216:	d106      	bne.n	8003226 <_ZN11FrameBuffer15Paint_initImageEtttt+0xe2>
        this->Width = Width;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	897a      	ldrh	r2, [r7, #10]
 800321c:	809a      	strh	r2, [r3, #4]
        this->Height = Height;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	893a      	ldrh	r2, [r7, #8]
 8003222:	80da      	strh	r2, [r3, #6]
 8003224:	e006      	b.n	8003234 <_ZN11FrameBuffer15Paint_initImageEtttt+0xf0>
    } else {
        this->Width = Height;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	893a      	ldrh	r2, [r7, #8]
 800322a:	809a      	strh	r2, [r3, #4]
        this->Height = Width;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	897a      	ldrh	r2, [r7, #10]
 8003230:	80da      	strh	r2, [r3, #6]
    }
}
 8003232:	bf00      	nop
 8003234:	bf00      	nop
 8003236:	371c      	adds	r7, #28
 8003238:	46bd      	mov	sp, r7
 800323a:	bd90      	pop	{r4, r7, pc}
 800323c:	0800f10c 	.word	0x0800f10c

08003240 <_ZN11FrameBuffer14Paint_SetPixelEttt>:
    Xpoint : At point X
    Ypoint : At point Y
    Color  : Painted colors
******************************************************************************/
void FrameBuffer::Paint_SetPixel(UWORD Xpoint, UWORD Ypoint, UWORD Color)
{
 8003240:	b590      	push	{r4, r7, lr}
 8003242:	b08d      	sub	sp, #52	@ 0x34
 8003244:	af00      	add	r7, sp, #0
 8003246:	60f8      	str	r0, [r7, #12]
 8003248:	4608      	mov	r0, r1
 800324a:	4611      	mov	r1, r2
 800324c:	461a      	mov	r2, r3
 800324e:	4603      	mov	r3, r0
 8003250:	817b      	strh	r3, [r7, #10]
 8003252:	460b      	mov	r3, r1
 8003254:	813b      	strh	r3, [r7, #8]
 8003256:	4613      	mov	r3, r2
 8003258:	80fb      	strh	r3, [r7, #6]
    if(Xpoint > this->Width || Ypoint > this->Height){
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	889b      	ldrh	r3, [r3, #4]
 800325e:	897a      	ldrh	r2, [r7, #10]
 8003260:	429a      	cmp	r2, r3
 8003262:	d804      	bhi.n	800326e <_ZN11FrameBuffer14Paint_SetPixelEttt+0x2e>
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	88db      	ldrh	r3, [r3, #6]
 8003268:	893a      	ldrh	r2, [r7, #8]
 800326a:	429a      	cmp	r2, r3
 800326c:	d904      	bls.n	8003278 <_ZN11FrameBuffer14Paint_SetPixelEttt+0x38>
        Debug("Exceeding display boundaries\r\n");
 800326e:	49a6      	ldr	r1, [pc, #664]	@ (8003508 <_ZN11FrameBuffer14Paint_SetPixelEttt+0x2c8>)
 8003270:	2004      	movs	r0, #4
 8003272:	f7fd fde9 	bl	8000e48 <_Z12log_message2hPKcz>
        return;
 8003276:	e143      	b.n	8003500 <_ZN11FrameBuffer14Paint_SetPixelEttt+0x2c0>
    }
    UWORD X, Y;

    switch(this->Rotate) {
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	89db      	ldrh	r3, [r3, #14]
 800327c:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8003280:	d02b      	beq.n	80032da <_ZN11FrameBuffer14Paint_SetPixelEttt+0x9a>
 8003282:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8003286:	f300 8138 	bgt.w	80034fa <_ZN11FrameBuffer14Paint_SetPixelEttt+0x2ba>
 800328a:	2bb4      	cmp	r3, #180	@ 0xb4
 800328c:	d016      	beq.n	80032bc <_ZN11FrameBuffer14Paint_SetPixelEttt+0x7c>
 800328e:	2bb4      	cmp	r3, #180	@ 0xb4
 8003290:	f300 8133 	bgt.w	80034fa <_ZN11FrameBuffer14Paint_SetPixelEttt+0x2ba>
 8003294:	2b00      	cmp	r3, #0
 8003296:	d002      	beq.n	800329e <_ZN11FrameBuffer14Paint_SetPixelEttt+0x5e>
 8003298:	2b5a      	cmp	r3, #90	@ 0x5a
 800329a:	d005      	beq.n	80032a8 <_ZN11FrameBuffer14Paint_SetPixelEttt+0x68>
    case 270:
        X = Ypoint;
        Y = this->HeightMemory - Xpoint - 1;
        break;
    default:
        return;
 800329c:	e12d      	b.n	80034fa <_ZN11FrameBuffer14Paint_SetPixelEttt+0x2ba>
        X = Xpoint;
 800329e:	897b      	ldrh	r3, [r7, #10]
 80032a0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
        Y = Ypoint;
 80032a2:	893b      	ldrh	r3, [r7, #8]
 80032a4:	85bb      	strh	r3, [r7, #44]	@ 0x2c
        break;
 80032a6:	e022      	b.n	80032ee <_ZN11FrameBuffer14Paint_SetPixelEttt+0xae>
        X = this->WidthMemory - Ypoint - 1;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	891a      	ldrh	r2, [r3, #8]
 80032ac:	893b      	ldrh	r3, [r7, #8]
 80032ae:	1ad3      	subs	r3, r2, r3
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	3b01      	subs	r3, #1
 80032b4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
        Y = Xpoint;
 80032b6:	897b      	ldrh	r3, [r7, #10]
 80032b8:	85bb      	strh	r3, [r7, #44]	@ 0x2c
        break;
 80032ba:	e018      	b.n	80032ee <_ZN11FrameBuffer14Paint_SetPixelEttt+0xae>
        X = this->WidthMemory - Xpoint - 1;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	891a      	ldrh	r2, [r3, #8]
 80032c0:	897b      	ldrh	r3, [r7, #10]
 80032c2:	1ad3      	subs	r3, r2, r3
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	3b01      	subs	r3, #1
 80032c8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
        Y = this->HeightMemory - Ypoint - 1;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	895a      	ldrh	r2, [r3, #10]
 80032ce:	893b      	ldrh	r3, [r7, #8]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	3b01      	subs	r3, #1
 80032d6:	85bb      	strh	r3, [r7, #44]	@ 0x2c
        break;
 80032d8:	e009      	b.n	80032ee <_ZN11FrameBuffer14Paint_SetPixelEttt+0xae>
        X = Ypoint;
 80032da:	893b      	ldrh	r3, [r7, #8]
 80032dc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
        Y = this->HeightMemory - Xpoint - 1;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	895a      	ldrh	r2, [r3, #10]
 80032e2:	897b      	ldrh	r3, [r7, #10]
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	b29b      	uxth	r3, r3
 80032e8:	3b01      	subs	r3, #1
 80032ea:	85bb      	strh	r3, [r7, #44]	@ 0x2c
        break;
 80032ec:	bf00      	nop
    }

    switch(this->Mirror) {
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	8a1b      	ldrh	r3, [r3, #16]
 80032f2:	2b03      	cmp	r3, #3
 80032f4:	f200 8103 	bhi.w	80034fe <_ZN11FrameBuffer14Paint_SetPixelEttt+0x2be>
 80032f8:	a201      	add	r2, pc, #4	@ (adr r2, 8003300 <_ZN11FrameBuffer14Paint_SetPixelEttt+0xc0>)
 80032fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032fe:	bf00      	nop
 8003300:	0800334f 	.word	0x0800334f
 8003304:	08003311 	.word	0x08003311
 8003308:	08003321 	.word	0x08003321
 800330c:	08003331 	.word	0x08003331
    case MIRROR_NONE:
        break;
    case MIRROR_HORIZONTAL:
        X = this->WidthMemory - X - 1;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	891a      	ldrh	r2, [r3, #8]
 8003314:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8003316:	1ad3      	subs	r3, r2, r3
 8003318:	b29b      	uxth	r3, r3
 800331a:	3b01      	subs	r3, #1
 800331c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
        break;
 800331e:	e017      	b.n	8003350 <_ZN11FrameBuffer14Paint_SetPixelEttt+0x110>
    case MIRROR_VERTICAL:
        Y = this->HeightMemory - Y - 1;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	895a      	ldrh	r2, [r3, #10]
 8003324:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8003326:	1ad3      	subs	r3, r2, r3
 8003328:	b29b      	uxth	r3, r3
 800332a:	3b01      	subs	r3, #1
 800332c:	85bb      	strh	r3, [r7, #44]	@ 0x2c
        break;
 800332e:	e00f      	b.n	8003350 <_ZN11FrameBuffer14Paint_SetPixelEttt+0x110>
    case MIRROR_ORIGIN:
        X = this->WidthMemory - X - 1;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	891a      	ldrh	r2, [r3, #8]
 8003334:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8003336:	1ad3      	subs	r3, r2, r3
 8003338:	b29b      	uxth	r3, r3
 800333a:	3b01      	subs	r3, #1
 800333c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
        Y = this->HeightMemory - Y - 1;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	895a      	ldrh	r2, [r3, #10]
 8003342:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	b29b      	uxth	r3, r3
 8003348:	3b01      	subs	r3, #1
 800334a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
        break;
 800334c:	e000      	b.n	8003350 <_ZN11FrameBuffer14Paint_SetPixelEttt+0x110>
        break;
 800334e:	bf00      	nop
    default:
        return;
    }

    if(X > this->WidthMemory || Y > this->HeightMemory){
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	891b      	ldrh	r3, [r3, #8]
 8003354:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8003356:	429a      	cmp	r2, r3
 8003358:	d804      	bhi.n	8003364 <_ZN11FrameBuffer14Paint_SetPixelEttt+0x124>
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	895b      	ldrh	r3, [r3, #10]
 800335e:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8003360:	429a      	cmp	r2, r3
 8003362:	d904      	bls.n	800336e <_ZN11FrameBuffer14Paint_SetPixelEttt+0x12e>
        Debug("Exceeding display boundaries\r\n");
 8003364:	4968      	ldr	r1, [pc, #416]	@ (8003508 <_ZN11FrameBuffer14Paint_SetPixelEttt+0x2c8>)
 8003366:	2004      	movs	r0, #4
 8003368:	f7fd fd6e 	bl	8000e48 <_Z12log_message2hPKcz>
        return;
 800336c:	e0c8      	b.n	8003500 <_ZN11FrameBuffer14Paint_SetPixelEttt+0x2c0>
    }

    if(this->Scale == 2){
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	8adb      	ldrh	r3, [r3, #22]
 8003372:	2b02      	cmp	r3, #2
 8003374:	d13f      	bne.n	80033f6 <_ZN11FrameBuffer14Paint_SetPixelEttt+0x1b6>
        UDOUBLE Addr = X / 8 + Y * this->WidthByte;
 8003376:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8003378:	08db      	lsrs	r3, r3, #3
 800337a:	b29b      	uxth	r3, r3
 800337c:	4619      	mov	r1, r3
 800337e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8003380:	68fa      	ldr	r2, [r7, #12]
 8003382:	8a52      	ldrh	r2, [r2, #18]
 8003384:	fb02 f303 	mul.w	r3, r2, r3
 8003388:	440b      	add	r3, r1
 800338a:	61bb      	str	r3, [r7, #24]
        UBYTE Rdata = this->Image[Addr];
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	69b9      	ldr	r1, [r7, #24]
 8003390:	4618      	mov	r0, r3
 8003392:	f000 fec3 	bl	800411c <_ZNKSt10unique_ptrIA_h15FreeRTOSDeleterEixEj>
 8003396:	4603      	mov	r3, r0
 8003398:	781b      	ldrb	r3, [r3, #0]
 800339a:	75fb      	strb	r3, [r7, #23]
        if(Color == BLACK)
 800339c:	88fb      	ldrh	r3, [r7, #6]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d115      	bne.n	80033ce <_ZN11FrameBuffer14Paint_SetPixelEttt+0x18e>
            this->Image[Addr] = Rdata & ~(0x80 >> (X % 8));
 80033a2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80033a4:	f003 0307 	and.w	r3, r3, #7
 80033a8:	2280      	movs	r2, #128	@ 0x80
 80033aa:	fa42 f303 	asr.w	r3, r2, r3
 80033ae:	b25b      	sxtb	r3, r3
 80033b0:	43db      	mvns	r3, r3
 80033b2:	b25a      	sxtb	r2, r3
 80033b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80033b8:	4013      	ands	r3, r2
 80033ba:	b25c      	sxtb	r4, r3
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	69b9      	ldr	r1, [r7, #24]
 80033c0:	4618      	mov	r0, r3
 80033c2:	f000 feab 	bl	800411c <_ZNKSt10unique_ptrIA_h15FreeRTOSDeleterEixEj>
 80033c6:	4603      	mov	r3, r0
 80033c8:	b2e2      	uxtb	r2, r4
 80033ca:	701a      	strb	r2, [r3, #0]
 80033cc:	e098      	b.n	8003500 <_ZN11FrameBuffer14Paint_SetPixelEttt+0x2c0>
        else
            this->Image[Addr] = Rdata | (0x80 >> (X % 8));
 80033ce:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80033d0:	f003 0307 	and.w	r3, r3, #7
 80033d4:	2280      	movs	r2, #128	@ 0x80
 80033d6:	fa42 f303 	asr.w	r3, r2, r3
 80033da:	b25a      	sxtb	r2, r3
 80033dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80033e0:	4313      	orrs	r3, r2
 80033e2:	b25c      	sxtb	r4, r3
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	69b9      	ldr	r1, [r7, #24]
 80033e8:	4618      	mov	r0, r3
 80033ea:	f000 fe97 	bl	800411c <_ZNKSt10unique_ptrIA_h15FreeRTOSDeleterEixEj>
 80033ee:	4603      	mov	r3, r0
 80033f0:	b2e2      	uxtb	r2, r4
 80033f2:	701a      	strb	r2, [r3, #0]
 80033f4:	e084      	b.n	8003500 <_ZN11FrameBuffer14Paint_SetPixelEttt+0x2c0>
    }else if(this->Scale == 4){
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	8adb      	ldrh	r3, [r3, #22]
 80033fa:	2b04      	cmp	r3, #4
 80033fc:	d13b      	bne.n	8003476 <_ZN11FrameBuffer14Paint_SetPixelEttt+0x236>
        UDOUBLE Addr = X / 4 + Y * this->WidthByte;
 80033fe:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8003400:	089b      	lsrs	r3, r3, #2
 8003402:	b29b      	uxth	r3, r3
 8003404:	4619      	mov	r1, r3
 8003406:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8003408:	68fa      	ldr	r2, [r7, #12]
 800340a:	8a52      	ldrh	r2, [r2, #18]
 800340c:	fb02 f303 	mul.w	r3, r2, r3
 8003410:	440b      	add	r3, r1
 8003412:	623b      	str	r3, [r7, #32]
        Color = Color % 4;//Guaranteed color scale is 4  --- 0~3
 8003414:	88fb      	ldrh	r3, [r7, #6]
 8003416:	f003 0303 	and.w	r3, r3, #3
 800341a:	80fb      	strh	r3, [r7, #6]
        UBYTE Rdata = this->Image[Addr];
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6a39      	ldr	r1, [r7, #32]
 8003420:	4618      	mov	r0, r3
 8003422:	f000 fe7b 	bl	800411c <_ZNKSt10unique_ptrIA_h15FreeRTOSDeleterEixEj>
 8003426:	4603      	mov	r3, r0
 8003428:	781b      	ldrb	r3, [r3, #0]
 800342a:	77fb      	strb	r3, [r7, #31]

        Rdata = Rdata & (~(0xC0 >> ((X % 4)*2)));
 800342c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800342e:	f003 0303 	and.w	r3, r3, #3
 8003432:	005b      	lsls	r3, r3, #1
 8003434:	22c0      	movs	r2, #192	@ 0xc0
 8003436:	fa42 f303 	asr.w	r3, r2, r3
 800343a:	b25b      	sxtb	r3, r3
 800343c:	43db      	mvns	r3, r3
 800343e:	b25a      	sxtb	r2, r3
 8003440:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003444:	4013      	ands	r3, r2
 8003446:	b25b      	sxtb	r3, r3
 8003448:	77fb      	strb	r3, [r7, #31]
        this->Image[Addr] = Rdata | ((Color << 6) >> ((X % 4)*2));
 800344a:	88fb      	ldrh	r3, [r7, #6]
 800344c:	019a      	lsls	r2, r3, #6
 800344e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8003450:	f003 0303 	and.w	r3, r3, #3
 8003454:	005b      	lsls	r3, r3, #1
 8003456:	fa42 f303 	asr.w	r3, r2, r3
 800345a:	b25a      	sxtb	r2, r3
 800345c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003460:	4313      	orrs	r3, r2
 8003462:	b25c      	sxtb	r4, r3
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	6a39      	ldr	r1, [r7, #32]
 8003468:	4618      	mov	r0, r3
 800346a:	f000 fe57 	bl	800411c <_ZNKSt10unique_ptrIA_h15FreeRTOSDeleterEixEj>
 800346e:	4603      	mov	r3, r0
 8003470:	b2e2      	uxtb	r2, r4
 8003472:	701a      	strb	r2, [r3, #0]
 8003474:	e044      	b.n	8003500 <_ZN11FrameBuffer14Paint_SetPixelEttt+0x2c0>
    }else if(this->Scale == 6 || this->Scale == 7){
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	8adb      	ldrh	r3, [r3, #22]
 800347a:	2b06      	cmp	r3, #6
 800347c:	d003      	beq.n	8003486 <_ZN11FrameBuffer14Paint_SetPixelEttt+0x246>
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	8adb      	ldrh	r3, [r3, #22]
 8003482:	2b07      	cmp	r3, #7
 8003484:	d13c      	bne.n	8003500 <_ZN11FrameBuffer14Paint_SetPixelEttt+0x2c0>
		UDOUBLE Addr = X / 2  + Y * this->WidthByte;
 8003486:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8003488:	085b      	lsrs	r3, r3, #1
 800348a:	b29b      	uxth	r3, r3
 800348c:	4619      	mov	r1, r3
 800348e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8003490:	68fa      	ldr	r2, [r7, #12]
 8003492:	8a52      	ldrh	r2, [r2, #18]
 8003494:	fb02 f303 	mul.w	r3, r2, r3
 8003498:	440b      	add	r3, r1
 800349a:	62bb      	str	r3, [r7, #40]	@ 0x28
		UBYTE Rdata = this->Image[Addr];
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80034a0:	4618      	mov	r0, r3
 80034a2:	f000 fe3b 	bl	800411c <_ZNKSt10unique_ptrIA_h15FreeRTOSDeleterEixEj>
 80034a6:	4603      	mov	r3, r0
 80034a8:	781b      	ldrb	r3, [r3, #0]
 80034aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		Rdata = Rdata & (~(0xF0 >> ((X % 2)*4)));//Clear first, then set value
 80034ae:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80034b0:	f003 0301 	and.w	r3, r3, #1
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	22f0      	movs	r2, #240	@ 0xf0
 80034b8:	fa42 f303 	asr.w	r3, r2, r3
 80034bc:	b25b      	sxtb	r3, r3
 80034be:	43db      	mvns	r3, r3
 80034c0:	b25a      	sxtb	r2, r3
 80034c2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80034c6:	4013      	ands	r3, r2
 80034c8:	b25b      	sxtb	r3, r3
 80034ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		this->Image[Addr] = Rdata | ((Color << 4) >> ((X % 2)*4));
 80034ce:	88fb      	ldrh	r3, [r7, #6]
 80034d0:	011a      	lsls	r2, r3, #4
 80034d2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80034d4:	f003 0301 	and.w	r3, r3, #1
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	fa42 f303 	asr.w	r3, r2, r3
 80034de:	b25a      	sxtb	r2, r3
 80034e0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80034e4:	4313      	orrs	r3, r2
 80034e6:	b25c      	sxtb	r4, r3
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80034ec:	4618      	mov	r0, r3
 80034ee:	f000 fe15 	bl	800411c <_ZNKSt10unique_ptrIA_h15FreeRTOSDeleterEixEj>
 80034f2:	4603      	mov	r3, r0
 80034f4:	b2e2      	uxtb	r2, r4
 80034f6:	701a      	strb	r2, [r3, #0]
 80034f8:	e002      	b.n	8003500 <_ZN11FrameBuffer14Paint_SetPixelEttt+0x2c0>
        return;
 80034fa:	bf00      	nop
 80034fc:	e000      	b.n	8003500 <_ZN11FrameBuffer14Paint_SetPixelEttt+0x2c0>
        return;
 80034fe:	bf00      	nop
		//printf("Add =  %d ,data = %d\r\n",Addr,Rdata);
		}
}
 8003500:	3734      	adds	r7, #52	@ 0x34
 8003502:	46bd      	mov	sp, r7
 8003504:	bd90      	pop	{r4, r7, pc}
 8003506:	bf00      	nop
 8003508:	0800f264 	.word	0x0800f264

0800350c <_ZN11FrameBuffer11Paint_ClearEt>:
function: Clear the color of the picture
parameter:
    Color : Painted colors
******************************************************************************/
void FrameBuffer::Paint_Clear(UWORD Color)
{
 800350c:	b590      	push	{r4, r7, lr}
 800350e:	b089      	sub	sp, #36	@ 0x24
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	460b      	mov	r3, r1
 8003516:	807b      	strh	r3, [r7, #2]
	if(this->Scale == 2) {
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	8adb      	ldrh	r3, [r3, #22]
 800351c:	2b02      	cmp	r3, #2
 800351e:	d127      	bne.n	8003570 <_ZN11FrameBuffer11Paint_ClearEt+0x64>
		for (UWORD Y = 0; Y < this->HeightByte; Y++) {
 8003520:	2300      	movs	r3, #0
 8003522:	83fb      	strh	r3, [r7, #30]
 8003524:	e01e      	b.n	8003564 <_ZN11FrameBuffer11Paint_ClearEt+0x58>
			for (UWORD X = 0; X < this->WidthByte; X++ ) {//8 pixel =  1 byte
 8003526:	2300      	movs	r3, #0
 8003528:	83bb      	strh	r3, [r7, #28]
 800352a:	e013      	b.n	8003554 <_ZN11FrameBuffer11Paint_ClearEt+0x48>
				UDOUBLE Addr = X + Y*this->WidthByte;
 800352c:	8bba      	ldrh	r2, [r7, #28]
 800352e:	8bfb      	ldrh	r3, [r7, #30]
 8003530:	6879      	ldr	r1, [r7, #4]
 8003532:	8a49      	ldrh	r1, [r1, #18]
 8003534:	fb01 f303 	mul.w	r3, r1, r3
 8003538:	4413      	add	r3, r2
 800353a:	60bb      	str	r3, [r7, #8]
				this->Image[Addr] = Color;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	68b9      	ldr	r1, [r7, #8]
 8003540:	4618      	mov	r0, r3
 8003542:	f000 fdeb 	bl	800411c <_ZNKSt10unique_ptrIA_h15FreeRTOSDeleterEixEj>
 8003546:	4603      	mov	r3, r0
 8003548:	887a      	ldrh	r2, [r7, #2]
 800354a:	b2d2      	uxtb	r2, r2
 800354c:	701a      	strb	r2, [r3, #0]
			for (UWORD X = 0; X < this->WidthByte; X++ ) {//8 pixel =  1 byte
 800354e:	8bbb      	ldrh	r3, [r7, #28]
 8003550:	3301      	adds	r3, #1
 8003552:	83bb      	strh	r3, [r7, #28]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	8a5b      	ldrh	r3, [r3, #18]
 8003558:	8bba      	ldrh	r2, [r7, #28]
 800355a:	429a      	cmp	r2, r3
 800355c:	d3e6      	bcc.n	800352c <_ZN11FrameBuffer11Paint_ClearEt+0x20>
		for (UWORD Y = 0; Y < this->HeightByte; Y++) {
 800355e:	8bfb      	ldrh	r3, [r7, #30]
 8003560:	3301      	adds	r3, #1
 8003562:	83fb      	strh	r3, [r7, #30]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	8a9b      	ldrh	r3, [r3, #20]
 8003568:	8bfa      	ldrh	r2, [r7, #30]
 800356a:	429a      	cmp	r2, r3
 800356c:	d3db      	bcc.n	8003526 <_ZN11FrameBuffer11Paint_ClearEt+0x1a>
				UDOUBLE Addr = X + Y*this->WidthByte;
				this->Image[Addr] = (Color<<4)|Color;
			}
		}
	}
}
 800356e:	e070      	b.n	8003652 <_ZN11FrameBuffer11Paint_ClearEt+0x146>
    }else if(this->Scale == 4) {
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	8adb      	ldrh	r3, [r3, #22]
 8003574:	2b04      	cmp	r3, #4
 8003576:	d137      	bne.n	80035e8 <_ZN11FrameBuffer11Paint_ClearEt+0xdc>
        for (UWORD Y = 0; Y < this->HeightByte; Y++) {
 8003578:	2300      	movs	r3, #0
 800357a:	837b      	strh	r3, [r7, #26]
 800357c:	e02e      	b.n	80035dc <_ZN11FrameBuffer11Paint_ClearEt+0xd0>
			for (UWORD X = 0; X < this->WidthByte; X++ ) {
 800357e:	2300      	movs	r3, #0
 8003580:	833b      	strh	r3, [r7, #24]
 8003582:	e023      	b.n	80035cc <_ZN11FrameBuffer11Paint_ClearEt+0xc0>
				UDOUBLE Addr = X + Y*this->WidthByte;
 8003584:	8b3a      	ldrh	r2, [r7, #24]
 8003586:	8b7b      	ldrh	r3, [r7, #26]
 8003588:	6879      	ldr	r1, [r7, #4]
 800358a:	8a49      	ldrh	r1, [r1, #18]
 800358c:	fb01 f303 	mul.w	r3, r1, r3
 8003590:	4413      	add	r3, r2
 8003592:	60fb      	str	r3, [r7, #12]
				this->Image[Addr] = (Color<<6)|(Color<<4)|(Color<<2)|Color;
 8003594:	887b      	ldrh	r3, [r7, #2]
 8003596:	019b      	lsls	r3, r3, #6
 8003598:	b25a      	sxtb	r2, r3
 800359a:	887b      	ldrh	r3, [r7, #2]
 800359c:	011b      	lsls	r3, r3, #4
 800359e:	b25b      	sxtb	r3, r3
 80035a0:	4313      	orrs	r3, r2
 80035a2:	b25a      	sxtb	r2, r3
 80035a4:	887b      	ldrh	r3, [r7, #2]
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	b25b      	sxtb	r3, r3
 80035aa:	4313      	orrs	r3, r2
 80035ac:	b25a      	sxtb	r2, r3
 80035ae:	887b      	ldrh	r3, [r7, #2]
 80035b0:	b25b      	sxtb	r3, r3
 80035b2:	4313      	orrs	r3, r2
 80035b4:	b25c      	sxtb	r4, r3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	68f9      	ldr	r1, [r7, #12]
 80035ba:	4618      	mov	r0, r3
 80035bc:	f000 fdae 	bl	800411c <_ZNKSt10unique_ptrIA_h15FreeRTOSDeleterEixEj>
 80035c0:	4603      	mov	r3, r0
 80035c2:	b2e2      	uxtb	r2, r4
 80035c4:	701a      	strb	r2, [r3, #0]
			for (UWORD X = 0; X < this->WidthByte; X++ ) {
 80035c6:	8b3b      	ldrh	r3, [r7, #24]
 80035c8:	3301      	adds	r3, #1
 80035ca:	833b      	strh	r3, [r7, #24]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	8a5b      	ldrh	r3, [r3, #18]
 80035d0:	8b3a      	ldrh	r2, [r7, #24]
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d3d6      	bcc.n	8003584 <_ZN11FrameBuffer11Paint_ClearEt+0x78>
        for (UWORD Y = 0; Y < this->HeightByte; Y++) {
 80035d6:	8b7b      	ldrh	r3, [r7, #26]
 80035d8:	3301      	adds	r3, #1
 80035da:	837b      	strh	r3, [r7, #26]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	8a9b      	ldrh	r3, [r3, #20]
 80035e0:	8b7a      	ldrh	r2, [r7, #26]
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d3cb      	bcc.n	800357e <_ZN11FrameBuffer11Paint_ClearEt+0x72>
}
 80035e6:	e034      	b.n	8003652 <_ZN11FrameBuffer11Paint_ClearEt+0x146>
	}else if(this->Scale == 6 || this->Scale == 7) {
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	8adb      	ldrh	r3, [r3, #22]
 80035ec:	2b06      	cmp	r3, #6
 80035ee:	d003      	beq.n	80035f8 <_ZN11FrameBuffer11Paint_ClearEt+0xec>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	8adb      	ldrh	r3, [r3, #22]
 80035f4:	2b07      	cmp	r3, #7
 80035f6:	d12c      	bne.n	8003652 <_ZN11FrameBuffer11Paint_ClearEt+0x146>
		for (UWORD Y = 0; Y < this->HeightByte; Y++) {
 80035f8:	2300      	movs	r3, #0
 80035fa:	82fb      	strh	r3, [r7, #22]
 80035fc:	e024      	b.n	8003648 <_ZN11FrameBuffer11Paint_ClearEt+0x13c>
			for (UWORD X = 0; X < this->WidthByte; X++ ) {
 80035fe:	2300      	movs	r3, #0
 8003600:	82bb      	strh	r3, [r7, #20]
 8003602:	e019      	b.n	8003638 <_ZN11FrameBuffer11Paint_ClearEt+0x12c>
				UDOUBLE Addr = X + Y*this->WidthByte;
 8003604:	8aba      	ldrh	r2, [r7, #20]
 8003606:	8afb      	ldrh	r3, [r7, #22]
 8003608:	6879      	ldr	r1, [r7, #4]
 800360a:	8a49      	ldrh	r1, [r1, #18]
 800360c:	fb01 f303 	mul.w	r3, r1, r3
 8003610:	4413      	add	r3, r2
 8003612:	613b      	str	r3, [r7, #16]
				this->Image[Addr] = (Color<<4)|Color;
 8003614:	887b      	ldrh	r3, [r7, #2]
 8003616:	011b      	lsls	r3, r3, #4
 8003618:	b25a      	sxtb	r2, r3
 800361a:	887b      	ldrh	r3, [r7, #2]
 800361c:	b25b      	sxtb	r3, r3
 800361e:	4313      	orrs	r3, r2
 8003620:	b25c      	sxtb	r4, r3
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6939      	ldr	r1, [r7, #16]
 8003626:	4618      	mov	r0, r3
 8003628:	f000 fd78 	bl	800411c <_ZNKSt10unique_ptrIA_h15FreeRTOSDeleterEixEj>
 800362c:	4603      	mov	r3, r0
 800362e:	b2e2      	uxtb	r2, r4
 8003630:	701a      	strb	r2, [r3, #0]
			for (UWORD X = 0; X < this->WidthByte; X++ ) {
 8003632:	8abb      	ldrh	r3, [r7, #20]
 8003634:	3301      	adds	r3, #1
 8003636:	82bb      	strh	r3, [r7, #20]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	8a5b      	ldrh	r3, [r3, #18]
 800363c:	8aba      	ldrh	r2, [r7, #20]
 800363e:	429a      	cmp	r2, r3
 8003640:	d3e0      	bcc.n	8003604 <_ZN11FrameBuffer11Paint_ClearEt+0xf8>
		for (UWORD Y = 0; Y < this->HeightByte; Y++) {
 8003642:	8afb      	ldrh	r3, [r7, #22]
 8003644:	3301      	adds	r3, #1
 8003646:	82fb      	strh	r3, [r7, #22]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	8a9b      	ldrh	r3, [r3, #20]
 800364c:	8afa      	ldrh	r2, [r7, #22]
 800364e:	429a      	cmp	r2, r3
 8003650:	d3d5      	bcc.n	80035fe <_ZN11FrameBuffer11Paint_ClearEt+0xf2>
}
 8003652:	bf00      	nop
 8003654:	3724      	adds	r7, #36	@ 0x24
 8003656:	46bd      	mov	sp, r7
 8003658:	bd90      	pop	{r4, r7, pc}

0800365a <_ZN11FrameBuffer18Paint_ClearWindowsEttttt>:
    Xend   : x end point
    Yend   : y end point
    Color  : Painted colors
******************************************************************************/
void FrameBuffer::Paint_ClearWindows(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend, UWORD Color)
{
 800365a:	b580      	push	{r7, lr}
 800365c:	b086      	sub	sp, #24
 800365e:	af00      	add	r7, sp, #0
 8003660:	60f8      	str	r0, [r7, #12]
 8003662:	4608      	mov	r0, r1
 8003664:	4611      	mov	r1, r2
 8003666:	461a      	mov	r2, r3
 8003668:	4603      	mov	r3, r0
 800366a:	817b      	strh	r3, [r7, #10]
 800366c:	460b      	mov	r3, r1
 800366e:	813b      	strh	r3, [r7, #8]
 8003670:	4613      	mov	r3, r2
 8003672:	80fb      	strh	r3, [r7, #6]
    UWORD X, Y;
    for (Y = Ystart; Y < Yend; Y++) {
 8003674:	893b      	ldrh	r3, [r7, #8]
 8003676:	82bb      	strh	r3, [r7, #20]
 8003678:	e012      	b.n	80036a0 <_ZN11FrameBuffer18Paint_ClearWindowsEttttt+0x46>
        for (X = Xstart; X < Xend; X++) {//8 pixel =  1 byte
 800367a:	897b      	ldrh	r3, [r7, #10]
 800367c:	82fb      	strh	r3, [r7, #22]
 800367e:	e008      	b.n	8003692 <_ZN11FrameBuffer18Paint_ClearWindowsEttttt+0x38>
            Paint_SetPixel(X, Y, Color);
 8003680:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003682:	8aba      	ldrh	r2, [r7, #20]
 8003684:	8af9      	ldrh	r1, [r7, #22]
 8003686:	68f8      	ldr	r0, [r7, #12]
 8003688:	f7ff fdda 	bl	8003240 <_ZN11FrameBuffer14Paint_SetPixelEttt>
        for (X = Xstart; X < Xend; X++) {//8 pixel =  1 byte
 800368c:	8afb      	ldrh	r3, [r7, #22]
 800368e:	3301      	adds	r3, #1
 8003690:	82fb      	strh	r3, [r7, #22]
 8003692:	8afa      	ldrh	r2, [r7, #22]
 8003694:	88fb      	ldrh	r3, [r7, #6]
 8003696:	429a      	cmp	r2, r3
 8003698:	d3f2      	bcc.n	8003680 <_ZN11FrameBuffer18Paint_ClearWindowsEttttt+0x26>
    for (Y = Ystart; Y < Yend; Y++) {
 800369a:	8abb      	ldrh	r3, [r7, #20]
 800369c:	3301      	adds	r3, #1
 800369e:	82bb      	strh	r3, [r7, #20]
 80036a0:	8aba      	ldrh	r2, [r7, #20]
 80036a2:	8c3b      	ldrh	r3, [r7, #32]
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d3e8      	bcc.n	800367a <_ZN11FrameBuffer18Paint_ClearWindowsEttttt+0x20>
        }
    }
}
 80036a8:	bf00      	nop
 80036aa:	bf00      	nop
 80036ac:	3718      	adds	r7, #24
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}

080036b2 <_ZN11FrameBuffer15Paint_DrawPointEttt9DOT_PIXEL9DOT_STYLE>:
    Dot_Pixel	: point size
    Dot_Style	: point Style
******************************************************************************/
void FrameBuffer::Paint_DrawPoint(UWORD Xpoint, UWORD Ypoint, UWORD Color,
                     DOT_PIXEL Dot_Pixel, DOT_STYLE Dot_Style)
{
 80036b2:	b580      	push	{r7, lr}
 80036b4:	b086      	sub	sp, #24
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	60f8      	str	r0, [r7, #12]
 80036ba:	4608      	mov	r0, r1
 80036bc:	4611      	mov	r1, r2
 80036be:	461a      	mov	r2, r3
 80036c0:	4603      	mov	r3, r0
 80036c2:	817b      	strh	r3, [r7, #10]
 80036c4:	460b      	mov	r3, r1
 80036c6:	813b      	strh	r3, [r7, #8]
 80036c8:	4613      	mov	r3, r2
 80036ca:	80fb      	strh	r3, [r7, #6]
    if (Xpoint > this->Width || Ypoint > this->Height) {
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	889b      	ldrh	r3, [r3, #4]
 80036d0:	897a      	ldrh	r2, [r7, #10]
 80036d2:	429a      	cmp	r2, r3
 80036d4:	f200 8083 	bhi.w	80037de <_ZN11FrameBuffer15Paint_DrawPointEttt9DOT_PIXEL9DOT_STYLE+0x12c>
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	88db      	ldrh	r3, [r3, #6]
 80036dc:	893a      	ldrh	r2, [r7, #8]
 80036de:	429a      	cmp	r2, r3
 80036e0:	d87d      	bhi.n	80037de <_ZN11FrameBuffer15Paint_DrawPointEttt9DOT_PIXEL9DOT_STYLE+0x12c>
//				printf("Ypoint = %d , this->Height = %d  \r\n ",Ypoint,this->Height);
        return;
    }

    int16_t XDir_Num , YDir_Num;
    if (Dot_Style == DOT_FILL_AROUND) {
 80036e2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d14a      	bne.n	8003780 <_ZN11FrameBuffer15Paint_DrawPointEttt9DOT_PIXEL9DOT_STYLE+0xce>
        for (XDir_Num = 0; XDir_Num < 2 * Dot_Pixel - 1; XDir_Num++) {
 80036ea:	2300      	movs	r3, #0
 80036ec:	82fb      	strh	r3, [r7, #22]
 80036ee:	e03e      	b.n	800376e <_ZN11FrameBuffer15Paint_DrawPointEttt9DOT_PIXEL9DOT_STYLE+0xbc>
            for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 80036f0:	2300      	movs	r3, #0
 80036f2:	82bb      	strh	r3, [r7, #20]
 80036f4:	e02d      	b.n	8003752 <_ZN11FrameBuffer15Paint_DrawPointEttt9DOT_PIXEL9DOT_STYLE+0xa0>
                if(Xpoint + XDir_Num - Dot_Pixel < 0 || Ypoint + YDir_Num - Dot_Pixel < 0)
 80036f6:	897a      	ldrh	r2, [r7, #10]
 80036f8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80036fc:	441a      	add	r2, r3
 80036fe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	2b00      	cmp	r3, #0
 8003706:	db2c      	blt.n	8003762 <_ZN11FrameBuffer15Paint_DrawPointEttt9DOT_PIXEL9DOT_STYLE+0xb0>
 8003708:	893a      	ldrh	r2, [r7, #8]
 800370a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800370e:	441a      	add	r2, r3
 8003710:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	2b00      	cmp	r3, #0
 8003718:	db23      	blt.n	8003762 <_ZN11FrameBuffer15Paint_DrawPointEttt9DOT_PIXEL9DOT_STYLE+0xb0>
                    break;
                // printf("x = %d, y = %d\r\n", Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel);
                Paint_SetPixel(Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel, Color);
 800371a:	8afa      	ldrh	r2, [r7, #22]
 800371c:	897b      	ldrh	r3, [r7, #10]
 800371e:	4413      	add	r3, r2
 8003720:	b29a      	uxth	r2, r3
 8003722:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003726:	b29b      	uxth	r3, r3
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	b299      	uxth	r1, r3
 800372c:	8aba      	ldrh	r2, [r7, #20]
 800372e:	893b      	ldrh	r3, [r7, #8]
 8003730:	4413      	add	r3, r2
 8003732:	b29a      	uxth	r2, r3
 8003734:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003738:	b29b      	uxth	r3, r3
 800373a:	1ad3      	subs	r3, r2, r3
 800373c:	b29a      	uxth	r2, r3
 800373e:	88fb      	ldrh	r3, [r7, #6]
 8003740:	68f8      	ldr	r0, [r7, #12]
 8003742:	f7ff fd7d 	bl	8003240 <_ZN11FrameBuffer14Paint_SetPixelEttt>
            for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 8003746:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800374a:	b29b      	uxth	r3, r3
 800374c:	3301      	adds	r3, #1
 800374e:	b29b      	uxth	r3, r3
 8003750:	82bb      	strh	r3, [r7, #20]
 8003752:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8003756:	f897 3020 	ldrb.w	r3, [r7, #32]
 800375a:	005b      	lsls	r3, r3, #1
 800375c:	3b01      	subs	r3, #1
 800375e:	429a      	cmp	r2, r3
 8003760:	dbc9      	blt.n	80036f6 <_ZN11FrameBuffer15Paint_DrawPointEttt9DOT_PIXEL9DOT_STYLE+0x44>
        for (XDir_Num = 0; XDir_Num < 2 * Dot_Pixel - 1; XDir_Num++) {
 8003762:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003766:	b29b      	uxth	r3, r3
 8003768:	3301      	adds	r3, #1
 800376a:	b29b      	uxth	r3, r3
 800376c:	82fb      	strh	r3, [r7, #22]
 800376e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003772:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003776:	005b      	lsls	r3, r3, #1
 8003778:	3b01      	subs	r3, #1
 800377a:	429a      	cmp	r2, r3
 800377c:	dbb8      	blt.n	80036f0 <_ZN11FrameBuffer15Paint_DrawPointEttt9DOT_PIXEL9DOT_STYLE+0x3e>
 800377e:	e02f      	b.n	80037e0 <_ZN11FrameBuffer15Paint_DrawPointEttt9DOT_PIXEL9DOT_STYLE+0x12e>
            }
        }
    } else {
        for (XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++) {
 8003780:	2300      	movs	r3, #0
 8003782:	82fb      	strh	r3, [r7, #22]
 8003784:	e024      	b.n	80037d0 <_ZN11FrameBuffer15Paint_DrawPointEttt9DOT_PIXEL9DOT_STYLE+0x11e>
            for (YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++) {
 8003786:	2300      	movs	r3, #0
 8003788:	82bb      	strh	r3, [r7, #20]
 800378a:	e015      	b.n	80037b8 <_ZN11FrameBuffer15Paint_DrawPointEttt9DOT_PIXEL9DOT_STYLE+0x106>
                Paint_SetPixel(Xpoint + XDir_Num - 1, Ypoint + YDir_Num - 1, Color);
 800378c:	8afa      	ldrh	r2, [r7, #22]
 800378e:	897b      	ldrh	r3, [r7, #10]
 8003790:	4413      	add	r3, r2
 8003792:	b29b      	uxth	r3, r3
 8003794:	3b01      	subs	r3, #1
 8003796:	b299      	uxth	r1, r3
 8003798:	8aba      	ldrh	r2, [r7, #20]
 800379a:	893b      	ldrh	r3, [r7, #8]
 800379c:	4413      	add	r3, r2
 800379e:	b29b      	uxth	r3, r3
 80037a0:	3b01      	subs	r3, #1
 80037a2:	b29a      	uxth	r2, r3
 80037a4:	88fb      	ldrh	r3, [r7, #6]
 80037a6:	68f8      	ldr	r0, [r7, #12]
 80037a8:	f7ff fd4a 	bl	8003240 <_ZN11FrameBuffer14Paint_SetPixelEttt>
            for (YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++) {
 80037ac:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80037b0:	b29b      	uxth	r3, r3
 80037b2:	3301      	adds	r3, #1
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	82bb      	strh	r3, [r7, #20]
 80037b8:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80037bc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80037c0:	429a      	cmp	r2, r3
 80037c2:	dbe3      	blt.n	800378c <_ZN11FrameBuffer15Paint_DrawPointEttt9DOT_PIXEL9DOT_STYLE+0xda>
        for (XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++) {
 80037c4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80037c8:	b29b      	uxth	r3, r3
 80037ca:	3301      	adds	r3, #1
 80037cc:	b29b      	uxth	r3, r3
 80037ce:	82fb      	strh	r3, [r7, #22]
 80037d0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80037d4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80037d8:	429a      	cmp	r2, r3
 80037da:	dbd4      	blt.n	8003786 <_ZN11FrameBuffer15Paint_DrawPointEttt9DOT_PIXEL9DOT_STYLE+0xd4>
 80037dc:	e000      	b.n	80037e0 <_ZN11FrameBuffer15Paint_DrawPointEttt9DOT_PIXEL9DOT_STYLE+0x12e>
        return;
 80037de:	bf00      	nop
            }
        }
    }
}
 80037e0:	3718      	adds	r7, #24
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
	...

080037e8 <_ZN11FrameBuffer14Paint_DrawLineEttttt9DOT_PIXEL10LINE_STYLE>:
    Line_width : Line width
    Line_Style: Solid and dotted lines
******************************************************************************/
void FrameBuffer::Paint_DrawLine(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend,
                    UWORD Color, DOT_PIXEL Line_width, LINE_STYLE Line_Style)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b08e      	sub	sp, #56	@ 0x38
 80037ec:	af02      	add	r7, sp, #8
 80037ee:	60f8      	str	r0, [r7, #12]
 80037f0:	4608      	mov	r0, r1
 80037f2:	4611      	mov	r1, r2
 80037f4:	461a      	mov	r2, r3
 80037f6:	4603      	mov	r3, r0
 80037f8:	817b      	strh	r3, [r7, #10]
 80037fa:	460b      	mov	r3, r1
 80037fc:	813b      	strh	r3, [r7, #8]
 80037fe:	4613      	mov	r3, r2
 8003800:	80fb      	strh	r3, [r7, #6]
    if (Xstart > this->Width || Ystart > this->Height ||
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	889b      	ldrh	r3, [r3, #4]
 8003806:	897a      	ldrh	r2, [r7, #10]
 8003808:	429a      	cmp	r2, r3
 800380a:	d80e      	bhi.n	800382a <_ZN11FrameBuffer14Paint_DrawLineEttttt9DOT_PIXEL10LINE_STYLE+0x42>
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	88db      	ldrh	r3, [r3, #6]
 8003810:	893a      	ldrh	r2, [r7, #8]
 8003812:	429a      	cmp	r2, r3
 8003814:	d809      	bhi.n	800382a <_ZN11FrameBuffer14Paint_DrawLineEttttt9DOT_PIXEL10LINE_STYLE+0x42>
        Xend > this->Width || Yend > this->Height) {
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	889b      	ldrh	r3, [r3, #4]
    if (Xstart > this->Width || Ystart > this->Height ||
 800381a:	88fa      	ldrh	r2, [r7, #6]
 800381c:	429a      	cmp	r2, r3
 800381e:	d804      	bhi.n	800382a <_ZN11FrameBuffer14Paint_DrawLineEttttt9DOT_PIXEL10LINE_STYLE+0x42>
        Xend > this->Width || Yend > this->Height) {
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	88db      	ldrh	r3, [r3, #6]
 8003824:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8003826:	429a      	cmp	r2, r3
 8003828:	d904      	bls.n	8003834 <_ZN11FrameBuffer14Paint_DrawLineEttttt9DOT_PIXEL10LINE_STYLE+0x4c>
        Debug("Paint_DrawLine Input exceeds the normal display range\r\n");
 800382a:	4946      	ldr	r1, [pc, #280]	@ (8003944 <_ZN11FrameBuffer14Paint_DrawLineEttttt9DOT_PIXEL10LINE_STYLE+0x15c>)
 800382c:	2004      	movs	r0, #4
 800382e:	f7fd fb0b 	bl	8000e48 <_Z12log_message2hPKcz>
        return;
 8003832:	e084      	b.n	800393e <_ZN11FrameBuffer14Paint_DrawLineEttttt9DOT_PIXEL10LINE_STYLE+0x156>
    }

    UWORD Xpoint = Xstart;
 8003834:	897b      	ldrh	r3, [r7, #10]
 8003836:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    UWORD Ypoint = Ystart;
 8003838:	893b      	ldrh	r3, [r7, #8]
 800383a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    int dx = (int)Xend - (int)Xstart >= 0 ? Xend - Xstart : Xstart - Xend;
 800383c:	88fa      	ldrh	r2, [r7, #6]
 800383e:	897b      	ldrh	r3, [r7, #10]
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	2b00      	cmp	r3, #0
 8003844:	bfb8      	it	lt
 8003846:	425b      	neglt	r3, r3
 8003848:	623b      	str	r3, [r7, #32]
    int dy = (int)Yend - (int)Ystart <= 0 ? Yend - Ystart : Ystart - Yend;
 800384a:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 800384c:	893b      	ldrh	r3, [r7, #8]
 800384e:	1ad3      	subs	r3, r2, r3
 8003850:	2b00      	cmp	r3, #0
 8003852:	bfb8      	it	lt
 8003854:	425b      	neglt	r3, r3
 8003856:	425b      	negs	r3, r3
 8003858:	61fb      	str	r3, [r7, #28]

    // Increment direction, 1 is positive, -1 is counter;
    int XAddway = Xstart < Xend ? 1 : -1;
 800385a:	897a      	ldrh	r2, [r7, #10]
 800385c:	88fb      	ldrh	r3, [r7, #6]
 800385e:	429a      	cmp	r2, r3
 8003860:	d201      	bcs.n	8003866 <_ZN11FrameBuffer14Paint_DrawLineEttttt9DOT_PIXEL10LINE_STYLE+0x7e>
 8003862:	2301      	movs	r3, #1
 8003864:	e001      	b.n	800386a <_ZN11FrameBuffer14Paint_DrawLineEttttt9DOT_PIXEL10LINE_STYLE+0x82>
 8003866:	f04f 33ff 	mov.w	r3, #4294967295
 800386a:	61bb      	str	r3, [r7, #24]
    int YAddway = Ystart < Yend ? 1 : -1;
 800386c:	893a      	ldrh	r2, [r7, #8]
 800386e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8003870:	429a      	cmp	r2, r3
 8003872:	d201      	bcs.n	8003878 <_ZN11FrameBuffer14Paint_DrawLineEttttt9DOT_PIXEL10LINE_STYLE+0x90>
 8003874:	2301      	movs	r3, #1
 8003876:	e001      	b.n	800387c <_ZN11FrameBuffer14Paint_DrawLineEttttt9DOT_PIXEL10LINE_STYLE+0x94>
 8003878:	f04f 33ff 	mov.w	r3, #4294967295
 800387c:	617b      	str	r3, [r7, #20]

    //Cumulative error
    int Esp = dx + dy;
 800387e:	6a3a      	ldr	r2, [r7, #32]
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	4413      	add	r3, r2
 8003884:	62bb      	str	r3, [r7, #40]	@ 0x28
    char Dotted_Len = 0;
 8003886:	2300      	movs	r3, #0
 8003888:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    for (;;) {
        Dotted_Len++;
 800388c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003890:	3301      	adds	r3, #1
 8003892:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        //Painted dotted line, 2 point is really virtual
        if (Line_Style == LINE_STYLE_DOTTED && Dotted_Len % 3 == 0) {
 8003896:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800389a:	2b01      	cmp	r3, #1
 800389c:	d11b      	bne.n	80038d6 <_ZN11FrameBuffer14Paint_DrawLineEttttt9DOT_PIXEL10LINE_STYLE+0xee>
 800389e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80038a2:	4b29      	ldr	r3, [pc, #164]	@ (8003948 <_ZN11FrameBuffer14Paint_DrawLineEttttt9DOT_PIXEL10LINE_STYLE+0x160>)
 80038a4:	fba3 1302 	umull	r1, r3, r3, r2
 80038a8:	0859      	lsrs	r1, r3, #1
 80038aa:	460b      	mov	r3, r1
 80038ac:	005b      	lsls	r3, r3, #1
 80038ae:	440b      	add	r3, r1
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d10e      	bne.n	80038d6 <_ZN11FrameBuffer14Paint_DrawLineEttttt9DOT_PIXEL10LINE_STYLE+0xee>
            //Debug("LINE_DOTTED\r\n");
            Paint_DrawPoint(Xpoint, Ypoint, IMAGE_BACKGROUND, Line_width, DOT_STYLE_DFT);
 80038b8:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 80038ba:	8df9      	ldrh	r1, [r7, #46]	@ 0x2e
 80038bc:	2301      	movs	r3, #1
 80038be:	9301      	str	r3, [sp, #4]
 80038c0:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80038c4:	9300      	str	r3, [sp, #0]
 80038c6:	23ff      	movs	r3, #255	@ 0xff
 80038c8:	68f8      	ldr	r0, [r7, #12]
 80038ca:	f7ff fef2 	bl	80036b2 <_ZN11FrameBuffer15Paint_DrawPointEttt9DOT_PIXEL9DOT_STYLE>
            Dotted_Len = 0;
 80038ce:	2300      	movs	r3, #0
 80038d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80038d4:	e00b      	b.n	80038ee <_ZN11FrameBuffer14Paint_DrawLineEttttt9DOT_PIXEL10LINE_STYLE+0x106>
        } else {
            Paint_DrawPoint(Xpoint, Ypoint, Color, Line_width, DOT_STYLE_DFT);
 80038d6:	8fb8      	ldrh	r0, [r7, #60]	@ 0x3c
 80038d8:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 80038da:	8df9      	ldrh	r1, [r7, #46]	@ 0x2e
 80038dc:	2301      	movs	r3, #1
 80038de:	9301      	str	r3, [sp, #4]
 80038e0:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80038e4:	9300      	str	r3, [sp, #0]
 80038e6:	4603      	mov	r3, r0
 80038e8:	68f8      	ldr	r0, [r7, #12]
 80038ea:	f7ff fee2 	bl	80036b2 <_ZN11FrameBuffer15Paint_DrawPointEttt9DOT_PIXEL9DOT_STYLE>
        }
        if (2 * Esp >= dy) {
 80038ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038f0:	005b      	lsls	r3, r3, #1
 80038f2:	69fa      	ldr	r2, [r7, #28]
 80038f4:	429a      	cmp	r2, r3
 80038f6:	dc0c      	bgt.n	8003912 <_ZN11FrameBuffer14Paint_DrawLineEttttt9DOT_PIXEL10LINE_STYLE+0x12a>
            if (Xpoint == Xend)
 80038f8:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80038fa:	88fb      	ldrh	r3, [r7, #6]
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d01b      	beq.n	8003938 <_ZN11FrameBuffer14Paint_DrawLineEttttt9DOT_PIXEL10LINE_STYLE+0x150>
                break;
            Esp += dy;
 8003900:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	4413      	add	r3, r2
 8003906:	62bb      	str	r3, [r7, #40]	@ 0x28
            Xpoint += XAddway;
 8003908:	69bb      	ldr	r3, [r7, #24]
 800390a:	b29a      	uxth	r2, r3
 800390c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800390e:	4413      	add	r3, r2
 8003910:	85fb      	strh	r3, [r7, #46]	@ 0x2e
        }
        if (2 * Esp <= dx) {
 8003912:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003914:	005b      	lsls	r3, r3, #1
 8003916:	6a3a      	ldr	r2, [r7, #32]
 8003918:	429a      	cmp	r2, r3
 800391a:	dbb7      	blt.n	800388c <_ZN11FrameBuffer14Paint_DrawLineEttttt9DOT_PIXEL10LINE_STYLE+0xa4>
            if (Ypoint == Yend)
 800391c:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800391e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8003920:	429a      	cmp	r2, r3
 8003922:	d00b      	beq.n	800393c <_ZN11FrameBuffer14Paint_DrawLineEttttt9DOT_PIXEL10LINE_STYLE+0x154>
                break;
            Esp += dx;
 8003924:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003926:	6a3b      	ldr	r3, [r7, #32]
 8003928:	4413      	add	r3, r2
 800392a:	62bb      	str	r3, [r7, #40]	@ 0x28
            Ypoint += YAddway;
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	b29a      	uxth	r2, r3
 8003930:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8003932:	4413      	add	r3, r2
 8003934:	85bb      	strh	r3, [r7, #44]	@ 0x2c
        Dotted_Len++;
 8003936:	e7a9      	b.n	800388c <_ZN11FrameBuffer14Paint_DrawLineEttttt9DOT_PIXEL10LINE_STYLE+0xa4>
                break;
 8003938:	bf00      	nop
 800393a:	e000      	b.n	800393e <_ZN11FrameBuffer14Paint_DrawLineEttttt9DOT_PIXEL10LINE_STYLE+0x156>
                break;
 800393c:	bf00      	nop
        }
    }
}
 800393e:	3730      	adds	r7, #48	@ 0x30
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}
 8003944:	0800f290 	.word	0x0800f290
 8003948:	aaaaaaab 	.word	0xaaaaaaab

0800394c <_ZN11FrameBuffer19Paint_DrawRectangleEttttt9DOT_PIXEL9DRAW_FILL>:
    Line_width: Line width
    Draw_Fill : Whether to fill the inside of the rectangle
******************************************************************************/
void FrameBuffer::Paint_DrawRectangle(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend,
                         UWORD Color, DOT_PIXEL Line_width, DRAW_FILL Draw_Fill)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b08a      	sub	sp, #40	@ 0x28
 8003950:	af04      	add	r7, sp, #16
 8003952:	60f8      	str	r0, [r7, #12]
 8003954:	4608      	mov	r0, r1
 8003956:	4611      	mov	r1, r2
 8003958:	461a      	mov	r2, r3
 800395a:	4603      	mov	r3, r0
 800395c:	817b      	strh	r3, [r7, #10]
 800395e:	460b      	mov	r3, r1
 8003960:	813b      	strh	r3, [r7, #8]
 8003962:	4613      	mov	r3, r2
 8003964:	80fb      	strh	r3, [r7, #6]
    if (Xstart > this->Width || Ystart > this->Height ||
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	889b      	ldrh	r3, [r3, #4]
 800396a:	897a      	ldrh	r2, [r7, #10]
 800396c:	429a      	cmp	r2, r3
 800396e:	d80e      	bhi.n	800398e <_ZN11FrameBuffer19Paint_DrawRectangleEttttt9DOT_PIXEL9DRAW_FILL+0x42>
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	88db      	ldrh	r3, [r3, #6]
 8003974:	893a      	ldrh	r2, [r7, #8]
 8003976:	429a      	cmp	r2, r3
 8003978:	d809      	bhi.n	800398e <_ZN11FrameBuffer19Paint_DrawRectangleEttttt9DOT_PIXEL9DRAW_FILL+0x42>
        Xend > this->Width || Yend > this->Height) {
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	889b      	ldrh	r3, [r3, #4]
    if (Xstart > this->Width || Ystart > this->Height ||
 800397e:	88fa      	ldrh	r2, [r7, #6]
 8003980:	429a      	cmp	r2, r3
 8003982:	d804      	bhi.n	800398e <_ZN11FrameBuffer19Paint_DrawRectangleEttttt9DOT_PIXEL9DRAW_FILL+0x42>
        Xend > this->Width || Yend > this->Height) {
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	88db      	ldrh	r3, [r3, #6]
 8003988:	8c3a      	ldrh	r2, [r7, #32]
 800398a:	429a      	cmp	r2, r3
 800398c:	d904      	bls.n	8003998 <_ZN11FrameBuffer19Paint_DrawRectangleEttttt9DOT_PIXEL9DRAW_FILL+0x4c>
        Debug("Input exceeds the normal display range\r\n");
 800398e:	4933      	ldr	r1, [pc, #204]	@ (8003a5c <_ZN11FrameBuffer19Paint_DrawRectangleEttttt9DOT_PIXEL9DRAW_FILL+0x110>)
 8003990:	2004      	movs	r0, #4
 8003992:	f7fd fa59 	bl	8000e48 <_Z12log_message2hPKcz>
        return;
 8003996:	e05e      	b.n	8003a56 <_ZN11FrameBuffer19Paint_DrawRectangleEttttt9DOT_PIXEL9DRAW_FILL+0x10a>
    }

    if (Draw_Fill) {
 8003998:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800399c:	2b00      	cmp	r3, #0
 800399e:	d01a      	beq.n	80039d6 <_ZN11FrameBuffer19Paint_DrawRectangleEttttt9DOT_PIXEL9DRAW_FILL+0x8a>
        UWORD Ypoint;
        for(Ypoint = Ystart; Ypoint < Yend; Ypoint++) {
 80039a0:	893b      	ldrh	r3, [r7, #8]
 80039a2:	82fb      	strh	r3, [r7, #22]
 80039a4:	e012      	b.n	80039cc <_ZN11FrameBuffer19Paint_DrawRectangleEttttt9DOT_PIXEL9DRAW_FILL+0x80>
            Paint_DrawLine(Xstart, Ypoint, Xend, Ypoint, Color , Line_width, LINE_STYLE_SOLID);
 80039a6:	88f8      	ldrh	r0, [r7, #6]
 80039a8:	8afa      	ldrh	r2, [r7, #22]
 80039aa:	8979      	ldrh	r1, [r7, #10]
 80039ac:	2300      	movs	r3, #0
 80039ae:	9303      	str	r3, [sp, #12]
 80039b0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80039b4:	9302      	str	r3, [sp, #8]
 80039b6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80039b8:	9301      	str	r3, [sp, #4]
 80039ba:	8afb      	ldrh	r3, [r7, #22]
 80039bc:	9300      	str	r3, [sp, #0]
 80039be:	4603      	mov	r3, r0
 80039c0:	68f8      	ldr	r0, [r7, #12]
 80039c2:	f7ff ff11 	bl	80037e8 <_ZN11FrameBuffer14Paint_DrawLineEttttt9DOT_PIXEL10LINE_STYLE>
        for(Ypoint = Ystart; Ypoint < Yend; Ypoint++) {
 80039c6:	8afb      	ldrh	r3, [r7, #22]
 80039c8:	3301      	adds	r3, #1
 80039ca:	82fb      	strh	r3, [r7, #22]
 80039cc:	8afa      	ldrh	r2, [r7, #22]
 80039ce:	8c3b      	ldrh	r3, [r7, #32]
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d3e8      	bcc.n	80039a6 <_ZN11FrameBuffer19Paint_DrawRectangleEttttt9DOT_PIXEL9DRAW_FILL+0x5a>
 80039d4:	e03f      	b.n	8003a56 <_ZN11FrameBuffer19Paint_DrawRectangleEttttt9DOT_PIXEL9DRAW_FILL+0x10a>
        }
    } else {
        Paint_DrawLine(Xstart, Ystart, Xend, Ystart, Color, Line_width, LINE_STYLE_SOLID);
 80039d6:	88f8      	ldrh	r0, [r7, #6]
 80039d8:	893a      	ldrh	r2, [r7, #8]
 80039da:	8979      	ldrh	r1, [r7, #10]
 80039dc:	2300      	movs	r3, #0
 80039de:	9303      	str	r3, [sp, #12]
 80039e0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80039e4:	9302      	str	r3, [sp, #8]
 80039e6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80039e8:	9301      	str	r3, [sp, #4]
 80039ea:	893b      	ldrh	r3, [r7, #8]
 80039ec:	9300      	str	r3, [sp, #0]
 80039ee:	4603      	mov	r3, r0
 80039f0:	68f8      	ldr	r0, [r7, #12]
 80039f2:	f7ff fef9 	bl	80037e8 <_ZN11FrameBuffer14Paint_DrawLineEttttt9DOT_PIXEL10LINE_STYLE>
        Paint_DrawLine(Xstart, Ystart, Xstart, Yend, Color, Line_width, LINE_STYLE_SOLID);
 80039f6:	8978      	ldrh	r0, [r7, #10]
 80039f8:	893a      	ldrh	r2, [r7, #8]
 80039fa:	8979      	ldrh	r1, [r7, #10]
 80039fc:	2300      	movs	r3, #0
 80039fe:	9303      	str	r3, [sp, #12]
 8003a00:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003a04:	9302      	str	r3, [sp, #8]
 8003a06:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003a08:	9301      	str	r3, [sp, #4]
 8003a0a:	8c3b      	ldrh	r3, [r7, #32]
 8003a0c:	9300      	str	r3, [sp, #0]
 8003a0e:	4603      	mov	r3, r0
 8003a10:	68f8      	ldr	r0, [r7, #12]
 8003a12:	f7ff fee9 	bl	80037e8 <_ZN11FrameBuffer14Paint_DrawLineEttttt9DOT_PIXEL10LINE_STYLE>
        Paint_DrawLine(Xend, Yend, Xend, Ystart, Color, Line_width, LINE_STYLE_SOLID);
 8003a16:	88f8      	ldrh	r0, [r7, #6]
 8003a18:	8c3a      	ldrh	r2, [r7, #32]
 8003a1a:	88f9      	ldrh	r1, [r7, #6]
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	9303      	str	r3, [sp, #12]
 8003a20:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003a24:	9302      	str	r3, [sp, #8]
 8003a26:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003a28:	9301      	str	r3, [sp, #4]
 8003a2a:	893b      	ldrh	r3, [r7, #8]
 8003a2c:	9300      	str	r3, [sp, #0]
 8003a2e:	4603      	mov	r3, r0
 8003a30:	68f8      	ldr	r0, [r7, #12]
 8003a32:	f7ff fed9 	bl	80037e8 <_ZN11FrameBuffer14Paint_DrawLineEttttt9DOT_PIXEL10LINE_STYLE>
        Paint_DrawLine(Xend, Yend, Xstart, Yend, Color, Line_width, LINE_STYLE_SOLID);
 8003a36:	8978      	ldrh	r0, [r7, #10]
 8003a38:	8c3a      	ldrh	r2, [r7, #32]
 8003a3a:	88f9      	ldrh	r1, [r7, #6]
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	9303      	str	r3, [sp, #12]
 8003a40:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003a44:	9302      	str	r3, [sp, #8]
 8003a46:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003a48:	9301      	str	r3, [sp, #4]
 8003a4a:	8c3b      	ldrh	r3, [r7, #32]
 8003a4c:	9300      	str	r3, [sp, #0]
 8003a4e:	4603      	mov	r3, r0
 8003a50:	68f8      	ldr	r0, [r7, #12]
 8003a52:	f7ff fec9 	bl	80037e8 <_ZN11FrameBuffer14Paint_DrawLineEttttt9DOT_PIXEL10LINE_STYLE>
    }
}
 8003a56:	3718      	adds	r7, #24
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	0800f2d4 	.word	0x0800f2d4

08003a60 <_ZN11FrameBuffer14Paint_DrawCharEttcP6_tFonttt>:
    Color_Foreground : Select the foreground color
    Color_Background : Select the background color
******************************************************************************/
void FrameBuffer::Paint_DrawChar(UWORD Xpoint, UWORD Ypoint, const char Acsii_Char,
                    sFONT* Font, UWORD Color_Foreground, UWORD Color_Background)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b088      	sub	sp, #32
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	60f8      	str	r0, [r7, #12]
 8003a68:	4608      	mov	r0, r1
 8003a6a:	4611      	mov	r1, r2
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	4603      	mov	r3, r0
 8003a70:	817b      	strh	r3, [r7, #10]
 8003a72:	460b      	mov	r3, r1
 8003a74:	813b      	strh	r3, [r7, #8]
 8003a76:	4613      	mov	r3, r2
 8003a78:	71fb      	strb	r3, [r7, #7]
    UWORD Page, Column;

    if (Xpoint > this->Width || Ypoint > this->Height) {
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	889b      	ldrh	r3, [r3, #4]
 8003a7e:	897a      	ldrh	r2, [r7, #10]
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d804      	bhi.n	8003a8e <_ZN11FrameBuffer14Paint_DrawCharEttcP6_tFonttt+0x2e>
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	88db      	ldrh	r3, [r3, #6]
 8003a88:	893a      	ldrh	r2, [r7, #8]
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d904      	bls.n	8003a98 <_ZN11FrameBuffer14Paint_DrawCharEttcP6_tFonttt+0x38>
        Debug("Paint_DrawChar Input exceeds the normal display range\r\n");
 8003a8e:	4946      	ldr	r1, [pc, #280]	@ (8003ba8 <_ZN11FrameBuffer14Paint_DrawCharEttcP6_tFonttt+0x148>)
 8003a90:	2004      	movs	r0, #4
 8003a92:	f7fd f9d9 	bl	8000e48 <_Z12log_message2hPKcz>
        return;
 8003a96:	e084      	b.n	8003ba2 <_ZN11FrameBuffer14Paint_DrawCharEttcP6_tFonttt+0x142>
    }

    uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 8003a98:	79fb      	ldrb	r3, [r7, #7]
 8003a9a:	3b20      	subs	r3, #32
 8003a9c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003a9e:	88d2      	ldrh	r2, [r2, #6]
 8003aa0:	fb02 f303 	mul.w	r3, r2, r3
 8003aa4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003aa6:	8892      	ldrh	r2, [r2, #4]
 8003aa8:	08d2      	lsrs	r2, r2, #3
 8003aaa:	b292      	uxth	r2, r2
 8003aac:	4611      	mov	r1, r2
 8003aae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003ab0:	8892      	ldrh	r2, [r2, #4]
 8003ab2:	f002 0207 	and.w	r2, r2, #7
 8003ab6:	2a00      	cmp	r2, #0
 8003ab8:	d001      	beq.n	8003abe <_ZN11FrameBuffer14Paint_DrawCharEttcP6_tFonttt+0x5e>
 8003aba:	2201      	movs	r2, #1
 8003abc:	e000      	b.n	8003ac0 <_ZN11FrameBuffer14Paint_DrawCharEttcP6_tFonttt+0x60>
 8003abe:	2200      	movs	r2, #0
 8003ac0:	440a      	add	r2, r1
 8003ac2:	fb02 f303 	mul.w	r3, r2, r3
 8003ac6:	617b      	str	r3, [r7, #20]
    const unsigned char *ptr = &Font->table[Char_Offset];
 8003ac8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	4413      	add	r3, r2
 8003ad0:	61bb      	str	r3, [r7, #24]

    for (Page = 0; Page < Font->Height; Page ++ ) {
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	83fb      	strh	r3, [r7, #30]
 8003ad6:	e05f      	b.n	8003b98 <_ZN11FrameBuffer14Paint_DrawCharEttcP6_tFonttt+0x138>
        for (Column = 0; Column < Font->Width; Column ++ ) {
 8003ad8:	2300      	movs	r3, #0
 8003ada:	83bb      	strh	r3, [r7, #28]
 8003adc:	e04b      	b.n	8003b76 <_ZN11FrameBuffer14Paint_DrawCharEttcP6_tFonttt+0x116>

            //To determine whether the font background color and screen background color is consistent
            if (FONT_BACKGROUND == Color_Background) { //this process is to speed up the scan
 8003ade:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8003ae0:	2bff      	cmp	r3, #255	@ 0xff
 8003ae2:	d118      	bne.n	8003b16 <_ZN11FrameBuffer14Paint_DrawCharEttcP6_tFonttt+0xb6>
                if (*ptr & (0x80 >> (Column % 8)))
 8003ae4:	69bb      	ldr	r3, [r7, #24]
 8003ae6:	781b      	ldrb	r3, [r3, #0]
 8003ae8:	4619      	mov	r1, r3
 8003aea:	8bbb      	ldrh	r3, [r7, #28]
 8003aec:	f003 0307 	and.w	r3, r3, #7
 8003af0:	2280      	movs	r2, #128	@ 0x80
 8003af2:	fa42 f303 	asr.w	r3, r2, r3
 8003af6:	400b      	ands	r3, r1
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d031      	beq.n	8003b60 <_ZN11FrameBuffer14Paint_DrawCharEttcP6_tFonttt+0x100>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 8003afc:	897a      	ldrh	r2, [r7, #10]
 8003afe:	8bbb      	ldrh	r3, [r7, #28]
 8003b00:	4413      	add	r3, r2
 8003b02:	b299      	uxth	r1, r3
 8003b04:	893a      	ldrh	r2, [r7, #8]
 8003b06:	8bfb      	ldrh	r3, [r7, #30]
 8003b08:	4413      	add	r3, r2
 8003b0a:	b29a      	uxth	r2, r3
 8003b0c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8003b0e:	68f8      	ldr	r0, [r7, #12]
 8003b10:	f7ff fb96 	bl	8003240 <_ZN11FrameBuffer14Paint_SetPixelEttt>
 8003b14:	e024      	b.n	8003b60 <_ZN11FrameBuffer14Paint_DrawCharEttcP6_tFonttt+0x100>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
            } else {
                if (*ptr & (0x80 >> (Column % 8))) {
 8003b16:	69bb      	ldr	r3, [r7, #24]
 8003b18:	781b      	ldrb	r3, [r3, #0]
 8003b1a:	4619      	mov	r1, r3
 8003b1c:	8bbb      	ldrh	r3, [r7, #28]
 8003b1e:	f003 0307 	and.w	r3, r3, #7
 8003b22:	2280      	movs	r2, #128	@ 0x80
 8003b24:	fa42 f303 	asr.w	r3, r2, r3
 8003b28:	400b      	ands	r3, r1
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d00c      	beq.n	8003b48 <_ZN11FrameBuffer14Paint_DrawCharEttcP6_tFonttt+0xe8>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 8003b2e:	897a      	ldrh	r2, [r7, #10]
 8003b30:	8bbb      	ldrh	r3, [r7, #28]
 8003b32:	4413      	add	r3, r2
 8003b34:	b299      	uxth	r1, r3
 8003b36:	893a      	ldrh	r2, [r7, #8]
 8003b38:	8bfb      	ldrh	r3, [r7, #30]
 8003b3a:	4413      	add	r3, r2
 8003b3c:	b29a      	uxth	r2, r3
 8003b3e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8003b40:	68f8      	ldr	r0, [r7, #12]
 8003b42:	f7ff fb7d 	bl	8003240 <_ZN11FrameBuffer14Paint_SetPixelEttt>
 8003b46:	e00b      	b.n	8003b60 <_ZN11FrameBuffer14Paint_DrawCharEttcP6_tFonttt+0x100>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                } else {
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Background);
 8003b48:	897a      	ldrh	r2, [r7, #10]
 8003b4a:	8bbb      	ldrh	r3, [r7, #28]
 8003b4c:	4413      	add	r3, r2
 8003b4e:	b299      	uxth	r1, r3
 8003b50:	893a      	ldrh	r2, [r7, #8]
 8003b52:	8bfb      	ldrh	r3, [r7, #30]
 8003b54:	4413      	add	r3, r2
 8003b56:	b29a      	uxth	r2, r3
 8003b58:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8003b5a:	68f8      	ldr	r0, [r7, #12]
 8003b5c:	f7ff fb70 	bl	8003240 <_ZN11FrameBuffer14Paint_SetPixelEttt>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                }
            }
            //One pixel is 8 bits
            if (Column % 8 == 7)
 8003b60:	8bbb      	ldrh	r3, [r7, #28]
 8003b62:	f003 0307 	and.w	r3, r3, #7
 8003b66:	2b07      	cmp	r3, #7
 8003b68:	d102      	bne.n	8003b70 <_ZN11FrameBuffer14Paint_DrawCharEttcP6_tFonttt+0x110>
                ptr++;
 8003b6a:	69bb      	ldr	r3, [r7, #24]
 8003b6c:	3301      	adds	r3, #1
 8003b6e:	61bb      	str	r3, [r7, #24]
        for (Column = 0; Column < Font->Width; Column ++ ) {
 8003b70:	8bbb      	ldrh	r3, [r7, #28]
 8003b72:	3301      	adds	r3, #1
 8003b74:	83bb      	strh	r3, [r7, #28]
 8003b76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b78:	889b      	ldrh	r3, [r3, #4]
 8003b7a:	8bba      	ldrh	r2, [r7, #28]
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d3ae      	bcc.n	8003ade <_ZN11FrameBuffer14Paint_DrawCharEttcP6_tFonttt+0x7e>
        }// Write a line
        if (Font->Width % 8 != 0)
 8003b80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b82:	889b      	ldrh	r3, [r3, #4]
 8003b84:	f003 0307 	and.w	r3, r3, #7
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d002      	beq.n	8003b92 <_ZN11FrameBuffer14Paint_DrawCharEttcP6_tFonttt+0x132>
            ptr++;
 8003b8c:	69bb      	ldr	r3, [r7, #24]
 8003b8e:	3301      	adds	r3, #1
 8003b90:	61bb      	str	r3, [r7, #24]
    for (Page = 0; Page < Font->Height; Page ++ ) {
 8003b92:	8bfb      	ldrh	r3, [r7, #30]
 8003b94:	3301      	adds	r3, #1
 8003b96:	83fb      	strh	r3, [r7, #30]
 8003b98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b9a:	88db      	ldrh	r3, [r3, #6]
 8003b9c:	8bfa      	ldrh	r2, [r7, #30]
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d39a      	bcc.n	8003ad8 <_ZN11FrameBuffer14Paint_DrawCharEttcP6_tFonttt+0x78>
    }// Write all
}
 8003ba2:	3720      	adds	r7, #32
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}
 8003ba8:	0800f34c 	.word	0x0800f34c

08003bac <_ZN11FrameBuffer19Paint_DrawString_ENEttPKcP6_tFonttt>:
    Color_Foreground : Select the foreground color
    Color_Background : Select the background color
******************************************************************************/
void FrameBuffer::Paint_DrawString_EN(UWORD Xstart, UWORD Ystart, const char * pString,
                         sFONT* Font, UWORD Color_Foreground, UWORD Color_Background)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b08a      	sub	sp, #40	@ 0x28
 8003bb0:	af04      	add	r7, sp, #16
 8003bb2:	60f8      	str	r0, [r7, #12]
 8003bb4:	607b      	str	r3, [r7, #4]
 8003bb6:	460b      	mov	r3, r1
 8003bb8:	817b      	strh	r3, [r7, #10]
 8003bba:	4613      	mov	r3, r2
 8003bbc:	813b      	strh	r3, [r7, #8]
    UWORD Xpoint = Xstart;
 8003bbe:	897b      	ldrh	r3, [r7, #10]
 8003bc0:	82fb      	strh	r3, [r7, #22]
    UWORD Ypoint = Ystart;
 8003bc2:	893b      	ldrh	r3, [r7, #8]
 8003bc4:	82bb      	strh	r3, [r7, #20]

    if (Xstart > this->Width || Ystart > this->Height) {
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	889b      	ldrh	r3, [r3, #4]
 8003bca:	897a      	ldrh	r2, [r7, #10]
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d804      	bhi.n	8003bda <_ZN11FrameBuffer19Paint_DrawString_ENEttPKcP6_tFonttt+0x2e>
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	88db      	ldrh	r3, [r3, #6]
 8003bd4:	893a      	ldrh	r2, [r7, #8]
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d935      	bls.n	8003c46 <_ZN11FrameBuffer19Paint_DrawString_ENEttPKcP6_tFonttt+0x9a>
        Debug("Paint_DrawString_EN Input exceeds the normal display range\r\n");
 8003bda:	491e      	ldr	r1, [pc, #120]	@ (8003c54 <_ZN11FrameBuffer19Paint_DrawString_ENEttPKcP6_tFonttt+0xa8>)
 8003bdc:	2004      	movs	r0, #4
 8003bde:	f7fd f933 	bl	8000e48 <_Z12log_message2hPKcz>
        return;
 8003be2:	e034      	b.n	8003c4e <_ZN11FrameBuffer19Paint_DrawString_ENEttPKcP6_tFonttt+0xa2>
    }

    while (* pString != '\0') {
        //if X direction filled , reposition to(Xstart,Ypoint),Ypoint is Y direction plus the Height of the character
        if ((Xpoint + Font->Width ) > this->Width ) {
 8003be4:	8afb      	ldrh	r3, [r7, #22]
 8003be6:	6a3a      	ldr	r2, [r7, #32]
 8003be8:	8892      	ldrh	r2, [r2, #4]
 8003bea:	4413      	add	r3, r2
 8003bec:	68fa      	ldr	r2, [r7, #12]
 8003bee:	8892      	ldrh	r2, [r2, #4]
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	dd06      	ble.n	8003c02 <_ZN11FrameBuffer19Paint_DrawString_ENEttPKcP6_tFonttt+0x56>
            Xpoint = Xstart;
 8003bf4:	897b      	ldrh	r3, [r7, #10]
 8003bf6:	82fb      	strh	r3, [r7, #22]
            Ypoint += Font->Height;
 8003bf8:	6a3b      	ldr	r3, [r7, #32]
 8003bfa:	88da      	ldrh	r2, [r3, #6]
 8003bfc:	8abb      	ldrh	r3, [r7, #20]
 8003bfe:	4413      	add	r3, r2
 8003c00:	82bb      	strh	r3, [r7, #20]
        }

        // If the Y direction is full, reposition to(Xstart, Ystart)
        if ((Ypoint  + Font->Height ) > this->Height ) {
 8003c02:	8abb      	ldrh	r3, [r7, #20]
 8003c04:	6a3a      	ldr	r2, [r7, #32]
 8003c06:	88d2      	ldrh	r2, [r2, #6]
 8003c08:	4413      	add	r3, r2
 8003c0a:	68fa      	ldr	r2, [r7, #12]
 8003c0c:	88d2      	ldrh	r2, [r2, #6]
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	dd03      	ble.n	8003c1a <_ZN11FrameBuffer19Paint_DrawString_ENEttPKcP6_tFonttt+0x6e>
            Xpoint = Xstart;
 8003c12:	897b      	ldrh	r3, [r7, #10]
 8003c14:	82fb      	strh	r3, [r7, #22]
            Ypoint = Ystart;
 8003c16:	893b      	ldrh	r3, [r7, #8]
 8003c18:	82bb      	strh	r3, [r7, #20]
        }
        Paint_DrawChar(Xpoint, Ypoint, * pString, Font, Color_Background, Color_Foreground);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	7818      	ldrb	r0, [r3, #0]
 8003c1e:	8aba      	ldrh	r2, [r7, #20]
 8003c20:	8af9      	ldrh	r1, [r7, #22]
 8003c22:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003c24:	9302      	str	r3, [sp, #8]
 8003c26:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003c28:	9301      	str	r3, [sp, #4]
 8003c2a:	6a3b      	ldr	r3, [r7, #32]
 8003c2c:	9300      	str	r3, [sp, #0]
 8003c2e:	4603      	mov	r3, r0
 8003c30:	68f8      	ldr	r0, [r7, #12]
 8003c32:	f7ff ff15 	bl	8003a60 <_ZN11FrameBuffer14Paint_DrawCharEttcP6_tFonttt>

        //The next character of the address
        pString ++;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	3301      	adds	r3, #1
 8003c3a:	607b      	str	r3, [r7, #4]

        //The next word of the abscissa increases the font of the broadband
        Xpoint += Font->Width;
 8003c3c:	6a3b      	ldr	r3, [r7, #32]
 8003c3e:	889a      	ldrh	r2, [r3, #4]
 8003c40:	8afb      	ldrh	r3, [r7, #22]
 8003c42:	4413      	add	r3, r2
 8003c44:	82fb      	strh	r3, [r7, #22]
    while (* pString != '\0') {
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	781b      	ldrb	r3, [r3, #0]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d1ca      	bne.n	8003be4 <_ZN11FrameBuffer19Paint_DrawString_ENEttPKcP6_tFonttt+0x38>
    }
}
 8003c4e:	3718      	adds	r7, #24
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}
 8003c54:	0800f390 	.word	0x0800f390

08003c58 <_ZN11FrameBuffer14Paint_DrawTimeEttP10PAINT_TIMEP6_tFonttt>:
    Color_Foreground : Select the foreground color
    Color_Background : Select the background color
******************************************************************************/
void FrameBuffer::Paint_DrawTime(UWORD Xstart, UWORD Ystart, PAINT_TIME *pTime, sFONT* Font,
                    UWORD Color_Foreground, UWORD Color_Background)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b08c      	sub	sp, #48	@ 0x30
 8003c5c:	af04      	add	r7, sp, #16
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	607b      	str	r3, [r7, #4]
 8003c62:	460b      	mov	r3, r1
 8003c64:	817b      	strh	r3, [r7, #10]
 8003c66:	4613      	mov	r3, r2
 8003c68:	813b      	strh	r3, [r7, #8]
    uint8_t value[10] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'};
 8003c6a:	4a92      	ldr	r2, [pc, #584]	@ (8003eb4 <_ZN11FrameBuffer14Paint_DrawTimeEttP10PAINT_TIMEP6_tFonttt+0x25c>)
 8003c6c:	f107 0310 	add.w	r3, r7, #16
 8003c70:	ca07      	ldmia	r2, {r0, r1, r2}
 8003c72:	c303      	stmia	r3!, {r0, r1}
 8003c74:	801a      	strh	r2, [r3, #0]
    LOG_WARN("time seconds %d\r\n/r/n",pTime->Sec);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	799b      	ldrb	r3, [r3, #6]
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	498e      	ldr	r1, [pc, #568]	@ (8003eb8 <_ZN11FrameBuffer14Paint_DrawTimeEttP10PAINT_TIMEP6_tFonttt+0x260>)
 8003c7e:	2002      	movs	r0, #2
 8003c80:	f7fd f8e2 	bl	8000e48 <_Z12log_message2hPKcz>
    UWORD Dx = Font->Width;
 8003c84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c86:	889b      	ldrh	r3, [r3, #4]
 8003c88:	83bb      	strh	r3, [r7, #28]

    //Write data into the cache
    Paint_DrawChar(Xstart                           , Ystart, value[pTime->Hour / 10], Font, Color_Background, Color_Foreground);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	791b      	ldrb	r3, [r3, #4]
 8003c8e:	4a8b      	ldr	r2, [pc, #556]	@ (8003ebc <_ZN11FrameBuffer14Paint_DrawTimeEttP10PAINT_TIMEP6_tFonttt+0x264>)
 8003c90:	fba2 2303 	umull	r2, r3, r2, r3
 8003c94:	08db      	lsrs	r3, r3, #3
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	3320      	adds	r3, #32
 8003c9a:	443b      	add	r3, r7
 8003c9c:	f813 0c10 	ldrb.w	r0, [r3, #-16]
 8003ca0:	893a      	ldrh	r2, [r7, #8]
 8003ca2:	8979      	ldrh	r1, [r7, #10]
 8003ca4:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8003ca6:	9302      	str	r3, [sp, #8]
 8003ca8:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8003caa:	9301      	str	r3, [sp, #4]
 8003cac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cae:	9300      	str	r3, [sp, #0]
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	68f8      	ldr	r0, [r7, #12]
 8003cb4:	f7ff fed4 	bl	8003a60 <_ZN11FrameBuffer14Paint_DrawCharEttcP6_tFonttt>
    Paint_DrawChar(Xstart + Dx                      , Ystart, value[pTime->Hour % 10], Font, Color_Background, Color_Foreground);
 8003cb8:	897a      	ldrh	r2, [r7, #10]
 8003cba:	8bbb      	ldrh	r3, [r7, #28]
 8003cbc:	4413      	add	r3, r2
 8003cbe:	b298      	uxth	r0, r3
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	791a      	ldrb	r2, [r3, #4]
 8003cc4:	4b7d      	ldr	r3, [pc, #500]	@ (8003ebc <_ZN11FrameBuffer14Paint_DrawTimeEttP10PAINT_TIMEP6_tFonttt+0x264>)
 8003cc6:	fba3 1302 	umull	r1, r3, r3, r2
 8003cca:	08d9      	lsrs	r1, r3, #3
 8003ccc:	460b      	mov	r3, r1
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	440b      	add	r3, r1
 8003cd2:	005b      	lsls	r3, r3, #1
 8003cd4:	1ad3      	subs	r3, r2, r3
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	3320      	adds	r3, #32
 8003cda:	443b      	add	r3, r7
 8003cdc:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 8003ce0:	893a      	ldrh	r2, [r7, #8]
 8003ce2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8003ce4:	9302      	str	r3, [sp, #8]
 8003ce6:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8003ce8:	9301      	str	r3, [sp, #4]
 8003cea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cec:	9300      	str	r3, [sp, #0]
 8003cee:	460b      	mov	r3, r1
 8003cf0:	4601      	mov	r1, r0
 8003cf2:	68f8      	ldr	r0, [r7, #12]
 8003cf4:	f7ff feb4 	bl	8003a60 <_ZN11FrameBuffer14Paint_DrawCharEttcP6_tFonttt>
    Paint_DrawChar(Xstart + Dx  + Dx / 4 + Dx / 2   , Ystart, ':'                    , Font, Color_Background, Color_Foreground);
 8003cf8:	897a      	ldrh	r2, [r7, #10]
 8003cfa:	8bbb      	ldrh	r3, [r7, #28]
 8003cfc:	4413      	add	r3, r2
 8003cfe:	b29a      	uxth	r2, r3
 8003d00:	8bbb      	ldrh	r3, [r7, #28]
 8003d02:	089b      	lsrs	r3, r3, #2
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	4413      	add	r3, r2
 8003d08:	b29a      	uxth	r2, r3
 8003d0a:	8bbb      	ldrh	r3, [r7, #28]
 8003d0c:	085b      	lsrs	r3, r3, #1
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	4413      	add	r3, r2
 8003d12:	b299      	uxth	r1, r3
 8003d14:	893a      	ldrh	r2, [r7, #8]
 8003d16:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8003d18:	9302      	str	r3, [sp, #8]
 8003d1a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8003d1c:	9301      	str	r3, [sp, #4]
 8003d1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d20:	9300      	str	r3, [sp, #0]
 8003d22:	233a      	movs	r3, #58	@ 0x3a
 8003d24:	68f8      	ldr	r0, [r7, #12]
 8003d26:	f7ff fe9b 	bl	8003a60 <_ZN11FrameBuffer14Paint_DrawCharEttcP6_tFonttt>
    Paint_DrawChar(Xstart + Dx * 2 + Dx / 2         , Ystart, value[pTime->Min / 10] , Font, Color_Background, Color_Foreground);
 8003d2a:	8bbb      	ldrh	r3, [r7, #28]
 8003d2c:	005b      	lsls	r3, r3, #1
 8003d2e:	b29a      	uxth	r2, r3
 8003d30:	897b      	ldrh	r3, [r7, #10]
 8003d32:	4413      	add	r3, r2
 8003d34:	b29a      	uxth	r2, r3
 8003d36:	8bbb      	ldrh	r3, [r7, #28]
 8003d38:	085b      	lsrs	r3, r3, #1
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	4413      	add	r3, r2
 8003d3e:	b299      	uxth	r1, r3
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	795b      	ldrb	r3, [r3, #5]
 8003d44:	4a5d      	ldr	r2, [pc, #372]	@ (8003ebc <_ZN11FrameBuffer14Paint_DrawTimeEttP10PAINT_TIMEP6_tFonttt+0x264>)
 8003d46:	fba2 2303 	umull	r2, r3, r2, r3
 8003d4a:	08db      	lsrs	r3, r3, #3
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	3320      	adds	r3, #32
 8003d50:	443b      	add	r3, r7
 8003d52:	f813 0c10 	ldrb.w	r0, [r3, #-16]
 8003d56:	893a      	ldrh	r2, [r7, #8]
 8003d58:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8003d5a:	9302      	str	r3, [sp, #8]
 8003d5c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8003d5e:	9301      	str	r3, [sp, #4]
 8003d60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d62:	9300      	str	r3, [sp, #0]
 8003d64:	4603      	mov	r3, r0
 8003d66:	68f8      	ldr	r0, [r7, #12]
 8003d68:	f7ff fe7a 	bl	8003a60 <_ZN11FrameBuffer14Paint_DrawCharEttcP6_tFonttt>
    Paint_DrawChar(Xstart + Dx * 3 + Dx / 2         , Ystart, value[pTime->Min % 10] , Font, Color_Background, Color_Foreground);
 8003d6c:	8bbb      	ldrh	r3, [r7, #28]
 8003d6e:	461a      	mov	r2, r3
 8003d70:	0052      	lsls	r2, r2, #1
 8003d72:	4413      	add	r3, r2
 8003d74:	b29a      	uxth	r2, r3
 8003d76:	897b      	ldrh	r3, [r7, #10]
 8003d78:	4413      	add	r3, r2
 8003d7a:	b29a      	uxth	r2, r3
 8003d7c:	8bbb      	ldrh	r3, [r7, #28]
 8003d7e:	085b      	lsrs	r3, r3, #1
 8003d80:	b29b      	uxth	r3, r3
 8003d82:	4413      	add	r3, r2
 8003d84:	b298      	uxth	r0, r3
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	795a      	ldrb	r2, [r3, #5]
 8003d8a:	4b4c      	ldr	r3, [pc, #304]	@ (8003ebc <_ZN11FrameBuffer14Paint_DrawTimeEttP10PAINT_TIMEP6_tFonttt+0x264>)
 8003d8c:	fba3 1302 	umull	r1, r3, r3, r2
 8003d90:	08d9      	lsrs	r1, r3, #3
 8003d92:	460b      	mov	r3, r1
 8003d94:	009b      	lsls	r3, r3, #2
 8003d96:	440b      	add	r3, r1
 8003d98:	005b      	lsls	r3, r3, #1
 8003d9a:	1ad3      	subs	r3, r2, r3
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	3320      	adds	r3, #32
 8003da0:	443b      	add	r3, r7
 8003da2:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 8003da6:	893a      	ldrh	r2, [r7, #8]
 8003da8:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8003daa:	9302      	str	r3, [sp, #8]
 8003dac:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8003dae:	9301      	str	r3, [sp, #4]
 8003db0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003db2:	9300      	str	r3, [sp, #0]
 8003db4:	460b      	mov	r3, r1
 8003db6:	4601      	mov	r1, r0
 8003db8:	68f8      	ldr	r0, [r7, #12]
 8003dba:	f7ff fe51 	bl	8003a60 <_ZN11FrameBuffer14Paint_DrawCharEttcP6_tFonttt>

    if(pTime->hasSeconds){
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	79db      	ldrb	r3, [r3, #7]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d05d      	beq.n	8003e82 <_ZN11FrameBuffer14Paint_DrawTimeEttP10PAINT_TIMEP6_tFonttt+0x22a>
		Paint_DrawChar(Xstart + Dx * 4 + Dx / 2 - Dx / 4, Ystart, ':'                    , Font, Color_Background, Color_Foreground);
 8003dc6:	8bbb      	ldrh	r3, [r7, #28]
 8003dc8:	009b      	lsls	r3, r3, #2
 8003dca:	b29a      	uxth	r2, r3
 8003dcc:	897b      	ldrh	r3, [r7, #10]
 8003dce:	4413      	add	r3, r2
 8003dd0:	b29a      	uxth	r2, r3
 8003dd2:	8bbb      	ldrh	r3, [r7, #28]
 8003dd4:	085b      	lsrs	r3, r3, #1
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	4413      	add	r3, r2
 8003dda:	b29a      	uxth	r2, r3
 8003ddc:	8bbb      	ldrh	r3, [r7, #28]
 8003dde:	089b      	lsrs	r3, r3, #2
 8003de0:	b29b      	uxth	r3, r3
 8003de2:	1ad3      	subs	r3, r2, r3
 8003de4:	b299      	uxth	r1, r3
 8003de6:	893a      	ldrh	r2, [r7, #8]
 8003de8:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8003dea:	9302      	str	r3, [sp, #8]
 8003dec:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8003dee:	9301      	str	r3, [sp, #4]
 8003df0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003df2:	9300      	str	r3, [sp, #0]
 8003df4:	233a      	movs	r3, #58	@ 0x3a
 8003df6:	68f8      	ldr	r0, [r7, #12]
 8003df8:	f7ff fe32 	bl	8003a60 <_ZN11FrameBuffer14Paint_DrawCharEttcP6_tFonttt>
		Paint_DrawChar(Xstart + Dx * 5                  , Ystart, value[pTime->Sec / 10] , Font, Color_Background, Color_Foreground);
 8003dfc:	8bbb      	ldrh	r3, [r7, #28]
 8003dfe:	461a      	mov	r2, r3
 8003e00:	0092      	lsls	r2, r2, #2
 8003e02:	4413      	add	r3, r2
 8003e04:	b29a      	uxth	r2, r3
 8003e06:	897b      	ldrh	r3, [r7, #10]
 8003e08:	4413      	add	r3, r2
 8003e0a:	b299      	uxth	r1, r3
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	799b      	ldrb	r3, [r3, #6]
 8003e10:	4a2a      	ldr	r2, [pc, #168]	@ (8003ebc <_ZN11FrameBuffer14Paint_DrawTimeEttP10PAINT_TIMEP6_tFonttt+0x264>)
 8003e12:	fba2 2303 	umull	r2, r3, r2, r3
 8003e16:	08db      	lsrs	r3, r3, #3
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	3320      	adds	r3, #32
 8003e1c:	443b      	add	r3, r7
 8003e1e:	f813 0c10 	ldrb.w	r0, [r3, #-16]
 8003e22:	893a      	ldrh	r2, [r7, #8]
 8003e24:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8003e26:	9302      	str	r3, [sp, #8]
 8003e28:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8003e2a:	9301      	str	r3, [sp, #4]
 8003e2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e2e:	9300      	str	r3, [sp, #0]
 8003e30:	4603      	mov	r3, r0
 8003e32:	68f8      	ldr	r0, [r7, #12]
 8003e34:	f7ff fe14 	bl	8003a60 <_ZN11FrameBuffer14Paint_DrawCharEttcP6_tFonttt>
		Paint_DrawChar(Xstart + Dx * 6                  , Ystart, value[pTime->Sec % 10] , Font, Color_Background, Color_Foreground);
 8003e38:	8bbb      	ldrh	r3, [r7, #28]
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	0052      	lsls	r2, r2, #1
 8003e3e:	4413      	add	r3, r2
 8003e40:	005b      	lsls	r3, r3, #1
 8003e42:	b29a      	uxth	r2, r3
 8003e44:	897b      	ldrh	r3, [r7, #10]
 8003e46:	4413      	add	r3, r2
 8003e48:	b298      	uxth	r0, r3
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	799a      	ldrb	r2, [r3, #6]
 8003e4e:	4b1b      	ldr	r3, [pc, #108]	@ (8003ebc <_ZN11FrameBuffer14Paint_DrawTimeEttP10PAINT_TIMEP6_tFonttt+0x264>)
 8003e50:	fba3 1302 	umull	r1, r3, r3, r2
 8003e54:	08d9      	lsrs	r1, r3, #3
 8003e56:	460b      	mov	r3, r1
 8003e58:	009b      	lsls	r3, r3, #2
 8003e5a:	440b      	add	r3, r1
 8003e5c:	005b      	lsls	r3, r3, #1
 8003e5e:	1ad3      	subs	r3, r2, r3
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	3320      	adds	r3, #32
 8003e64:	443b      	add	r3, r7
 8003e66:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 8003e6a:	893a      	ldrh	r2, [r7, #8]
 8003e6c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8003e6e:	9302      	str	r3, [sp, #8]
 8003e70:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8003e72:	9301      	str	r3, [sp, #4]
 8003e74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e76:	9300      	str	r3, [sp, #0]
 8003e78:	460b      	mov	r3, r1
 8003e7a:	4601      	mov	r1, r0
 8003e7c:	68f8      	ldr	r0, [r7, #12]
 8003e7e:	f7ff fdef 	bl	8003a60 <_ZN11FrameBuffer14Paint_DrawCharEttcP6_tFonttt>
    }

    UWORD additionalDX = 0;
 8003e82:	2300      	movs	r3, #0
 8003e84:	83fb      	strh	r3, [r7, #30]
    if(pTime->hasSeconds){
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	79db      	ldrb	r3, [r3, #7]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d001      	beq.n	8003e92 <_ZN11FrameBuffer14Paint_DrawTimeEttP10PAINT_TIMEP6_tFonttt+0x23a>
    	additionalDX =3;
 8003e8e:	2303      	movs	r3, #3
 8003e90:	83fb      	strh	r3, [r7, #30]
    }
	Paint_DrawChar(Xstart + Dx * 5 + additionalDX       , Ystart, pTime->isPM?"P"[0]:"A"[0] , Font, Color_Background, Color_Foreground);
 8003e92:	8bbb      	ldrh	r3, [r7, #28]
 8003e94:	461a      	mov	r2, r3
 8003e96:	0092      	lsls	r2, r2, #2
 8003e98:	4413      	add	r3, r2
 8003e9a:	b29a      	uxth	r2, r3
 8003e9c:	897b      	ldrh	r3, [r7, #10]
 8003e9e:	4413      	add	r3, r2
 8003ea0:	b29a      	uxth	r2, r3
 8003ea2:	8bfb      	ldrh	r3, [r7, #30]
 8003ea4:	4413      	add	r3, r2
 8003ea6:	b299      	uxth	r1, r3
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	7a1b      	ldrb	r3, [r3, #8]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d007      	beq.n	8003ec0 <_ZN11FrameBuffer14Paint_DrawTimeEttP10PAINT_TIMEP6_tFonttt+0x268>
 8003eb0:	2050      	movs	r0, #80	@ 0x50
 8003eb2:	e006      	b.n	8003ec2 <_ZN11FrameBuffer14Paint_DrawTimeEttP10PAINT_TIMEP6_tFonttt+0x26a>
 8003eb4:	0800f438 	.word	0x0800f438
 8003eb8:	0800f418 	.word	0x0800f418
 8003ebc:	cccccccd 	.word	0xcccccccd
 8003ec0:	2041      	movs	r0, #65	@ 0x41
 8003ec2:	893a      	ldrh	r2, [r7, #8]
 8003ec4:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8003ec6:	9302      	str	r3, [sp, #8]
 8003ec8:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8003eca:	9301      	str	r3, [sp, #4]
 8003ecc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ece:	9300      	str	r3, [sp, #0]
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	68f8      	ldr	r0, [r7, #12]
 8003ed4:	f7ff fdc4 	bl	8003a60 <_ZN11FrameBuffer14Paint_DrawCharEttcP6_tFonttt>
	Paint_DrawChar(Xstart + Dx * 6 + additionalDX       , Ystart, "M"[0] , Font, Color_Background, Color_Foreground);
 8003ed8:	8bbb      	ldrh	r3, [r7, #28]
 8003eda:	461a      	mov	r2, r3
 8003edc:	0052      	lsls	r2, r2, #1
 8003ede:	4413      	add	r3, r2
 8003ee0:	005b      	lsls	r3, r3, #1
 8003ee2:	b29a      	uxth	r2, r3
 8003ee4:	897b      	ldrh	r3, [r7, #10]
 8003ee6:	4413      	add	r3, r2
 8003ee8:	b29a      	uxth	r2, r3
 8003eea:	8bfb      	ldrh	r3, [r7, #30]
 8003eec:	4413      	add	r3, r2
 8003eee:	b299      	uxth	r1, r3
 8003ef0:	204d      	movs	r0, #77	@ 0x4d
 8003ef2:	893a      	ldrh	r2, [r7, #8]
 8003ef4:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8003ef6:	9302      	str	r3, [sp, #8]
 8003ef8:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8003efa:	9301      	str	r3, [sp, #4]
 8003efc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003efe:	9300      	str	r3, [sp, #0]
 8003f00:	4603      	mov	r3, r0
 8003f02:	68f8      	ldr	r0, [r7, #12]
 8003f04:	f7ff fdac 	bl	8003a60 <_ZN11FrameBuffer14Paint_DrawCharEttcP6_tFonttt>

}
 8003f08:	bf00      	nop
 8003f0a:	3720      	adds	r7, #32
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}

08003f10 <_ZN11FrameBuffer22Paint_DrawBitMap_PasteEPKhtttth>:
    flipColor: Whether the color is reversed
info:
    Use this function to paste image data into a buffer
******************************************************************************/
void FrameBuffer::Paint_DrawBitMap_Paste(const unsigned char* image_buffer, UWORD xStart, UWORD yStart, UWORD imageWidth, UWORD imageHeight, UBYTE flipColor)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b088      	sub	sp, #32
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	60f8      	str	r0, [r7, #12]
 8003f18:	60b9      	str	r1, [r7, #8]
 8003f1a:	4611      	mov	r1, r2
 8003f1c:	461a      	mov	r2, r3
 8003f1e:	460b      	mov	r3, r1
 8003f20:	80fb      	strh	r3, [r7, #6]
 8003f22:	4613      	mov	r3, r2
 8003f24:	80bb      	strh	r3, [r7, #4]
    UBYTE color, srcImage;
    UWORD x, y;
    UWORD width = (imageWidth%8==0 ? imageWidth/8 : imageWidth/8+1);
 8003f26:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003f28:	f003 0307 	and.w	r3, r3, #7
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d103      	bne.n	8003f38 <_ZN11FrameBuffer22Paint_DrawBitMap_PasteEPKhtttth+0x28>
 8003f30:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003f32:	08db      	lsrs	r3, r3, #3
 8003f34:	b29b      	uxth	r3, r3
 8003f36:	e004      	b.n	8003f42 <_ZN11FrameBuffer22Paint_DrawBitMap_PasteEPKhtttth+0x32>
 8003f38:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003f3a:	08db      	lsrs	r3, r3, #3
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	3301      	adds	r3, #1
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	833b      	strh	r3, [r7, #24]

    for (y = 0; y < imageHeight; y++) {
 8003f44:	2300      	movs	r3, #0
 8003f46:	837b      	strh	r3, [r7, #26]
 8003f48:	e047      	b.n	8003fda <_ZN11FrameBuffer22Paint_DrawBitMap_PasteEPKhtttth+0xca>
        for (x = 0; x < imageWidth; x++) {
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	83bb      	strh	r3, [r7, #28]
 8003f4e:	e03d      	b.n	8003fcc <_ZN11FrameBuffer22Paint_DrawBitMap_PasteEPKhtttth+0xbc>
            srcImage = image_buffer[y*width + x/8];
 8003f50:	8b7b      	ldrh	r3, [r7, #26]
 8003f52:	8b3a      	ldrh	r2, [r7, #24]
 8003f54:	fb02 f303 	mul.w	r3, r2, r3
 8003f58:	8bba      	ldrh	r2, [r7, #28]
 8003f5a:	08d2      	lsrs	r2, r2, #3
 8003f5c:	b292      	uxth	r2, r2
 8003f5e:	4413      	add	r3, r2
 8003f60:	461a      	mov	r2, r3
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	4413      	add	r3, r2
 8003f66:	781b      	ldrb	r3, [r3, #0]
 8003f68:	75fb      	strb	r3, [r7, #23]
            if(flipColor)
 8003f6a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d00e      	beq.n	8003f90 <_ZN11FrameBuffer22Paint_DrawBitMap_PasteEPKhtttth+0x80>
                color = (((srcImage<<(x%8) & 0x80) == 0) ? 1 : 0);
 8003f72:	7dfa      	ldrb	r2, [r7, #23]
 8003f74:	8bbb      	ldrh	r3, [r7, #28]
 8003f76:	f003 0307 	and.w	r3, r3, #7
 8003f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d101      	bne.n	8003f8a <_ZN11FrameBuffer22Paint_DrawBitMap_PasteEPKhtttth+0x7a>
 8003f86:	2301      	movs	r3, #1
 8003f88:	e000      	b.n	8003f8c <_ZN11FrameBuffer22Paint_DrawBitMap_PasteEPKhtttth+0x7c>
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	77fb      	strb	r3, [r7, #31]
 8003f8e:	e00d      	b.n	8003fac <_ZN11FrameBuffer22Paint_DrawBitMap_PasteEPKhtttth+0x9c>
            else
                color = (((srcImage<<(x%8) & 0x80) == 0) ? 0 : 1);
 8003f90:	7dfa      	ldrb	r2, [r7, #23]
 8003f92:	8bbb      	ldrh	r3, [r7, #28]
 8003f94:	f003 0307 	and.w	r3, r3, #7
 8003f98:	fa02 f303 	lsl.w	r3, r2, r3
 8003f9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	bf14      	ite	ne
 8003fa4:	2301      	movne	r3, #1
 8003fa6:	2300      	moveq	r3, #0
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	77fb      	strb	r3, [r7, #31]
            Paint_SetPixel(x+xStart, y+yStart, color);
 8003fac:	8bba      	ldrh	r2, [r7, #28]
 8003fae:	88fb      	ldrh	r3, [r7, #6]
 8003fb0:	4413      	add	r3, r2
 8003fb2:	b299      	uxth	r1, r3
 8003fb4:	8b7a      	ldrh	r2, [r7, #26]
 8003fb6:	88bb      	ldrh	r3, [r7, #4]
 8003fb8:	4413      	add	r3, r2
 8003fba:	b29a      	uxth	r2, r3
 8003fbc:	7ffb      	ldrb	r3, [r7, #31]
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	68f8      	ldr	r0, [r7, #12]
 8003fc2:	f7ff f93d 	bl	8003240 <_ZN11FrameBuffer14Paint_SetPixelEttt>
        for (x = 0; x < imageWidth; x++) {
 8003fc6:	8bbb      	ldrh	r3, [r7, #28]
 8003fc8:	3301      	adds	r3, #1
 8003fca:	83bb      	strh	r3, [r7, #28]
 8003fcc:	8bba      	ldrh	r2, [r7, #28]
 8003fce:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d3bd      	bcc.n	8003f50 <_ZN11FrameBuffer22Paint_DrawBitMap_PasteEPKhtttth+0x40>
    for (y = 0; y < imageHeight; y++) {
 8003fd4:	8b7b      	ldrh	r3, [r7, #26]
 8003fd6:	3301      	adds	r3, #1
 8003fd8:	837b      	strh	r3, [r7, #26]
 8003fda:	8b7a      	ldrh	r2, [r7, #26]
 8003fdc:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d3b3      	bcc.n	8003f4a <_ZN11FrameBuffer22Paint_DrawBitMap_PasteEPKhtttth+0x3a>
        }
    }
}
 8003fe2:	bf00      	nop
 8003fe4:	bf00      	nop
 8003fe6:	3720      	adds	r7, #32
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}

08003fec <_ZNSt10unique_ptrI11FrameBuffer15FreeRTOSDeleterED1Ev>:
      ~unique_ptr() noexcept
 8003fec:	b590      	push	{r4, r7, lr}
 8003fee:	b085      	sub	sp, #20
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f7fe fbd1 	bl	800279e <_ZNSt15__uniq_ptr_implI11FrameBuffer15FreeRTOSDeleterE6_M_ptrEv>
 8003ffc:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d00c      	beq.n	8004020 <_ZNSt10unique_ptrI11FrameBuffer15FreeRTOSDeleterED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f000 f8a6 	bl	8004158 <_ZNSt10unique_ptrI11FrameBuffer15FreeRTOSDeleterE11get_deleterEv>
 800400c:	4604      	mov	r4, r0
 800400e:	68f8      	ldr	r0, [r7, #12]
 8004010:	f7fe f9d0 	bl	80023b4 <_ZSt4moveIRP11FrameBufferEONSt16remove_referenceIT_E4typeEOS4_>
 8004014:	4603      	mov	r3, r0
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4619      	mov	r1, r3
 800401a:	4620      	mov	r0, r4
 800401c:	f7fd f9f0 	bl	8001400 <_ZNK15FreeRTOSDeleterclEPv>
	__ptr = pointer();
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2200      	movs	r2, #0
 8004024:	601a      	str	r2, [r3, #0]
      }
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4618      	mov	r0, r3
 800402a:	3714      	adds	r7, #20
 800402c:	46bd      	mov	sp, r7
 800402e:	bd90      	pop	{r4, r7, pc}

08004030 <_ZNSt15__uniq_ptr_implIh15FreeRTOSDeleterEC1Ev>:
      __uniq_ptr_impl() = default;
 8004030:	b580      	push	{r7, lr}
 8004032:	b082      	sub	sp, #8
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	4618      	mov	r0, r3
 800403c:	f000 f899 	bl	8004172 <_ZNSt5tupleIJPh15FreeRTOSDeleterEEC1ILb1ELb1EEEv>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	4618      	mov	r0, r3
 8004044:	3708      	adds	r7, #8
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}

0800404a <_ZNSt15__uniq_ptr_dataIh15FreeRTOSDeleterLb1ELb1EECI1St15__uniq_ptr_implIhS0_EEv>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800404a:	b580      	push	{r7, lr}
 800404c:	b082      	sub	sp, #8
 800404e:	af00      	add	r7, sp, #0
 8004050:	6078      	str	r0, [r7, #4]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4618      	mov	r0, r3
 8004056:	f7ff ffeb 	bl	8004030 <_ZNSt15__uniq_ptr_implIh15FreeRTOSDeleterEC1Ev>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4618      	mov	r0, r3
 800405e:	3708      	adds	r7, #8
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}

08004064 <_ZNSt10unique_ptrIA_h15FreeRTOSDeleterEC1IS1_vEEv>:
	constexpr unique_ptr() noexcept
 8004064:	b580      	push	{r7, lr}
 8004066:	b082      	sub	sp, #8
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
	: _M_t()
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	601a      	str	r2, [r3, #0]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4618      	mov	r0, r3
 8004076:	f7ff ffe8 	bl	800404a <_ZNSt15__uniq_ptr_dataIh15FreeRTOSDeleterLb1ELb1EECI1St15__uniq_ptr_implIhS0_EEv>
	{ }
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4618      	mov	r0, r3
 800407e:	3708      	adds	r7, #8
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}

08004084 <_ZNSt10unique_ptrIA_h15FreeRTOSDeleterED1Ev>:
      ~unique_ptr()
 8004084:	b580      	push	{r7, lr}
 8004086:	b084      	sub	sp, #16
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	4618      	mov	r0, r3
 8004090:	f000 f87c 	bl	800418c <_ZNSt15__uniq_ptr_implIh15FreeRTOSDeleterE6_M_ptrEv>
 8004094:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d009      	beq.n	80040b2 <_ZNSt10unique_ptrIA_h15FreeRTOSDeleterED1Ev+0x2e>
	  get_deleter()(__ptr);
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f000 f881 	bl	80041a6 <_ZNSt10unique_ptrIA_h15FreeRTOSDeleterE11get_deleterEv>
 80040a4:	4602      	mov	r2, r0
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4619      	mov	r1, r3
 80040ac:	4610      	mov	r0, r2
 80040ae:	f7fd f9a7 	bl	8001400 <_ZNK15FreeRTOSDeleterclEPv>
	__ptr = pointer();
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2200      	movs	r2, #0
 80040b6:	601a      	str	r2, [r3, #0]
      }
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	4618      	mov	r0, r3
 80040bc:	3710      	adds	r7, #16
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}

080040c2 <_ZNSt15__uniq_ptr_implIh15FreeRTOSDeleterEaSEOS1_>:
      __uniq_ptr_impl& operator=(__uniq_ptr_impl&& __u) noexcept
 80040c2:	b580      	push	{r7, lr}
 80040c4:	b082      	sub	sp, #8
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	6078      	str	r0, [r7, #4]
 80040ca:	6039      	str	r1, [r7, #0]
	reset(__u.release());
 80040cc:	6838      	ldr	r0, [r7, #0]
 80040ce:	f000 f897 	bl	8004200 <_ZNSt15__uniq_ptr_implIh15FreeRTOSDeleterE7releaseEv>
 80040d2:	4603      	mov	r3, r0
 80040d4:	4619      	mov	r1, r3
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f000 f872 	bl	80041c0 <_ZNSt15__uniq_ptr_implIh15FreeRTOSDeleterE5resetEPh>
	_M_deleter() = std::forward<_Dp>(__u._M_deleter());
 80040dc:	6838      	ldr	r0, [r7, #0]
 80040de:	f000 f8a4 	bl	800422a <_ZNSt15__uniq_ptr_implIh15FreeRTOSDeleterE10_M_deleterEv>
 80040e2:	4603      	mov	r3, r0
 80040e4:	4618      	mov	r0, r3
 80040e6:	f000 f8ad 	bl	8004244 <_ZSt7forwardI15FreeRTOSDeleterEOT_RNSt16remove_referenceIS1_E4typeE>
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f000 f89d 	bl	800422a <_ZNSt15__uniq_ptr_implIh15FreeRTOSDeleterE10_M_deleterEv>
	return *this;
 80040f0:	687b      	ldr	r3, [r7, #4]
      }
 80040f2:	4618      	mov	r0, r3
 80040f4:	3708      	adds	r7, #8
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}

080040fa <_ZNKSt10unique_ptrIA_h15FreeRTOSDeleterEcvbEv>:
      get_deleter() const noexcept
      { return _M_t._M_deleter(); }

      /// Return @c true if the stored pointer is not null.
      _GLIBCXX23_CONSTEXPR
      explicit operator bool() const noexcept
 80040fa:	b580      	push	{r7, lr}
 80040fc:	b082      	sub	sp, #8
 80040fe:	af00      	add	r7, sp, #0
 8004100:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f7fe f842 	bl	800218c <_ZNKSt10unique_ptrIA_h15FreeRTOSDeleterE3getEv>
 8004108:	4603      	mov	r3, r0
 800410a:	2b00      	cmp	r3, #0
 800410c:	bf14      	ite	ne
 800410e:	2301      	movne	r3, #1
 8004110:	2300      	moveq	r3, #0
 8004112:	b2db      	uxtb	r3, r3
 8004114:	4618      	mov	r0, r3
 8004116:	3708      	adds	r7, #8
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}

0800411c <_ZNKSt10unique_ptrIA_h15FreeRTOSDeleterEixEj>:
      operator[](size_t __i) const
 800411c:	b580      	push	{r7, lr}
 800411e:	b082      	sub	sp, #8
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
 8004124:	6039      	str	r1, [r7, #0]
	__glibcxx_assert(get() != pointer());
 8004126:	f7fd f957 	bl	80013d8 <_ZSt23__is_constant_evaluatedv>
 800412a:	4603      	mov	r3, r0
 800412c:	2b00      	cmp	r3, #0
 800412e:	d007      	beq.n	8004140 <_ZNKSt10unique_ptrIA_h15FreeRTOSDeleterEixEj+0x24>
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	f7fe f82b 	bl	800218c <_ZNKSt10unique_ptrIA_h15FreeRTOSDeleterE3getEv>
 8004136:	4603      	mov	r3, r0
 8004138:	2b00      	cmp	r3, #0
 800413a:	d101      	bne.n	8004140 <_ZNKSt10unique_ptrIA_h15FreeRTOSDeleterEixEj+0x24>
 800413c:	2301      	movs	r3, #1
 800413e:	e000      	b.n	8004142 <_ZNKSt10unique_ptrIA_h15FreeRTOSDeleterEixEj+0x26>
 8004140:	2300      	movs	r3, #0
 8004142:	2b00      	cmp	r3, #0
	return get()[__i];
 8004144:	6878      	ldr	r0, [r7, #4]
 8004146:	f7fe f821 	bl	800218c <_ZNKSt10unique_ptrIA_h15FreeRTOSDeleterE3getEv>
 800414a:	4602      	mov	r2, r0
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	4413      	add	r3, r2
      }
 8004150:	4618      	mov	r0, r3
 8004152:	3708      	adds	r7, #8
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}

08004158 <_ZNSt10unique_ptrI11FrameBuffer15FreeRTOSDeleterE11get_deleterEv>:
      get_deleter() noexcept
 8004158:	b580      	push	{r7, lr}
 800415a:	b082      	sub	sp, #8
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	4618      	mov	r0, r3
 8004164:	f7fe fb28 	bl	80027b8 <_ZNSt15__uniq_ptr_implI11FrameBuffer15FreeRTOSDeleterE10_M_deleterEv>
 8004168:	4603      	mov	r3, r0
 800416a:	4618      	mov	r0, r3
 800416c:	3708      	adds	r7, #8
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}

08004172 <_ZNSt5tupleIJPh15FreeRTOSDeleterEEC1ILb1ELb1EEEv>:
	tuple()
 8004172:	b580      	push	{r7, lr}
 8004174:	b082      	sub	sp, #8
 8004176:	af00      	add	r7, sp, #0
 8004178:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4618      	mov	r0, r3
 800417e:	f000 f86c 	bl	800425a <_ZNSt11_Tuple_implILj0EJPh15FreeRTOSDeleterEEC1Ev>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	4618      	mov	r0, r3
 8004186:	3708      	adds	r7, #8
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}

0800418c <_ZNSt15__uniq_ptr_implIh15FreeRTOSDeleterE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 800418c:	b580      	push	{r7, lr}
 800418e:	b082      	sub	sp, #8
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	4618      	mov	r0, r3
 8004198:	f000 f86f 	bl	800427a <_ZSt3getILj0EJPh15FreeRTOSDeleterEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>
 800419c:	4603      	mov	r3, r0
 800419e:	4618      	mov	r0, r3
 80041a0:	3708      	adds	r7, #8
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}

080041a6 <_ZNSt10unique_ptrIA_h15FreeRTOSDeleterE11get_deleterEv>:
      get_deleter() noexcept
 80041a6:	b580      	push	{r7, lr}
 80041a8:	b082      	sub	sp, #8
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4618      	mov	r0, r3
 80041b2:	f000 f83a 	bl	800422a <_ZNSt15__uniq_ptr_implIh15FreeRTOSDeleterE10_M_deleterEv>
 80041b6:	4603      	mov	r3, r0
 80041b8:	4618      	mov	r0, r3
 80041ba:	3708      	adds	r7, #8
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}

080041c0 <_ZNSt15__uniq_ptr_implIh15FreeRTOSDeleterE5resetEPh>:
      void reset(pointer __p) noexcept
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b084      	sub	sp, #16
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	6039      	str	r1, [r7, #0]
	const pointer __old_p = _M_ptr();
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f7ff ffde 	bl	800418c <_ZNSt15__uniq_ptr_implIh15FreeRTOSDeleterE6_M_ptrEv>
 80041d0:	4603      	mov	r3, r0
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	60fb      	str	r3, [r7, #12]
	_M_ptr() = __p;
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f7ff ffd8 	bl	800418c <_ZNSt15__uniq_ptr_implIh15FreeRTOSDeleterE6_M_ptrEv>
 80041dc:	4602      	mov	r2, r0
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	6013      	str	r3, [r2, #0]
	if (__old_p)
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d007      	beq.n	80041f8 <_ZNSt15__uniq_ptr_implIh15FreeRTOSDeleterE5resetEPh+0x38>
	  _M_deleter()(__old_p);
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	f000 f81e 	bl	800422a <_ZNSt15__uniq_ptr_implIh15FreeRTOSDeleterE10_M_deleterEv>
 80041ee:	4603      	mov	r3, r0
 80041f0:	68f9      	ldr	r1, [r7, #12]
 80041f2:	4618      	mov	r0, r3
 80041f4:	f7fd f904 	bl	8001400 <_ZNK15FreeRTOSDeleterclEPv>
      }
 80041f8:	bf00      	nop
 80041fa:	3710      	adds	r7, #16
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}

08004200 <_ZNSt15__uniq_ptr_implIh15FreeRTOSDeleterE7releaseEv>:
      pointer release() noexcept
 8004200:	b580      	push	{r7, lr}
 8004202:	b084      	sub	sp, #16
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f7ff ffbf 	bl	800418c <_ZNSt15__uniq_ptr_implIh15FreeRTOSDeleterE6_M_ptrEv>
 800420e:	4603      	mov	r3, r0
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f7ff ffb9 	bl	800418c <_ZNSt15__uniq_ptr_implIh15FreeRTOSDeleterE6_M_ptrEv>
 800421a:	4603      	mov	r3, r0
 800421c:	2200      	movs	r2, #0
 800421e:	601a      	str	r2, [r3, #0]
	return __p;
 8004220:	68fb      	ldr	r3, [r7, #12]
      }
 8004222:	4618      	mov	r0, r3
 8004224:	3710      	adds	r7, #16
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}

0800422a <_ZNSt15__uniq_ptr_implIh15FreeRTOSDeleterE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 800422a:	b580      	push	{r7, lr}
 800422c:	b082      	sub	sp, #8
 800422e:	af00      	add	r7, sp, #0
 8004230:	6078      	str	r0, [r7, #4]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	4618      	mov	r0, r3
 8004236:	f000 f82d 	bl	8004294 <_ZSt3getILj1EJPh15FreeRTOSDeleterEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>
 800423a:	4603      	mov	r3, r0
 800423c:	4618      	mov	r0, r3
 800423e:	3708      	adds	r7, #8
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}

08004244 <_ZSt7forwardI15FreeRTOSDeleterEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004244:	b480      	push	{r7}
 8004246:	b083      	sub	sp, #12
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	4618      	mov	r0, r3
 8004250:	370c      	adds	r7, #12
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr

0800425a <_ZNSt11_Tuple_implILj0EJPh15FreeRTOSDeleterEEC1Ev>:
      constexpr _Tuple_impl()
 800425a:	b580      	push	{r7, lr}
 800425c:	b082      	sub	sp, #8
 800425e:	af00      	add	r7, sp, #0
 8004260:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f7fe ff18 	bl	8003098 <_ZNSt11_Tuple_implILj1EJ15FreeRTOSDeleterEEC2Ev>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	4618      	mov	r0, r3
 800426c:	f000 f81e 	bl	80042ac <_ZNSt10_Head_baseILj0EPhLb0EEC1Ev>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	4618      	mov	r0, r3
 8004274:	3708      	adds	r7, #8
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}

0800427a <_ZSt3getILj0EJPh15FreeRTOSDeleterEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>:
    get(tuple<_Elements...>& __t) noexcept
 800427a:	b580      	push	{r7, lr}
 800427c:	b082      	sub	sp, #8
 800427e:	af00      	add	r7, sp, #0
 8004280:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4618      	mov	r0, r3
 8004286:	f000 f81f 	bl	80042c8 <_ZSt12__get_helperILj0EPhJ15FreeRTOSDeleterEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>
 800428a:	4603      	mov	r3, r0
 800428c:	4618      	mov	r0, r3
 800428e:	3708      	adds	r7, #8
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}

08004294 <_ZSt3getILj1EJPh15FreeRTOSDeleterEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>:
    get(tuple<_Elements...>& __t) noexcept
 8004294:	b580      	push	{r7, lr}
 8004296:	b082      	sub	sp, #8
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	f7fe fc97 	bl	8002bd0 <_ZSt12__get_helperILj1E15FreeRTOSDeleterJEERT0_RSt11_Tuple_implIXT_EJS1_DpT1_EE>
 80042a2:	4603      	mov	r3, r0
 80042a4:	4618      	mov	r0, r3
 80042a6:	3708      	adds	r7, #8
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}

080042ac <_ZNSt10_Head_baseILj0EPhLb0EEC1Ev>:
      constexpr _Head_base()
 80042ac:	b480      	push	{r7}
 80042ae:	b083      	sub	sp, #12
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2200      	movs	r2, #0
 80042b8:	601a      	str	r2, [r3, #0]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4618      	mov	r0, r3
 80042be:	370c      	adds	r7, #12
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr

080042c8 <_ZSt12__get_helperILj0EPhJ15FreeRTOSDeleterEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b082      	sub	sp, #8
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f000 f805 	bl	80042e0 <_ZNSt11_Tuple_implILj0EJPh15FreeRTOSDeleterEE7_M_headERS2_>
 80042d6:	4603      	mov	r3, r0
 80042d8:	4618      	mov	r0, r3
 80042da:	3708      	adds	r7, #8
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}

080042e0 <_ZNSt11_Tuple_implILj0EJPh15FreeRTOSDeleterEE7_M_headERS2_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b082      	sub	sp, #8
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	4618      	mov	r0, r3
 80042ec:	f000 f805 	bl	80042fa <_ZNSt10_Head_baseILj0EPhLb0EE7_M_headERS1_>
 80042f0:	4603      	mov	r3, r0
 80042f2:	4618      	mov	r0, r3
 80042f4:	3708      	adds	r7, #8
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}

080042fa <_ZNSt10_Head_baseILj0EPhLb0EE7_M_headERS1_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80042fa:	b480      	push	{r7}
 80042fc:	b083      	sub	sp, #12
 80042fe:	af00      	add	r7, sp, #0
 8004300:	6078      	str	r0, [r7, #4]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	4618      	mov	r0, r3
 8004306:	370c      	adds	r7, #12
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr

08004310 <_Z41__static_initialization_and_destruction_0ii>:
						Addr = x + y * this->WidthByte ;
						this->Image[Addr] = \
						(unsigned char)image_buffer[Addr+ (this->HeightByte)*this->WidthByte*(Region - 1)];
				}
		}
}
 8004310:	b580      	push	{r7, lr}
 8004312:	b082      	sub	sp, #8
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	6039      	str	r1, [r7, #0]
std::unique_ptr<FrameBuffer, FreeRTOSDeleter> FrameBuffer::instance = nullptr;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d107      	bne.n	8004330 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004326:	4293      	cmp	r3, r2
 8004328:	d102      	bne.n	8004330 <_Z41__static_initialization_and_destruction_0ii+0x20>
 800432a:	4803      	ldr	r0, [pc, #12]	@ (8004338 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 800432c:	f7ff fe5e 	bl	8003fec <_ZNSt10unique_ptrI11FrameBuffer15FreeRTOSDeleterED1Ev>
}
 8004330:	bf00      	nop
 8004332:	3708      	adds	r7, #8
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}
 8004338:	20000210 	.word	0x20000210

0800433c <_GLOBAL__sub_I__ZN11FrameBuffer8instanceE>:
 800433c:	b580      	push	{r7, lr}
 800433e:	af00      	add	r7, sp, #0
 8004340:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8004344:	2001      	movs	r0, #1
 8004346:	f7ff ffe3 	bl	8004310 <_Z41__static_initialization_and_destruction_0ii>
 800434a:	bd80      	pop	{r7, pc}

0800434c <_GLOBAL__sub_D__ZN11FrameBuffer8instanceE>:
 800434c:	b580      	push	{r7, lr}
 800434e:	af00      	add	r7, sp, #0
 8004350:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8004354:	2000      	movs	r0, #0
 8004356:	f7ff ffdb 	bl	8004310 <_Z41__static_initialization_and_destruction_0ii>
 800435a:	bd80      	pop	{r7, pc}

0800435c <_Z26make_unique_freertos_arrayj>:
 *      Author: kobru
 */
#include "FreeRTOSMemory.hpp"
#include "main.h"

std::unique_ptr<UBYTE[], FreeRTOSDeleter> make_unique_freertos_array(size_t size) {
 800435c:	b580      	push	{r7, lr}
 800435e:	b082      	sub	sp, #8
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
 8004364:	6039      	str	r1, [r7, #0]
    return std::unique_ptr<uint8_t[], FreeRTOSDeleter>(
        static_cast<UBYTE*>(pvPortMalloc(size))
 8004366:	6838      	ldr	r0, [r7, #0]
 8004368:	f007 fc70 	bl	800bc4c <pvPortMalloc>
 800436c:	4603      	mov	r3, r0
    );
 800436e:	4619      	mov	r1, r3
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	f000 f814 	bl	800439e <_ZNSt10unique_ptrIA_h15FreeRTOSDeleterEC1IPhS1_vbEET_>
}
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	3708      	adds	r7, #8
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}

0800437e <_ZNSt15__uniq_ptr_dataIh15FreeRTOSDeleterLb1ELb1EECI1St15__uniq_ptr_implIhS0_EEPh>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800437e:	b580      	push	{r7, lr}
 8004380:	b082      	sub	sp, #8
 8004382:	af00      	add	r7, sp, #0
 8004384:	6078      	str	r0, [r7, #4]
 8004386:	6039      	str	r1, [r7, #0]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	683a      	ldr	r2, [r7, #0]
 800438c:	4611      	mov	r1, r2
 800438e:	4618      	mov	r0, r3
 8004390:	f000 f814 	bl	80043bc <_ZNSt15__uniq_ptr_implIh15FreeRTOSDeleterEC1EPh>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	4618      	mov	r0, r3
 8004398:	3708      	adds	r7, #8
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}

0800439e <_ZNSt10unique_ptrIA_h15FreeRTOSDeleterEC1IPhS1_vbEET_>:
	unique_ptr(_Up __p) noexcept
 800439e:	b580      	push	{r7, lr}
 80043a0:	b082      	sub	sp, #8
 80043a2:	af00      	add	r7, sp, #0
 80043a4:	6078      	str	r0, [r7, #4]
 80043a6:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6839      	ldr	r1, [r7, #0]
 80043ac:	4618      	mov	r0, r3
 80043ae:	f7ff ffe6 	bl	800437e <_ZNSt15__uniq_ptr_dataIh15FreeRTOSDeleterLb1ELb1EECI1St15__uniq_ptr_implIhS0_EEPh>
        { }
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4618      	mov	r0, r3
 80043b6:	3708      	adds	r7, #8
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}

080043bc <_ZNSt15__uniq_ptr_implIh15FreeRTOSDeleterEC1EPh>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 80043bc:	b580      	push	{r7, lr}
 80043be:	b082      	sub	sp, #8
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
 80043c4:	6039      	str	r1, [r7, #0]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	4618      	mov	r0, r3
 80043ca:	f7ff fed2 	bl	8004172 <_ZNSt5tupleIJPh15FreeRTOSDeleterEEC1ILb1ELb1EEEv>
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f7ff fedc 	bl	800418c <_ZNSt15__uniq_ptr_implIh15FreeRTOSDeleterE6_M_ptrEv>
 80043d4:	4602      	mov	r2, r0
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	6013      	str	r3, [r2, #0]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	4618      	mov	r0, r3
 80043de:	3708      	adds	r7, #8
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}

080043e4 <_ZN8Drawable13triggerActionEv>:
    void triggerAction() {
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b082      	sub	sp, #8
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
    	if (onSelect)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d002      	beq.n	80043fa <_ZN8Drawable13triggerActionEv+0x16>
    		onSelect();
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	4798      	blx	r3
    }
 80043fa:	bf00      	nop
 80043fc:	3708      	adds	r7, #8
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}

08004402 <_ZN6Screen8interactEv>:

			selectableElements[currentSelection]->highlight(true);
		}
    }

    void interact() {
 8004402:	b580      	push	{r7, lr}
 8004404:	b082      	sub	sp, #8
 8004406:	af00      	add	r7, sp, #0
 8004408:	6078      	str	r0, [r7, #4]
    	if (currentSelection > -1)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	691b      	ldr	r3, [r3, #16]
 800440e:	2b00      	cmp	r3, #0
 8004410:	db0d      	blt.n	800442e <_ZN6Screen8interactEv+0x2c>
		{
    		selectableElements[currentSelection]->triggerAction();
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f103 0214 	add.w	r2, r3, #20
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	691b      	ldr	r3, [r3, #16]
 800441c:	4619      	mov	r1, r3
 800441e:	4610      	mov	r0, r2
 8004420:	f7fd ff9b 	bl	800235a <_ZNSt6vectorIP8DrawableSaIS1_EEixEj>
 8004424:	4603      	mov	r3, r0
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4618      	mov	r0, r3
 800442a:	f7ff ffdb 	bl	80043e4 <_ZN8Drawable13triggerActionEv>
		}
    }
 800442e:	bf00      	nop
 8004430:	3708      	adds	r7, #8
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}

08004436 <_ZN13ScreenManager13initFirstTimeEv>:
#include "ScreenManager.h"
#include "FreeRTOS.h"
#include "task.h"


void ScreenManager::initFirstTime(){
 8004436:	b580      	push	{r7, lr}
 8004438:	b082      	sub	sp, #8
 800443a:	af00      	add	r7, sp, #0
 800443c:	6078      	str	r0, [r7, #4]
	if (EPDController){
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d00d      	beq.n	8004462 <_ZN13ScreenManager13initFirstTimeEv+0x2c>
		EPDController->pinInit();
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4618      	mov	r0, r3
 800444c:	f7fc fd50 	bl	8000ef0 <_ZN9EPD_4in267pinInitEv>
		EPDController->EPD_4in26_Init();
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4618      	mov	r0, r3
 8004456:	f7fc ff10 	bl	800127a <_ZN9EPD_4in2614EPD_4in26_InitEv>

		vTaskDelay(500);
 800445a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800445e:	f006 f899 	bl	800a594 <vTaskDelay>

	}
}
 8004462:	bf00      	nop
 8004464:	3708      	adds	r7, #8
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}

0800446a <_ZN13ScreenManager9addScreenEP6Screen>:

void ScreenManager::addScreen(Screen* scr) {
 800446a:	b580      	push	{r7, lr}
 800446c:	b082      	sub	sp, #8
 800446e:	af00      	add	r7, sp, #0
 8004470:	6078      	str	r0, [r7, #4]
 8004472:	6039      	str	r1, [r7, #0]
	screens.push_back(scr);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	3308      	adds	r3, #8
 8004478:	463a      	mov	r2, r7
 800447a:	4611      	mov	r1, r2
 800447c:	4618      	mov	r0, r3
 800447e:	f000 f842 	bl	8004506 <_ZNSt6vectorIP6ScreenSaIS1_EE9push_backERKS1_>
	if (screens.size() == 1){
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	3308      	adds	r3, #8
 8004486:	4618      	mov	r0, r3
 8004488:	f000 f862 	bl	8004550 <_ZNKSt6vectorIP6ScreenSaIS1_EE4sizeEv>
 800448c:	4603      	mov	r3, r0
 800448e:	2b01      	cmp	r3, #1
 8004490:	bf0c      	ite	eq
 8004492:	2301      	moveq	r3, #1
 8004494:	2300      	movne	r3, #0
 8004496:	b2db      	uxtb	r3, r3
 8004498:	2b00      	cmp	r3, #0
 800449a:	d002      	beq.n	80044a2 <_ZN13ScreenManager9addScreenEP6Screen+0x38>
		currentScreen = scr;
 800449c:	683a      	ldr	r2, [r7, #0]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	605a      	str	r2, [r3, #4]
	}
}
 80044a2:	bf00      	nop
 80044a4:	3708      	adds	r7, #8
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}

080044aa <_ZN13ScreenManager19displayActiveScreenEv>:
		currentScreen = screens[index];
		displayActiveScreen();
	}
}

void ScreenManager::displayActiveScreen(){
 80044aa:	b580      	push	{r7, lr}
 80044ac:	b084      	sub	sp, #16
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	6078      	str	r0, [r7, #4]
	if(currentScreen){
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d010      	beq.n	80044dc <_ZN13ScreenManager19displayActiveScreenEv+0x32>
		currentScreen->render();
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	4618      	mov	r0, r3
 80044c0:	f7fd f9cb 	bl	800185a <_ZN6Screen6renderEv>
		UBYTE* img = currentScreen->getImage();
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	4618      	mov	r0, r3
 80044ca:	f7fd f9b1 	bl	8001830 <_ZN6Screen8getImageEv>
 80044ce:	60f8      	str	r0, [r7, #12]
		EPDController->EPD_4in26_Display_Base(img);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	68f9      	ldr	r1, [r7, #12]
 80044d6:	4618      	mov	r0, r3
 80044d8:	f7fc ff39 	bl	800134e <_ZN9EPD_4in2622EPD_4in26_Display_BaseEPKh>
	}
}
 80044dc:	bf00      	nop
 80044de:	3710      	adds	r7, #16
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}

080044e4 <_ZN13ScreenManager10onInteractEv>:

void ScreenManager::onInteract(){
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b082      	sub	sp, #8
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
	if(currentScreen){
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d004      	beq.n	80044fe <_ZN13ScreenManager10onInteractEv+0x1a>
		currentScreen->interact();
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	4618      	mov	r0, r3
 80044fa:	f7ff ff82 	bl	8004402 <_ZN6Screen8interactEv>
	}
}
 80044fe:	bf00      	nop
 8004500:	3708      	adds	r7, #8
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}

08004506 <_ZNSt6vectorIP6ScreenSaIS1_EE9push_backERKS1_>:
      push_back(const value_type& __x)
 8004506:	b580      	push	{r7, lr}
 8004508:	b082      	sub	sp, #8
 800450a:	af00      	add	r7, sp, #0
 800450c:	6078      	str	r0, [r7, #4]
 800450e:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	685a      	ldr	r2, [r3, #4]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	429a      	cmp	r2, r3
 800451a:	d00c      	beq.n	8004536 <_ZNSt6vectorIP6ScreenSaIS1_EE9push_backERKS1_+0x30>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	683a      	ldr	r2, [r7, #0]
 8004524:	4619      	mov	r1, r3
 8004526:	f000 f823 	bl	8004570 <_ZNSt16allocator_traitsISaIP6ScreenEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	1d1a      	adds	r2, r3, #4
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	605a      	str	r2, [r3, #4]
      }
 8004534:	e008      	b.n	8004548 <_ZNSt6vectorIP6ScreenSaIS1_EE9push_backERKS1_+0x42>
	  _M_realloc_insert(end(), __x);
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f000 f82d 	bl	8004596 <_ZNSt6vectorIP6ScreenSaIS1_EE3endEv>
 800453c:	4603      	mov	r3, r0
 800453e:	683a      	ldr	r2, [r7, #0]
 8004540:	4619      	mov	r1, r3
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f000 f84e 	bl	80045e4 <_ZNSt6vectorIP6ScreenSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 8004548:	bf00      	nop
 800454a:	3708      	adds	r7, #8
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}

08004550 <_ZNKSt6vectorIP6ScreenSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8004550:	b480      	push	{r7}
 8004552:	b083      	sub	sp, #12
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	685a      	ldr	r2, [r3, #4]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	1ad3      	subs	r3, r2, r3
 8004562:	109b      	asrs	r3, r3, #2
 8004564:	4618      	mov	r0, r3
 8004566:	370c      	adds	r7, #12
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr

08004570 <_ZNSt16allocator_traitsISaIP6ScreenEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8004570:	b580      	push	{r7, lr}
 8004572:	b084      	sub	sp, #16
 8004574:	af00      	add	r7, sp, #0
 8004576:	60f8      	str	r0, [r7, #12]
 8004578:	60b9      	str	r1, [r7, #8]
 800457a:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f000 f8ed 	bl	800475c <_ZSt7forwardIRKP6ScreenEOT_RNSt16remove_referenceIS4_E4typeE>
 8004582:	4603      	mov	r3, r0
 8004584:	461a      	mov	r2, r3
 8004586:	68b9      	ldr	r1, [r7, #8]
 8004588:	68f8      	ldr	r0, [r7, #12]
 800458a:	f000 f8f2 	bl	8004772 <_ZNSt15__new_allocatorIP6ScreenE9constructIS1_JRKS1_EEEvPT_DpOT0_>
	}
 800458e:	bf00      	nop
 8004590:	3710      	adds	r7, #16
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}

08004596 <_ZNSt6vectorIP6ScreenSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8004596:	b580      	push	{r7, lr}
 8004598:	b084      	sub	sp, #16
 800459a:	af00      	add	r7, sp, #0
 800459c:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	1d1a      	adds	r2, r3, #4
 80045a2:	f107 030c 	add.w	r3, r7, #12
 80045a6:	4611      	mov	r1, r2
 80045a8:	4618      	mov	r0, r3
 80045aa:	f000 f8f8 	bl	800479e <_ZN9__gnu_cxx17__normal_iteratorIPP6ScreenSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	4618      	mov	r0, r3
 80045b2:	3710      	adds	r7, #16
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}

080045b8 <_ZNSt6vectorIP6ScreenSaIS1_EE15_S_use_relocateEv>:
      _S_use_relocate()
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b082      	sub	sp, #8
 80045bc:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 80045be:	4618      	mov	r0, r3
 80045c0:	f000 f805 	bl	80045ce <_ZNSt6vectorIP6ScreenSaIS1_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 80045c4:	4603      	mov	r3, r0
      }
 80045c6:	4618      	mov	r0, r3
 80045c8:	3708      	adds	r7, #8
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}

080045ce <_ZNSt6vectorIP6ScreenSaIS1_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 80045ce:	b480      	push	{r7}
 80045d0:	b083      	sub	sp, #12
 80045d2:	af00      	add	r7, sp, #0
 80045d4:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 80045d6:	2301      	movs	r3, #1
      }
 80045d8:	4618      	mov	r0, r3
 80045da:	370c      	adds	r7, #12
 80045dc:	46bd      	mov	sp, r7
 80045de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e2:	4770      	bx	lr

080045e4 <_ZNSt6vectorIP6ScreenSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 80045e4:	b5b0      	push	{r4, r5, r7, lr}
 80045e6:	b08c      	sub	sp, #48	@ 0x30
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	60f8      	str	r0, [r7, #12]
 80045ec:	60b9      	str	r1, [r7, #8]
 80045ee:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 80045f0:	4a59      	ldr	r2, [pc, #356]	@ (8004758 <_ZNSt6vectorIP6ScreenSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x174>)
 80045f2:	2101      	movs	r1, #1
 80045f4:	68f8      	ldr	r0, [r7, #12]
 80045f6:	f000 f8e2 	bl	80047be <_ZNKSt6vectorIP6ScreenSaIS1_EE12_M_check_lenEjPKc>
 80045fa:	62b8      	str	r0, [r7, #40]	@ 0x28
      pointer __old_start = this->_M_impl._M_start;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	627b      	str	r3, [r7, #36]	@ 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 8004608:	68f8      	ldr	r0, [r7, #12]
 800460a:	f000 f91f 	bl	800484c <_ZNSt6vectorIP6ScreenSaIS1_EE5beginEv>
 800460e:	4603      	mov	r3, r0
 8004610:	617b      	str	r3, [r7, #20]
 8004612:	f107 0214 	add.w	r2, r7, #20
 8004616:	f107 0308 	add.w	r3, r7, #8
 800461a:	4611      	mov	r1, r2
 800461c:	4618      	mov	r0, r3
 800461e:	f000 f925 	bl	800486c <_ZN9__gnu_cxxmiIPP6ScreenSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 8004622:	4603      	mov	r3, r0
 8004624:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800462a:	4618      	mov	r0, r3
 800462c:	f000 f933 	bl	8004896 <_ZNSt12_Vector_baseIP6ScreenSaIS1_EE11_M_allocateEj>
 8004630:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 8004632:	69bb      	ldr	r3, [r7, #24]
 8004634:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  _Alloc_traits::construct(this->_M_impl,
 8004636:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8004638:	69fb      	ldr	r3, [r7, #28]
 800463a:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 800463c:	69ba      	ldr	r2, [r7, #24]
 800463e:	18d5      	adds	r5, r2, r3
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	f000 f88b 	bl	800475c <_ZSt7forwardIRKP6ScreenEOT_RNSt16remove_referenceIS4_E4typeE>
 8004646:	4603      	mov	r3, r0
 8004648:	461a      	mov	r2, r3
 800464a:	4629      	mov	r1, r5
 800464c:	4620      	mov	r0, r4
 800464e:	f7ff ff8f 	bl	8004570 <_ZNSt16allocator_traitsISaIP6ScreenEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 8004652:	2300      	movs	r3, #0
 8004654:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 8004656:	f7ff ffaf 	bl	80045b8 <_ZNSt6vectorIP6ScreenSaIS1_EE15_S_use_relocateEv>
 800465a:	4603      	mov	r3, r0
 800465c:	2b00      	cmp	r3, #0
 800465e:	d027      	beq.n	80046b0 <_ZNSt6vectorIP6ScreenSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xcc>
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8004660:	f107 0308 	add.w	r3, r7, #8
 8004664:	4618      	mov	r0, r3
 8004666:	f000 f93e 	bl	80048e6 <_ZNK9__gnu_cxx17__normal_iteratorIPP6ScreenSt6vectorIS2_SaIS2_EEE4baseEv>
 800466a:	4603      	mov	r3, r0
 800466c:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	4618      	mov	r0, r3
 8004672:	f7fe f862 	bl	800273a <_ZNSt12_Vector_baseIP6ScreenSaIS1_EE19_M_get_Tp_allocatorEv>
 8004676:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8004678:	69ba      	ldr	r2, [r7, #24]
 800467a:	4621      	mov	r1, r4
 800467c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800467e:	f000 f91e 	bl	80048be <_ZNSt6vectorIP6ScreenSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8004682:	62f8      	str	r0, [r7, #44]	@ 0x2c
	      ++__new_finish;
 8004684:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004686:	3304      	adds	r3, #4
 8004688:	62fb      	str	r3, [r7, #44]	@ 0x2c
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800468a:	f107 0308 	add.w	r3, r7, #8
 800468e:	4618      	mov	r0, r3
 8004690:	f000 f929 	bl	80048e6 <_ZNK9__gnu_cxx17__normal_iteratorIPP6ScreenSt6vectorIS2_SaIS2_EEE4baseEv>
 8004694:	4603      	mov	r3, r0
 8004696:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	4618      	mov	r0, r3
 800469c:	f7fe f84d 	bl	800273a <_ZNSt12_Vector_baseIP6ScreenSaIS1_EE19_M_get_Tp_allocatorEv>
 80046a0:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80046a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80046a4:	6a39      	ldr	r1, [r7, #32]
 80046a6:	4620      	mov	r0, r4
 80046a8:	f000 f909 	bl	80048be <_ZNSt6vectorIP6ScreenSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 80046ac:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80046ae:	e026      	b.n	80046fe <_ZNSt6vectorIP6ScreenSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x11a>
		(__old_start, __position.base(),
 80046b0:	f107 0308 	add.w	r3, r7, #8
 80046b4:	4618      	mov	r0, r3
 80046b6:	f000 f916 	bl	80048e6 <_ZNK9__gnu_cxx17__normal_iteratorIPP6ScreenSt6vectorIS2_SaIS2_EEE4baseEv>
 80046ba:	4603      	mov	r3, r0
 80046bc:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	4618      	mov	r0, r3
 80046c2:	f7fe f83a 	bl	800273a <_ZNSt12_Vector_baseIP6ScreenSaIS1_EE19_M_get_Tp_allocatorEv>
 80046c6:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 80046c8:	69ba      	ldr	r2, [r7, #24]
 80046ca:	4621      	mov	r1, r4
 80046cc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80046ce:	f000 f915 	bl	80048fc <_ZSt34__uninitialized_move_if_noexcept_aIPP6ScreenS2_SaIS1_EET0_T_S5_S4_RT1_>
 80046d2:	62f8      	str	r0, [r7, #44]	@ 0x2c
	      ++__new_finish;
 80046d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046d6:	3304      	adds	r3, #4
 80046d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
		(__position.base(), __old_finish,
 80046da:	f107 0308 	add.w	r3, r7, #8
 80046de:	4618      	mov	r0, r3
 80046e0:	f000 f901 	bl	80048e6 <_ZNK9__gnu_cxx17__normal_iteratorIPP6ScreenSt6vectorIS2_SaIS2_EEE4baseEv>
 80046e4:	4603      	mov	r3, r0
 80046e6:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	4618      	mov	r0, r3
 80046ec:	f7fe f825 	bl	800273a <_ZNSt12_Vector_baseIP6ScreenSaIS1_EE19_M_get_Tp_allocatorEv>
 80046f0:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 80046f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80046f4:	6a39      	ldr	r1, [r7, #32]
 80046f6:	4620      	mov	r0, r4
 80046f8:	f000 f900 	bl	80048fc <_ZSt34__uninitialized_move_if_noexcept_aIPP6ScreenS2_SaIS1_EET0_T_S5_S4_RT1_>
 80046fc:	62f8      	str	r0, [r7, #44]	@ 0x2c
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 80046fe:	f7ff ff5b 	bl	80045b8 <_ZNSt6vectorIP6ScreenSaIS1_EE15_S_use_relocateEv>
 8004702:	4603      	mov	r3, r0
 8004704:	f083 0301 	eor.w	r3, r3, #1
 8004708:	b2db      	uxtb	r3, r3
 800470a:	2b00      	cmp	r3, #0
 800470c:	d009      	beq.n	8004722 <_ZNSt6vectorIP6ScreenSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x13e>
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	4618      	mov	r0, r3
 8004712:	f7fe f812 	bl	800273a <_ZNSt12_Vector_baseIP6ScreenSaIS1_EE19_M_get_Tp_allocatorEv>
 8004716:	4603      	mov	r3, r0
 8004718:	461a      	mov	r2, r3
 800471a:	6a39      	ldr	r1, [r7, #32]
 800471c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800471e:	f7fe f817 	bl	8002750 <_ZSt8_DestroyIPP6ScreenS1_EvT_S3_RSaIT0_E>
      _M_deallocate(__old_start,
 8004722:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	689a      	ldr	r2, [r3, #8]
 8004728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800472a:	1ad3      	subs	r3, r2, r3
 800472c:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 800472e:	461a      	mov	r2, r3
 8004730:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004732:	f7fd ffef 	bl	8002714 <_ZNSt12_Vector_baseIP6ScreenSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	69ba      	ldr	r2, [r7, #24]
 800473a:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004740:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8004742:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004744:	009b      	lsls	r3, r3, #2
 8004746:	69ba      	ldr	r2, [r7, #24]
 8004748:	441a      	add	r2, r3
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	609a      	str	r2, [r3, #8]
    }
 800474e:	bf00      	nop
 8004750:	3730      	adds	r7, #48	@ 0x30
 8004752:	46bd      	mov	sp, r7
 8004754:	bdb0      	pop	{r4, r5, r7, pc}
 8004756:	bf00      	nop
 8004758:	0800f484 	.word	0x0800f484

0800475c <_ZSt7forwardIRKP6ScreenEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800475c:	b480      	push	{r7}
 800475e:	b083      	sub	sp, #12
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	4618      	mov	r0, r3
 8004768:	370c      	adds	r7, #12
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr

08004772 <_ZNSt15__new_allocatorIP6ScreenE9constructIS1_JRKS1_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8004772:	b590      	push	{r4, r7, lr}
 8004774:	b085      	sub	sp, #20
 8004776:	af00      	add	r7, sp, #0
 8004778:	60f8      	str	r0, [r7, #12]
 800477a:	60b9      	str	r1, [r7, #8]
 800477c:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	4619      	mov	r1, r3
 8004782:	2004      	movs	r0, #4
 8004784:	f7fc fe30 	bl	80013e8 <_ZnwjPv>
 8004788:	4604      	mov	r4, r0
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f7ff ffe6 	bl	800475c <_ZSt7forwardIRKP6ScreenEOT_RNSt16remove_referenceIS4_E4typeE>
 8004790:	4603      	mov	r3, r0
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	6023      	str	r3, [r4, #0]
 8004796:	bf00      	nop
 8004798:	3714      	adds	r7, #20
 800479a:	46bd      	mov	sp, r7
 800479c:	bd90      	pop	{r4, r7, pc}

0800479e <_ZN9__gnu_cxx17__normal_iteratorIPP6ScreenSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800479e:	b480      	push	{r7}
 80047a0:	b083      	sub	sp, #12
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	6078      	str	r0, [r7, #4]
 80047a6:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	601a      	str	r2, [r3, #0]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	4618      	mov	r0, r3
 80047b4:	370c      	adds	r7, #12
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr

080047be <_ZNKSt6vectorIP6ScreenSaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 80047be:	b590      	push	{r4, r7, lr}
 80047c0:	b087      	sub	sp, #28
 80047c2:	af00      	add	r7, sp, #0
 80047c4:	60f8      	str	r0, [r7, #12]
 80047c6:	60b9      	str	r1, [r7, #8]
 80047c8:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 80047ca:	68f8      	ldr	r0, [r7, #12]
 80047cc:	f000 f8af 	bl	800492e <_ZNKSt6vectorIP6ScreenSaIS1_EE8max_sizeEv>
 80047d0:	4604      	mov	r4, r0
 80047d2:	68f8      	ldr	r0, [r7, #12]
 80047d4:	f7ff febc 	bl	8004550 <_ZNKSt6vectorIP6ScreenSaIS1_EE4sizeEv>
 80047d8:	4603      	mov	r3, r0
 80047da:	1ae2      	subs	r2, r4, r3
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	429a      	cmp	r2, r3
 80047e0:	bf34      	ite	cc
 80047e2:	2301      	movcc	r3, #1
 80047e4:	2300      	movcs	r3, #0
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d002      	beq.n	80047f2 <_ZNKSt6vectorIP6ScreenSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f007 fc3a 	bl	800c066 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 80047f2:	68f8      	ldr	r0, [r7, #12]
 80047f4:	f7ff feac 	bl	8004550 <_ZNKSt6vectorIP6ScreenSaIS1_EE4sizeEv>
 80047f8:	4604      	mov	r4, r0
 80047fa:	68f8      	ldr	r0, [r7, #12]
 80047fc:	f7ff fea8 	bl	8004550 <_ZNKSt6vectorIP6ScreenSaIS1_EE4sizeEv>
 8004800:	4603      	mov	r3, r0
 8004802:	613b      	str	r3, [r7, #16]
 8004804:	f107 0208 	add.w	r2, r7, #8
 8004808:	f107 0310 	add.w	r3, r7, #16
 800480c:	4611      	mov	r1, r2
 800480e:	4618      	mov	r0, r3
 8004810:	f7fe f956 	bl	8002ac0 <_ZSt3maxIjERKT_S2_S2_>
 8004814:	4603      	mov	r3, r0
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4423      	add	r3, r4
 800481a:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800481c:	68f8      	ldr	r0, [r7, #12]
 800481e:	f7ff fe97 	bl	8004550 <_ZNKSt6vectorIP6ScreenSaIS1_EE4sizeEv>
 8004822:	4602      	mov	r2, r0
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	4293      	cmp	r3, r2
 8004828:	d306      	bcc.n	8004838 <_ZNKSt6vectorIP6ScreenSaIS1_EE12_M_check_lenEjPKc+0x7a>
 800482a:	68f8      	ldr	r0, [r7, #12]
 800482c:	f000 f87f 	bl	800492e <_ZNKSt6vectorIP6ScreenSaIS1_EE8max_sizeEv>
 8004830:	4602      	mov	r2, r0
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	4293      	cmp	r3, r2
 8004836:	d904      	bls.n	8004842 <_ZNKSt6vectorIP6ScreenSaIS1_EE12_M_check_lenEjPKc+0x84>
 8004838:	68f8      	ldr	r0, [r7, #12]
 800483a:	f000 f878 	bl	800492e <_ZNKSt6vectorIP6ScreenSaIS1_EE8max_sizeEv>
 800483e:	4603      	mov	r3, r0
 8004840:	e000      	b.n	8004844 <_ZNKSt6vectorIP6ScreenSaIS1_EE12_M_check_lenEjPKc+0x86>
 8004842:	697b      	ldr	r3, [r7, #20]
      }
 8004844:	4618      	mov	r0, r3
 8004846:	371c      	adds	r7, #28
 8004848:	46bd      	mov	sp, r7
 800484a:	bd90      	pop	{r4, r7, pc}

0800484c <_ZNSt6vectorIP6ScreenSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800484c:	b580      	push	{r7, lr}
 800484e:	b084      	sub	sp, #16
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	f107 030c 	add.w	r3, r7, #12
 800485a:	4611      	mov	r1, r2
 800485c:	4618      	mov	r0, r3
 800485e:	f7ff ff9e 	bl	800479e <_ZN9__gnu_cxx17__normal_iteratorIPP6ScreenSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	4618      	mov	r0, r3
 8004866:	3710      	adds	r7, #16
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}

0800486c <_ZN9__gnu_cxxmiIPP6ScreenSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800486c:	b590      	push	{r4, r7, lr}
 800486e:	b083      	sub	sp, #12
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
 8004874:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f000 f835 	bl	80048e6 <_ZNK9__gnu_cxx17__normal_iteratorIPP6ScreenSt6vectorIS2_SaIS2_EEE4baseEv>
 800487c:	4603      	mov	r3, r0
 800487e:	681c      	ldr	r4, [r3, #0]
 8004880:	6838      	ldr	r0, [r7, #0]
 8004882:	f000 f830 	bl	80048e6 <_ZNK9__gnu_cxx17__normal_iteratorIPP6ScreenSt6vectorIS2_SaIS2_EEE4baseEv>
 8004886:	4603      	mov	r3, r0
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	1ae3      	subs	r3, r4, r3
 800488c:	109b      	asrs	r3, r3, #2
 800488e:	4618      	mov	r0, r3
 8004890:	370c      	adds	r7, #12
 8004892:	46bd      	mov	sp, r7
 8004894:	bd90      	pop	{r4, r7, pc}

08004896 <_ZNSt12_Vector_baseIP6ScreenSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8004896:	b580      	push	{r7, lr}
 8004898:	b082      	sub	sp, #8
 800489a:	af00      	add	r7, sp, #0
 800489c:	6078      	str	r0, [r7, #4]
 800489e:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d006      	beq.n	80048b4 <_ZNSt12_Vector_baseIP6ScreenSaIS1_EE11_M_allocateEj+0x1e>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6839      	ldr	r1, [r7, #0]
 80048aa:	4618      	mov	r0, r3
 80048ac:	f000 f850 	bl	8004950 <_ZNSt16allocator_traitsISaIP6ScreenEE8allocateERS2_j>
 80048b0:	4603      	mov	r3, r0
 80048b2:	e000      	b.n	80048b6 <_ZNSt12_Vector_baseIP6ScreenSaIS1_EE11_M_allocateEj+0x20>
 80048b4:	2300      	movs	r3, #0
      }
 80048b6:	4618      	mov	r0, r3
 80048b8:	3708      	adds	r7, #8
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}

080048be <_ZNSt6vectorIP6ScreenSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 80048be:	b590      	push	{r4, r7, lr}
 80048c0:	b087      	sub	sp, #28
 80048c2:	af02      	add	r7, sp, #8
 80048c4:	60f8      	str	r0, [r7, #12]
 80048c6:	60b9      	str	r1, [r7, #8]
 80048c8:	607a      	str	r2, [r7, #4]
 80048ca:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 80048cc:	f88d 4000 	strb.w	r4, [sp]
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	68b9      	ldr	r1, [r7, #8]
 80048d6:	68f8      	ldr	r0, [r7, #12]
 80048d8:	f000 f849 	bl	800496e <_ZNSt6vectorIP6ScreenSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 80048dc:	4603      	mov	r3, r0
      }
 80048de:	4618      	mov	r0, r3
 80048e0:	3714      	adds	r7, #20
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd90      	pop	{r4, r7, pc}

080048e6 <_ZNK9__gnu_cxx17__normal_iteratorIPP6ScreenSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 80048e6:	b480      	push	{r7}
 80048e8:	b083      	sub	sp, #12
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	4618      	mov	r0, r3
 80048f2:	370c      	adds	r7, #12
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr

080048fc <_ZSt34__uninitialized_move_if_noexcept_aIPP6ScreenS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 80048fc:	b590      	push	{r4, r7, lr}
 80048fe:	b085      	sub	sp, #20
 8004900:	af00      	add	r7, sp, #0
 8004902:	60f8      	str	r0, [r7, #12]
 8004904:	60b9      	str	r1, [r7, #8]
 8004906:	607a      	str	r2, [r7, #4]
 8004908:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 800490a:	68f8      	ldr	r0, [r7, #12]
 800490c:	f000 f841 	bl	8004992 <_ZSt32__make_move_if_noexcept_iteratorIP6ScreenSt13move_iteratorIPS1_EET0_PT_>
 8004910:	4604      	mov	r4, r0
 8004912:	68b8      	ldr	r0, [r7, #8]
 8004914:	f000 f83d 	bl	8004992 <_ZSt32__make_move_if_noexcept_iteratorIP6ScreenSt13move_iteratorIPS1_EET0_PT_>
 8004918:	4601      	mov	r1, r0
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	687a      	ldr	r2, [r7, #4]
 800491e:	4620      	mov	r0, r4
 8004920:	f000 f846 	bl	80049b0 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP6ScreenES3_S2_ET0_T_S6_S5_RSaIT1_E>
 8004924:	4603      	mov	r3, r0
    }
 8004926:	4618      	mov	r0, r3
 8004928:	3714      	adds	r7, #20
 800492a:	46bd      	mov	sp, r7
 800492c:	bd90      	pop	{r4, r7, pc}

0800492e <_ZNKSt6vectorIP6ScreenSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800492e:	b580      	push	{r7, lr}
 8004930:	b082      	sub	sp, #8
 8004932:	af00      	add	r7, sp, #0
 8004934:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4618      	mov	r0, r3
 800493a:	f000 f864 	bl	8004a06 <_ZNKSt12_Vector_baseIP6ScreenSaIS1_EE19_M_get_Tp_allocatorEv>
 800493e:	4603      	mov	r3, r0
 8004940:	4618      	mov	r0, r3
 8004942:	f000 f846 	bl	80049d2 <_ZNSt6vectorIP6ScreenSaIS1_EE11_S_max_sizeERKS2_>
 8004946:	4603      	mov	r3, r0
 8004948:	4618      	mov	r0, r3
 800494a:	3708      	adds	r7, #8
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}

08004950 <_ZNSt16allocator_traitsISaIP6ScreenEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8004950:	b580      	push	{r7, lr}
 8004952:	b082      	sub	sp, #8
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
 8004958:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800495a:	2200      	movs	r2, #0
 800495c:	6839      	ldr	r1, [r7, #0]
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f000 f85c 	bl	8004a1c <_ZNSt15__new_allocatorIP6ScreenE8allocateEjPKv>
 8004964:	4603      	mov	r3, r0
 8004966:	4618      	mov	r0, r3
 8004968:	3708      	adds	r7, #8
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}

0800496e <_ZNSt6vectorIP6ScreenSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 800496e:	b580      	push	{r7, lr}
 8004970:	b084      	sub	sp, #16
 8004972:	af00      	add	r7, sp, #0
 8004974:	60f8      	str	r0, [r7, #12]
 8004976:	60b9      	str	r1, [r7, #8]
 8004978:	607a      	str	r2, [r7, #4]
 800497a:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	687a      	ldr	r2, [r7, #4]
 8004980:	68b9      	ldr	r1, [r7, #8]
 8004982:	68f8      	ldr	r0, [r7, #12]
 8004984:	f000 f873 	bl	8004a6e <_ZSt12__relocate_aIPP6ScreenS2_SaIS1_EET0_T_S5_S4_RT1_>
 8004988:	4603      	mov	r3, r0
      }
 800498a:	4618      	mov	r0, r3
 800498c:	3710      	adds	r7, #16
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}

08004992 <_ZSt32__make_move_if_noexcept_iteratorIP6ScreenSt13move_iteratorIPS1_EET0_PT_>:
    __make_move_if_noexcept_iterator(_Tp* __i)
 8004992:	b580      	push	{r7, lr}
 8004994:	b084      	sub	sp, #16
 8004996:	af00      	add	r7, sp, #0
 8004998:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 800499a:	f107 030c 	add.w	r3, r7, #12
 800499e:	6879      	ldr	r1, [r7, #4]
 80049a0:	4618      	mov	r0, r3
 80049a2:	f000 f881 	bl	8004aa8 <_ZNSt13move_iteratorIPP6ScreenEC1ES2_>
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	4618      	mov	r0, r3
 80049aa:	3710      	adds	r7, #16
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}

080049b0 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP6ScreenES3_S2_ET0_T_S6_S5_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b084      	sub	sp, #16
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	60f8      	str	r0, [r7, #12]
 80049b8:	60b9      	str	r1, [r7, #8]
 80049ba:	607a      	str	r2, [r7, #4]
 80049bc:	603b      	str	r3, [r7, #0]
      return std::uninitialized_copy(__first, __last, __result);
 80049be:	687a      	ldr	r2, [r7, #4]
 80049c0:	68b9      	ldr	r1, [r7, #8]
 80049c2:	68f8      	ldr	r0, [r7, #12]
 80049c4:	f000 f882 	bl	8004acc <_ZSt18uninitialized_copyISt13move_iteratorIPP6ScreenES3_ET0_T_S6_S5_>
 80049c8:	4603      	mov	r3, r0
    }
 80049ca:	4618      	mov	r0, r3
 80049cc:	3710      	adds	r7, #16
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}

080049d2 <_ZNSt6vectorIP6ScreenSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 80049d2:	b580      	push	{r7, lr}
 80049d4:	b084      	sub	sp, #16
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 80049da:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
 80049de:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 80049e0:	6878      	ldr	r0, [r7, #4]
 80049e2:	f000 f887 	bl	8004af4 <_ZNSt16allocator_traitsISaIP6ScreenEE8max_sizeERKS2_>
 80049e6:	4603      	mov	r3, r0
 80049e8:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 80049ea:	f107 0208 	add.w	r2, r7, #8
 80049ee:	f107 030c 	add.w	r3, r7, #12
 80049f2:	4611      	mov	r1, r2
 80049f4:	4618      	mov	r0, r3
 80049f6:	f7fe f9c7 	bl	8002d88 <_ZSt3minIjERKT_S2_S2_>
 80049fa:	4603      	mov	r3, r0
 80049fc:	681b      	ldr	r3, [r3, #0]
      }
 80049fe:	4618      	mov	r0, r3
 8004a00:	3710      	adds	r7, #16
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}

08004a06 <_ZNKSt12_Vector_baseIP6ScreenSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8004a06:	b480      	push	{r7}
 8004a08:	b083      	sub	sp, #12
 8004a0a:	af00      	add	r7, sp, #0
 8004a0c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	4618      	mov	r0, r3
 8004a12:	370c      	adds	r7, #12
 8004a14:	46bd      	mov	sp, r7
 8004a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1a:	4770      	bx	lr

08004a1c <_ZNSt15__new_allocatorIP6ScreenE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b084      	sub	sp, #16
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	60f8      	str	r0, [r7, #12]
 8004a24:	60b9      	str	r1, [r7, #8]
 8004a26:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8004a28:	68f8      	ldr	r0, [r7, #12]
 8004a2a:	f000 f86f 	bl	8004b0c <_ZNKSt15__new_allocatorIP6ScreenE11_M_max_sizeEv>
 8004a2e:	4602      	mov	r2, r0
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	4293      	cmp	r3, r2
 8004a34:	bf8c      	ite	hi
 8004a36:	2301      	movhi	r3, #1
 8004a38:	2300      	movls	r3, #0
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	bf14      	ite	ne
 8004a40:	2301      	movne	r3, #1
 8004a42:	2300      	moveq	r3, #0
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d007      	beq.n	8004a5a <_ZNSt15__new_allocatorIP6ScreenE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a50:	d301      	bcc.n	8004a56 <_ZNSt15__new_allocatorIP6ScreenE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8004a52:	f007 fb05 	bl	800c060 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8004a56:	f007 fb00 	bl	800c05a <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	009b      	lsls	r3, r3, #2
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f007 faea 	bl	800c038 <_Znwj>
 8004a64:	4603      	mov	r3, r0
      }
 8004a66:	4618      	mov	r0, r3
 8004a68:	3710      	adds	r7, #16
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}

08004a6e <_ZSt12__relocate_aIPP6ScreenS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8004a6e:	b5b0      	push	{r4, r5, r7, lr}
 8004a70:	b084      	sub	sp, #16
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	60f8      	str	r0, [r7, #12]
 8004a76:	60b9      	str	r1, [r7, #8]
 8004a78:	607a      	str	r2, [r7, #4]
 8004a7a:	603b      	str	r3, [r7, #0]
      return std::__relocate_a_1(std::__niter_base(__first),
 8004a7c:	68f8      	ldr	r0, [r7, #12]
 8004a7e:	f000 f851 	bl	8004b24 <_ZSt12__niter_baseIPP6ScreenET_S3_>
 8004a82:	4604      	mov	r4, r0
 8004a84:	68b8      	ldr	r0, [r7, #8]
 8004a86:	f000 f84d 	bl	8004b24 <_ZSt12__niter_baseIPP6ScreenET_S3_>
 8004a8a:	4605      	mov	r5, r0
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	f000 f849 	bl	8004b24 <_ZSt12__niter_baseIPP6ScreenET_S3_>
 8004a92:	4602      	mov	r2, r0
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	4629      	mov	r1, r5
 8004a98:	4620      	mov	r0, r4
 8004a9a:	f000 f84e 	bl	8004b3a <_ZSt14__relocate_a_1IP6ScreenS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 8004a9e:	4603      	mov	r3, r0
    }
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3710      	adds	r7, #16
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bdb0      	pop	{r4, r5, r7, pc}

08004aa8 <_ZNSt13move_iteratorIPP6ScreenEC1ES2_>:
      move_iterator(iterator_type __i)
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b082      	sub	sp, #8
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
 8004ab0:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 8004ab2:	463b      	mov	r3, r7
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f000 f85e 	bl	8004b76 <_ZSt4moveIRPP6ScreenEONSt16remove_referenceIT_E4typeEOS5_>
 8004aba:	4603      	mov	r3, r0
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	601a      	str	r2, [r3, #0]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	3708      	adds	r7, #8
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}

08004acc <_ZSt18uninitialized_copyISt13move_iteratorIPP6ScreenES3_ET0_T_S6_S5_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b086      	sub	sp, #24
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	60f8      	str	r0, [r7, #12]
 8004ad4:	60b9      	str	r1, [r7, #8]
 8004ad6:	607a      	str	r2, [r7, #4]
      const bool __can_memmove = __is_trivial(_ValueType1);
 8004ad8:	2301      	movs	r3, #1
 8004ada:	75fb      	strb	r3, [r7, #23]
      const bool __assignable
 8004adc:	2301      	movs	r3, #1
 8004ade:	75bb      	strb	r3, [r7, #22]
	__uninit_copy(__first, __last, __result);
 8004ae0:	687a      	ldr	r2, [r7, #4]
 8004ae2:	68b9      	ldr	r1, [r7, #8]
 8004ae4:	68f8      	ldr	r0, [r7, #12]
 8004ae6:	f000 f851 	bl	8004b8c <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP6ScreenES5_EET0_T_S8_S7_>
 8004aea:	4603      	mov	r3, r0
    }
 8004aec:	4618      	mov	r0, r3
 8004aee:	3718      	adds	r7, #24
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bd80      	pop	{r7, pc}

08004af4 <_ZNSt16allocator_traitsISaIP6ScreenEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b082      	sub	sp, #8
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	f000 f855 	bl	8004bac <_ZNKSt15__new_allocatorIP6ScreenE8max_sizeEv>
 8004b02:	4603      	mov	r3, r0
      }
 8004b04:	4618      	mov	r0, r3
 8004b06:	3708      	adds	r7, #8
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}

08004b0c <_ZNKSt15__new_allocatorIP6ScreenE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8004b0c:	b480      	push	{r7}
 8004b0e:	b083      	sub	sp, #12
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8004b14:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
      }
 8004b18:	4618      	mov	r0, r3
 8004b1a:	370c      	adds	r7, #12
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b22:	4770      	bx	lr

08004b24 <_ZSt12__niter_baseIPP6ScreenET_S3_>:
    __niter_base(_Iterator __it)
 8004b24:	b480      	push	{r7}
 8004b26:	b083      	sub	sp, #12
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
    { return __it; }
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	4618      	mov	r0, r3
 8004b30:	370c      	adds	r7, #12
 8004b32:	46bd      	mov	sp, r7
 8004b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b38:	4770      	bx	lr

08004b3a <_ZSt14__relocate_a_1IP6ScreenS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8004b3a:	b580      	push	{r7, lr}
 8004b3c:	b086      	sub	sp, #24
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	60f8      	str	r0, [r7, #12]
 8004b42:	60b9      	str	r1, [r7, #8]
 8004b44:	607a      	str	r2, [r7, #4]
 8004b46:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8004b48:	68ba      	ldr	r2, [r7, #8]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	1ad3      	subs	r3, r2, r3
 8004b4e:	109b      	asrs	r3, r3, #2
 8004b50:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	dd06      	ble.n	8004b66 <_ZSt14__relocate_a_1IP6ScreenS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	009b      	lsls	r3, r3, #2
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	68f9      	ldr	r1, [r7, #12]
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f008 fa21 	bl	800cfa8 <memmove>
      return __result + __count;
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	4413      	add	r3, r2
    }
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3718      	adds	r7, #24
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}

08004b76 <_ZSt4moveIRPP6ScreenEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8004b76:	b480      	push	{r7}
 8004b78:	b083      	sub	sp, #12
 8004b7a:	af00      	add	r7, sp, #0
 8004b7c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	4618      	mov	r0, r3
 8004b82:	370c      	adds	r7, #12
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr

08004b8c <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP6ScreenES5_EET0_T_S8_S7_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b084      	sub	sp, #16
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	60f8      	str	r0, [r7, #12]
 8004b94:	60b9      	str	r1, [r7, #8]
 8004b96:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8004b98:	687a      	ldr	r2, [r7, #4]
 8004b9a:	68b9      	ldr	r1, [r7, #8]
 8004b9c:	68f8      	ldr	r0, [r7, #12]
 8004b9e:	f000 f811 	bl	8004bc4 <_ZSt4copyISt13move_iteratorIPP6ScreenES3_ET0_T_S6_S5_>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3710      	adds	r7, #16
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}

08004bac <_ZNKSt15__new_allocatorIP6ScreenE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b082      	sub	sp, #8
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	f7ff ffa9 	bl	8004b0c <_ZNKSt15__new_allocatorIP6ScreenE11_M_max_sizeEv>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3708      	adds	r7, #8
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}

08004bc4 <_ZSt4copyISt13move_iteratorIPP6ScreenES3_ET0_T_S6_S5_>:
    copy(_II __first, _II __last, _OI __result)
 8004bc4:	b590      	push	{r4, r7, lr}
 8004bc6:	b085      	sub	sp, #20
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	60f8      	str	r0, [r7, #12]
 8004bcc:	60b9      	str	r1, [r7, #8]
 8004bce:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8004bd0:	68f8      	ldr	r0, [r7, #12]
 8004bd2:	f000 f80f 	bl	8004bf4 <_ZSt12__miter_baseIPP6ScreenEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8004bd6:	4604      	mov	r4, r0
 8004bd8:	68b8      	ldr	r0, [r7, #8]
 8004bda:	f000 f80b 	bl	8004bf4 <_ZSt12__miter_baseIPP6ScreenEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8004bde:	4603      	mov	r3, r0
 8004be0:	687a      	ldr	r2, [r7, #4]
 8004be2:	4619      	mov	r1, r3
 8004be4:	4620      	mov	r0, r4
 8004be6:	f000 f816 	bl	8004c16 <_ZSt13__copy_move_aILb1EPP6ScreenS2_ET1_T0_S4_S3_>
 8004bea:	4603      	mov	r3, r0
    }
 8004bec:	4618      	mov	r0, r3
 8004bee:	3714      	adds	r7, #20
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd90      	pop	{r4, r7, pc}

08004bf4 <_ZSt12__miter_baseIPP6ScreenEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
    __miter_base(move_iterator<_Iterator> __it)
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b082      	sub	sp, #8
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
    { return __miter_base(__it.base()); }
 8004bfc:	1d3b      	adds	r3, r7, #4
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f000 f82c 	bl	8004c5c <_ZNKSt13move_iteratorIPP6ScreenE4baseEv>
 8004c04:	4603      	mov	r3, r0
 8004c06:	4618      	mov	r0, r3
 8004c08:	f000 f834 	bl	8004c74 <_ZSt12__miter_baseIPP6ScreenET_S3_>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3708      	adds	r7, #8
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}

08004c16 <_ZSt13__copy_move_aILb1EPP6ScreenS2_ET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8004c16:	b5b0      	push	{r4, r5, r7, lr}
 8004c18:	b084      	sub	sp, #16
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	60f8      	str	r0, [r7, #12]
 8004c1e:	60b9      	str	r1, [r7, #8]
 8004c20:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8004c22:	68f8      	ldr	r0, [r7, #12]
 8004c24:	f7ff ff7e 	bl	8004b24 <_ZSt12__niter_baseIPP6ScreenET_S3_>
 8004c28:	4604      	mov	r4, r0
 8004c2a:	68b8      	ldr	r0, [r7, #8]
 8004c2c:	f7ff ff7a 	bl	8004b24 <_ZSt12__niter_baseIPP6ScreenET_S3_>
 8004c30:	4605      	mov	r5, r0
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	4618      	mov	r0, r3
 8004c36:	f7ff ff75 	bl	8004b24 <_ZSt12__niter_baseIPP6ScreenET_S3_>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	461a      	mov	r2, r3
 8004c3e:	4629      	mov	r1, r5
 8004c40:	4620      	mov	r0, r4
 8004c42:	f000 f822 	bl	8004c8a <_ZSt14__copy_move_a1ILb1EPP6ScreenS2_ET1_T0_S4_S3_>
 8004c46:	4602      	mov	r2, r0
 8004c48:	1d3b      	adds	r3, r7, #4
 8004c4a:	4611      	mov	r1, r2
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	f000 f82c 	bl	8004caa <_ZSt12__niter_wrapIPP6ScreenET_RKS3_S3_>
 8004c52:	4603      	mov	r3, r0
    }
 8004c54:	4618      	mov	r0, r3
 8004c56:	3710      	adds	r7, #16
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bdb0      	pop	{r4, r5, r7, pc}

08004c5c <_ZNKSt13move_iteratorIPP6ScreenE4baseEv>:
      base() const
 8004c5c:	b480      	push	{r7}
 8004c5e:	b083      	sub	sp, #12
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4618      	mov	r0, r3
 8004c6a:	370c      	adds	r7, #12
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c72:	4770      	bx	lr

08004c74 <_ZSt12__miter_baseIPP6ScreenET_S3_>:
    __miter_base(_Iterator __it)
 8004c74:	b480      	push	{r7}
 8004c76:	b083      	sub	sp, #12
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
    { return __it; }
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	4618      	mov	r0, r3
 8004c80:	370c      	adds	r7, #12
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr

08004c8a <_ZSt14__copy_move_a1ILb1EPP6ScreenS2_ET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8004c8a:	b580      	push	{r7, lr}
 8004c8c:	b084      	sub	sp, #16
 8004c8e:	af00      	add	r7, sp, #0
 8004c90:	60f8      	str	r0, [r7, #12]
 8004c92:	60b9      	str	r1, [r7, #8]
 8004c94:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8004c96:	687a      	ldr	r2, [r7, #4]
 8004c98:	68b9      	ldr	r1, [r7, #8]
 8004c9a:	68f8      	ldr	r0, [r7, #12]
 8004c9c:	f000 f811 	bl	8004cc2 <_ZSt14__copy_move_a2ILb1EPP6ScreenS2_ET1_T0_S4_S3_>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3710      	adds	r7, #16
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}

08004caa <_ZSt12__niter_wrapIPP6ScreenET_RKS3_S3_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8004caa:	b480      	push	{r7}
 8004cac:	b083      	sub	sp, #12
 8004cae:	af00      	add	r7, sp, #0
 8004cb0:	6078      	str	r0, [r7, #4]
 8004cb2:	6039      	str	r1, [r7, #0]
    { return __res; }
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	370c      	adds	r7, #12
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc0:	4770      	bx	lr

08004cc2 <_ZSt14__copy_move_a2ILb1EPP6ScreenS2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8004cc2:	b580      	push	{r7, lr}
 8004cc4:	b084      	sub	sp, #16
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	60f8      	str	r0, [r7, #12]
 8004cca:	60b9      	str	r1, [r7, #8]
 8004ccc:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	68b9      	ldr	r1, [r7, #8]
 8004cd2:	68f8      	ldr	r0, [r7, #12]
 8004cd4:	f000 f805 	bl	8004ce2 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP6ScreenEEPT_PKS5_S8_S6_>
 8004cd8:	4603      	mov	r3, r0
    }
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3710      	adds	r7, #16
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}

08004ce2 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP6ScreenEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8004ce2:	b580      	push	{r7, lr}
 8004ce4:	b086      	sub	sp, #24
 8004ce6:	af00      	add	r7, sp, #0
 8004ce8:	60f8      	str	r0, [r7, #12]
 8004cea:	60b9      	str	r1, [r7, #8]
 8004cec:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8004cee:	68ba      	ldr	r2, [r7, #8]
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	1ad3      	subs	r3, r2, r3
 8004cf4:	109b      	asrs	r3, r3, #2
 8004cf6:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d006      	beq.n	8004d0c <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP6ScreenEEPT_PKS5_S8_S6_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	009b      	lsls	r3, r3, #2
 8004d02:	461a      	mov	r2, r3
 8004d04:	68f9      	ldr	r1, [r7, #12]
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f008 f94e 	bl	800cfa8 <memmove>
	  return __result + _Num;
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	687a      	ldr	r2, [r7, #4]
 8004d12:	4413      	add	r3, r2
	}
 8004d14:	4618      	mov	r0, r3
 8004d16:	3718      	adds	r7, #24
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}

08004d1c <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b083      	sub	sp, #12
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
 8004d24:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8004d26:	bf00      	nop
 8004d28:	370c      	adds	r7, #12
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr

08004d32 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
void vApplicationMallocFailedHook(void)
{
 8004d32:	b480      	push	{r7}
 8004d34:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8004d36:	bf00      	nop
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3e:	4770      	bx	lr

08004d40 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b085      	sub	sp, #20
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004d48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d4c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004d4e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	4313      	orrs	r3, r2
 8004d56:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004d58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d5c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	4013      	ands	r3, r2
 8004d62:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004d64:	68fb      	ldr	r3, [r7, #12]
}
 8004d66:	bf00      	nop
 8004d68:	3714      	adds	r7, #20
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr
	...

08004d74 <HAL_GPIO_EXTI_Callback>:
void EPaperEntry(void *argument);

/* USER CODE BEGIN PFP */

#define DEBOUNCE_DELAY_MS 200  // Adjust debounce time as needed
void HAL_GPIO_EXTI_Callback(uint16_t pin){\
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b086      	sub	sp, #24
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	80fb      	strh	r3, [r7, #6]


    static uint32_t lastPressTime = 0;  // Store last press time
    uint32_t currentTime = xTaskGetTickCountFromISR();  // Get system time (ticks)
 8004d7e:	f005 fd6b 	bl	800a858 <xTaskGetTickCountFromISR>
 8004d82:	6178      	str	r0, [r7, #20]

    if ((currentTime - lastPressTime) < pdMS_TO_TICKS(DEBOUNCE_DELAY_MS)) {
 8004d84:	4b24      	ldr	r3, [pc, #144]	@ (8004e18 <HAL_GPIO_EXTI_Callback+0xa4>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	697a      	ldr	r2, [r7, #20]
 8004d8a:	1ad3      	subs	r3, r2, r3
 8004d8c:	2bc7      	cmp	r3, #199	@ 0xc7
 8004d8e:	d93f      	bls.n	8004e10 <HAL_GPIO_EXTI_Callback+0x9c>
        return;  // Ignore if press happens too soon
    }
    lastPressTime = currentTime;  // Update last press time
 8004d90:	4a21      	ldr	r2, [pc, #132]	@ (8004e18 <HAL_GPIO_EXTI_Callback+0xa4>)
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	6013      	str	r3, [r2, #0]

    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8004d96:	2300      	movs	r3, #0
 8004d98:	613b      	str	r3, [r7, #16]
    Button stateToSend = Button::Error;
 8004d9a:	2305      	movs	r3, #5
 8004d9c:	60fb      	str	r3, [r7, #12]

	switch(pin){
 8004d9e:	88fb      	ldrh	r3, [r7, #6]
 8004da0:	3b01      	subs	r3, #1
 8004da2:	2b07      	cmp	r3, #7
 8004da4:	d81e      	bhi.n	8004de4 <HAL_GPIO_EXTI_Callback+0x70>
 8004da6:	a201      	add	r2, pc, #4	@ (adr r2, 8004dac <HAL_GPIO_EXTI_Callback+0x38>)
 8004da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dac:	08004dcd 	.word	0x08004dcd
 8004db0:	08004dd3 	.word	0x08004dd3
 8004db4:	08004de5 	.word	0x08004de5
 8004db8:	08004dd9 	.word	0x08004dd9
 8004dbc:	08004de5 	.word	0x08004de5
 8004dc0:	08004de5 	.word	0x08004de5
 8004dc4:	08004de5 	.word	0x08004de5
 8004dc8:	08004ddf 	.word	0x08004ddf
	case(Button_1_Pin):
		stateToSend = Button::Up;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	60fb      	str	r3, [r7, #12]
		break;
 8004dd0:	e009      	b.n	8004de6 <HAL_GPIO_EXTI_Callback+0x72>
	case(Button_2_Pin):
		stateToSend = Button::Left;
 8004dd2:	2302      	movs	r3, #2
 8004dd4:	60fb      	str	r3, [r7, #12]
		break;
 8004dd6:	e006      	b.n	8004de6 <HAL_GPIO_EXTI_Callback+0x72>
	case(Button_3_Pin):
		stateToSend = Button::Middle;
 8004dd8:	2303      	movs	r3, #3
 8004dda:	60fb      	str	r3, [r7, #12]
		break;
 8004ddc:	e003      	b.n	8004de6 <HAL_GPIO_EXTI_Callback+0x72>
	case(Button_4_Pin):
		stateToSend = Button::Right;
 8004dde:	2304      	movs	r3, #4
 8004de0:	60fb      	str	r3, [r7, #12]
		break;
 8004de2:	e000      	b.n	8004de6 <HAL_GPIO_EXTI_Callback+0x72>
	//TODO NOT IMPLEMENTED
//	case(Button_1_Pin):
//		stateToSend = State::Down;
//		break;
	default:
		break;
 8004de4:	bf00      	nop
	}

	xQueueSendFromISR(buttonQueue, &stateToSend, &xHigherPriorityTaskWoken);
 8004de6:	4b0d      	ldr	r3, [pc, #52]	@ (8004e1c <HAL_GPIO_EXTI_Callback+0xa8>)
 8004de8:	6818      	ldr	r0, [r3, #0]
 8004dea:	f107 0210 	add.w	r2, r7, #16
 8004dee:	f107 010c 	add.w	r1, r7, #12
 8004df2:	2300      	movs	r3, #0
 8004df4:	f004 fed4 	bl	8009ba0 <xQueueGenericSendFromISR>


    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d009      	beq.n	8004e12 <HAL_GPIO_EXTI_Callback+0x9e>
 8004dfe:	4b08      	ldr	r3, [pc, #32]	@ (8004e20 <HAL_GPIO_EXTI_Callback+0xac>)
 8004e00:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e04:	601a      	str	r2, [r3, #0]
 8004e06:	f3bf 8f4f 	dsb	sy
 8004e0a:	f3bf 8f6f 	isb	sy
 8004e0e:	e000      	b.n	8004e12 <HAL_GPIO_EXTI_Callback+0x9e>
        return;  // Ignore if press happens too soon
 8004e10:	bf00      	nop
}
 8004e12:	3718      	adds	r7, #24
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}
 8004e18:	2000029c 	.word	0x2000029c
 8004e1c:	20000298 	.word	0x20000298
 8004e20:	e000ed04 	.word	0xe000ed04

08004e24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004e28:	f000 fd0c 	bl	8005844 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004e2c:	f000 f874 	bl	8004f18 <_Z18SystemClock_Configv>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8004e30:	f000 f8d4 	bl	8004fdc <_Z24PeriphCommonClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004e34:	f000 f936 	bl	80050a4 <_ZL12MX_GPIO_Initv>
  MX_SPI1_Init();
 8004e38:	f000 f8f2 	bl	8005020 <_ZL12MX_SPI1_Initv>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8004e3c:	f004 f992 	bl	8009164 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of xEPaperBusySemaphore */
  xEPaperBusySemaphoreHandle = osSemaphoreNew(1, 1, &xEPaperBusySemaphore_attributes);
 8004e40:	4a2b      	ldr	r2, [pc, #172]	@ (8004ef0 <main+0xcc>)
 8004e42:	2101      	movs	r1, #1
 8004e44:	2001      	movs	r0, #1
 8004e46:	f004 fa84 	bl	8009352 <osSemaphoreNew>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	4a29      	ldr	r2, [pc, #164]	@ (8004ef4 <main+0xd0>)
 8004e4e:	6013      	str	r3, [r2, #0]

  /* creation of myBinarySem02 */
  myBinarySem02Handle = osSemaphoreNew(1, 1, &myBinarySem02_attributes);
 8004e50:	4a29      	ldr	r2, [pc, #164]	@ (8004ef8 <main+0xd4>)
 8004e52:	2101      	movs	r1, #1
 8004e54:	2001      	movs	r0, #1
 8004e56:	f004 fa7c 	bl	8009352 <osSemaphoreNew>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	4a27      	ldr	r2, [pc, #156]	@ (8004efc <main+0xd8>)
 8004e5e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  stateQueue  = xQueueCreate(5, sizeof(State));  // Queue can hold 5 events
 8004e60:	2200      	movs	r2, #0
 8004e62:	2104      	movs	r1, #4
 8004e64:	2005      	movs	r0, #5
 8004e66:	f004 fccc 	bl	8009802 <xQueueGenericCreate>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	4a24      	ldr	r2, [pc, #144]	@ (8004f00 <main+0xdc>)
 8004e6e:	6013      	str	r3, [r2, #0]
  if (stateQueue == NULL) {
 8004e70:	4b23      	ldr	r3, [pc, #140]	@ (8004f00 <main+0xdc>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d102      	bne.n	8004e7e <main+0x5a>
      printf("Failed to create queue!\n");
 8004e78:	4822      	ldr	r0, [pc, #136]	@ (8004f04 <main+0xe0>)
 8004e7a:	f007 ff49 	bl	800cd10 <puts>
  }

  stateQueue  = xQueueCreate(5, sizeof(State));  // Queue can hold 5 events
 8004e7e:	2200      	movs	r2, #0
 8004e80:	2104      	movs	r1, #4
 8004e82:	2005      	movs	r0, #5
 8004e84:	f004 fcbd 	bl	8009802 <xQueueGenericCreate>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	4a1d      	ldr	r2, [pc, #116]	@ (8004f00 <main+0xdc>)
 8004e8c:	6013      	str	r3, [r2, #0]
  if (stateQueue == NULL) {
 8004e8e:	4b1c      	ldr	r3, [pc, #112]	@ (8004f00 <main+0xdc>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d102      	bne.n	8004e9c <main+0x78>
      printf("Failed to create queue!\n");
 8004e96:	481b      	ldr	r0, [pc, #108]	@ (8004f04 <main+0xe0>)
 8004e98:	f007 ff3a 	bl	800cd10 <puts>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of EPaper */
  EPaperHandle = osThreadNew(EPaperEntry, NULL, &EPaper_attributes);
 8004e9c:	4a1a      	ldr	r2, [pc, #104]	@ (8004f08 <main+0xe4>)
 8004e9e:	2100      	movs	r1, #0
 8004ea0:	481a      	ldr	r0, [pc, #104]	@ (8004f0c <main+0xe8>)
 8004ea2:	f004 f9a9 	bl	80091f8 <osThreadNew>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	4a19      	ldr	r2, [pc, #100]	@ (8004f10 <main+0xec>)
 8004eaa:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8004eac:	4b19      	ldr	r3, [pc, #100]	@ (8004f14 <main+0xf0>)
 8004eae:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004eb2:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8004eb4:	4b17      	ldr	r3, [pc, #92]	@ (8004f14 <main+0xf0>)
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8004eba:	4b16      	ldr	r3, [pc, #88]	@ (8004f14 <main+0xf0>)
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8004ec0:	4b14      	ldr	r3, [pc, #80]	@ (8004f14 <main+0xf0>)
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8004ec6:	4b13      	ldr	r3, [pc, #76]	@ (8004f14 <main+0xf0>)
 8004ec8:	2200      	movs	r2, #0
 8004eca:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8004ecc:	4911      	ldr	r1, [pc, #68]	@ (8004f14 <main+0xf0>)
 8004ece:	2000      	movs	r0, #0
 8004ed0:	f000 fc0a 	bl	80056e8 <BSP_COM_Init>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	bf14      	ite	ne
 8004eda:	2301      	movne	r3, #1
 8004edc:	2300      	moveq	r3, #0
 8004ede:	b2db      	uxtb	r3, r3
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d001      	beq.n	8004ee8 <main+0xc4>
  {
    Error_Handler();
 8004ee4:	f000 f962 	bl	80051ac <Error_Handler>
  }

  /* Start scheduler */
  osKernelStart();
 8004ee8:	f004 f960 	bl	80091ac <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004eec:	bf00      	nop
 8004eee:	e7fd      	b.n	8004eec <main+0xc8>
 8004ef0:	08012508 	.word	0x08012508
 8004ef4:	2000028c 	.word	0x2000028c
 8004ef8:	08012518 	.word	0x08012518
 8004efc:	20000290 	.word	0x20000290
 8004f00:	20000294 	.word	0x20000294
 8004f04:	0800f4d0 	.word	0x0800f4d0
 8004f08:	080124e4 	.word	0x080124e4
 8004f0c:	08005175 	.word	0x08005175
 8004f10:	20000288 	.word	0x20000288
 8004f14:	20000214 	.word	0x20000214

08004f18 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b09a      	sub	sp, #104	@ 0x68
 8004f1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004f1e:	f107 0320 	add.w	r3, r7, #32
 8004f22:	2248      	movs	r2, #72	@ 0x48
 8004f24:	2100      	movs	r1, #0
 8004f26:	4618      	mov	r0, r3
 8004f28:	f008 f858 	bl	800cfdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004f2c:	1d3b      	adds	r3, r7, #4
 8004f2e:	2200      	movs	r2, #0
 8004f30:	601a      	str	r2, [r3, #0]
 8004f32:	605a      	str	r2, [r3, #4]
 8004f34:	609a      	str	r2, [r3, #8]
 8004f36:	60da      	str	r2, [r3, #12]
 8004f38:	611a      	str	r2, [r3, #16]
 8004f3a:	615a      	str	r2, [r3, #20]
 8004f3c:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004f3e:	4b26      	ldr	r3, [pc, #152]	@ (8004fd8 <_Z18SystemClock_Configv+0xc0>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004f46:	4a24      	ldr	r2, [pc, #144]	@ (8004fd8 <_Z18SystemClock_Configv+0xc0>)
 8004f48:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004f4c:	6013      	str	r3, [r2, #0]
 8004f4e:	4b22      	ldr	r3, [pc, #136]	@ (8004fd8 <_Z18SystemClock_Configv+0xc0>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004f56:	603b      	str	r3, [r7, #0]
 8004f58:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 8004f5a:	2322      	movs	r3, #34	@ 0x22
 8004f5c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004f5e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004f62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8004f64:	2301      	movs	r3, #1
 8004f66:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004f68:	2340      	movs	r3, #64	@ 0x40
 8004f6a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 8004f70:	23a0      	movs	r3, #160	@ 0xa0
 8004f72:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8004f74:	2300      	movs	r3, #0
 8004f76:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004f78:	f107 0320 	add.w	r3, r7, #32
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f001 fb09 	bl	8006594 <HAL_RCC_OscConfig>
 8004f82:	4603      	mov	r3, r0
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	bf14      	ite	ne
 8004f88:	2301      	movne	r3, #1
 8004f8a:	2300      	moveq	r3, #0
 8004f8c:	b2db      	uxtb	r3, r3
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d001      	beq.n	8004f96 <_Z18SystemClock_Configv+0x7e>
  {
    Error_Handler();
 8004f92:	f000 f90b 	bl	80051ac <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8004f96:	236f      	movs	r3, #111	@ 0x6f
 8004f98:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8004faa:	2300      	movs	r3, #0
 8004fac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8004fb2:	1d3b      	adds	r3, r7, #4
 8004fb4:	2101      	movs	r1, #1
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f001 fe60 	bl	8006c7c <HAL_RCC_ClockConfig>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	bf14      	ite	ne
 8004fc2:	2301      	movne	r3, #1
 8004fc4:	2300      	moveq	r3, #0
 8004fc6:	b2db      	uxtb	r3, r3
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d001      	beq.n	8004fd0 <_Z18SystemClock_Configv+0xb8>
  {
    Error_Handler();
 8004fcc:	f000 f8ee 	bl	80051ac <Error_Handler>
  }
}
 8004fd0:	bf00      	nop
 8004fd2:	3768      	adds	r7, #104	@ 0x68
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}
 8004fd8:	58000400 	.word	0x58000400

08004fdc <_Z24PeriphCommonClock_Configv>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b094      	sub	sp, #80	@ 0x50
 8004fe0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004fe2:	463b      	mov	r3, r7
 8004fe4:	2250      	movs	r2, #80	@ 0x50
 8004fe6:	2100      	movs	r1, #0
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f007 fff7 	bl	800cfdc <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 8004fee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004ff2:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004ffc:	463b      	mov	r3, r7
 8004ffe:	4618      	mov	r0, r3
 8005000:	f002 faab 	bl	800755a <HAL_RCCEx_PeriphCLKConfig>
 8005004:	4603      	mov	r3, r0
 8005006:	2b00      	cmp	r3, #0
 8005008:	bf14      	ite	ne
 800500a:	2301      	movne	r3, #1
 800500c:	2300      	moveq	r3, #0
 800500e:	b2db      	uxtb	r3, r3
 8005010:	2b00      	cmp	r3, #0
 8005012:	d001      	beq.n	8005018 <_Z24PeriphCommonClock_Configv+0x3c>
  {
    Error_Handler();
 8005014:	f000 f8ca 	bl	80051ac <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8005018:	bf00      	nop
 800501a:	3750      	adds	r7, #80	@ 0x50
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}

08005020 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8005024:	4b1d      	ldr	r3, [pc, #116]	@ (800509c <_ZL12MX_SPI1_Initv+0x7c>)
 8005026:	4a1e      	ldr	r2, [pc, #120]	@ (80050a0 <_ZL12MX_SPI1_Initv+0x80>)
 8005028:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800502a:	4b1c      	ldr	r3, [pc, #112]	@ (800509c <_ZL12MX_SPI1_Initv+0x7c>)
 800502c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8005030:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8005032:	4b1a      	ldr	r3, [pc, #104]	@ (800509c <_ZL12MX_SPI1_Initv+0x7c>)
 8005034:	2200      	movs	r2, #0
 8005036:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8005038:	4b18      	ldr	r3, [pc, #96]	@ (800509c <_ZL12MX_SPI1_Initv+0x7c>)
 800503a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800503e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005040:	4b16      	ldr	r3, [pc, #88]	@ (800509c <_ZL12MX_SPI1_Initv+0x7c>)
 8005042:	2200      	movs	r2, #0
 8005044:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005046:	4b15      	ldr	r3, [pc, #84]	@ (800509c <_ZL12MX_SPI1_Initv+0x7c>)
 8005048:	2200      	movs	r2, #0
 800504a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800504c:	4b13      	ldr	r3, [pc, #76]	@ (800509c <_ZL12MX_SPI1_Initv+0x7c>)
 800504e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005052:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8005054:	4b11      	ldr	r3, [pc, #68]	@ (800509c <_ZL12MX_SPI1_Initv+0x7c>)
 8005056:	2228      	movs	r2, #40	@ 0x28
 8005058:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800505a:	4b10      	ldr	r3, [pc, #64]	@ (800509c <_ZL12MX_SPI1_Initv+0x7c>)
 800505c:	2200      	movs	r2, #0
 800505e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005060:	4b0e      	ldr	r3, [pc, #56]	@ (800509c <_ZL12MX_SPI1_Initv+0x7c>)
 8005062:	2200      	movs	r2, #0
 8005064:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005066:	4b0d      	ldr	r3, [pc, #52]	@ (800509c <_ZL12MX_SPI1_Initv+0x7c>)
 8005068:	2200      	movs	r2, #0
 800506a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800506c:	4b0b      	ldr	r3, [pc, #44]	@ (800509c <_ZL12MX_SPI1_Initv+0x7c>)
 800506e:	2207      	movs	r2, #7
 8005070:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8005072:	4b0a      	ldr	r3, [pc, #40]	@ (800509c <_ZL12MX_SPI1_Initv+0x7c>)
 8005074:	2200      	movs	r2, #0
 8005076:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8005078:	4b08      	ldr	r3, [pc, #32]	@ (800509c <_ZL12MX_SPI1_Initv+0x7c>)
 800507a:	2200      	movs	r2, #0
 800507c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800507e:	4807      	ldr	r0, [pc, #28]	@ (800509c <_ZL12MX_SPI1_Initv+0x7c>)
 8005080:	f002 fcf2 	bl	8007a68 <HAL_SPI_Init>
 8005084:	4603      	mov	r3, r0
 8005086:	2b00      	cmp	r3, #0
 8005088:	bf14      	ite	ne
 800508a:	2301      	movne	r3, #1
 800508c:	2300      	moveq	r3, #0
 800508e:	b2db      	uxtb	r3, r3
 8005090:	2b00      	cmp	r3, #0
 8005092:	d001      	beq.n	8005098 <_ZL12MX_SPI1_Initv+0x78>
  {
    Error_Handler();
 8005094:	f000 f88a 	bl	80051ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8005098:	bf00      	nop
 800509a:	bd80      	pop	{r7, pc}
 800509c:	20000224 	.word	0x20000224
 80050a0:	40013000 	.word	0x40013000

080050a4 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b086      	sub	sp, #24
 80050a8:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050aa:	1d3b      	adds	r3, r7, #4
 80050ac:	2200      	movs	r2, #0
 80050ae:	601a      	str	r2, [r3, #0]
 80050b0:	605a      	str	r2, [r3, #4]
 80050b2:	609a      	str	r2, [r3, #8]
 80050b4:	60da      	str	r2, [r3, #12]
 80050b6:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 80050b8:	2004      	movs	r0, #4
 80050ba:	f7ff fe41 	bl	8004d40 <LL_AHB2_GRP1_EnableClock>
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 80050be:	2001      	movs	r0, #1
 80050c0:	f7ff fe3e 	bl	8004d40 <LL_AHB2_GRP1_EnableClock>
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 80050c4:	2002      	movs	r0, #2
 80050c6:	f7ff fe3b 	bl	8004d40 <LL_AHB2_GRP1_EnableClock>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_9, GPIO_PIN_RESET);
 80050ca:	2200      	movs	r2, #0
 80050cc:	f44f 711a 	mov.w	r1, #616	@ 0x268
 80050d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80050d4:	f000 fe8e 	bl	8005df4 <HAL_GPIO_WritePin>

	  /*Configure GPIO pins : Button_1_Pin Button_2_Pin Button_3_Pin Button_4_Pin */
	  GPIO_InitStruct.Pin = Button_1_Pin|Button_2_Pin|Button_3_Pin|Button_4_Pin;
 80050d8:	230f      	movs	r3, #15
 80050da:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80050dc:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80050e0:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80050e2:	2301      	movs	r3, #1
 80050e4:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80050e6:	1d3b      	adds	r3, r7, #4
 80050e8:	4619      	mov	r1, r3
 80050ea:	4821      	ldr	r0, [pc, #132]	@ (8005170 <_ZL12MX_GPIO_Initv+0xcc>)
 80050ec:	f000 fcfa 	bl	8005ae4 <HAL_GPIO_Init>

	  /*Configure GPIO pins : PA3 PA5 PA6 PA9 */
	  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_9;
 80050f0:	f44f 731a 	mov.w	r3, #616	@ 0x268
 80050f4:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80050f6:	2301      	movs	r3, #1
 80050f8:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050fa:	2300      	movs	r3, #0
 80050fc:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050fe:	2300      	movs	r3, #0
 8005100:	613b      	str	r3, [r7, #16]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005102:	1d3b      	adds	r3, r7, #4
 8005104:	4619      	mov	r1, r3
 8005106:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800510a:	f000 fceb 	bl	8005ae4 <HAL_GPIO_Init>

	  /*Configure GPIO pin : PA8 */
	  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800510e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005112:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005114:	2300      	movs	r3, #0
 8005116:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005118:	2300      	movs	r3, #0
 800511a:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800511c:	1d3b      	adds	r3, r7, #4
 800511e:	4619      	mov	r1, r3
 8005120:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005124:	f000 fcde 	bl	8005ae4 <HAL_GPIO_Init>

	  /* EXTI interrupt init*/
	  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8005128:	2200      	movs	r2, #0
 800512a:	2105      	movs	r1, #5
 800512c:	2006      	movs	r0, #6
 800512e:	f000 fcb1 	bl	8005a94 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8005132:	2006      	movs	r0, #6
 8005134:	f000 fcc8 	bl	8005ac8 <HAL_NVIC_EnableIRQ>

	  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8005138:	2200      	movs	r2, #0
 800513a:	2105      	movs	r1, #5
 800513c:	2007      	movs	r0, #7
 800513e:	f000 fca9 	bl	8005a94 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8005142:	2007      	movs	r0, #7
 8005144:	f000 fcc0 	bl	8005ac8 <HAL_NVIC_EnableIRQ>

	  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8005148:	2200      	movs	r2, #0
 800514a:	2105      	movs	r1, #5
 800514c:	2008      	movs	r0, #8
 800514e:	f000 fca1 	bl	8005a94 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8005152:	2008      	movs	r0, #8
 8005154:	f000 fcb8 	bl	8005ac8 <HAL_NVIC_EnableIRQ>

	  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8005158:	2200      	movs	r2, #0
 800515a:	2105      	movs	r1, #5
 800515c:	2009      	movs	r0, #9
 800515e:	f000 fc99 	bl	8005a94 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8005162:	2009      	movs	r0, #9
 8005164:	f000 fcb0 	bl	8005ac8 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8005168:	bf00      	nop
 800516a:	3718      	adds	r7, #24
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}
 8005170:	48000800 	.word	0x48000800

08005174 <_Z11EPaperEntryPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_EPaperEntry */
void EPaperEntry(void *argument)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b082      	sub	sp, #8
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	EPD_MainMenuWithQueue();
 800517c:	f7fc fe1c 	bl	8001db8 <_Z21EPD_MainMenuWithQueuev>
  for(;;)
  {
    osDelay(1);
 8005180:	2001      	movs	r0, #1
 8005182:	f004 f8cb 	bl	800931c <osDelay>
 8005186:	e7fb      	b.n	8005180 <_Z11EPaperEntryPv+0xc>

08005188 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b082      	sub	sp, #8
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a04      	ldr	r2, [pc, #16]	@ (80051a8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d101      	bne.n	800519e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800519a:	f000 fb73 	bl	8005884 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800519e:	bf00      	nop
 80051a0:	3708      	adds	r7, #8
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}
 80051a6:	bf00      	nop
 80051a8:	40014800 	.word	0x40014800

080051ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80051ac:	b480      	push	{r7}
 80051ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80051b0:	b672      	cpsid	i
}
 80051b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80051b4:	bf00      	nop
 80051b6:	e7fd      	b.n	80051b4 <Error_Handler+0x8>

080051b8 <LL_AHB2_GRP1_EnableClock>:
{
 80051b8:	b480      	push	{r7}
 80051ba:	b085      	sub	sp, #20
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80051c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051c4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80051c6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	4313      	orrs	r3, r2
 80051ce:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80051d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051d4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	4013      	ands	r3, r2
 80051da:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80051dc:	68fb      	ldr	r3, [r7, #12]
}
 80051de:	bf00      	nop
 80051e0:	3714      	adds	r7, #20
 80051e2:	46bd      	mov	sp, r7
 80051e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e8:	4770      	bx	lr

080051ea <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80051ea:	b480      	push	{r7}
 80051ec:	b085      	sub	sp, #20
 80051ee:	af00      	add	r7, sp, #0
 80051f0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80051f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051f6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80051f8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	4313      	orrs	r3, r2
 8005200:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8005202:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005206:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	4013      	ands	r3, r2
 800520c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800520e:	68fb      	ldr	r3, [r7, #12]
}
 8005210:	bf00      	nop
 8005212:	3714      	adds	r7, #20
 8005214:	46bd      	mov	sp, r7
 8005216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521a:	4770      	bx	lr

0800521c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8005220:	2200      	movs	r2, #0
 8005222:	210f      	movs	r1, #15
 8005224:	f06f 0001 	mvn.w	r0, #1
 8005228:	f000 fc34 	bl	8005a94 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800522c:	bf00      	nop
 800522e:	bd80      	pop	{r7, pc}

08005230 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b088      	sub	sp, #32
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005238:	f107 030c 	add.w	r3, r7, #12
 800523c:	2200      	movs	r2, #0
 800523e:	601a      	str	r2, [r3, #0]
 8005240:	605a      	str	r2, [r3, #4]
 8005242:	609a      	str	r2, [r3, #8]
 8005244:	60da      	str	r2, [r3, #12]
 8005246:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a0f      	ldr	r2, [pc, #60]	@ (800528c <HAL_SPI_MspInit+0x5c>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d118      	bne.n	8005284 <HAL_SPI_MspInit+0x54>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005252:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8005256:	f7ff ffc8 	bl	80051ea <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800525a:	2001      	movs	r0, #1
 800525c:	f7ff ffac 	bl	80051b8 <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PA11     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7|GPIO_PIN_11;
 8005260:	f640 0382 	movw	r3, #2178	@ 0x882
 8005264:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005266:	2302      	movs	r3, #2
 8005268:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800526a:	2300      	movs	r3, #0
 800526c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800526e:	2300      	movs	r3, #0
 8005270:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005272:	2305      	movs	r3, #5
 8005274:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005276:	f107 030c 	add.w	r3, r7, #12
 800527a:	4619      	mov	r1, r3
 800527c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005280:	f000 fc30 	bl	8005ae4 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8005284:	bf00      	nop
 8005286:	3720      	adds	r7, #32
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}
 800528c:	40013000 	.word	0x40013000

08005290 <LL_APB2_GRP1_EnableClock>:
{
 8005290:	b480      	push	{r7}
 8005292:	b085      	sub	sp, #20
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8005298:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800529c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800529e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	4313      	orrs	r3, r2
 80052a6:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80052a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052ac:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	4013      	ands	r3, r2
 80052b2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80052b4:	68fb      	ldr	r3, [r7, #12]
}
 80052b6:	bf00      	nop
 80052b8:	3714      	adds	r7, #20
 80052ba:	46bd      	mov	sp, r7
 80052bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c0:	4770      	bx	lr
	...

080052c4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b08c      	sub	sp, #48	@ 0x30
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80052cc:	2300      	movs	r3, #0
 80052ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              uwPrescalerValue = 0;
 80052d0:	2300      	movs	r3, #0
 80052d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  /*Configure the TIM17 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority ,0);
 80052d4:	2200      	movs	r2, #0
 80052d6:	6879      	ldr	r1, [r7, #4]
 80052d8:	201a      	movs	r0, #26
 80052da:	f000 fbdb 	bl	8005a94 <HAL_NVIC_SetPriority>
  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80052de:	201a      	movs	r0, #26
 80052e0:	f000 fbf2 	bl	8005ac8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 80052e4:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 80052e8:	f7ff ffd2 	bl	8005290 <LL_APB2_GRP1_EnableClock>
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80052ec:	f107 0208 	add.w	r2, r7, #8
 80052f0:	f107 030c 	add.w	r3, r7, #12
 80052f4:	4611      	mov	r1, r2
 80052f6:	4618      	mov	r0, r3
 80052f8:	f001 feac 	bl	8007054 <HAL_RCC_GetClockConfig>
  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80052fc:	f001 fe94 	bl	8007028 <HAL_RCC_GetPCLK2Freq>
 8005300:	62f8      	str	r0, [r7, #44]	@ 0x2c

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8005302:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005304:	4a12      	ldr	r2, [pc, #72]	@ (8005350 <HAL_InitTick+0x8c>)
 8005306:	fba2 2303 	umull	r2, r3, r2, r3
 800530a:	0c9b      	lsrs	r3, r3, #18
 800530c:	3b01      	subs	r3, #1
 800530e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8005310:	4b10      	ldr	r3, [pc, #64]	@ (8005354 <HAL_InitTick+0x90>)
 8005312:	4a11      	ldr	r2, [pc, #68]	@ (8005358 <HAL_InitTick+0x94>)
 8005314:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8005316:	4b0f      	ldr	r3, [pc, #60]	@ (8005354 <HAL_InitTick+0x90>)
 8005318:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800531c:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 800531e:	4a0d      	ldr	r2, [pc, #52]	@ (8005354 <HAL_InitTick+0x90>)
 8005320:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005322:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8005324:	4b0b      	ldr	r3, [pc, #44]	@ (8005354 <HAL_InitTick+0x90>)
 8005326:	2200      	movs	r2, #0
 8005328:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800532a:	4b0a      	ldr	r3, [pc, #40]	@ (8005354 <HAL_InitTick+0x90>)
 800532c:	2200      	movs	r2, #0
 800532e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 8005330:	4808      	ldr	r0, [pc, #32]	@ (8005354 <HAL_InitTick+0x90>)
 8005332:	f002 ff15 	bl	8008160 <HAL_TIM_Base_Init>
 8005336:	4603      	mov	r3, r0
 8005338:	2b00      	cmp	r3, #0
 800533a:	d104      	bne.n	8005346 <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 800533c:	4805      	ldr	r0, [pc, #20]	@ (8005354 <HAL_InitTick+0x90>)
 800533e:	f002 ff71 	bl	8008224 <HAL_TIM_Base_Start_IT>
 8005342:	4603      	mov	r3, r0
 8005344:	e000      	b.n	8005348 <HAL_InitTick+0x84>
  }

  /* Return function status */
  return HAL_ERROR;
 8005346:	2301      	movs	r3, #1
}
 8005348:	4618      	mov	r0, r3
 800534a:	3730      	adds	r7, #48	@ 0x30
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}
 8005350:	431bde83 	.word	0x431bde83
 8005354:	200002a0 	.word	0x200002a0
 8005358:	40014800 	.word	0x40014800

0800535c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800535c:	b480      	push	{r7}
 800535e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005360:	bf00      	nop
 8005362:	e7fd      	b.n	8005360 <NMI_Handler+0x4>

08005364 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005364:	b480      	push	{r7}
 8005366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005368:	bf00      	nop
 800536a:	e7fd      	b.n	8005368 <HardFault_Handler+0x4>

0800536c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800536c:	b480      	push	{r7}
 800536e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005370:	bf00      	nop
 8005372:	e7fd      	b.n	8005370 <MemManage_Handler+0x4>

08005374 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005374:	b480      	push	{r7}
 8005376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005378:	bf00      	nop
 800537a:	e7fd      	b.n	8005378 <BusFault_Handler+0x4>

0800537c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800537c:	b480      	push	{r7}
 800537e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005380:	bf00      	nop
 8005382:	e7fd      	b.n	8005380 <UsageFault_Handler+0x4>

08005384 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005384:	b480      	push	{r7}
 8005386:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005388:	bf00      	nop
 800538a:	46bd      	mov	sp, r7
 800538c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005390:	4770      	bx	lr

08005392 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8005392:	b580      	push	{r7, lr}
 8005394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_1_Pin);
 8005396:	2001      	movs	r0, #1
 8005398:	f000 fd44 	bl	8005e24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800539c:	bf00      	nop
 800539e:	bd80      	pop	{r7, pc}

080053a0 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_2_Pin);
 80053a4:	2002      	movs	r0, #2
 80053a6:	f000 fd3d 	bl	8005e24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80053aa:	bf00      	nop
 80053ac:	bd80      	pop	{r7, pc}

080053ae <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80053ae:	b580      	push	{r7, lr}
 80053b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_3_Pin);
 80053b2:	2004      	movs	r0, #4
 80053b4:	f000 fd36 	bl	8005e24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80053b8:	bf00      	nop
 80053ba:	bd80      	pop	{r7, pc}

080053bc <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_4_Pin);
 80053c0:	2008      	movs	r0, #8
 80053c2:	f000 fd2f 	bl	8005e24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80053c6:	bf00      	nop
 80053c8:	bd80      	pop	{r7, pc}
	...

080053cc <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80053d0:	4802      	ldr	r0, [pc, #8]	@ (80053dc <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 80053d2:	f002 ff75 	bl	80082c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 80053d6:	bf00      	nop
 80053d8:	bd80      	pop	{r7, pc}
 80053da:	bf00      	nop
 80053dc:	200002a0 	.word	0x200002a0

080053e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80053e0:	b480      	push	{r7}
 80053e2:	af00      	add	r7, sp, #0
  return 1;
 80053e4:	2301      	movs	r3, #1
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr

080053f0 <_kill>:

int _kill(int pid, int sig)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b082      	sub	sp, #8
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
 80053f8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80053fa:	f007 feeb 	bl	800d1d4 <__errno>
 80053fe:	4603      	mov	r3, r0
 8005400:	2216      	movs	r2, #22
 8005402:	601a      	str	r2, [r3, #0]
  return -1;
 8005404:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005408:	4618      	mov	r0, r3
 800540a:	3708      	adds	r7, #8
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}

08005410 <_exit>:

void _exit (int status)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b082      	sub	sp, #8
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005418:	f04f 31ff 	mov.w	r1, #4294967295
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f7ff ffe7 	bl	80053f0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8005422:	bf00      	nop
 8005424:	e7fd      	b.n	8005422 <_exit+0x12>

08005426 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005426:	b580      	push	{r7, lr}
 8005428:	b086      	sub	sp, #24
 800542a:	af00      	add	r7, sp, #0
 800542c:	60f8      	str	r0, [r7, #12]
 800542e:	60b9      	str	r1, [r7, #8]
 8005430:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005432:	2300      	movs	r3, #0
 8005434:	617b      	str	r3, [r7, #20]
 8005436:	e00a      	b.n	800544e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005438:	f3af 8000 	nop.w
 800543c:	4601      	mov	r1, r0
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	1c5a      	adds	r2, r3, #1
 8005442:	60ba      	str	r2, [r7, #8]
 8005444:	b2ca      	uxtb	r2, r1
 8005446:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	3301      	adds	r3, #1
 800544c:	617b      	str	r3, [r7, #20]
 800544e:	697a      	ldr	r2, [r7, #20]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	429a      	cmp	r2, r3
 8005454:	dbf0      	blt.n	8005438 <_read+0x12>
  }

  return len;
 8005456:	687b      	ldr	r3, [r7, #4]
}
 8005458:	4618      	mov	r0, r3
 800545a:	3718      	adds	r7, #24
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}

08005460 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b086      	sub	sp, #24
 8005464:	af00      	add	r7, sp, #0
 8005466:	60f8      	str	r0, [r7, #12]
 8005468:	60b9      	str	r1, [r7, #8]
 800546a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800546c:	2300      	movs	r3, #0
 800546e:	617b      	str	r3, [r7, #20]
 8005470:	e009      	b.n	8005486 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	1c5a      	adds	r2, r3, #1
 8005476:	60ba      	str	r2, [r7, #8]
 8005478:	781b      	ldrb	r3, [r3, #0]
 800547a:	4618      	mov	r0, r3
 800547c:	f000 f996 	bl	80057ac <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	3301      	adds	r3, #1
 8005484:	617b      	str	r3, [r7, #20]
 8005486:	697a      	ldr	r2, [r7, #20]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	429a      	cmp	r2, r3
 800548c:	dbf1      	blt.n	8005472 <_write+0x12>
  }
  return len;
 800548e:	687b      	ldr	r3, [r7, #4]
}
 8005490:	4618      	mov	r0, r3
 8005492:	3718      	adds	r7, #24
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}

08005498 <_close>:

int _close(int file)
{
 8005498:	b480      	push	{r7}
 800549a:	b083      	sub	sp, #12
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80054a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	370c      	adds	r7, #12
 80054a8:	46bd      	mov	sp, r7
 80054aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ae:	4770      	bx	lr

080054b0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b083      	sub	sp, #12
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
 80054b8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80054c0:	605a      	str	r2, [r3, #4]
  return 0;
 80054c2:	2300      	movs	r3, #0
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	370c      	adds	r7, #12
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr

080054d0 <_isatty>:

int _isatty(int file)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b083      	sub	sp, #12
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80054d8:	2301      	movs	r3, #1
}
 80054da:	4618      	mov	r0, r3
 80054dc:	370c      	adds	r7, #12
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr

080054e6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80054e6:	b480      	push	{r7}
 80054e8:	b085      	sub	sp, #20
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	60f8      	str	r0, [r7, #12]
 80054ee:	60b9      	str	r1, [r7, #8]
 80054f0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80054f2:	2300      	movs	r3, #0
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	3714      	adds	r7, #20
 80054f8:	46bd      	mov	sp, r7
 80054fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fe:	4770      	bx	lr

08005500 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b086      	sub	sp, #24
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005508:	4a14      	ldr	r2, [pc, #80]	@ (800555c <_sbrk+0x5c>)
 800550a:	4b15      	ldr	r3, [pc, #84]	@ (8005560 <_sbrk+0x60>)
 800550c:	1ad3      	subs	r3, r2, r3
 800550e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005514:	4b13      	ldr	r3, [pc, #76]	@ (8005564 <_sbrk+0x64>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d102      	bne.n	8005522 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800551c:	4b11      	ldr	r3, [pc, #68]	@ (8005564 <_sbrk+0x64>)
 800551e:	4a12      	ldr	r2, [pc, #72]	@ (8005568 <_sbrk+0x68>)
 8005520:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005522:	4b10      	ldr	r3, [pc, #64]	@ (8005564 <_sbrk+0x64>)
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	4413      	add	r3, r2
 800552a:	693a      	ldr	r2, [r7, #16]
 800552c:	429a      	cmp	r2, r3
 800552e:	d207      	bcs.n	8005540 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005530:	f007 fe50 	bl	800d1d4 <__errno>
 8005534:	4603      	mov	r3, r0
 8005536:	220c      	movs	r2, #12
 8005538:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800553a:	f04f 33ff 	mov.w	r3, #4294967295
 800553e:	e009      	b.n	8005554 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005540:	4b08      	ldr	r3, [pc, #32]	@ (8005564 <_sbrk+0x64>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005546:	4b07      	ldr	r3, [pc, #28]	@ (8005564 <_sbrk+0x64>)
 8005548:	681a      	ldr	r2, [r3, #0]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	4413      	add	r3, r2
 800554e:	4a05      	ldr	r2, [pc, #20]	@ (8005564 <_sbrk+0x64>)
 8005550:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005552:	68fb      	ldr	r3, [r7, #12]
}
 8005554:	4618      	mov	r0, r3
 8005556:	3718      	adds	r7, #24
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}
 800555c:	20030000 	.word	0x20030000
 8005560:	00000400 	.word	0x00000400
 8005564:	200002ec 	.word	0x200002ec
 8005568:	200112c8 	.word	0x200112c8

0800556c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800556c:	b480      	push	{r7}
 800556e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8005570:	4b24      	ldr	r3, [pc, #144]	@ (8005604 <SystemInit+0x98>)
 8005572:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005576:	4a23      	ldr	r2, [pc, #140]	@ (8005604 <SystemInit+0x98>)
 8005578:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800557c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8005580:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800558a:	f043 0301 	orr.w	r3, r3, #1
 800558e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8005590:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005594:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8005598:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800559a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80055a4:	4b18      	ldr	r3, [pc, #96]	@ (8005608 <SystemInit+0x9c>)
 80055a6:	4013      	ands	r3, r2
 80055a8:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80055aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80055b2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80055b6:	f023 0305 	bic.w	r3, r3, #5
 80055ba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80055be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80055c6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80055ca:	f023 0301 	bic.w	r3, r3, #1
 80055ce:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80055d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055d6:	4a0d      	ldr	r2, [pc, #52]	@ (800560c <SystemInit+0xa0>)
 80055d8:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80055da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055de:	4a0b      	ldr	r2, [pc, #44]	@ (800560c <SystemInit+0xa0>)
 80055e0:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80055e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80055ec:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80055f0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80055f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055f6:	2200      	movs	r2, #0
 80055f8:	619a      	str	r2, [r3, #24]
}
 80055fa:	bf00      	nop
 80055fc:	46bd      	mov	sp, r7
 80055fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005602:	4770      	bx	lr
 8005604:	e000ed00 	.word	0xe000ed00
 8005608:	faf6fefb 	.word	0xfaf6fefb
 800560c:	22041000 	.word	0x22041000

08005610 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8005610:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005612:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005614:	3304      	adds	r3, #4

08005616 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005616:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005618:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800561a:	d3f9      	bcc.n	8005610 <CopyDataInit>
  bx lr
 800561c:	4770      	bx	lr

0800561e <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800561e:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8005620:	3004      	adds	r0, #4

08005622 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8005622:	4288      	cmp	r0, r1
  bcc FillZerobss
 8005624:	d3fb      	bcc.n	800561e <FillZerobss>
  bx lr
 8005626:	4770      	bx	lr

08005628 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005628:	480c      	ldr	r0, [pc, #48]	@ (800565c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800562a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800562c:	f7ff ff9e 	bl	800556c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8005630:	480b      	ldr	r0, [pc, #44]	@ (8005660 <LoopForever+0x6>)
 8005632:	490c      	ldr	r1, [pc, #48]	@ (8005664 <LoopForever+0xa>)
 8005634:	4a0c      	ldr	r2, [pc, #48]	@ (8005668 <LoopForever+0xe>)
 8005636:	2300      	movs	r3, #0
 8005638:	f7ff ffed 	bl	8005616 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 800563c:	480b      	ldr	r0, [pc, #44]	@ (800566c <LoopForever+0x12>)
 800563e:	490c      	ldr	r1, [pc, #48]	@ (8005670 <LoopForever+0x16>)
 8005640:	4a0c      	ldr	r2, [pc, #48]	@ (8005674 <LoopForever+0x1a>)
 8005642:	2300      	movs	r3, #0
 8005644:	f7ff ffe7 	bl	8005616 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8005648:	480b      	ldr	r0, [pc, #44]	@ (8005678 <LoopForever+0x1e>)
 800564a:	490c      	ldr	r1, [pc, #48]	@ (800567c <LoopForever+0x22>)
 800564c:	2300      	movs	r3, #0
 800564e:	f7ff ffe8 	bl	8005622 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8005652:	f007 fdc5 	bl	800d1e0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8005656:	f7ff fbe5 	bl	8004e24 <main>

0800565a <LoopForever>:

LoopForever:
  b LoopForever
 800565a:	e7fe      	b.n	800565a <LoopForever>
  ldr   r0, =_estack
 800565c:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8005660:	20000008 	.word	0x20000008
 8005664:	200001f4 	.word	0x200001f4
 8005668:	08012968 	.word	0x08012968
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 800566c:	20030000 	.word	0x20030000
 8005670:	20030000 	.word	0x20030000
 8005674:	08012b54 	.word	0x08012b54
  INIT_BSS _sbss, _ebss
 8005678:	200001f4 	.word	0x200001f4
 800567c:	200112c4 	.word	0x200112c4

08005680 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005680:	e7fe      	b.n	8005680 <ADC1_IRQHandler>

08005682 <LL_AHB2_GRP1_EnableClock>:
{
 8005682:	b480      	push	{r7}
 8005684:	b085      	sub	sp, #20
 8005686:	af00      	add	r7, sp, #0
 8005688:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800568a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800568e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005690:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	4313      	orrs	r3, r2
 8005698:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800569a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800569e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	4013      	ands	r3, r2
 80056a4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80056a6:	68fb      	ldr	r3, [r7, #12]
}
 80056a8:	bf00      	nop
 80056aa:	3714      	adds	r7, #20
 80056ac:	46bd      	mov	sp, r7
 80056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b2:	4770      	bx	lr

080056b4 <LL_APB2_GRP1_EnableClock>:
{
 80056b4:	b480      	push	{r7}
 80056b6:	b085      	sub	sp, #20
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80056bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80056c0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80056c2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	4313      	orrs	r3, r2
 80056ca:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80056cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80056d0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	4013      	ands	r3, r2
 80056d6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80056d8:	68fb      	ldr	r3, [r7, #12]
}
 80056da:	bf00      	nop
 80056dc:	3714      	adds	r7, #20
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr
	...

080056e8 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b084      	sub	sp, #16
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	4603      	mov	r3, r0
 80056f0:	6039      	str	r1, [r7, #0]
 80056f2:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80056f4:	2300      	movs	r3, #0
 80056f6:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 80056f8:	79fb      	ldrb	r3, [r7, #7]
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	d903      	bls.n	8005706 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80056fe:	f06f 0301 	mvn.w	r3, #1
 8005702:	60fb      	str	r3, [r7, #12]
 8005704:	e018      	b.n	8005738 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8005706:	79fb      	ldrb	r3, [r7, #7]
 8005708:	2294      	movs	r2, #148	@ 0x94
 800570a:	fb02 f303 	mul.w	r3, r2, r3
 800570e:	4a0d      	ldr	r2, [pc, #52]	@ (8005744 <BSP_COM_Init+0x5c>)
 8005710:	4413      	add	r3, r2
 8005712:	4618      	mov	r0, r3
 8005714:	f000 f866 	bl	80057e4 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_LPUART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8005718:	79fb      	ldrb	r3, [r7, #7]
 800571a:	2294      	movs	r2, #148	@ 0x94
 800571c:	fb02 f303 	mul.w	r3, r2, r3
 8005720:	4a08      	ldr	r2, [pc, #32]	@ (8005744 <BSP_COM_Init+0x5c>)
 8005722:	4413      	add	r3, r2
 8005724:	6839      	ldr	r1, [r7, #0]
 8005726:	4618      	mov	r0, r3
 8005728:	f000 f80e 	bl	8005748 <MX_LPUART1_Init>
 800572c:	4603      	mov	r3, r0
 800572e:	2b00      	cmp	r3, #0
 8005730:	d002      	beq.n	8005738 <BSP_COM_Init+0x50>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 8005732:	f06f 0303 	mvn.w	r3, #3
 8005736:	e000      	b.n	800573a <BSP_COM_Init+0x52>
    }
  }

  return ret;
 8005738:	68fb      	ldr	r3, [r7, #12]
}
 800573a:	4618      	mov	r0, r3
 800573c:	3710      	adds	r7, #16
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}
 8005742:	bf00      	nop
 8005744:	200002f0 	.word	0x200002f0

08005748 <MX_LPUART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_LPUART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b082      	sub	sp, #8
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8005752:	4b15      	ldr	r3, [pc, #84]	@ (80057a8 <MX_LPUART1_Init+0x60>)
 8005754:	681a      	ldr	r2, [r3, #0]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	220c      	movs	r2, #12
 8005766:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	895b      	ldrh	r3, [r3, #10]
 800576c:	461a      	mov	r2, r3
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = COM_Init->WordLength;
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	685a      	ldr	r2, [r3, #4]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	891b      	ldrh	r3, [r3, #8]
 800577e:	461a      	mov	r2, r3
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	899b      	ldrh	r3, [r3, #12]
 8005788:	461a      	mov	r2, r3
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8005794:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f002 ff70 	bl	800867c <HAL_UART_Init>
 800579c:	4603      	mov	r3, r0
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3708      	adds	r7, #8
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}
 80057a6:	bf00      	nop
 80057a8:	2000001c 	.word	0x2000001c

080057ac <__io_putchar>:

/**
  * @brief  Redirect console output to COM
  */
PUTCHAR_PROTOTYPE
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b082      	sub	sp, #8
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  (void) HAL_UART_Transmit(&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 80057b4:	4b09      	ldr	r3, [pc, #36]	@ (80057dc <__io_putchar+0x30>)
 80057b6:	781b      	ldrb	r3, [r3, #0]
 80057b8:	461a      	mov	r2, r3
 80057ba:	2394      	movs	r3, #148	@ 0x94
 80057bc:	fb02 f303 	mul.w	r3, r2, r3
 80057c0:	4a07      	ldr	r2, [pc, #28]	@ (80057e0 <__io_putchar+0x34>)
 80057c2:	1898      	adds	r0, r3, r2
 80057c4:	1d39      	adds	r1, r7, #4
 80057c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80057ca:	2201      	movs	r2, #1
 80057cc:	f002 ffb0 	bl	8008730 <HAL_UART_Transmit>
  return ch;
 80057d0:	687b      	ldr	r3, [r7, #4]
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3708      	adds	r7, #8
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}
 80057da:	bf00      	nop
 80057dc:	20000384 	.word	0x20000384
 80057e0:	200002f0 	.word	0x200002f0

080057e4 <COM1_MspInit>:
  * @brief  Initializes COM1 MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b088      	sub	sp, #32
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 80057ec:	2002      	movs	r0, #2
 80057ee:	f7ff ff48 	bl	8005682 <LL_AHB2_GRP1_EnableClock>
  COM1_RX_GPIO_CLK_ENABLE();
 80057f2:	2002      	movs	r0, #2
 80057f4:	f7ff ff45 	bl	8005682 <LL_AHB2_GRP1_EnableClock>

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 80057f8:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80057fc:	f7ff ff5a 	bl	80056b4 <LL_APB2_GRP1_EnableClock>

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8005800:	2340      	movs	r3, #64	@ 0x40
 8005802:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8005804:	2302      	movs	r3, #2
 8005806:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8005808:	2302      	movs	r3, #2
 800580a:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800580c:	2301      	movs	r3, #1
 800580e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8005810:	2307      	movs	r3, #7
 8005812:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8005814:	f107 030c 	add.w	r3, r7, #12
 8005818:	4619      	mov	r1, r3
 800581a:	4809      	ldr	r0, [pc, #36]	@ (8005840 <COM1_MspInit+0x5c>)
 800581c:	f000 f962 	bl	8005ae4 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8005820:	2380      	movs	r3, #128	@ 0x80
 8005822:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8005824:	2302      	movs	r3, #2
 8005826:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8005828:	2307      	movs	r3, #7
 800582a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 800582c:	f107 030c 	add.w	r3, r7, #12
 8005830:	4619      	mov	r1, r3
 8005832:	4803      	ldr	r0, [pc, #12]	@ (8005840 <COM1_MspInit+0x5c>)
 8005834:	f000 f956 	bl	8005ae4 <HAL_GPIO_Init>
}
 8005838:	bf00      	nop
 800583a:	3720      	adds	r7, #32
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}
 8005840:	48000400 	.word	0x48000400

08005844 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b082      	sub	sp, #8
 8005848:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800584a:	2300      	movs	r3, #0
 800584c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800584e:	4b0c      	ldr	r3, [pc, #48]	@ (8005880 <HAL_Init+0x3c>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a0b      	ldr	r2, [pc, #44]	@ (8005880 <HAL_Init+0x3c>)
 8005854:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005858:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800585a:	2003      	movs	r0, #3
 800585c:	f000 f90f 	bl	8005a7e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005860:	200f      	movs	r0, #15
 8005862:	f7ff fd2f 	bl	80052c4 <HAL_InitTick>
 8005866:	4603      	mov	r3, r0
 8005868:	2b00      	cmp	r3, #0
 800586a:	d002      	beq.n	8005872 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800586c:	2301      	movs	r3, #1
 800586e:	71fb      	strb	r3, [r7, #7]
 8005870:	e001      	b.n	8005876 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005872:	f7ff fcd3 	bl	800521c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005876:	79fb      	ldrb	r3, [r7, #7]
}
 8005878:	4618      	mov	r0, r3
 800587a:	3708      	adds	r7, #8
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}
 8005880:	58004000 	.word	0x58004000

08005884 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005884:	b480      	push	{r7}
 8005886:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005888:	4b06      	ldr	r3, [pc, #24]	@ (80058a4 <HAL_IncTick+0x20>)
 800588a:	781b      	ldrb	r3, [r3, #0]
 800588c:	461a      	mov	r2, r3
 800588e:	4b06      	ldr	r3, [pc, #24]	@ (80058a8 <HAL_IncTick+0x24>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4413      	add	r3, r2
 8005894:	4a04      	ldr	r2, [pc, #16]	@ (80058a8 <HAL_IncTick+0x24>)
 8005896:	6013      	str	r3, [r2, #0]
}
 8005898:	bf00      	nop
 800589a:	46bd      	mov	sp, r7
 800589c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a0:	4770      	bx	lr
 80058a2:	bf00      	nop
 80058a4:	20000024 	.word	0x20000024
 80058a8:	20000388 	.word	0x20000388

080058ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80058ac:	b480      	push	{r7}
 80058ae:	af00      	add	r7, sp, #0
  return uwTick;
 80058b0:	4b03      	ldr	r3, [pc, #12]	@ (80058c0 <HAL_GetTick+0x14>)
 80058b2:	681b      	ldr	r3, [r3, #0]
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	46bd      	mov	sp, r7
 80058b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058bc:	4770      	bx	lr
 80058be:	bf00      	nop
 80058c0:	20000388 	.word	0x20000388

080058c4 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80058c4:	b480      	push	{r7}
 80058c6:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80058c8:	4b03      	ldr	r3, [pc, #12]	@ (80058d8 <HAL_GetTickPrio+0x14>)
 80058ca:	681b      	ldr	r3, [r3, #0]
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	46bd      	mov	sp, r7
 80058d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d4:	4770      	bx	lr
 80058d6:	bf00      	nop
 80058d8:	20000020 	.word	0x20000020

080058dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b084      	sub	sp, #16
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80058e4:	f7ff ffe2 	bl	80058ac <HAL_GetTick>
 80058e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058f4:	d005      	beq.n	8005902 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80058f6:	4b0a      	ldr	r3, [pc, #40]	@ (8005920 <HAL_Delay+0x44>)
 80058f8:	781b      	ldrb	r3, [r3, #0]
 80058fa:	461a      	mov	r2, r3
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	4413      	add	r3, r2
 8005900:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005902:	bf00      	nop
 8005904:	f7ff ffd2 	bl	80058ac <HAL_GetTick>
 8005908:	4602      	mov	r2, r0
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	1ad3      	subs	r3, r2, r3
 800590e:	68fa      	ldr	r2, [r7, #12]
 8005910:	429a      	cmp	r2, r3
 8005912:	d8f7      	bhi.n	8005904 <HAL_Delay+0x28>
  {
  }
}
 8005914:	bf00      	nop
 8005916:	bf00      	nop
 8005918:	3710      	adds	r7, #16
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}
 800591e:	bf00      	nop
 8005920:	20000024 	.word	0x20000024

08005924 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005924:	b480      	push	{r7}
 8005926:	b085      	sub	sp, #20
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	f003 0307 	and.w	r3, r3, #7
 8005932:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005934:	4b0c      	ldr	r3, [pc, #48]	@ (8005968 <__NVIC_SetPriorityGrouping+0x44>)
 8005936:	68db      	ldr	r3, [r3, #12]
 8005938:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800593a:	68ba      	ldr	r2, [r7, #8]
 800593c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005940:	4013      	ands	r3, r2
 8005942:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800594c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005950:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005954:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005956:	4a04      	ldr	r2, [pc, #16]	@ (8005968 <__NVIC_SetPriorityGrouping+0x44>)
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	60d3      	str	r3, [r2, #12]
}
 800595c:	bf00      	nop
 800595e:	3714      	adds	r7, #20
 8005960:	46bd      	mov	sp, r7
 8005962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005966:	4770      	bx	lr
 8005968:	e000ed00 	.word	0xe000ed00

0800596c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800596c:	b480      	push	{r7}
 800596e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005970:	4b04      	ldr	r3, [pc, #16]	@ (8005984 <__NVIC_GetPriorityGrouping+0x18>)
 8005972:	68db      	ldr	r3, [r3, #12]
 8005974:	0a1b      	lsrs	r3, r3, #8
 8005976:	f003 0307 	and.w	r3, r3, #7
}
 800597a:	4618      	mov	r0, r3
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr
 8005984:	e000ed00 	.word	0xe000ed00

08005988 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005988:	b480      	push	{r7}
 800598a:	b083      	sub	sp, #12
 800598c:	af00      	add	r7, sp, #0
 800598e:	4603      	mov	r3, r0
 8005990:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005996:	2b00      	cmp	r3, #0
 8005998:	db0b      	blt.n	80059b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800599a:	79fb      	ldrb	r3, [r7, #7]
 800599c:	f003 021f 	and.w	r2, r3, #31
 80059a0:	4907      	ldr	r1, [pc, #28]	@ (80059c0 <__NVIC_EnableIRQ+0x38>)
 80059a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059a6:	095b      	lsrs	r3, r3, #5
 80059a8:	2001      	movs	r0, #1
 80059aa:	fa00 f202 	lsl.w	r2, r0, r2
 80059ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80059b2:	bf00      	nop
 80059b4:	370c      	adds	r7, #12
 80059b6:	46bd      	mov	sp, r7
 80059b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059bc:	4770      	bx	lr
 80059be:	bf00      	nop
 80059c0:	e000e100 	.word	0xe000e100

080059c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b083      	sub	sp, #12
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	4603      	mov	r3, r0
 80059cc:	6039      	str	r1, [r7, #0]
 80059ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80059d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	db0a      	blt.n	80059ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	b2da      	uxtb	r2, r3
 80059dc:	490c      	ldr	r1, [pc, #48]	@ (8005a10 <__NVIC_SetPriority+0x4c>)
 80059de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059e2:	0112      	lsls	r2, r2, #4
 80059e4:	b2d2      	uxtb	r2, r2
 80059e6:	440b      	add	r3, r1
 80059e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80059ec:	e00a      	b.n	8005a04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	b2da      	uxtb	r2, r3
 80059f2:	4908      	ldr	r1, [pc, #32]	@ (8005a14 <__NVIC_SetPriority+0x50>)
 80059f4:	79fb      	ldrb	r3, [r7, #7]
 80059f6:	f003 030f 	and.w	r3, r3, #15
 80059fa:	3b04      	subs	r3, #4
 80059fc:	0112      	lsls	r2, r2, #4
 80059fe:	b2d2      	uxtb	r2, r2
 8005a00:	440b      	add	r3, r1
 8005a02:	761a      	strb	r2, [r3, #24]
}
 8005a04:	bf00      	nop
 8005a06:	370c      	adds	r7, #12
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0e:	4770      	bx	lr
 8005a10:	e000e100 	.word	0xe000e100
 8005a14:	e000ed00 	.word	0xe000ed00

08005a18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b089      	sub	sp, #36	@ 0x24
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	60f8      	str	r0, [r7, #12]
 8005a20:	60b9      	str	r1, [r7, #8]
 8005a22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f003 0307 	and.w	r3, r3, #7
 8005a2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005a2c:	69fb      	ldr	r3, [r7, #28]
 8005a2e:	f1c3 0307 	rsb	r3, r3, #7
 8005a32:	2b04      	cmp	r3, #4
 8005a34:	bf28      	it	cs
 8005a36:	2304      	movcs	r3, #4
 8005a38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005a3a:	69fb      	ldr	r3, [r7, #28]
 8005a3c:	3304      	adds	r3, #4
 8005a3e:	2b06      	cmp	r3, #6
 8005a40:	d902      	bls.n	8005a48 <NVIC_EncodePriority+0x30>
 8005a42:	69fb      	ldr	r3, [r7, #28]
 8005a44:	3b03      	subs	r3, #3
 8005a46:	e000      	b.n	8005a4a <NVIC_EncodePriority+0x32>
 8005a48:	2300      	movs	r3, #0
 8005a4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a4c:	f04f 32ff 	mov.w	r2, #4294967295
 8005a50:	69bb      	ldr	r3, [r7, #24]
 8005a52:	fa02 f303 	lsl.w	r3, r2, r3
 8005a56:	43da      	mvns	r2, r3
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	401a      	ands	r2, r3
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005a60:	f04f 31ff 	mov.w	r1, #4294967295
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	fa01 f303 	lsl.w	r3, r1, r3
 8005a6a:	43d9      	mvns	r1, r3
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a70:	4313      	orrs	r3, r2
         );
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	3724      	adds	r7, #36	@ 0x24
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr

08005a7e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a7e:	b580      	push	{r7, lr}
 8005a80:	b082      	sub	sp, #8
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f7ff ff4c 	bl	8005924 <__NVIC_SetPriorityGrouping>
}
 8005a8c:	bf00      	nop
 8005a8e:	3708      	adds	r7, #8
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}

08005a94 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b086      	sub	sp, #24
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	60b9      	str	r1, [r7, #8]
 8005a9e:	607a      	str	r2, [r7, #4]
 8005aa0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005aa2:	f7ff ff63 	bl	800596c <__NVIC_GetPriorityGrouping>
 8005aa6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005aa8:	687a      	ldr	r2, [r7, #4]
 8005aaa:	68b9      	ldr	r1, [r7, #8]
 8005aac:	6978      	ldr	r0, [r7, #20]
 8005aae:	f7ff ffb3 	bl	8005a18 <NVIC_EncodePriority>
 8005ab2:	4602      	mov	r2, r0
 8005ab4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ab8:	4611      	mov	r1, r2
 8005aba:	4618      	mov	r0, r3
 8005abc:	f7ff ff82 	bl	80059c4 <__NVIC_SetPriority>
}
 8005ac0:	bf00      	nop
 8005ac2:	3718      	adds	r7, #24
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}

08005ac8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b082      	sub	sp, #8
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	4603      	mov	r3, r0
 8005ad0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f7ff ff56 	bl	8005988 <__NVIC_EnableIRQ>
}
 8005adc:	bf00      	nop
 8005ade:	3708      	adds	r7, #8
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd80      	pop	{r7, pc}

08005ae4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b087      	sub	sp, #28
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
 8005aec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005aee:	2300      	movs	r3, #0
 8005af0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005af2:	e14c      	b.n	8005d8e <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	681a      	ldr	r2, [r3, #0]
 8005af8:	2101      	movs	r1, #1
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	fa01 f303 	lsl.w	r3, r1, r3
 8005b00:	4013      	ands	r3, r2
 8005b02:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	f000 813e 	beq.w	8005d88 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	f003 0303 	and.w	r3, r3, #3
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	d005      	beq.n	8005b24 <HAL_GPIO_Init+0x40>
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	f003 0303 	and.w	r3, r3, #3
 8005b20:	2b02      	cmp	r3, #2
 8005b22:	d130      	bne.n	8005b86 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	689b      	ldr	r3, [r3, #8]
 8005b28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	005b      	lsls	r3, r3, #1
 8005b2e:	2203      	movs	r2, #3
 8005b30:	fa02 f303 	lsl.w	r3, r2, r3
 8005b34:	43db      	mvns	r3, r3
 8005b36:	693a      	ldr	r2, [r7, #16]
 8005b38:	4013      	ands	r3, r2
 8005b3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	68da      	ldr	r2, [r3, #12]
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	005b      	lsls	r3, r3, #1
 8005b44:	fa02 f303 	lsl.w	r3, r2, r3
 8005b48:	693a      	ldr	r2, [r7, #16]
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	693a      	ldr	r2, [r7, #16]
 8005b52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b62:	43db      	mvns	r3, r3
 8005b64:	693a      	ldr	r2, [r7, #16]
 8005b66:	4013      	ands	r3, r2
 8005b68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	091b      	lsrs	r3, r3, #4
 8005b70:	f003 0201 	and.w	r2, r3, #1
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	fa02 f303 	lsl.w	r3, r2, r3
 8005b7a:	693a      	ldr	r2, [r7, #16]
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	693a      	ldr	r2, [r7, #16]
 8005b84:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	f003 0303 	and.w	r3, r3, #3
 8005b8e:	2b03      	cmp	r3, #3
 8005b90:	d017      	beq.n	8005bc2 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	68db      	ldr	r3, [r3, #12]
 8005b96:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	005b      	lsls	r3, r3, #1
 8005b9c:	2203      	movs	r2, #3
 8005b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8005ba2:	43db      	mvns	r3, r3
 8005ba4:	693a      	ldr	r2, [r7, #16]
 8005ba6:	4013      	ands	r3, r2
 8005ba8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	689a      	ldr	r2, [r3, #8]
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	005b      	lsls	r3, r3, #1
 8005bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8005bb6:	693a      	ldr	r2, [r7, #16]
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	693a      	ldr	r2, [r7, #16]
 8005bc0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	f003 0303 	and.w	r3, r3, #3
 8005bca:	2b02      	cmp	r3, #2
 8005bcc:	d123      	bne.n	8005c16 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	08da      	lsrs	r2, r3, #3
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	3208      	adds	r2, #8
 8005bd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bda:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	f003 0307 	and.w	r3, r3, #7
 8005be2:	009b      	lsls	r3, r3, #2
 8005be4:	220f      	movs	r2, #15
 8005be6:	fa02 f303 	lsl.w	r3, r2, r3
 8005bea:	43db      	mvns	r3, r3
 8005bec:	693a      	ldr	r2, [r7, #16]
 8005bee:	4013      	ands	r3, r2
 8005bf0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	691a      	ldr	r2, [r3, #16]
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	f003 0307 	and.w	r3, r3, #7
 8005bfc:	009b      	lsls	r3, r3, #2
 8005bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8005c02:	693a      	ldr	r2, [r7, #16]
 8005c04:	4313      	orrs	r3, r2
 8005c06:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	08da      	lsrs	r2, r3, #3
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	3208      	adds	r2, #8
 8005c10:	6939      	ldr	r1, [r7, #16]
 8005c12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	005b      	lsls	r3, r3, #1
 8005c20:	2203      	movs	r2, #3
 8005c22:	fa02 f303 	lsl.w	r3, r2, r3
 8005c26:	43db      	mvns	r3, r3
 8005c28:	693a      	ldr	r2, [r7, #16]
 8005c2a:	4013      	ands	r3, r2
 8005c2c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	f003 0203 	and.w	r2, r3, #3
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	005b      	lsls	r3, r3, #1
 8005c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c3e:	693a      	ldr	r2, [r7, #16]
 8005c40:	4313      	orrs	r3, r2
 8005c42:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	693a      	ldr	r2, [r7, #16]
 8005c48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	f000 8098 	beq.w	8005d88 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8005c58:	4a54      	ldr	r2, [pc, #336]	@ (8005dac <HAL_GPIO_Init+0x2c8>)
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	089b      	lsrs	r3, r3, #2
 8005c5e:	3302      	adds	r3, #2
 8005c60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c64:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	f003 0303 	and.w	r3, r3, #3
 8005c6c:	009b      	lsls	r3, r3, #2
 8005c6e:	220f      	movs	r2, #15
 8005c70:	fa02 f303 	lsl.w	r3, r2, r3
 8005c74:	43db      	mvns	r3, r3
 8005c76:	693a      	ldr	r2, [r7, #16]
 8005c78:	4013      	ands	r3, r2
 8005c7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005c82:	d019      	beq.n	8005cb8 <HAL_GPIO_Init+0x1d4>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	4a4a      	ldr	r2, [pc, #296]	@ (8005db0 <HAL_GPIO_Init+0x2cc>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d013      	beq.n	8005cb4 <HAL_GPIO_Init+0x1d0>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	4a49      	ldr	r2, [pc, #292]	@ (8005db4 <HAL_GPIO_Init+0x2d0>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d00d      	beq.n	8005cb0 <HAL_GPIO_Init+0x1cc>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	4a48      	ldr	r2, [pc, #288]	@ (8005db8 <HAL_GPIO_Init+0x2d4>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d007      	beq.n	8005cac <HAL_GPIO_Init+0x1c8>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	4a47      	ldr	r2, [pc, #284]	@ (8005dbc <HAL_GPIO_Init+0x2d8>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d101      	bne.n	8005ca8 <HAL_GPIO_Init+0x1c4>
 8005ca4:	2304      	movs	r3, #4
 8005ca6:	e008      	b.n	8005cba <HAL_GPIO_Init+0x1d6>
 8005ca8:	2307      	movs	r3, #7
 8005caa:	e006      	b.n	8005cba <HAL_GPIO_Init+0x1d6>
 8005cac:	2303      	movs	r3, #3
 8005cae:	e004      	b.n	8005cba <HAL_GPIO_Init+0x1d6>
 8005cb0:	2302      	movs	r3, #2
 8005cb2:	e002      	b.n	8005cba <HAL_GPIO_Init+0x1d6>
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	e000      	b.n	8005cba <HAL_GPIO_Init+0x1d6>
 8005cb8:	2300      	movs	r3, #0
 8005cba:	697a      	ldr	r2, [r7, #20]
 8005cbc:	f002 0203 	and.w	r2, r2, #3
 8005cc0:	0092      	lsls	r2, r2, #2
 8005cc2:	4093      	lsls	r3, r2
 8005cc4:	693a      	ldr	r2, [r7, #16]
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005cca:	4938      	ldr	r1, [pc, #224]	@ (8005dac <HAL_GPIO_Init+0x2c8>)
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	089b      	lsrs	r3, r3, #2
 8005cd0:	3302      	adds	r3, #2
 8005cd2:	693a      	ldr	r2, [r7, #16]
 8005cd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005cd8:	4b39      	ldr	r3, [pc, #228]	@ (8005dc0 <HAL_GPIO_Init+0x2dc>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	43db      	mvns	r3, r3
 8005ce2:	693a      	ldr	r2, [r7, #16]
 8005ce4:	4013      	ands	r3, r2
 8005ce6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d003      	beq.n	8005cfc <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8005cf4:	693a      	ldr	r2, [r7, #16]
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005cfc:	4a30      	ldr	r2, [pc, #192]	@ (8005dc0 <HAL_GPIO_Init+0x2dc>)
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005d02:	4b2f      	ldr	r3, [pc, #188]	@ (8005dc0 <HAL_GPIO_Init+0x2dc>)
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	43db      	mvns	r3, r3
 8005d0c:	693a      	ldr	r2, [r7, #16]
 8005d0e:	4013      	ands	r3, r2
 8005d10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d003      	beq.n	8005d26 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8005d1e:	693a      	ldr	r2, [r7, #16]
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	4313      	orrs	r3, r2
 8005d24:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005d26:	4a26      	ldr	r2, [pc, #152]	@ (8005dc0 <HAL_GPIO_Init+0x2dc>)
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005d2c:	4b24      	ldr	r3, [pc, #144]	@ (8005dc0 <HAL_GPIO_Init+0x2dc>)
 8005d2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	43db      	mvns	r3, r3
 8005d38:	693a      	ldr	r2, [r7, #16]
 8005d3a:	4013      	ands	r3, r2
 8005d3c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d003      	beq.n	8005d52 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8005d4a:	693a      	ldr	r2, [r7, #16]
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005d52:	4a1b      	ldr	r2, [pc, #108]	@ (8005dc0 <HAL_GPIO_Init+0x2dc>)
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8005d5a:	4b19      	ldr	r3, [pc, #100]	@ (8005dc0 <HAL_GPIO_Init+0x2dc>)
 8005d5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	43db      	mvns	r3, r3
 8005d66:	693a      	ldr	r2, [r7, #16]
 8005d68:	4013      	ands	r3, r2
 8005d6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d003      	beq.n	8005d80 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8005d78:	693a      	ldr	r2, [r7, #16]
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005d80:	4a0f      	ldr	r2, [pc, #60]	@ (8005dc0 <HAL_GPIO_Init+0x2dc>)
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	3301      	adds	r3, #1
 8005d8c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	681a      	ldr	r2, [r3, #0]
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	fa22 f303 	lsr.w	r3, r2, r3
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	f47f aeab 	bne.w	8005af4 <HAL_GPIO_Init+0x10>
  }
}
 8005d9e:	bf00      	nop
 8005da0:	bf00      	nop
 8005da2:	371c      	adds	r7, #28
 8005da4:	46bd      	mov	sp, r7
 8005da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005daa:	4770      	bx	lr
 8005dac:	40010000 	.word	0x40010000
 8005db0:	48000400 	.word	0x48000400
 8005db4:	48000800 	.word	0x48000800
 8005db8:	48000c00 	.word	0x48000c00
 8005dbc:	48001000 	.word	0x48001000
 8005dc0:	58000800 	.word	0x58000800

08005dc4 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b085      	sub	sp, #20
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
 8005dcc:	460b      	mov	r3, r1
 8005dce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	691a      	ldr	r2, [r3, #16]
 8005dd4:	887b      	ldrh	r3, [r7, #2]
 8005dd6:	4013      	ands	r3, r2
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d002      	beq.n	8005de2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	73fb      	strb	r3, [r7, #15]
 8005de0:	e001      	b.n	8005de6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005de2:	2300      	movs	r3, #0
 8005de4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005de6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	3714      	adds	r7, #20
 8005dec:	46bd      	mov	sp, r7
 8005dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df2:	4770      	bx	lr

08005df4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b083      	sub	sp, #12
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
 8005dfc:	460b      	mov	r3, r1
 8005dfe:	807b      	strh	r3, [r7, #2]
 8005e00:	4613      	mov	r3, r2
 8005e02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005e04:	787b      	ldrb	r3, [r7, #1]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d003      	beq.n	8005e12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005e0a:	887a      	ldrh	r2, [r7, #2]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005e10:	e002      	b.n	8005e18 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005e12:	887a      	ldrh	r2, [r7, #2]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005e18:	bf00      	nop
 8005e1a:	370c      	adds	r7, #12
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e22:	4770      	bx	lr

08005e24 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b082      	sub	sp, #8
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005e2e:	4b08      	ldr	r3, [pc, #32]	@ (8005e50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005e30:	68da      	ldr	r2, [r3, #12]
 8005e32:	88fb      	ldrh	r3, [r7, #6]
 8005e34:	4013      	ands	r3, r2
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d006      	beq.n	8005e48 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005e3a:	4a05      	ldr	r2, [pc, #20]	@ (8005e50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005e3c:	88fb      	ldrh	r3, [r7, #6]
 8005e3e:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005e40:	88fb      	ldrh	r3, [r7, #6]
 8005e42:	4618      	mov	r0, r3
 8005e44:	f7fe ff96 	bl	8004d74 <HAL_GPIO_EXTI_Callback>
  }
}
 8005e48:	bf00      	nop
 8005e4a:	3708      	adds	r7, #8
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}
 8005e50:	58000800 	.word	0x58000800

08005e54 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005e54:	b480      	push	{r7}
 8005e56:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005e58:	4b05      	ldr	r3, [pc, #20]	@ (8005e70 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a04      	ldr	r2, [pc, #16]	@ (8005e70 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005e5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e62:	6013      	str	r3, [r2, #0]
}
 8005e64:	bf00      	nop
 8005e66:	46bd      	mov	sp, r7
 8005e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6c:	4770      	bx	lr
 8005e6e:	bf00      	nop
 8005e70:	58000400 	.word	0x58000400

08005e74 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005e74:	b480      	push	{r7}
 8005e76:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8005e78:	4b04      	ldr	r3, [pc, #16]	@ (8005e8c <HAL_PWREx_GetVoltageRange+0x18>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	46bd      	mov	sp, r7
 8005e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e88:	4770      	bx	lr
 8005e8a:	bf00      	nop
 8005e8c:	58000400 	.word	0x58000400

08005e90 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8005e90:	b480      	push	{r7}
 8005e92:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8005e94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005e9e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005ea2:	d101      	bne.n	8005ea8 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	e000      	b.n	8005eaa <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8005ea8:	2300      	movs	r3, #0
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	46bd      	mov	sp, r7
 8005eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb2:	4770      	bx	lr

08005eb4 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8005eb8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005ec2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ec6:	6013      	str	r3, [r2, #0]
}
 8005ec8:	bf00      	nop
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed0:	4770      	bx	lr

08005ed2 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8005ed2:	b480      	push	{r7}
 8005ed4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8005ed6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005ee0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ee4:	6013      	str	r3, [r2, #0]
}
 8005ee6:	bf00      	nop
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr

08005ef0 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8005ef4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005efe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f02:	d101      	bne.n	8005f08 <LL_RCC_HSE_IsReady+0x18>
 8005f04:	2301      	movs	r3, #1
 8005f06:	e000      	b.n	8005f0a <LL_RCC_HSE_IsReady+0x1a>
 8005f08:	2300      	movs	r3, #0
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr

08005f14 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8005f14:	b480      	push	{r7}
 8005f16:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8005f18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005f22:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f26:	6013      	str	r3, [r2, #0]
}
 8005f28:	bf00      	nop
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f30:	4770      	bx	lr

08005f32 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8005f32:	b480      	push	{r7}
 8005f34:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8005f36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005f40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005f44:	6013      	str	r3, [r2, #0]
}
 8005f46:	bf00      	nop
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr

08005f50 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8005f50:	b480      	push	{r7}
 8005f52:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005f54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f62:	d101      	bne.n	8005f68 <LL_RCC_HSI_IsReady+0x18>
 8005f64:	2301      	movs	r3, #1
 8005f66:	e000      	b.n	8005f6a <LL_RCC_HSI_IsReady+0x1a>
 8005f68:	2300      	movs	r3, #0
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr

08005f74 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b083      	sub	sp, #12
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8005f7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	061b      	lsls	r3, r3, #24
 8005f8a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	604b      	str	r3, [r1, #4]
}
 8005f92:	bf00      	nop
 8005f94:	370c      	adds	r7, #12
 8005f96:	46bd      	mov	sp, r7
 8005f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9c:	4770      	bx	lr

08005f9e <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8005f9e:	b480      	push	{r7}
 8005fa0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8005fa2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005fa6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005faa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005fae:	f043 0301 	orr.w	r3, r3, #1
 8005fb2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8005fb6:	bf00      	nop
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbe:	4770      	bx	lr

08005fc0 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8005fc4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005fc8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005fcc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005fd0:	f023 0301 	bic.w	r3, r3, #1
 8005fd4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8005fd8:	bf00      	nop
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe0:	4770      	bx	lr

08005fe2 <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8005fe2:	b480      	push	{r7}
 8005fe4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8005fe6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005fea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005fee:	f003 0302 	and.w	r3, r3, #2
 8005ff2:	2b02      	cmp	r3, #2
 8005ff4:	d101      	bne.n	8005ffa <LL_RCC_HSI48_IsReady+0x18>
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	e000      	b.n	8005ffc <LL_RCC_HSI48_IsReady+0x1a>
 8005ffa:	2300      	movs	r3, #0
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	46bd      	mov	sp, r7
 8006000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006004:	4770      	bx	lr

08006006 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8006006:	b480      	push	{r7}
 8006008:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800600a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800600e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006012:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006016:	f043 0301 	orr.w	r3, r3, #1
 800601a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800601e:	bf00      	nop
 8006020:	46bd      	mov	sp, r7
 8006022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006026:	4770      	bx	lr

08006028 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8006028:	b480      	push	{r7}
 800602a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800602c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006030:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006034:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006038:	f023 0301 	bic.w	r3, r3, #1
 800603c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006040:	bf00      	nop
 8006042:	46bd      	mov	sp, r7
 8006044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006048:	4770      	bx	lr

0800604a <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 800604a:	b480      	push	{r7}
 800604c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800604e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006052:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006056:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800605a:	f043 0304 	orr.w	r3, r3, #4
 800605e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006062:	bf00      	nop
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr

0800606c <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 800606c:	b480      	push	{r7}
 800606e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006070:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006074:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006078:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800607c:	f023 0304 	bic.w	r3, r3, #4
 8006080:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006084:	bf00      	nop
 8006086:	46bd      	mov	sp, r7
 8006088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608c:	4770      	bx	lr

0800608e <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 800608e:	b480      	push	{r7}
 8006090:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006092:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006096:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800609a:	f003 0302 	and.w	r3, r3, #2
 800609e:	2b02      	cmp	r3, #2
 80060a0:	d101      	bne.n	80060a6 <LL_RCC_LSE_IsReady+0x18>
 80060a2:	2301      	movs	r3, #1
 80060a4:	e000      	b.n	80060a8 <LL_RCC_LSE_IsReady+0x1a>
 80060a6:	2300      	movs	r3, #0
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	46bd      	mov	sp, r7
 80060ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b0:	4770      	bx	lr

080060b2 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 80060b2:	b480      	push	{r7}
 80060b4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80060b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80060ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80060be:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80060c2:	f043 0301 	orr.w	r3, r3, #1
 80060c6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80060ca:	bf00      	nop
 80060cc:	46bd      	mov	sp, r7
 80060ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d2:	4770      	bx	lr

080060d4 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 80060d4:	b480      	push	{r7}
 80060d6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80060d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80060dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80060e0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80060e4:	f023 0301 	bic.w	r3, r3, #1
 80060e8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80060ec:	bf00      	nop
 80060ee:	46bd      	mov	sp, r7
 80060f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f4:	4770      	bx	lr

080060f6 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 80060f6:	b480      	push	{r7}
 80060f8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80060fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80060fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006102:	f003 0302 	and.w	r3, r3, #2
 8006106:	2b02      	cmp	r3, #2
 8006108:	d101      	bne.n	800610e <LL_RCC_LSI1_IsReady+0x18>
 800610a:	2301      	movs	r3, #1
 800610c:	e000      	b.n	8006110 <LL_RCC_LSI1_IsReady+0x1a>
 800610e:	2300      	movs	r3, #0
}
 8006110:	4618      	mov	r0, r3
 8006112:	46bd      	mov	sp, r7
 8006114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006118:	4770      	bx	lr

0800611a <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 800611a:	b480      	push	{r7}
 800611c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800611e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006122:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006126:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800612a:	f043 0304 	orr.w	r3, r3, #4
 800612e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8006132:	bf00      	nop
 8006134:	46bd      	mov	sp, r7
 8006136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613a:	4770      	bx	lr

0800613c <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 800613c:	b480      	push	{r7}
 800613e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8006140:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006144:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006148:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800614c:	f023 0304 	bic.w	r3, r3, #4
 8006150:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8006154:	bf00      	nop
 8006156:	46bd      	mov	sp, r7
 8006158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615c:	4770      	bx	lr

0800615e <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 800615e:	b480      	push	{r7}
 8006160:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8006162:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006166:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800616a:	f003 0308 	and.w	r3, r3, #8
 800616e:	2b08      	cmp	r3, #8
 8006170:	d101      	bne.n	8006176 <LL_RCC_LSI2_IsReady+0x18>
 8006172:	2301      	movs	r3, #1
 8006174:	e000      	b.n	8006178 <LL_RCC_LSI2_IsReady+0x1a>
 8006176:	2300      	movs	r3, #0
}
 8006178:	4618      	mov	r0, r3
 800617a:	46bd      	mov	sp, r7
 800617c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006180:	4770      	bx	lr

08006182 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8006182:	b480      	push	{r7}
 8006184:	b083      	sub	sp, #12
 8006186:	af00      	add	r7, sp, #0
 8006188:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800618a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800618e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006192:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	021b      	lsls	r3, r3, #8
 800619a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800619e:	4313      	orrs	r3, r2
 80061a0:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 80061a4:	bf00      	nop
 80061a6:	370c      	adds	r7, #12
 80061a8:	46bd      	mov	sp, r7
 80061aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ae:	4770      	bx	lr

080061b0 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 80061b0:	b480      	push	{r7}
 80061b2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80061b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80061be:	f043 0301 	orr.w	r3, r3, #1
 80061c2:	6013      	str	r3, [r2, #0]
}
 80061c4:	bf00      	nop
 80061c6:	46bd      	mov	sp, r7
 80061c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061cc:	4770      	bx	lr

080061ce <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 80061ce:	b480      	push	{r7}
 80061d0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80061d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80061dc:	f023 0301 	bic.w	r3, r3, #1
 80061e0:	6013      	str	r3, [r2, #0]
}
 80061e2:	bf00      	nop
 80061e4:	46bd      	mov	sp, r7
 80061e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ea:	4770      	bx	lr

080061ec <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 80061ec:	b480      	push	{r7}
 80061ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80061f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f003 0302 	and.w	r3, r3, #2
 80061fa:	2b02      	cmp	r3, #2
 80061fc:	d101      	bne.n	8006202 <LL_RCC_MSI_IsReady+0x16>
 80061fe:	2301      	movs	r3, #1
 8006200:	e000      	b.n	8006204 <LL_RCC_MSI_IsReady+0x18>
 8006202:	2300      	movs	r3, #0
}
 8006204:	4618      	mov	r0, r3
 8006206:	46bd      	mov	sp, r7
 8006208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620c:	4770      	bx	lr

0800620e <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 800620e:	b480      	push	{r7}
 8006210:	b083      	sub	sp, #12
 8006212:	af00      	add	r7, sp, #0
 8006214:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8006216:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006220:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	4313      	orrs	r3, r2
 8006228:	600b      	str	r3, [r1, #0]
}
 800622a:	bf00      	nop
 800622c:	370c      	adds	r7, #12
 800622e:	46bd      	mov	sp, r7
 8006230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006234:	4770      	bx	lr

08006236 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8006236:	b480      	push	{r7}
 8006238:	b083      	sub	sp, #12
 800623a:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800623c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006246:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2bb0      	cmp	r3, #176	@ 0xb0
 800624c:	d901      	bls.n	8006252 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 800624e:	23b0      	movs	r3, #176	@ 0xb0
 8006250:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8006252:	687b      	ldr	r3, [r7, #4]
}
 8006254:	4618      	mov	r0, r3
 8006256:	370c      	adds	r7, #12
 8006258:	46bd      	mov	sp, r7
 800625a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625e:	4770      	bx	lr

08006260 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8006260:	b480      	push	{r7}
 8006262:	b083      	sub	sp, #12
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8006268:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	021b      	lsls	r3, r3, #8
 8006276:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800627a:	4313      	orrs	r3, r2
 800627c:	604b      	str	r3, [r1, #4]
}
 800627e:	bf00      	nop
 8006280:	370c      	adds	r7, #12
 8006282:	46bd      	mov	sp, r7
 8006284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006288:	4770      	bx	lr

0800628a <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800628a:	b480      	push	{r7}
 800628c:	b083      	sub	sp, #12
 800628e:	af00      	add	r7, sp, #0
 8006290:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8006292:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006296:	689b      	ldr	r3, [r3, #8]
 8006298:	f023 0203 	bic.w	r2, r3, #3
 800629c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	4313      	orrs	r3, r2
 80062a4:	608b      	str	r3, [r1, #8]
}
 80062a6:	bf00      	nop
 80062a8:	370c      	adds	r7, #12
 80062aa:	46bd      	mov	sp, r7
 80062ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b0:	4770      	bx	lr

080062b2 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80062b2:	b480      	push	{r7}
 80062b4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80062b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80062ba:	689b      	ldr	r3, [r3, #8]
 80062bc:	f003 030c 	and.w	r3, r3, #12
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	46bd      	mov	sp, r7
 80062c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c8:	4770      	bx	lr

080062ca <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80062ca:	b480      	push	{r7}
 80062cc:	b083      	sub	sp, #12
 80062ce:	af00      	add	r7, sp, #0
 80062d0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80062d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80062d6:	689b      	ldr	r3, [r3, #8]
 80062d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80062dc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	4313      	orrs	r3, r2
 80062e4:	608b      	str	r3, [r1, #8]
}
 80062e6:	bf00      	nop
 80062e8:	370c      	adds	r7, #12
 80062ea:	46bd      	mov	sp, r7
 80062ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f0:	4770      	bx	lr

080062f2 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80062f2:	b480      	push	{r7}
 80062f4:	b083      	sub	sp, #12
 80062f6:	af00      	add	r7, sp, #0
 80062f8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80062fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80062fe:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006302:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006306:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	4313      	orrs	r3, r2
 800630e:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8006312:	bf00      	nop
 8006314:	370c      	adds	r7, #12
 8006316:	46bd      	mov	sp, r7
 8006318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631c:	4770      	bx	lr

0800631e <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 800631e:	b480      	push	{r7}
 8006320:	b083      	sub	sp, #12
 8006322:	af00      	add	r7, sp, #0
 8006324:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8006326:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800632a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800632e:	f023 020f 	bic.w	r2, r3, #15
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	091b      	lsrs	r3, r3, #4
 8006336:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800633a:	4313      	orrs	r3, r2
 800633c:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8006340:	bf00      	nop
 8006342:	370c      	adds	r7, #12
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr

0800634c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800634c:	b480      	push	{r7}
 800634e:	b083      	sub	sp, #12
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8006354:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006358:	689b      	ldr	r3, [r3, #8]
 800635a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800635e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	4313      	orrs	r3, r2
 8006366:	608b      	str	r3, [r1, #8]
}
 8006368:	bf00      	nop
 800636a:	370c      	adds	r7, #12
 800636c:	46bd      	mov	sp, r7
 800636e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006372:	4770      	bx	lr

08006374 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8006374:	b480      	push	{r7}
 8006376:	b083      	sub	sp, #12
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800637c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006380:	689b      	ldr	r3, [r3, #8]
 8006382:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006386:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	4313      	orrs	r3, r2
 800638e:	608b      	str	r3, [r1, #8]
}
 8006390:	bf00      	nop
 8006392:	370c      	adds	r7, #12
 8006394:	46bd      	mov	sp, r7
 8006396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639a:	4770      	bx	lr

0800639c <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 800639c:	b480      	push	{r7}
 800639e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80063a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80063a4:	689b      	ldr	r3, [r3, #8]
 80063a6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	46bd      	mov	sp, r7
 80063ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b2:	4770      	bx	lr

080063b4 <LL_C2_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_C2_RCC_GetAHBPrescaler(void)
{
 80063b4:	b480      	push	{r7}
 80063b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 80063b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80063bc:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80063c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	46bd      	mov	sp, r7
 80063c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063cc:	4770      	bx	lr

080063ce <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 80063ce:	b480      	push	{r7}
 80063d0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80063d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80063d6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80063da:	011b      	lsls	r3, r3, #4
 80063dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	46bd      	mov	sp, r7
 80063e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e8:	4770      	bx	lr

080063ea <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80063ea:	b480      	push	{r7}
 80063ec:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80063ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80063f2:	689b      	ldr	r3, [r3, #8]
 80063f4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	46bd      	mov	sp, r7
 80063fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006400:	4770      	bx	lr

08006402 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8006402:	b480      	push	{r7}
 8006404:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8006406:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800640a:	689b      	ldr	r3, [r3, #8]
 800640c:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8006410:	4618      	mov	r0, r3
 8006412:	46bd      	mov	sp, r7
 8006414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006418:	4770      	bx	lr

0800641a <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800641a:	b480      	push	{r7}
 800641c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800641e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006428:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800642c:	6013      	str	r3, [r2, #0]
}
 800642e:	bf00      	nop
 8006430:	46bd      	mov	sp, r7
 8006432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006436:	4770      	bx	lr

08006438 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8006438:	b480      	push	{r7}
 800643a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800643c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006446:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800644a:	6013      	str	r3, [r2, #0]
}
 800644c:	bf00      	nop
 800644e:	46bd      	mov	sp, r7
 8006450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006454:	4770      	bx	lr

08006456 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8006456:	b480      	push	{r7}
 8006458:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800645a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006464:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006468:	d101      	bne.n	800646e <LL_RCC_PLL_IsReady+0x18>
 800646a:	2301      	movs	r3, #1
 800646c:	e000      	b.n	8006470 <LL_RCC_PLL_IsReady+0x1a>
 800646e:	2300      	movs	r3, #0
}
 8006470:	4618      	mov	r0, r3
 8006472:	46bd      	mov	sp, r7
 8006474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006478:	4770      	bx	lr

0800647a <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800647a:	b480      	push	{r7}
 800647c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800647e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006482:	68db      	ldr	r3, [r3, #12]
 8006484:	0a1b      	lsrs	r3, r3, #8
 8006486:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 800648a:	4618      	mov	r0, r3
 800648c:	46bd      	mov	sp, r7
 800648e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006492:	4770      	bx	lr

08006494 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8006494:	b480      	push	{r7}
 8006496:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8006498:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800649c:	68db      	ldr	r3, [r3, #12]
 800649e:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	46bd      	mov	sp, r7
 80064a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064aa:	4770      	bx	lr

080064ac <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80064ac:	b480      	push	{r7}
 80064ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80064b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80064b4:	68db      	ldr	r3, [r3, #12]
 80064b6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	46bd      	mov	sp, r7
 80064be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c2:	4770      	bx	lr

080064c4 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80064c4:	b480      	push	{r7}
 80064c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80064c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80064cc:	68db      	ldr	r3, [r3, #12]
 80064ce:	f003 0303 	and.w	r3, r3, #3
}
 80064d2:	4618      	mov	r0, r3
 80064d4:	46bd      	mov	sp, r7
 80064d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064da:	4770      	bx	lr

080064dc <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80064dc:	b480      	push	{r7}
 80064de:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80064e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80064e4:	689b      	ldr	r3, [r3, #8]
 80064e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80064ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80064ee:	d101      	bne.n	80064f4 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80064f0:	2301      	movs	r3, #1
 80064f2:	e000      	b.n	80064f6 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80064f4:	2300      	movs	r3, #0
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	46bd      	mov	sp, r7
 80064fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fe:	4770      	bx	lr

08006500 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8006500:	b480      	push	{r7}
 8006502:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8006504:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006508:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800650c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006510:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006514:	d101      	bne.n	800651a <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8006516:	2301      	movs	r3, #1
 8006518:	e000      	b.n	800651c <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800651a:	2300      	movs	r3, #0
}
 800651c:	4618      	mov	r0, r3
 800651e:	46bd      	mov	sp, r7
 8006520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006524:	4770      	bx	lr

08006526 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8006526:	b480      	push	{r7}
 8006528:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800652a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800652e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006532:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006536:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800653a:	d101      	bne.n	8006540 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800653c:	2301      	movs	r3, #1
 800653e:	e000      	b.n	8006542 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8006540:	2300      	movs	r3, #0
}
 8006542:	4618      	mov	r0, r3
 8006544:	46bd      	mov	sp, r7
 8006546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654a:	4770      	bx	lr

0800654c <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800654c:	b480      	push	{r7}
 800654e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8006550:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006554:	689b      	ldr	r3, [r3, #8]
 8006556:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800655a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800655e:	d101      	bne.n	8006564 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8006560:	2301      	movs	r3, #1
 8006562:	e000      	b.n	8006566 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8006564:	2300      	movs	r3, #0
}
 8006566:	4618      	mov	r0, r3
 8006568:	46bd      	mov	sp, r7
 800656a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656e:	4770      	bx	lr

08006570 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8006570:	b480      	push	{r7}
 8006572:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8006574:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800657e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006582:	d101      	bne.n	8006588 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8006584:	2301      	movs	r3, #1
 8006586:	e000      	b.n	800658a <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8006588:	2300      	movs	r3, #0
}
 800658a:	4618      	mov	r0, r3
 800658c:	46bd      	mov	sp, r7
 800658e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006592:	4770      	bx	lr

08006594 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006594:	b590      	push	{r4, r7, lr}
 8006596:	b08d      	sub	sp, #52	@ 0x34
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d101      	bne.n	80065a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80065a2:	2301      	movs	r3, #1
 80065a4:	e363      	b.n	8006c6e <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f003 0320 	and.w	r3, r3, #32
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	f000 808d 	beq.w	80066ce <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80065b4:	f7ff fe7d 	bl	80062b2 <LL_RCC_GetSysClkSource>
 80065b8:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80065ba:	f7ff ff83 	bl	80064c4 <LL_RCC_PLL_GetMainSource>
 80065be:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80065c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d005      	beq.n	80065d2 <HAL_RCC_OscConfig+0x3e>
 80065c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065c8:	2b0c      	cmp	r3, #12
 80065ca:	d147      	bne.n	800665c <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80065cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065ce:	2b01      	cmp	r3, #1
 80065d0:	d144      	bne.n	800665c <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	69db      	ldr	r3, [r3, #28]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d101      	bne.n	80065de <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80065da:	2301      	movs	r3, #1
 80065dc:	e347      	b.n	8006c6e <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80065e2:	f7ff fe28 	bl	8006236 <LL_RCC_MSI_GetRange>
 80065e6:	4603      	mov	r3, r0
 80065e8:	429c      	cmp	r4, r3
 80065ea:	d914      	bls.n	8006616 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065f0:	4618      	mov	r0, r3
 80065f2:	f000 fd61 	bl	80070b8 <RCC_SetFlashLatencyFromMSIRange>
 80065f6:	4603      	mov	r3, r0
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d001      	beq.n	8006600 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 80065fc:	2301      	movs	r3, #1
 80065fe:	e336      	b.n	8006c6e <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006604:	4618      	mov	r0, r3
 8006606:	f7ff fe02 	bl	800620e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6a1b      	ldr	r3, [r3, #32]
 800660e:	4618      	mov	r0, r3
 8006610:	f7ff fe26 	bl	8006260 <LL_RCC_MSI_SetCalibTrimming>
 8006614:	e013      	b.n	800663e <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800661a:	4618      	mov	r0, r3
 800661c:	f7ff fdf7 	bl	800620e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6a1b      	ldr	r3, [r3, #32]
 8006624:	4618      	mov	r0, r3
 8006626:	f7ff fe1b 	bl	8006260 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800662e:	4618      	mov	r0, r3
 8006630:	f000 fd42 	bl	80070b8 <RCC_SetFlashLatencyFromMSIRange>
 8006634:	4603      	mov	r3, r0
 8006636:	2b00      	cmp	r3, #0
 8006638:	d001      	beq.n	800663e <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800663a:	2301      	movs	r3, #1
 800663c:	e317      	b.n	8006c6e <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800663e:	f000 fcc9 	bl	8006fd4 <HAL_RCC_GetHCLKFreq>
 8006642:	4603      	mov	r3, r0
 8006644:	4aa4      	ldr	r2, [pc, #656]	@ (80068d8 <HAL_RCC_OscConfig+0x344>)
 8006646:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006648:	4ba4      	ldr	r3, [pc, #656]	@ (80068dc <HAL_RCC_OscConfig+0x348>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4618      	mov	r0, r3
 800664e:	f7fe fe39 	bl	80052c4 <HAL_InitTick>
 8006652:	4603      	mov	r3, r0
 8006654:	2b00      	cmp	r3, #0
 8006656:	d039      	beq.n	80066cc <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8006658:	2301      	movs	r3, #1
 800665a:	e308      	b.n	8006c6e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	69db      	ldr	r3, [r3, #28]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d01e      	beq.n	80066a2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006664:	f7ff fda4 	bl	80061b0 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006668:	f7ff f920 	bl	80058ac <HAL_GetTick>
 800666c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800666e:	e008      	b.n	8006682 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006670:	f7ff f91c 	bl	80058ac <HAL_GetTick>
 8006674:	4602      	mov	r2, r0
 8006676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006678:	1ad3      	subs	r3, r2, r3
 800667a:	2b02      	cmp	r3, #2
 800667c:	d901      	bls.n	8006682 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800667e:	2303      	movs	r3, #3
 8006680:	e2f5      	b.n	8006c6e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8006682:	f7ff fdb3 	bl	80061ec <LL_RCC_MSI_IsReady>
 8006686:	4603      	mov	r3, r0
 8006688:	2b00      	cmp	r3, #0
 800668a:	d0f1      	beq.n	8006670 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006690:	4618      	mov	r0, r3
 8006692:	f7ff fdbc 	bl	800620e <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6a1b      	ldr	r3, [r3, #32]
 800669a:	4618      	mov	r0, r3
 800669c:	f7ff fde0 	bl	8006260 <LL_RCC_MSI_SetCalibTrimming>
 80066a0:	e015      	b.n	80066ce <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80066a2:	f7ff fd94 	bl	80061ce <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80066a6:	f7ff f901 	bl	80058ac <HAL_GetTick>
 80066aa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80066ac:	e008      	b.n	80066c0 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80066ae:	f7ff f8fd 	bl	80058ac <HAL_GetTick>
 80066b2:	4602      	mov	r2, r0
 80066b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066b6:	1ad3      	subs	r3, r2, r3
 80066b8:	2b02      	cmp	r3, #2
 80066ba:	d901      	bls.n	80066c0 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80066bc:	2303      	movs	r3, #3
 80066be:	e2d6      	b.n	8006c6e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 80066c0:	f7ff fd94 	bl	80061ec <LL_RCC_MSI_IsReady>
 80066c4:	4603      	mov	r3, r0
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d1f1      	bne.n	80066ae <HAL_RCC_OscConfig+0x11a>
 80066ca:	e000      	b.n	80066ce <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80066cc:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f003 0301 	and.w	r3, r3, #1
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d047      	beq.n	800676a <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80066da:	f7ff fdea 	bl	80062b2 <LL_RCC_GetSysClkSource>
 80066de:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80066e0:	f7ff fef0 	bl	80064c4 <LL_RCC_PLL_GetMainSource>
 80066e4:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80066e6:	6a3b      	ldr	r3, [r7, #32]
 80066e8:	2b08      	cmp	r3, #8
 80066ea:	d005      	beq.n	80066f8 <HAL_RCC_OscConfig+0x164>
 80066ec:	6a3b      	ldr	r3, [r7, #32]
 80066ee:	2b0c      	cmp	r3, #12
 80066f0:	d108      	bne.n	8006704 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80066f2:	69fb      	ldr	r3, [r7, #28]
 80066f4:	2b03      	cmp	r3, #3
 80066f6:	d105      	bne.n	8006704 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	685b      	ldr	r3, [r3, #4]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d134      	bne.n	800676a <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8006700:	2301      	movs	r3, #1
 8006702:	e2b4      	b.n	8006c6e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800670c:	d102      	bne.n	8006714 <HAL_RCC_OscConfig+0x180>
 800670e:	f7ff fbd1 	bl	8005eb4 <LL_RCC_HSE_Enable>
 8006712:	e001      	b.n	8006718 <HAL_RCC_OscConfig+0x184>
 8006714:	f7ff fbdd 	bl	8005ed2 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d012      	beq.n	8006746 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006720:	f7ff f8c4 	bl	80058ac <HAL_GetTick>
 8006724:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8006726:	e008      	b.n	800673a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006728:	f7ff f8c0 	bl	80058ac <HAL_GetTick>
 800672c:	4602      	mov	r2, r0
 800672e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006730:	1ad3      	subs	r3, r2, r3
 8006732:	2b64      	cmp	r3, #100	@ 0x64
 8006734:	d901      	bls.n	800673a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8006736:	2303      	movs	r3, #3
 8006738:	e299      	b.n	8006c6e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800673a:	f7ff fbd9 	bl	8005ef0 <LL_RCC_HSE_IsReady>
 800673e:	4603      	mov	r3, r0
 8006740:	2b00      	cmp	r3, #0
 8006742:	d0f1      	beq.n	8006728 <HAL_RCC_OscConfig+0x194>
 8006744:	e011      	b.n	800676a <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006746:	f7ff f8b1 	bl	80058ac <HAL_GetTick>
 800674a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800674c:	e008      	b.n	8006760 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800674e:	f7ff f8ad 	bl	80058ac <HAL_GetTick>
 8006752:	4602      	mov	r2, r0
 8006754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006756:	1ad3      	subs	r3, r2, r3
 8006758:	2b64      	cmp	r3, #100	@ 0x64
 800675a:	d901      	bls.n	8006760 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800675c:	2303      	movs	r3, #3
 800675e:	e286      	b.n	8006c6e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8006760:	f7ff fbc6 	bl	8005ef0 <LL_RCC_HSE_IsReady>
 8006764:	4603      	mov	r3, r0
 8006766:	2b00      	cmp	r3, #0
 8006768:	d1f1      	bne.n	800674e <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f003 0302 	and.w	r3, r3, #2
 8006772:	2b00      	cmp	r3, #0
 8006774:	d04c      	beq.n	8006810 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006776:	f7ff fd9c 	bl	80062b2 <LL_RCC_GetSysClkSource>
 800677a:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800677c:	f7ff fea2 	bl	80064c4 <LL_RCC_PLL_GetMainSource>
 8006780:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8006782:	69bb      	ldr	r3, [r7, #24]
 8006784:	2b04      	cmp	r3, #4
 8006786:	d005      	beq.n	8006794 <HAL_RCC_OscConfig+0x200>
 8006788:	69bb      	ldr	r3, [r7, #24]
 800678a:	2b0c      	cmp	r3, #12
 800678c:	d10e      	bne.n	80067ac <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	2b02      	cmp	r3, #2
 8006792:	d10b      	bne.n	80067ac <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	68db      	ldr	r3, [r3, #12]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d101      	bne.n	80067a0 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 800679c:	2301      	movs	r3, #1
 800679e:	e266      	b.n	8006c6e <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	691b      	ldr	r3, [r3, #16]
 80067a4:	4618      	mov	r0, r3
 80067a6:	f7ff fbe5 	bl	8005f74 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80067aa:	e031      	b.n	8006810 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	68db      	ldr	r3, [r3, #12]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d019      	beq.n	80067e8 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80067b4:	f7ff fbae 	bl	8005f14 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067b8:	f7ff f878 	bl	80058ac <HAL_GetTick>
 80067bc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80067be:	e008      	b.n	80067d2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80067c0:	f7ff f874 	bl	80058ac <HAL_GetTick>
 80067c4:	4602      	mov	r2, r0
 80067c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067c8:	1ad3      	subs	r3, r2, r3
 80067ca:	2b02      	cmp	r3, #2
 80067cc:	d901      	bls.n	80067d2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80067ce:	2303      	movs	r3, #3
 80067d0:	e24d      	b.n	8006c6e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 80067d2:	f7ff fbbd 	bl	8005f50 <LL_RCC_HSI_IsReady>
 80067d6:	4603      	mov	r3, r0
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d0f1      	beq.n	80067c0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	691b      	ldr	r3, [r3, #16]
 80067e0:	4618      	mov	r0, r3
 80067e2:	f7ff fbc7 	bl	8005f74 <LL_RCC_HSI_SetCalibTrimming>
 80067e6:	e013      	b.n	8006810 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80067e8:	f7ff fba3 	bl	8005f32 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067ec:	f7ff f85e 	bl	80058ac <HAL_GetTick>
 80067f0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80067f2:	e008      	b.n	8006806 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80067f4:	f7ff f85a 	bl	80058ac <HAL_GetTick>
 80067f8:	4602      	mov	r2, r0
 80067fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067fc:	1ad3      	subs	r3, r2, r3
 80067fe:	2b02      	cmp	r3, #2
 8006800:	d901      	bls.n	8006806 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8006802:	2303      	movs	r3, #3
 8006804:	e233      	b.n	8006c6e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8006806:	f7ff fba3 	bl	8005f50 <LL_RCC_HSI_IsReady>
 800680a:	4603      	mov	r3, r0
 800680c:	2b00      	cmp	r3, #0
 800680e:	d1f1      	bne.n	80067f4 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f003 0308 	and.w	r3, r3, #8
 8006818:	2b00      	cmp	r3, #0
 800681a:	d106      	bne.n	800682a <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8006824:	2b00      	cmp	r3, #0
 8006826:	f000 80a3 	beq.w	8006970 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	695b      	ldr	r3, [r3, #20]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d076      	beq.n	8006920 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f003 0310 	and.w	r3, r3, #16
 800683a:	2b00      	cmp	r3, #0
 800683c:	d046      	beq.n	80068cc <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800683e:	f7ff fc5a 	bl	80060f6 <LL_RCC_LSI1_IsReady>
 8006842:	4603      	mov	r3, r0
 8006844:	2b00      	cmp	r3, #0
 8006846:	d113      	bne.n	8006870 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8006848:	f7ff fc33 	bl	80060b2 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800684c:	f7ff f82e 	bl	80058ac <HAL_GetTick>
 8006850:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8006852:	e008      	b.n	8006866 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006854:	f7ff f82a 	bl	80058ac <HAL_GetTick>
 8006858:	4602      	mov	r2, r0
 800685a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800685c:	1ad3      	subs	r3, r2, r3
 800685e:	2b02      	cmp	r3, #2
 8006860:	d901      	bls.n	8006866 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8006862:	2303      	movs	r3, #3
 8006864:	e203      	b.n	8006c6e <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8006866:	f7ff fc46 	bl	80060f6 <LL_RCC_LSI1_IsReady>
 800686a:	4603      	mov	r3, r0
 800686c:	2b00      	cmp	r3, #0
 800686e:	d0f1      	beq.n	8006854 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8006870:	f7ff fc53 	bl	800611a <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006874:	f7ff f81a 	bl	80058ac <HAL_GetTick>
 8006878:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800687a:	e008      	b.n	800688e <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800687c:	f7ff f816 	bl	80058ac <HAL_GetTick>
 8006880:	4602      	mov	r2, r0
 8006882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006884:	1ad3      	subs	r3, r2, r3
 8006886:	2b03      	cmp	r3, #3
 8006888:	d901      	bls.n	800688e <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800688a:	2303      	movs	r3, #3
 800688c:	e1ef      	b.n	8006c6e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800688e:	f7ff fc66 	bl	800615e <LL_RCC_LSI2_IsReady>
 8006892:	4603      	mov	r3, r0
 8006894:	2b00      	cmp	r3, #0
 8006896:	d0f1      	beq.n	800687c <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	699b      	ldr	r3, [r3, #24]
 800689c:	4618      	mov	r0, r3
 800689e:	f7ff fc70 	bl	8006182 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80068a2:	f7ff fc17 	bl	80060d4 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068a6:	f7ff f801 	bl	80058ac <HAL_GetTick>
 80068aa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80068ac:	e008      	b.n	80068c0 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80068ae:	f7fe fffd 	bl	80058ac <HAL_GetTick>
 80068b2:	4602      	mov	r2, r0
 80068b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068b6:	1ad3      	subs	r3, r2, r3
 80068b8:	2b02      	cmp	r3, #2
 80068ba:	d901      	bls.n	80068c0 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80068bc:	2303      	movs	r3, #3
 80068be:	e1d6      	b.n	8006c6e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80068c0:	f7ff fc19 	bl	80060f6 <LL_RCC_LSI1_IsReady>
 80068c4:	4603      	mov	r3, r0
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d1f1      	bne.n	80068ae <HAL_RCC_OscConfig+0x31a>
 80068ca:	e051      	b.n	8006970 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80068cc:	f7ff fbf1 	bl	80060b2 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068d0:	f7fe ffec 	bl	80058ac <HAL_GetTick>
 80068d4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80068d6:	e00c      	b.n	80068f2 <HAL_RCC_OscConfig+0x35e>
 80068d8:	20000018 	.word	0x20000018
 80068dc:	20000020 	.word	0x20000020
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80068e0:	f7fe ffe4 	bl	80058ac <HAL_GetTick>
 80068e4:	4602      	mov	r2, r0
 80068e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068e8:	1ad3      	subs	r3, r2, r3
 80068ea:	2b02      	cmp	r3, #2
 80068ec:	d901      	bls.n	80068f2 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80068ee:	2303      	movs	r3, #3
 80068f0:	e1bd      	b.n	8006c6e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80068f2:	f7ff fc00 	bl	80060f6 <LL_RCC_LSI1_IsReady>
 80068f6:	4603      	mov	r3, r0
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d0f1      	beq.n	80068e0 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80068fc:	f7ff fc1e 	bl	800613c <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8006900:	e008      	b.n	8006914 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8006902:	f7fe ffd3 	bl	80058ac <HAL_GetTick>
 8006906:	4602      	mov	r2, r0
 8006908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800690a:	1ad3      	subs	r3, r2, r3
 800690c:	2b03      	cmp	r3, #3
 800690e:	d901      	bls.n	8006914 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8006910:	2303      	movs	r3, #3
 8006912:	e1ac      	b.n	8006c6e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8006914:	f7ff fc23 	bl	800615e <LL_RCC_LSI2_IsReady>
 8006918:	4603      	mov	r3, r0
 800691a:	2b00      	cmp	r3, #0
 800691c:	d1f1      	bne.n	8006902 <HAL_RCC_OscConfig+0x36e>
 800691e:	e027      	b.n	8006970 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8006920:	f7ff fc0c 	bl	800613c <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006924:	f7fe ffc2 	bl	80058ac <HAL_GetTick>
 8006928:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800692a:	e008      	b.n	800693e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800692c:	f7fe ffbe 	bl	80058ac <HAL_GetTick>
 8006930:	4602      	mov	r2, r0
 8006932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006934:	1ad3      	subs	r3, r2, r3
 8006936:	2b03      	cmp	r3, #3
 8006938:	d901      	bls.n	800693e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800693a:	2303      	movs	r3, #3
 800693c:	e197      	b.n	8006c6e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800693e:	f7ff fc0e 	bl	800615e <LL_RCC_LSI2_IsReady>
 8006942:	4603      	mov	r3, r0
 8006944:	2b00      	cmp	r3, #0
 8006946:	d1f1      	bne.n	800692c <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8006948:	f7ff fbc4 	bl	80060d4 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800694c:	f7fe ffae 	bl	80058ac <HAL_GetTick>
 8006950:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8006952:	e008      	b.n	8006966 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006954:	f7fe ffaa 	bl	80058ac <HAL_GetTick>
 8006958:	4602      	mov	r2, r0
 800695a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800695c:	1ad3      	subs	r3, r2, r3
 800695e:	2b02      	cmp	r3, #2
 8006960:	d901      	bls.n	8006966 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8006962:	2303      	movs	r3, #3
 8006964:	e183      	b.n	8006c6e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8006966:	f7ff fbc6 	bl	80060f6 <LL_RCC_LSI1_IsReady>
 800696a:	4603      	mov	r3, r0
 800696c:	2b00      	cmp	r3, #0
 800696e:	d1f1      	bne.n	8006954 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f003 0304 	and.w	r3, r3, #4
 8006978:	2b00      	cmp	r3, #0
 800697a:	d05b      	beq.n	8006a34 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800697c:	4ba7      	ldr	r3, [pc, #668]	@ (8006c1c <HAL_RCC_OscConfig+0x688>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006984:	2b00      	cmp	r3, #0
 8006986:	d114      	bne.n	80069b2 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8006988:	f7ff fa64 	bl	8005e54 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800698c:	f7fe ff8e 	bl	80058ac <HAL_GetTick>
 8006990:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006992:	e008      	b.n	80069a6 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006994:	f7fe ff8a 	bl	80058ac <HAL_GetTick>
 8006998:	4602      	mov	r2, r0
 800699a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800699c:	1ad3      	subs	r3, r2, r3
 800699e:	2b02      	cmp	r3, #2
 80069a0:	d901      	bls.n	80069a6 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80069a2:	2303      	movs	r3, #3
 80069a4:	e163      	b.n	8006c6e <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80069a6:	4b9d      	ldr	r3, [pc, #628]	@ (8006c1c <HAL_RCC_OscConfig+0x688>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d0f0      	beq.n	8006994 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	689b      	ldr	r3, [r3, #8]
 80069b6:	2b01      	cmp	r3, #1
 80069b8:	d102      	bne.n	80069c0 <HAL_RCC_OscConfig+0x42c>
 80069ba:	f7ff fb24 	bl	8006006 <LL_RCC_LSE_Enable>
 80069be:	e00c      	b.n	80069da <HAL_RCC_OscConfig+0x446>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	689b      	ldr	r3, [r3, #8]
 80069c4:	2b05      	cmp	r3, #5
 80069c6:	d104      	bne.n	80069d2 <HAL_RCC_OscConfig+0x43e>
 80069c8:	f7ff fb3f 	bl	800604a <LL_RCC_LSE_EnableBypass>
 80069cc:	f7ff fb1b 	bl	8006006 <LL_RCC_LSE_Enable>
 80069d0:	e003      	b.n	80069da <HAL_RCC_OscConfig+0x446>
 80069d2:	f7ff fb29 	bl	8006028 <LL_RCC_LSE_Disable>
 80069d6:	f7ff fb49 	bl	800606c <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	689b      	ldr	r3, [r3, #8]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d014      	beq.n	8006a0c <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069e2:	f7fe ff63 	bl	80058ac <HAL_GetTick>
 80069e6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80069e8:	e00a      	b.n	8006a00 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069ea:	f7fe ff5f 	bl	80058ac <HAL_GetTick>
 80069ee:	4602      	mov	r2, r0
 80069f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069f2:	1ad3      	subs	r3, r2, r3
 80069f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d901      	bls.n	8006a00 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80069fc:	2303      	movs	r3, #3
 80069fe:	e136      	b.n	8006c6e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8006a00:	f7ff fb45 	bl	800608e <LL_RCC_LSE_IsReady>
 8006a04:	4603      	mov	r3, r0
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d0ef      	beq.n	80069ea <HAL_RCC_OscConfig+0x456>
 8006a0a:	e013      	b.n	8006a34 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a0c:	f7fe ff4e 	bl	80058ac <HAL_GetTick>
 8006a10:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8006a12:	e00a      	b.n	8006a2a <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a14:	f7fe ff4a 	bl	80058ac <HAL_GetTick>
 8006a18:	4602      	mov	r2, r0
 8006a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a1c:	1ad3      	subs	r3, r2, r3
 8006a1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d901      	bls.n	8006a2a <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8006a26:	2303      	movs	r3, #3
 8006a28:	e121      	b.n	8006c6e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8006a2a:	f7ff fb30 	bl	800608e <LL_RCC_LSE_IsReady>
 8006a2e:	4603      	mov	r3, r0
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d1ef      	bne.n	8006a14 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d02c      	beq.n	8006a9a <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d014      	beq.n	8006a72 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006a48:	f7ff faa9 	bl	8005f9e <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a4c:	f7fe ff2e 	bl	80058ac <HAL_GetTick>
 8006a50:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8006a52:	e008      	b.n	8006a66 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006a54:	f7fe ff2a 	bl	80058ac <HAL_GetTick>
 8006a58:	4602      	mov	r2, r0
 8006a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a5c:	1ad3      	subs	r3, r2, r3
 8006a5e:	2b02      	cmp	r3, #2
 8006a60:	d901      	bls.n	8006a66 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8006a62:	2303      	movs	r3, #3
 8006a64:	e103      	b.n	8006c6e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8006a66:	f7ff fabc 	bl	8005fe2 <LL_RCC_HSI48_IsReady>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d0f1      	beq.n	8006a54 <HAL_RCC_OscConfig+0x4c0>
 8006a70:	e013      	b.n	8006a9a <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006a72:	f7ff faa5 	bl	8005fc0 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a76:	f7fe ff19 	bl	80058ac <HAL_GetTick>
 8006a7a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8006a7c:	e008      	b.n	8006a90 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006a7e:	f7fe ff15 	bl	80058ac <HAL_GetTick>
 8006a82:	4602      	mov	r2, r0
 8006a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a86:	1ad3      	subs	r3, r2, r3
 8006a88:	2b02      	cmp	r3, #2
 8006a8a:	d901      	bls.n	8006a90 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8006a8c:	2303      	movs	r3, #3
 8006a8e:	e0ee      	b.n	8006c6e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8006a90:	f7ff faa7 	bl	8005fe2 <LL_RCC_HSI48_IsReady>
 8006a94:	4603      	mov	r3, r0
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d1f1      	bne.n	8006a7e <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	f000 80e4 	beq.w	8006c6c <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006aa4:	f7ff fc05 	bl	80062b2 <LL_RCC_GetSysClkSource>
 8006aa8:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8006aaa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006aae:	68db      	ldr	r3, [r3, #12]
 8006ab0:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ab6:	2b02      	cmp	r3, #2
 8006ab8:	f040 80b4 	bne.w	8006c24 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	f003 0203 	and.w	r2, r3, #3
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ac6:	429a      	cmp	r2, r3
 8006ac8:	d123      	bne.n	8006b12 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ad4:	429a      	cmp	r2, r3
 8006ad6:	d11c      	bne.n	8006b12 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	0a1b      	lsrs	r3, r3, #8
 8006adc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006ae4:	429a      	cmp	r2, r3
 8006ae6:	d114      	bne.n	8006b12 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8006af2:	429a      	cmp	r2, r3
 8006af4:	d10d      	bne.n	8006b12 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006b00:	429a      	cmp	r2, r3
 8006b02:	d106      	bne.n	8006b12 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006b0e:	429a      	cmp	r2, r3
 8006b10:	d05d      	beq.n	8006bce <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	2b0c      	cmp	r3, #12
 8006b16:	d058      	beq.n	8006bca <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006b18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d001      	beq.n	8006b2a <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8006b26:	2301      	movs	r3, #1
 8006b28:	e0a1      	b.n	8006c6e <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006b2a:	f7ff fc85 	bl	8006438 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006b2e:	f7fe febd 	bl	80058ac <HAL_GetTick>
 8006b32:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006b34:	e008      	b.n	8006b48 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b36:	f7fe feb9 	bl	80058ac <HAL_GetTick>
 8006b3a:	4602      	mov	r2, r0
 8006b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b3e:	1ad3      	subs	r3, r2, r3
 8006b40:	2b02      	cmp	r3, #2
 8006b42:	d901      	bls.n	8006b48 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8006b44:	2303      	movs	r3, #3
 8006b46:	e092      	b.n	8006c6e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006b48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d1ef      	bne.n	8006b36 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006b56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b5a:	68da      	ldr	r2, [r3, #12]
 8006b5c:	4b30      	ldr	r3, [pc, #192]	@ (8006c20 <HAL_RCC_OscConfig+0x68c>)
 8006b5e:	4013      	ands	r3, r2
 8006b60:	687a      	ldr	r2, [r7, #4]
 8006b62:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8006b64:	687a      	ldr	r2, [r7, #4]
 8006b66:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006b68:	4311      	orrs	r1, r2
 8006b6a:	687a      	ldr	r2, [r7, #4]
 8006b6c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006b6e:	0212      	lsls	r2, r2, #8
 8006b70:	4311      	orrs	r1, r2
 8006b72:	687a      	ldr	r2, [r7, #4]
 8006b74:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006b76:	4311      	orrs	r1, r2
 8006b78:	687a      	ldr	r2, [r7, #4]
 8006b7a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8006b7c:	4311      	orrs	r1, r2
 8006b7e:	687a      	ldr	r2, [r7, #4]
 8006b80:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8006b82:	430a      	orrs	r2, r1
 8006b84:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006b88:	4313      	orrs	r3, r2
 8006b8a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006b8c:	f7ff fc45 	bl	800641a <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006b90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b94:	68db      	ldr	r3, [r3, #12]
 8006b96:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006b9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b9e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006ba0:	f7fe fe84 	bl	80058ac <HAL_GetTick>
 8006ba4:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006ba6:	e008      	b.n	8006bba <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ba8:	f7fe fe80 	bl	80058ac <HAL_GetTick>
 8006bac:	4602      	mov	r2, r0
 8006bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bb0:	1ad3      	subs	r3, r2, r3
 8006bb2:	2b02      	cmp	r3, #2
 8006bb4:	d901      	bls.n	8006bba <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8006bb6:	2303      	movs	r3, #3
 8006bb8:	e059      	b.n	8006c6e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006bba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d0ef      	beq.n	8006ba8 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006bc8:	e050      	b.n	8006c6c <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006bca:	2301      	movs	r3, #1
 8006bcc:	e04f      	b.n	8006c6e <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006bce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d147      	bne.n	8006c6c <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006bdc:	f7ff fc1d 	bl	800641a <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006be0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006be4:	68db      	ldr	r3, [r3, #12]
 8006be6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006bea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006bee:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006bf0:	f7fe fe5c 	bl	80058ac <HAL_GetTick>
 8006bf4:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006bf6:	e008      	b.n	8006c0a <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006bf8:	f7fe fe58 	bl	80058ac <HAL_GetTick>
 8006bfc:	4602      	mov	r2, r0
 8006bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c00:	1ad3      	subs	r3, r2, r3
 8006c02:	2b02      	cmp	r3, #2
 8006c04:	d901      	bls.n	8006c0a <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8006c06:	2303      	movs	r3, #3
 8006c08:	e031      	b.n	8006c6e <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006c0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d0ef      	beq.n	8006bf8 <HAL_RCC_OscConfig+0x664>
 8006c18:	e028      	b.n	8006c6c <HAL_RCC_OscConfig+0x6d8>
 8006c1a:	bf00      	nop
 8006c1c:	58000400 	.word	0x58000400
 8006c20:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006c24:	693b      	ldr	r3, [r7, #16]
 8006c26:	2b0c      	cmp	r3, #12
 8006c28:	d01e      	beq.n	8006c68 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c2a:	f7ff fc05 	bl	8006438 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c2e:	f7fe fe3d 	bl	80058ac <HAL_GetTick>
 8006c32:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006c34:	e008      	b.n	8006c48 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c36:	f7fe fe39 	bl	80058ac <HAL_GetTick>
 8006c3a:	4602      	mov	r2, r0
 8006c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c3e:	1ad3      	subs	r3, r2, r3
 8006c40:	2b02      	cmp	r3, #2
 8006c42:	d901      	bls.n	8006c48 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8006c44:	2303      	movs	r3, #3
 8006c46:	e012      	b.n	8006c6e <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006c48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d1ef      	bne.n	8006c36 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8006c56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c5a:	68da      	ldr	r2, [r3, #12]
 8006c5c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006c60:	4b05      	ldr	r3, [pc, #20]	@ (8006c78 <HAL_RCC_OscConfig+0x6e4>)
 8006c62:	4013      	ands	r3, r2
 8006c64:	60cb      	str	r3, [r1, #12]
 8006c66:	e001      	b.n	8006c6c <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006c68:	2301      	movs	r3, #1
 8006c6a:	e000      	b.n	8006c6e <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8006c6c:	2300      	movs	r3, #0
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	3734      	adds	r7, #52	@ 0x34
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd90      	pop	{r4, r7, pc}
 8006c76:	bf00      	nop
 8006c78:	eefefffc 	.word	0xeefefffc

08006c7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b084      	sub	sp, #16
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
 8006c84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d101      	bne.n	8006c90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	e12d      	b.n	8006eec <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006c90:	4b98      	ldr	r3, [pc, #608]	@ (8006ef4 <HAL_RCC_ClockConfig+0x278>)
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f003 0307 	and.w	r3, r3, #7
 8006c98:	683a      	ldr	r2, [r7, #0]
 8006c9a:	429a      	cmp	r2, r3
 8006c9c:	d91b      	bls.n	8006cd6 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c9e:	4b95      	ldr	r3, [pc, #596]	@ (8006ef4 <HAL_RCC_ClockConfig+0x278>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f023 0207 	bic.w	r2, r3, #7
 8006ca6:	4993      	ldr	r1, [pc, #588]	@ (8006ef4 <HAL_RCC_ClockConfig+0x278>)
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	4313      	orrs	r3, r2
 8006cac:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006cae:	f7fe fdfd 	bl	80058ac <HAL_GetTick>
 8006cb2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cb4:	e008      	b.n	8006cc8 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006cb6:	f7fe fdf9 	bl	80058ac <HAL_GetTick>
 8006cba:	4602      	mov	r2, r0
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	1ad3      	subs	r3, r2, r3
 8006cc0:	2b02      	cmp	r3, #2
 8006cc2:	d901      	bls.n	8006cc8 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8006cc4:	2303      	movs	r3, #3
 8006cc6:	e111      	b.n	8006eec <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cc8:	4b8a      	ldr	r3, [pc, #552]	@ (8006ef4 <HAL_RCC_ClockConfig+0x278>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f003 0307 	and.w	r3, r3, #7
 8006cd0:	683a      	ldr	r2, [r7, #0]
 8006cd2:	429a      	cmp	r2, r3
 8006cd4:	d1ef      	bne.n	8006cb6 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f003 0302 	and.w	r3, r3, #2
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d016      	beq.n	8006d10 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	689b      	ldr	r3, [r3, #8]
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	f7ff faef 	bl	80062ca <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006cec:	f7fe fdde 	bl	80058ac <HAL_GetTick>
 8006cf0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8006cf2:	e008      	b.n	8006d06 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006cf4:	f7fe fdda 	bl	80058ac <HAL_GetTick>
 8006cf8:	4602      	mov	r2, r0
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	1ad3      	subs	r3, r2, r3
 8006cfe:	2b02      	cmp	r3, #2
 8006d00:	d901      	bls.n	8006d06 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8006d02:	2303      	movs	r3, #3
 8006d04:	e0f2      	b.n	8006eec <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8006d06:	f7ff fbe9 	bl	80064dc <LL_RCC_IsActiveFlag_HPRE>
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d0f1      	beq.n	8006cf4 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f003 0320 	and.w	r3, r3, #32
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d016      	beq.n	8006d4a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	695b      	ldr	r3, [r3, #20]
 8006d20:	4618      	mov	r0, r3
 8006d22:	f7ff fae6 	bl	80062f2 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006d26:	f7fe fdc1 	bl	80058ac <HAL_GetTick>
 8006d2a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8006d2c:	e008      	b.n	8006d40 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006d2e:	f7fe fdbd 	bl	80058ac <HAL_GetTick>
 8006d32:	4602      	mov	r2, r0
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	1ad3      	subs	r3, r2, r3
 8006d38:	2b02      	cmp	r3, #2
 8006d3a:	d901      	bls.n	8006d40 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8006d3c:	2303      	movs	r3, #3
 8006d3e:	e0d5      	b.n	8006eec <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8006d40:	f7ff fbde 	bl	8006500 <LL_RCC_IsActiveFlag_C2HPRE>
 8006d44:	4603      	mov	r3, r0
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d0f1      	beq.n	8006d2e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d016      	beq.n	8006d84 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	699b      	ldr	r3, [r3, #24]
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f7ff fadf 	bl	800631e <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006d60:	f7fe fda4 	bl	80058ac <HAL_GetTick>
 8006d64:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006d66:	e008      	b.n	8006d7a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006d68:	f7fe fda0 	bl	80058ac <HAL_GetTick>
 8006d6c:	4602      	mov	r2, r0
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	1ad3      	subs	r3, r2, r3
 8006d72:	2b02      	cmp	r3, #2
 8006d74:	d901      	bls.n	8006d7a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8006d76:	2303      	movs	r3, #3
 8006d78:	e0b8      	b.n	8006eec <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006d7a:	f7ff fbd4 	bl	8006526 <LL_RCC_IsActiveFlag_SHDHPRE>
 8006d7e:	4603      	mov	r3, r0
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d0f1      	beq.n	8006d68 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f003 0304 	and.w	r3, r3, #4
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d016      	beq.n	8006dbe <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	68db      	ldr	r3, [r3, #12]
 8006d94:	4618      	mov	r0, r3
 8006d96:	f7ff fad9 	bl	800634c <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006d9a:	f7fe fd87 	bl	80058ac <HAL_GetTick>
 8006d9e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006da0:	e008      	b.n	8006db4 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006da2:	f7fe fd83 	bl	80058ac <HAL_GetTick>
 8006da6:	4602      	mov	r2, r0
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	1ad3      	subs	r3, r2, r3
 8006dac:	2b02      	cmp	r3, #2
 8006dae:	d901      	bls.n	8006db4 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8006db0:	2303      	movs	r3, #3
 8006db2:	e09b      	b.n	8006eec <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006db4:	f7ff fbca 	bl	800654c <LL_RCC_IsActiveFlag_PPRE1>
 8006db8:	4603      	mov	r3, r0
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d0f1      	beq.n	8006da2 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f003 0308 	and.w	r3, r3, #8
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d017      	beq.n	8006dfa <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	691b      	ldr	r3, [r3, #16]
 8006dce:	00db      	lsls	r3, r3, #3
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	f7ff facf 	bl	8006374 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006dd6:	f7fe fd69 	bl	80058ac <HAL_GetTick>
 8006dda:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8006ddc:	e008      	b.n	8006df0 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006dde:	f7fe fd65 	bl	80058ac <HAL_GetTick>
 8006de2:	4602      	mov	r2, r0
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	1ad3      	subs	r3, r2, r3
 8006de8:	2b02      	cmp	r3, #2
 8006dea:	d901      	bls.n	8006df0 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8006dec:	2303      	movs	r3, #3
 8006dee:	e07d      	b.n	8006eec <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8006df0:	f7ff fbbe 	bl	8006570 <LL_RCC_IsActiveFlag_PPRE2>
 8006df4:	4603      	mov	r3, r0
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d0f1      	beq.n	8006dde <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f003 0301 	and.w	r3, r3, #1
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d043      	beq.n	8006e8e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	685b      	ldr	r3, [r3, #4]
 8006e0a:	2b02      	cmp	r3, #2
 8006e0c:	d106      	bne.n	8006e1c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8006e0e:	f7ff f86f 	bl	8005ef0 <LL_RCC_HSE_IsReady>
 8006e12:	4603      	mov	r3, r0
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d11e      	bne.n	8006e56 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006e18:	2301      	movs	r3, #1
 8006e1a:	e067      	b.n	8006eec <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	685b      	ldr	r3, [r3, #4]
 8006e20:	2b03      	cmp	r3, #3
 8006e22:	d106      	bne.n	8006e32 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8006e24:	f7ff fb17 	bl	8006456 <LL_RCC_PLL_IsReady>
 8006e28:	4603      	mov	r3, r0
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d113      	bne.n	8006e56 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006e2e:	2301      	movs	r3, #1
 8006e30:	e05c      	b.n	8006eec <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	685b      	ldr	r3, [r3, #4]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d106      	bne.n	8006e48 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8006e3a:	f7ff f9d7 	bl	80061ec <LL_RCC_MSI_IsReady>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d108      	bne.n	8006e56 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006e44:	2301      	movs	r3, #1
 8006e46:	e051      	b.n	8006eec <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8006e48:	f7ff f882 	bl	8005f50 <LL_RCC_HSI_IsReady>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d101      	bne.n	8006e56 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006e52:	2301      	movs	r3, #1
 8006e54:	e04a      	b.n	8006eec <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	685b      	ldr	r3, [r3, #4]
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	f7ff fa15 	bl	800628a <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e60:	f7fe fd24 	bl	80058ac <HAL_GetTick>
 8006e64:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e66:	e00a      	b.n	8006e7e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e68:	f7fe fd20 	bl	80058ac <HAL_GetTick>
 8006e6c:	4602      	mov	r2, r0
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	1ad3      	subs	r3, r2, r3
 8006e72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d901      	bls.n	8006e7e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8006e7a:	2303      	movs	r3, #3
 8006e7c:	e036      	b.n	8006eec <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e7e:	f7ff fa18 	bl	80062b2 <LL_RCC_GetSysClkSource>
 8006e82:	4602      	mov	r2, r0
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	685b      	ldr	r3, [r3, #4]
 8006e88:	009b      	lsls	r3, r3, #2
 8006e8a:	429a      	cmp	r2, r3
 8006e8c:	d1ec      	bne.n	8006e68 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006e8e:	4b19      	ldr	r3, [pc, #100]	@ (8006ef4 <HAL_RCC_ClockConfig+0x278>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f003 0307 	and.w	r3, r3, #7
 8006e96:	683a      	ldr	r2, [r7, #0]
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	d21b      	bcs.n	8006ed4 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e9c:	4b15      	ldr	r3, [pc, #84]	@ (8006ef4 <HAL_RCC_ClockConfig+0x278>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f023 0207 	bic.w	r2, r3, #7
 8006ea4:	4913      	ldr	r1, [pc, #76]	@ (8006ef4 <HAL_RCC_ClockConfig+0x278>)
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	4313      	orrs	r3, r2
 8006eaa:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006eac:	f7fe fcfe 	bl	80058ac <HAL_GetTick>
 8006eb0:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006eb2:	e008      	b.n	8006ec6 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006eb4:	f7fe fcfa 	bl	80058ac <HAL_GetTick>
 8006eb8:	4602      	mov	r2, r0
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	1ad3      	subs	r3, r2, r3
 8006ebe:	2b02      	cmp	r3, #2
 8006ec0:	d901      	bls.n	8006ec6 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8006ec2:	2303      	movs	r3, #3
 8006ec4:	e012      	b.n	8006eec <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ec6:	4b0b      	ldr	r3, [pc, #44]	@ (8006ef4 <HAL_RCC_ClockConfig+0x278>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f003 0307 	and.w	r3, r3, #7
 8006ece:	683a      	ldr	r2, [r7, #0]
 8006ed0:	429a      	cmp	r2, r3
 8006ed2:	d1ef      	bne.n	8006eb4 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8006ed4:	f000 f87e 	bl	8006fd4 <HAL_RCC_GetHCLKFreq>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	4a07      	ldr	r2, [pc, #28]	@ (8006ef8 <HAL_RCC_ClockConfig+0x27c>)
 8006edc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8006ede:	f7fe fcf1 	bl	80058c4 <HAL_GetTickPrio>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	f7fe f9ed 	bl	80052c4 <HAL_InitTick>
 8006eea:	4603      	mov	r3, r0
}
 8006eec:	4618      	mov	r0, r3
 8006eee:	3710      	adds	r7, #16
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bd80      	pop	{r7, pc}
 8006ef4:	58004000 	.word	0x58004000
 8006ef8:	20000018 	.word	0x20000018

08006efc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006efc:	b590      	push	{r4, r7, lr}
 8006efe:	b085      	sub	sp, #20
 8006f00:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006f02:	f7ff f9d6 	bl	80062b2 <LL_RCC_GetSysClkSource>
 8006f06:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d10a      	bne.n	8006f24 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8006f0e:	f7ff f992 	bl	8006236 <LL_RCC_MSI_GetRange>
 8006f12:	4603      	mov	r3, r0
 8006f14:	091b      	lsrs	r3, r3, #4
 8006f16:	f003 030f 	and.w	r3, r3, #15
 8006f1a:	4a2b      	ldr	r2, [pc, #172]	@ (8006fc8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006f1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f20:	60fb      	str	r3, [r7, #12]
 8006f22:	e04b      	b.n	8006fbc <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2b04      	cmp	r3, #4
 8006f28:	d102      	bne.n	8006f30 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006f2a:	4b28      	ldr	r3, [pc, #160]	@ (8006fcc <HAL_RCC_GetSysClockFreq+0xd0>)
 8006f2c:	60fb      	str	r3, [r7, #12]
 8006f2e:	e045      	b.n	8006fbc <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2b08      	cmp	r3, #8
 8006f34:	d10a      	bne.n	8006f4c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006f36:	f7fe ffab 	bl	8005e90 <LL_RCC_HSE_IsEnabledDiv2>
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	2b01      	cmp	r3, #1
 8006f3e:	d102      	bne.n	8006f46 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8006f40:	4b22      	ldr	r3, [pc, #136]	@ (8006fcc <HAL_RCC_GetSysClockFreq+0xd0>)
 8006f42:	60fb      	str	r3, [r7, #12]
 8006f44:	e03a      	b.n	8006fbc <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8006f46:	4b22      	ldr	r3, [pc, #136]	@ (8006fd0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8006f48:	60fb      	str	r3, [r7, #12]
 8006f4a:	e037      	b.n	8006fbc <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8006f4c:	f7ff faba 	bl	80064c4 <LL_RCC_PLL_GetMainSource>
 8006f50:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	2b02      	cmp	r3, #2
 8006f56:	d003      	beq.n	8006f60 <HAL_RCC_GetSysClockFreq+0x64>
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	2b03      	cmp	r3, #3
 8006f5c:	d003      	beq.n	8006f66 <HAL_RCC_GetSysClockFreq+0x6a>
 8006f5e:	e00d      	b.n	8006f7c <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8006f60:	4b1a      	ldr	r3, [pc, #104]	@ (8006fcc <HAL_RCC_GetSysClockFreq+0xd0>)
 8006f62:	60bb      	str	r3, [r7, #8]
        break;
 8006f64:	e015      	b.n	8006f92 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006f66:	f7fe ff93 	bl	8005e90 <LL_RCC_HSE_IsEnabledDiv2>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	2b01      	cmp	r3, #1
 8006f6e:	d102      	bne.n	8006f76 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8006f70:	4b16      	ldr	r3, [pc, #88]	@ (8006fcc <HAL_RCC_GetSysClockFreq+0xd0>)
 8006f72:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8006f74:	e00d      	b.n	8006f92 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8006f76:	4b16      	ldr	r3, [pc, #88]	@ (8006fd0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8006f78:	60bb      	str	r3, [r7, #8]
        break;
 8006f7a:	e00a      	b.n	8006f92 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8006f7c:	f7ff f95b 	bl	8006236 <LL_RCC_MSI_GetRange>
 8006f80:	4603      	mov	r3, r0
 8006f82:	091b      	lsrs	r3, r3, #4
 8006f84:	f003 030f 	and.w	r3, r3, #15
 8006f88:	4a0f      	ldr	r2, [pc, #60]	@ (8006fc8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006f8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f8e:	60bb      	str	r3, [r7, #8]
        break;
 8006f90:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8006f92:	f7ff fa72 	bl	800647a <LL_RCC_PLL_GetN>
 8006f96:	4602      	mov	r2, r0
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	fb03 f402 	mul.w	r4, r3, r2
 8006f9e:	f7ff fa85 	bl	80064ac <LL_RCC_PLL_GetDivider>
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	091b      	lsrs	r3, r3, #4
 8006fa6:	3301      	adds	r3, #1
 8006fa8:	fbb4 f4f3 	udiv	r4, r4, r3
 8006fac:	f7ff fa72 	bl	8006494 <LL_RCC_PLL_GetR>
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	0f5b      	lsrs	r3, r3, #29
 8006fb4:	3301      	adds	r3, #1
 8006fb6:	fbb4 f3f3 	udiv	r3, r4, r3
 8006fba:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	3714      	adds	r7, #20
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd90      	pop	{r4, r7, pc}
 8006fc6:	bf00      	nop
 8006fc8:	08012588 	.word	0x08012588
 8006fcc:	00f42400 	.word	0x00f42400
 8006fd0:	01e84800 	.word	0x01e84800

08006fd4 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006fd4:	b598      	push	{r3, r4, r7, lr}
 8006fd6:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8006fd8:	f7ff ff90 	bl	8006efc <HAL_RCC_GetSysClockFreq>
 8006fdc:	4604      	mov	r4, r0
 8006fde:	f7ff f9dd 	bl	800639c <LL_RCC_GetAHBPrescaler>
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	091b      	lsrs	r3, r3, #4
 8006fe6:	f003 030f 	and.w	r3, r3, #15
 8006fea:	4a03      	ldr	r2, [pc, #12]	@ (8006ff8 <HAL_RCC_GetHCLKFreq+0x24>)
 8006fec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ff0:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	bd98      	pop	{r3, r4, r7, pc}
 8006ff8:	08012528 	.word	0x08012528

08006ffc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006ffc:	b598      	push	{r3, r4, r7, lr}
 8006ffe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8007000:	f7ff ffe8 	bl	8006fd4 <HAL_RCC_GetHCLKFreq>
 8007004:	4604      	mov	r4, r0
 8007006:	f7ff f9f0 	bl	80063ea <LL_RCC_GetAPB1Prescaler>
 800700a:	4603      	mov	r3, r0
 800700c:	0a1b      	lsrs	r3, r3, #8
 800700e:	f003 0307 	and.w	r3, r3, #7
 8007012:	4a04      	ldr	r2, [pc, #16]	@ (8007024 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007014:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007018:	f003 031f 	and.w	r3, r3, #31
 800701c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8007020:	4618      	mov	r0, r3
 8007022:	bd98      	pop	{r3, r4, r7, pc}
 8007024:	08012568 	.word	0x08012568

08007028 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007028:	b598      	push	{r3, r4, r7, lr}
 800702a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800702c:	f7ff ffd2 	bl	8006fd4 <HAL_RCC_GetHCLKFreq>
 8007030:	4604      	mov	r4, r0
 8007032:	f7ff f9e6 	bl	8006402 <LL_RCC_GetAPB2Prescaler>
 8007036:	4603      	mov	r3, r0
 8007038:	0adb      	lsrs	r3, r3, #11
 800703a:	f003 0307 	and.w	r3, r3, #7
 800703e:	4a04      	ldr	r2, [pc, #16]	@ (8007050 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007040:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007044:	f003 031f 	and.w	r3, r3, #31
 8007048:	fa24 f303 	lsr.w	r3, r4, r3
}
 800704c:	4618      	mov	r0, r3
 800704e:	bd98      	pop	{r3, r4, r7, pc}
 8007050:	08012568 	.word	0x08012568

08007054 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b082      	sub	sp, #8
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
 800705c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 |
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	226f      	movs	r2, #111	@ 0x6f
 8007062:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 8007064:	f7ff f925 	bl	80062b2 <LL_RCC_GetSysClkSource>
 8007068:	4602      	mov	r2, r0
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 800706e:	f7ff f995 	bl	800639c <LL_RCC_GetAHBPrescaler>
 8007072:	4602      	mov	r2, r0
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 8007078:	f7ff f9b7 	bl	80063ea <LL_RCC_GetAPB1Prescaler>
 800707c:	4602      	mov	r2, r0
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 8007082:	f7ff f9be 	bl	8006402 <LL_RCC_GetAPB2Prescaler>
 8007086:	4602      	mov	r2, r0
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 800708c:	f7ff f992 	bl	80063b4 <LL_C2_RCC_GetAHBPrescaler>
 8007090:	4602      	mov	r2, r0
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 8007096:	f7ff f99a 	bl	80063ce <LL_RCC_GetAHB4Prescaler>
 800709a:	4602      	mov	r2, r0
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80070a0:	4b04      	ldr	r3, [pc, #16]	@ (80070b4 <HAL_RCC_GetClockConfig+0x60>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f003 0207 	and.w	r2, r3, #7
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	601a      	str	r2, [r3, #0]
}
 80070ac:	bf00      	nop
 80070ae:	3708      	adds	r7, #8
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd80      	pop	{r7, pc}
 80070b4:	58004000 	.word	0x58004000

080070b8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80070b8:	b590      	push	{r4, r7, lr}
 80070ba:	b085      	sub	sp, #20
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2bb0      	cmp	r3, #176	@ 0xb0
 80070c4:	d903      	bls.n	80070ce <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80070c6:	4b15      	ldr	r3, [pc, #84]	@ (800711c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80070c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070ca:	60fb      	str	r3, [r7, #12]
 80070cc:	e007      	b.n	80070de <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	091b      	lsrs	r3, r3, #4
 80070d2:	f003 030f 	and.w	r3, r3, #15
 80070d6:	4a11      	ldr	r2, [pc, #68]	@ (800711c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80070d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070dc:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80070de:	f7ff f976 	bl	80063ce <LL_RCC_GetAHB4Prescaler>
 80070e2:	4603      	mov	r3, r0
 80070e4:	091b      	lsrs	r3, r3, #4
 80070e6:	f003 030f 	and.w	r3, r3, #15
 80070ea:	4a0d      	ldr	r2, [pc, #52]	@ (8007120 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80070ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070f0:	68fa      	ldr	r2, [r7, #12]
 80070f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80070f6:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	4a0a      	ldr	r2, [pc, #40]	@ (8007124 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 80070fc:	fba2 2303 	umull	r2, r3, r2, r3
 8007100:	0c9c      	lsrs	r4, r3, #18
 8007102:	f7fe feb7 	bl	8005e74 <HAL_PWREx_GetVoltageRange>
 8007106:	4603      	mov	r3, r0
 8007108:	4619      	mov	r1, r3
 800710a:	4620      	mov	r0, r4
 800710c:	f000 f80c 	bl	8007128 <RCC_SetFlashLatency>
 8007110:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8007112:	4618      	mov	r0, r3
 8007114:	3714      	adds	r7, #20
 8007116:	46bd      	mov	sp, r7
 8007118:	bd90      	pop	{r4, r7, pc}
 800711a:	bf00      	nop
 800711c:	08012588 	.word	0x08012588
 8007120:	08012528 	.word	0x08012528
 8007124:	431bde83 	.word	0x431bde83

08007128 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8007128:	b590      	push	{r4, r7, lr}
 800712a:	b093      	sub	sp, #76	@ 0x4c
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
 8007130:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8007132:	4b37      	ldr	r3, [pc, #220]	@ (8007210 <RCC_SetFlashLatency+0xe8>)
 8007134:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8007138:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800713a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800713e:	4a35      	ldr	r2, [pc, #212]	@ (8007214 <RCC_SetFlashLatency+0xec>)
 8007140:	f107 031c 	add.w	r3, r7, #28
 8007144:	ca07      	ldmia	r2, {r0, r1, r2}
 8007146:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800714a:	4b33      	ldr	r3, [pc, #204]	@ (8007218 <RCC_SetFlashLatency+0xf0>)
 800714c:	f107 040c 	add.w	r4, r7, #12
 8007150:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007152:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8007156:	2300      	movs	r3, #0
 8007158:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007160:	d11a      	bne.n	8007198 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8007162:	2300      	movs	r3, #0
 8007164:	643b      	str	r3, [r7, #64]	@ 0x40
 8007166:	e013      	b.n	8007190 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8007168:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800716a:	009b      	lsls	r3, r3, #2
 800716c:	3348      	adds	r3, #72	@ 0x48
 800716e:	443b      	add	r3, r7
 8007170:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8007174:	687a      	ldr	r2, [r7, #4]
 8007176:	429a      	cmp	r2, r3
 8007178:	d807      	bhi.n	800718a <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800717a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800717c:	009b      	lsls	r3, r3, #2
 800717e:	3348      	adds	r3, #72	@ 0x48
 8007180:	443b      	add	r3, r7
 8007182:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8007186:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8007188:	e020      	b.n	80071cc <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800718a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800718c:	3301      	adds	r3, #1
 800718e:	643b      	str	r3, [r7, #64]	@ 0x40
 8007190:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007192:	2b03      	cmp	r3, #3
 8007194:	d9e8      	bls.n	8007168 <RCC_SetFlashLatency+0x40>
 8007196:	e019      	b.n	80071cc <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8007198:	2300      	movs	r3, #0
 800719a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800719c:	e013      	b.n	80071c6 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800719e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071a0:	009b      	lsls	r3, r3, #2
 80071a2:	3348      	adds	r3, #72	@ 0x48
 80071a4:	443b      	add	r3, r7
 80071a6:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80071aa:	687a      	ldr	r2, [r7, #4]
 80071ac:	429a      	cmp	r2, r3
 80071ae:	d807      	bhi.n	80071c0 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80071b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071b2:	009b      	lsls	r3, r3, #2
 80071b4:	3348      	adds	r3, #72	@ 0x48
 80071b6:	443b      	add	r3, r7
 80071b8:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80071bc:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 80071be:	e005      	b.n	80071cc <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80071c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071c2:	3301      	adds	r3, #1
 80071c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80071c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071c8:	2b02      	cmp	r3, #2
 80071ca:	d9e8      	bls.n	800719e <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 80071cc:	4b13      	ldr	r3, [pc, #76]	@ (800721c <RCC_SetFlashLatency+0xf4>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f023 0207 	bic.w	r2, r3, #7
 80071d4:	4911      	ldr	r1, [pc, #68]	@ (800721c <RCC_SetFlashLatency+0xf4>)
 80071d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80071d8:	4313      	orrs	r3, r2
 80071da:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80071dc:	f7fe fb66 	bl	80058ac <HAL_GetTick>
 80071e0:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80071e2:	e008      	b.n	80071f6 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80071e4:	f7fe fb62 	bl	80058ac <HAL_GetTick>
 80071e8:	4602      	mov	r2, r0
 80071ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071ec:	1ad3      	subs	r3, r2, r3
 80071ee:	2b02      	cmp	r3, #2
 80071f0:	d901      	bls.n	80071f6 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 80071f2:	2303      	movs	r3, #3
 80071f4:	e007      	b.n	8007206 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80071f6:	4b09      	ldr	r3, [pc, #36]	@ (800721c <RCC_SetFlashLatency+0xf4>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f003 0307 	and.w	r3, r3, #7
 80071fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007200:	429a      	cmp	r2, r3
 8007202:	d1ef      	bne.n	80071e4 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8007204:	2300      	movs	r3, #0
}
 8007206:	4618      	mov	r0, r3
 8007208:	374c      	adds	r7, #76	@ 0x4c
 800720a:	46bd      	mov	sp, r7
 800720c:	bd90      	pop	{r4, r7, pc}
 800720e:	bf00      	nop
 8007210:	0800f4e8 	.word	0x0800f4e8
 8007214:	0800f4f8 	.word	0x0800f4f8
 8007218:	0800f504 	.word	0x0800f504
 800721c:	58004000 	.word	0x58004000

08007220 <LL_RCC_LSE_IsEnabled>:
{
 8007220:	b480      	push	{r7}
 8007222:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8007224:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007228:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800722c:	f003 0301 	and.w	r3, r3, #1
 8007230:	2b01      	cmp	r3, #1
 8007232:	d101      	bne.n	8007238 <LL_RCC_LSE_IsEnabled+0x18>
 8007234:	2301      	movs	r3, #1
 8007236:	e000      	b.n	800723a <LL_RCC_LSE_IsEnabled+0x1a>
 8007238:	2300      	movs	r3, #0
}
 800723a:	4618      	mov	r0, r3
 800723c:	46bd      	mov	sp, r7
 800723e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007242:	4770      	bx	lr

08007244 <LL_RCC_LSE_IsReady>:
{
 8007244:	b480      	push	{r7}
 8007246:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8007248:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800724c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007250:	f003 0302 	and.w	r3, r3, #2
 8007254:	2b02      	cmp	r3, #2
 8007256:	d101      	bne.n	800725c <LL_RCC_LSE_IsReady+0x18>
 8007258:	2301      	movs	r3, #1
 800725a:	e000      	b.n	800725e <LL_RCC_LSE_IsReady+0x1a>
 800725c:	2300      	movs	r3, #0
}
 800725e:	4618      	mov	r0, r3
 8007260:	46bd      	mov	sp, r7
 8007262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007266:	4770      	bx	lr

08007268 <LL_RCC_SetRFWKPClockSource>:
{
 8007268:	b480      	push	{r7}
 800726a:	b083      	sub	sp, #12
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8007270:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007274:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007278:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800727c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	4313      	orrs	r3, r2
 8007284:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8007288:	bf00      	nop
 800728a:	370c      	adds	r7, #12
 800728c:	46bd      	mov	sp, r7
 800728e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007292:	4770      	bx	lr

08007294 <LL_RCC_SetSMPSClockSource>:
{
 8007294:	b480      	push	{r7}
 8007296:	b083      	sub	sp, #12
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800729c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80072a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072a2:	f023 0203 	bic.w	r2, r3, #3
 80072a6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	4313      	orrs	r3, r2
 80072ae:	624b      	str	r3, [r1, #36]	@ 0x24
}
 80072b0:	bf00      	nop
 80072b2:	370c      	adds	r7, #12
 80072b4:	46bd      	mov	sp, r7
 80072b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ba:	4770      	bx	lr

080072bc <LL_RCC_SetSMPSPrescaler>:
{
 80072bc:	b480      	push	{r7}
 80072be:	b083      	sub	sp, #12
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80072c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80072c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072ca:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80072ce:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	4313      	orrs	r3, r2
 80072d6:	624b      	str	r3, [r1, #36]	@ 0x24
}
 80072d8:	bf00      	nop
 80072da:	370c      	adds	r7, #12
 80072dc:	46bd      	mov	sp, r7
 80072de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e2:	4770      	bx	lr

080072e4 <LL_RCC_SetUSARTClockSource>:
{
 80072e4:	b480      	push	{r7}
 80072e6:	b083      	sub	sp, #12
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80072ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80072f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072f4:	f023 0203 	bic.w	r2, r3, #3
 80072f8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	4313      	orrs	r3, r2
 8007300:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007304:	bf00      	nop
 8007306:	370c      	adds	r7, #12
 8007308:	46bd      	mov	sp, r7
 800730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730e:	4770      	bx	lr

08007310 <LL_RCC_SetLPUARTClockSource>:
{
 8007310:	b480      	push	{r7}
 8007312:	b083      	sub	sp, #12
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8007318:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800731c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007320:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007324:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	4313      	orrs	r3, r2
 800732c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007330:	bf00      	nop
 8007332:	370c      	adds	r7, #12
 8007334:	46bd      	mov	sp, r7
 8007336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733a:	4770      	bx	lr

0800733c <LL_RCC_SetI2CClockSource>:
{
 800733c:	b480      	push	{r7}
 800733e:	b083      	sub	sp, #12
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8007344:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007348:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	091b      	lsrs	r3, r3, #4
 8007350:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8007354:	43db      	mvns	r3, r3
 8007356:	401a      	ands	r2, r3
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	011b      	lsls	r3, r3, #4
 800735c:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8007360:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007364:	4313      	orrs	r3, r2
 8007366:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800736a:	bf00      	nop
 800736c:	370c      	adds	r7, #12
 800736e:	46bd      	mov	sp, r7
 8007370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007374:	4770      	bx	lr

08007376 <LL_RCC_SetLPTIMClockSource>:
{
 8007376:	b480      	push	{r7}
 8007378:	b083      	sub	sp, #12
 800737a:	af00      	add	r7, sp, #0
 800737c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800737e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007382:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	0c1b      	lsrs	r3, r3, #16
 800738a:	041b      	lsls	r3, r3, #16
 800738c:	43db      	mvns	r3, r3
 800738e:	401a      	ands	r2, r3
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	041b      	lsls	r3, r3, #16
 8007394:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007398:	4313      	orrs	r3, r2
 800739a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800739e:	bf00      	nop
 80073a0:	370c      	adds	r7, #12
 80073a2:	46bd      	mov	sp, r7
 80073a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a8:	4770      	bx	lr

080073aa <LL_RCC_SetSAIClockSource>:
{
 80073aa:	b480      	push	{r7}
 80073ac:	b083      	sub	sp, #12
 80073ae:	af00      	add	r7, sp, #0
 80073b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80073b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80073b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073ba:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80073be:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	4313      	orrs	r3, r2
 80073c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80073ca:	bf00      	nop
 80073cc:	370c      	adds	r7, #12
 80073ce:	46bd      	mov	sp, r7
 80073d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d4:	4770      	bx	lr

080073d6 <LL_RCC_SetRNGClockSource>:
{
 80073d6:	b480      	push	{r7}
 80073d8:	b083      	sub	sp, #12
 80073da:	af00      	add	r7, sp, #0
 80073dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80073de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80073e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073e6:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80073ea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	4313      	orrs	r3, r2
 80073f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80073f6:	bf00      	nop
 80073f8:	370c      	adds	r7, #12
 80073fa:	46bd      	mov	sp, r7
 80073fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007400:	4770      	bx	lr

08007402 <LL_RCC_SetCLK48ClockSource>:
{
 8007402:	b480      	push	{r7}
 8007404:	b083      	sub	sp, #12
 8007406:	af00      	add	r7, sp, #0
 8007408:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800740a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800740e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007412:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007416:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	4313      	orrs	r3, r2
 800741e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007422:	bf00      	nop
 8007424:	370c      	adds	r7, #12
 8007426:	46bd      	mov	sp, r7
 8007428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742c:	4770      	bx	lr

0800742e <LL_RCC_SetUSBClockSource>:
{
 800742e:	b580      	push	{r7, lr}
 8007430:	b082      	sub	sp, #8
 8007432:	af00      	add	r7, sp, #0
 8007434:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f7ff ffe3 	bl	8007402 <LL_RCC_SetCLK48ClockSource>
}
 800743c:	bf00      	nop
 800743e:	3708      	adds	r7, #8
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}

08007444 <LL_RCC_SetADCClockSource>:
{
 8007444:	b480      	push	{r7}
 8007446:	b083      	sub	sp, #12
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800744c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007450:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007454:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007458:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	4313      	orrs	r3, r2
 8007460:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007464:	bf00      	nop
 8007466:	370c      	adds	r7, #12
 8007468:	46bd      	mov	sp, r7
 800746a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746e:	4770      	bx	lr

08007470 <LL_RCC_SetRTCClockSource>:
{
 8007470:	b480      	push	{r7}
 8007472:	b083      	sub	sp, #12
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8007478:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800747c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007480:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007484:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	4313      	orrs	r3, r2
 800748c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8007490:	bf00      	nop
 8007492:	370c      	adds	r7, #12
 8007494:	46bd      	mov	sp, r7
 8007496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749a:	4770      	bx	lr

0800749c <LL_RCC_GetRTCClockSource>:
{
 800749c:	b480      	push	{r7}
 800749e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80074a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80074a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074a8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	46bd      	mov	sp, r7
 80074b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b4:	4770      	bx	lr

080074b6 <LL_RCC_ForceBackupDomainReset>:
{
 80074b6:	b480      	push	{r7}
 80074b8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80074ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80074be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074c2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80074c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80074ca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80074ce:	bf00      	nop
 80074d0:	46bd      	mov	sp, r7
 80074d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d6:	4770      	bx	lr

080074d8 <LL_RCC_ReleaseBackupDomainReset>:
{
 80074d8:	b480      	push	{r7}
 80074da:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80074dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80074e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074e4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80074e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80074ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80074f0:	bf00      	nop
 80074f2:	46bd      	mov	sp, r7
 80074f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f8:	4770      	bx	lr

080074fa <LL_RCC_PLLSAI1_Enable>:
{
 80074fa:	b480      	push	{r7}
 80074fc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80074fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007508:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800750c:	6013      	str	r3, [r2, #0]
}
 800750e:	bf00      	nop
 8007510:	46bd      	mov	sp, r7
 8007512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007516:	4770      	bx	lr

08007518 <LL_RCC_PLLSAI1_Disable>:
{
 8007518:	b480      	push	{r7}
 800751a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800751c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007526:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800752a:	6013      	str	r3, [r2, #0]
}
 800752c:	bf00      	nop
 800752e:	46bd      	mov	sp, r7
 8007530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007534:	4770      	bx	lr

08007536 <LL_RCC_PLLSAI1_IsReady>:
{
 8007536:	b480      	push	{r7}
 8007538:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800753a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007544:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007548:	d101      	bne.n	800754e <LL_RCC_PLLSAI1_IsReady+0x18>
 800754a:	2301      	movs	r3, #1
 800754c:	e000      	b.n	8007550 <LL_RCC_PLLSAI1_IsReady+0x1a>
 800754e:	2300      	movs	r3, #0
}
 8007550:	4618      	mov	r0, r3
 8007552:	46bd      	mov	sp, r7
 8007554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007558:	4770      	bx	lr

0800755a <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800755a:	b580      	push	{r7, lr}
 800755c:	b088      	sub	sp, #32
 800755e:	af00      	add	r7, sp, #0
 8007560:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8007562:	2300      	movs	r3, #0
 8007564:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8007566:	2300      	movs	r3, #0
 8007568:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007572:	2b00      	cmp	r3, #0
 8007574:	d034      	beq.n	80075e0 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800757a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800757e:	d021      	beq.n	80075c4 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8007580:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007584:	d81b      	bhi.n	80075be <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007586:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800758a:	d01d      	beq.n	80075c8 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800758c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007590:	d815      	bhi.n	80075be <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007592:	2b00      	cmp	r3, #0
 8007594:	d00b      	beq.n	80075ae <HAL_RCCEx_PeriphCLKConfig+0x54>
 8007596:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800759a:	d110      	bne.n	80075be <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800759c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80075a0:	68db      	ldr	r3, [r3, #12]
 80075a2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80075a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80075aa:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80075ac:	e00d      	b.n	80075ca <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	3304      	adds	r3, #4
 80075b2:	4618      	mov	r0, r3
 80075b4:	f000 f947 	bl	8007846 <RCCEx_PLLSAI1_ConfigNP>
 80075b8:	4603      	mov	r3, r0
 80075ba:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80075bc:	e005      	b.n	80075ca <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80075be:	2301      	movs	r3, #1
 80075c0:	77fb      	strb	r3, [r7, #31]
        break;
 80075c2:	e002      	b.n	80075ca <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80075c4:	bf00      	nop
 80075c6:	e000      	b.n	80075ca <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80075c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075ca:	7ffb      	ldrb	r3, [r7, #31]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d105      	bne.n	80075dc <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075d4:	4618      	mov	r0, r3
 80075d6:	f7ff fee8 	bl	80073aa <LL_RCC_SetSAIClockSource>
 80075da:	e001      	b.n	80075e0 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075dc:	7ffb      	ldrb	r3, [r7, #31]
 80075de:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d046      	beq.n	800767a <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80075ec:	f7ff ff56 	bl	800749c <LL_RCC_GetRTCClockSource>
 80075f0:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075f6:	69ba      	ldr	r2, [r7, #24]
 80075f8:	429a      	cmp	r2, r3
 80075fa:	d03c      	beq.n	8007676 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80075fc:	f7fe fc2a 	bl	8005e54 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8007600:	69bb      	ldr	r3, [r7, #24]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d105      	bne.n	8007612 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800760a:	4618      	mov	r0, r3
 800760c:	f7ff ff30 	bl	8007470 <LL_RCC_SetRTCClockSource>
 8007610:	e02e      	b.n	8007670 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8007612:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007616:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800761a:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800761c:	f7ff ff4b 	bl	80074b6 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8007620:	f7ff ff5a 	bl	80074d8 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8007624:	697b      	ldr	r3, [r7, #20]
 8007626:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800762e:	4313      	orrs	r3, r2
 8007630:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8007632:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007636:	697b      	ldr	r3, [r7, #20]
 8007638:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800763c:	f7ff fdf0 	bl	8007220 <LL_RCC_LSE_IsEnabled>
 8007640:	4603      	mov	r3, r0
 8007642:	2b01      	cmp	r3, #1
 8007644:	d114      	bne.n	8007670 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007646:	f7fe f931 	bl	80058ac <HAL_GetTick>
 800764a:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800764c:	e00b      	b.n	8007666 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800764e:	f7fe f92d 	bl	80058ac <HAL_GetTick>
 8007652:	4602      	mov	r2, r0
 8007654:	693b      	ldr	r3, [r7, #16]
 8007656:	1ad3      	subs	r3, r2, r3
 8007658:	f241 3288 	movw	r2, #5000	@ 0x1388
 800765c:	4293      	cmp	r3, r2
 800765e:	d902      	bls.n	8007666 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8007660:	2303      	movs	r3, #3
 8007662:	77fb      	strb	r3, [r7, #31]
              break;
 8007664:	e004      	b.n	8007670 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8007666:	f7ff fded 	bl	8007244 <LL_RCC_LSE_IsReady>
 800766a:	4603      	mov	r3, r0
 800766c:	2b01      	cmp	r3, #1
 800766e:	d1ee      	bne.n	800764e <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8007670:	7ffb      	ldrb	r3, [r7, #31]
 8007672:	77bb      	strb	r3, [r7, #30]
 8007674:	e001      	b.n	800767a <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007676:	7ffb      	ldrb	r3, [r7, #31]
 8007678:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f003 0301 	and.w	r3, r3, #1
 8007682:	2b00      	cmp	r3, #0
 8007684:	d004      	beq.n	8007690 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	699b      	ldr	r3, [r3, #24]
 800768a:	4618      	mov	r0, r3
 800768c:	f7ff fe2a 	bl	80072e4 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f003 0302 	and.w	r3, r3, #2
 8007698:	2b00      	cmp	r3, #0
 800769a:	d004      	beq.n	80076a6 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	69db      	ldr	r3, [r3, #28]
 80076a0:	4618      	mov	r0, r3
 80076a2:	f7ff fe35 	bl	8007310 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f003 0310 	and.w	r3, r3, #16
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d004      	beq.n	80076bc <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076b6:	4618      	mov	r0, r3
 80076b8:	f7ff fe5d 	bl	8007376 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f003 0320 	and.w	r3, r3, #32
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d004      	beq.n	80076d2 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076cc:	4618      	mov	r0, r3
 80076ce:	f7ff fe52 	bl	8007376 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f003 0304 	and.w	r3, r3, #4
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d004      	beq.n	80076e8 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6a1b      	ldr	r3, [r3, #32]
 80076e2:	4618      	mov	r0, r3
 80076e4:	f7ff fe2a 	bl	800733c <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f003 0308 	and.w	r3, r3, #8
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d004      	beq.n	80076fe <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076f8:	4618      	mov	r0, r3
 80076fa:	f7ff fe1f 	bl	800733c <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007706:	2b00      	cmp	r3, #0
 8007708:	d022      	beq.n	8007750 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800770e:	4618      	mov	r0, r3
 8007710:	f7ff fe8d 	bl	800742e <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007718:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800771c:	d107      	bne.n	800772e <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800771e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007722:	68db      	ldr	r3, [r3, #12]
 8007724:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007728:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800772c:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007732:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007736:	d10b      	bne.n	8007750 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	3304      	adds	r3, #4
 800773c:	4618      	mov	r0, r3
 800773e:	f000 f8dd 	bl	80078fc <RCCEx_PLLSAI1_ConfigNQ>
 8007742:	4603      	mov	r3, r0
 8007744:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8007746:	7ffb      	ldrb	r3, [r7, #31]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d001      	beq.n	8007750 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 800774c:	7ffb      	ldrb	r3, [r7, #31]
 800774e:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007758:	2b00      	cmp	r3, #0
 800775a:	d02b      	beq.n	80077b4 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007760:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007764:	d008      	beq.n	8007778 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800776a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800776e:	d003      	beq.n	8007778 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007774:	2b00      	cmp	r3, #0
 8007776:	d105      	bne.n	8007784 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800777c:	4618      	mov	r0, r3
 800777e:	f7ff fe2a 	bl	80073d6 <LL_RCC_SetRNGClockSource>
 8007782:	e00a      	b.n	800779a <HAL_RCCEx_PeriphCLKConfig+0x240>
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007788:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800778c:	60fb      	str	r3, [r7, #12]
 800778e:	2000      	movs	r0, #0
 8007790:	f7ff fe21 	bl	80073d6 <LL_RCC_SetRNGClockSource>
 8007794:	68f8      	ldr	r0, [r7, #12]
 8007796:	f7ff fe34 	bl	8007402 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800779e:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 80077a2:	d107      	bne.n	80077b4 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80077a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80077a8:	68db      	ldr	r3, [r3, #12]
 80077aa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80077ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80077b2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d022      	beq.n	8007806 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077c4:	4618      	mov	r0, r3
 80077c6:	f7ff fe3d 	bl	8007444 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80077d2:	d107      	bne.n	80077e4 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80077d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80077d8:	68db      	ldr	r3, [r3, #12]
 80077da:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80077de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80077e2:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80077ec:	d10b      	bne.n	8007806 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	3304      	adds	r3, #4
 80077f2:	4618      	mov	r0, r3
 80077f4:	f000 f8dd 	bl	80079b2 <RCCEx_PLLSAI1_ConfigNR>
 80077f8:	4603      	mov	r3, r0
 80077fa:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80077fc:	7ffb      	ldrb	r3, [r7, #31]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d001      	beq.n	8007806 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8007802:	7ffb      	ldrb	r3, [r7, #31]
 8007804:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800780e:	2b00      	cmp	r3, #0
 8007810:	d004      	beq.n	800781c <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007816:	4618      	mov	r0, r3
 8007818:	f7ff fd26 	bl	8007268 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007824:	2b00      	cmp	r3, #0
 8007826:	d009      	beq.n	800783c <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800782c:	4618      	mov	r0, r3
 800782e:	f7ff fd45 	bl	80072bc <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007836:	4618      	mov	r0, r3
 8007838:	f7ff fd2c 	bl	8007294 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800783c:	7fbb      	ldrb	r3, [r7, #30]
}
 800783e:	4618      	mov	r0, r3
 8007840:	3720      	adds	r7, #32
 8007842:	46bd      	mov	sp, r7
 8007844:	bd80      	pop	{r7, pc}

08007846 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8007846:	b580      	push	{r7, lr}
 8007848:	b084      	sub	sp, #16
 800784a:	af00      	add	r7, sp, #0
 800784c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800784e:	2300      	movs	r3, #0
 8007850:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8007852:	f7ff fe61 	bl	8007518 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007856:	f7fe f829 	bl	80058ac <HAL_GetTick>
 800785a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800785c:	e009      	b.n	8007872 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800785e:	f7fe f825 	bl	80058ac <HAL_GetTick>
 8007862:	4602      	mov	r2, r0
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	1ad3      	subs	r3, r2, r3
 8007868:	2b02      	cmp	r3, #2
 800786a:	d902      	bls.n	8007872 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800786c:	2303      	movs	r3, #3
 800786e:	73fb      	strb	r3, [r7, #15]
      break;
 8007870:	e004      	b.n	800787c <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007872:	f7ff fe60 	bl	8007536 <LL_RCC_PLLSAI1_IsReady>
 8007876:	4603      	mov	r3, r0
 8007878:	2b00      	cmp	r3, #0
 800787a:	d1f0      	bne.n	800785e <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800787c:	7bfb      	ldrb	r3, [r7, #15]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d137      	bne.n	80078f2 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8007882:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007886:	691b      	ldr	r3, [r3, #16]
 8007888:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	021b      	lsls	r3, r3, #8
 8007892:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007896:	4313      	orrs	r3, r2
 8007898:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800789a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800789e:	691b      	ldr	r3, [r3, #16]
 80078a0:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	685b      	ldr	r3, [r3, #4]
 80078a8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80078ac:	4313      	orrs	r3, r2
 80078ae:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80078b0:	f7ff fe23 	bl	80074fa <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80078b4:	f7fd fffa 	bl	80058ac <HAL_GetTick>
 80078b8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80078ba:	e009      	b.n	80078d0 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80078bc:	f7fd fff6 	bl	80058ac <HAL_GetTick>
 80078c0:	4602      	mov	r2, r0
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	1ad3      	subs	r3, r2, r3
 80078c6:	2b02      	cmp	r3, #2
 80078c8:	d902      	bls.n	80078d0 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80078ca:	2303      	movs	r3, #3
 80078cc:	73fb      	strb	r3, [r7, #15]
        break;
 80078ce:	e004      	b.n	80078da <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80078d0:	f7ff fe31 	bl	8007536 <LL_RCC_PLLSAI1_IsReady>
 80078d4:	4603      	mov	r3, r0
 80078d6:	2b01      	cmp	r3, #1
 80078d8:	d1f0      	bne.n	80078bc <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80078da:	7bfb      	ldrb	r3, [r7, #15]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d108      	bne.n	80078f2 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80078e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80078e4:	691a      	ldr	r2, [r3, #16]
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	691b      	ldr	r3, [r3, #16]
 80078ea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80078ee:	4313      	orrs	r3, r2
 80078f0:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80078f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80078f4:	4618      	mov	r0, r3
 80078f6:	3710      	adds	r7, #16
 80078f8:	46bd      	mov	sp, r7
 80078fa:	bd80      	pop	{r7, pc}

080078fc <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b084      	sub	sp, #16
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007904:	2300      	movs	r3, #0
 8007906:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8007908:	f7ff fe06 	bl	8007518 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800790c:	f7fd ffce 	bl	80058ac <HAL_GetTick>
 8007910:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007912:	e009      	b.n	8007928 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007914:	f7fd ffca 	bl	80058ac <HAL_GetTick>
 8007918:	4602      	mov	r2, r0
 800791a:	68bb      	ldr	r3, [r7, #8]
 800791c:	1ad3      	subs	r3, r2, r3
 800791e:	2b02      	cmp	r3, #2
 8007920:	d902      	bls.n	8007928 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8007922:	2303      	movs	r3, #3
 8007924:	73fb      	strb	r3, [r7, #15]
      break;
 8007926:	e004      	b.n	8007932 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007928:	f7ff fe05 	bl	8007536 <LL_RCC_PLLSAI1_IsReady>
 800792c:	4603      	mov	r3, r0
 800792e:	2b00      	cmp	r3, #0
 8007930:	d1f0      	bne.n	8007914 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8007932:	7bfb      	ldrb	r3, [r7, #15]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d137      	bne.n	80079a8 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8007938:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800793c:	691b      	ldr	r3, [r3, #16]
 800793e:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	021b      	lsls	r3, r3, #8
 8007948:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800794c:	4313      	orrs	r3, r2
 800794e:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8007950:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007954:	691b      	ldr	r3, [r3, #16]
 8007956:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	689b      	ldr	r3, [r3, #8]
 800795e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007962:	4313      	orrs	r3, r2
 8007964:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8007966:	f7ff fdc8 	bl	80074fa <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800796a:	f7fd ff9f 	bl	80058ac <HAL_GetTick>
 800796e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007970:	e009      	b.n	8007986 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007972:	f7fd ff9b 	bl	80058ac <HAL_GetTick>
 8007976:	4602      	mov	r2, r0
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	1ad3      	subs	r3, r2, r3
 800797c:	2b02      	cmp	r3, #2
 800797e:	d902      	bls.n	8007986 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8007980:	2303      	movs	r3, #3
 8007982:	73fb      	strb	r3, [r7, #15]
        break;
 8007984:	e004      	b.n	8007990 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007986:	f7ff fdd6 	bl	8007536 <LL_RCC_PLLSAI1_IsReady>
 800798a:	4603      	mov	r3, r0
 800798c:	2b01      	cmp	r3, #1
 800798e:	d1f0      	bne.n	8007972 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8007990:	7bfb      	ldrb	r3, [r7, #15]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d108      	bne.n	80079a8 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8007996:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800799a:	691a      	ldr	r2, [r3, #16]
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	691b      	ldr	r3, [r3, #16]
 80079a0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80079a4:	4313      	orrs	r3, r2
 80079a6:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80079a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80079aa:	4618      	mov	r0, r3
 80079ac:	3710      	adds	r7, #16
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}

080079b2 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80079b2:	b580      	push	{r7, lr}
 80079b4:	b084      	sub	sp, #16
 80079b6:	af00      	add	r7, sp, #0
 80079b8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80079ba:	2300      	movs	r3, #0
 80079bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80079be:	f7ff fdab 	bl	8007518 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80079c2:	f7fd ff73 	bl	80058ac <HAL_GetTick>
 80079c6:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80079c8:	e009      	b.n	80079de <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80079ca:	f7fd ff6f 	bl	80058ac <HAL_GetTick>
 80079ce:	4602      	mov	r2, r0
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	1ad3      	subs	r3, r2, r3
 80079d4:	2b02      	cmp	r3, #2
 80079d6:	d902      	bls.n	80079de <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80079d8:	2303      	movs	r3, #3
 80079da:	73fb      	strb	r3, [r7, #15]
      break;
 80079dc:	e004      	b.n	80079e8 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80079de:	f7ff fdaa 	bl	8007536 <LL_RCC_PLLSAI1_IsReady>
 80079e2:	4603      	mov	r3, r0
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d1f0      	bne.n	80079ca <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80079e8:	7bfb      	ldrb	r3, [r7, #15]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d137      	bne.n	8007a5e <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80079ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80079f2:	691b      	ldr	r3, [r3, #16]
 80079f4:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	021b      	lsls	r3, r3, #8
 80079fe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007a02:	4313      	orrs	r3, r2
 8007a04:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8007a06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007a0a:	691b      	ldr	r3, [r3, #16]
 8007a0c:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	68db      	ldr	r3, [r3, #12]
 8007a14:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007a18:	4313      	orrs	r3, r2
 8007a1a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8007a1c:	f7ff fd6d 	bl	80074fa <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a20:	f7fd ff44 	bl	80058ac <HAL_GetTick>
 8007a24:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007a26:	e009      	b.n	8007a3c <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007a28:	f7fd ff40 	bl	80058ac <HAL_GetTick>
 8007a2c:	4602      	mov	r2, r0
 8007a2e:	68bb      	ldr	r3, [r7, #8]
 8007a30:	1ad3      	subs	r3, r2, r3
 8007a32:	2b02      	cmp	r3, #2
 8007a34:	d902      	bls.n	8007a3c <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8007a36:	2303      	movs	r3, #3
 8007a38:	73fb      	strb	r3, [r7, #15]
        break;
 8007a3a:	e004      	b.n	8007a46 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007a3c:	f7ff fd7b 	bl	8007536 <LL_RCC_PLLSAI1_IsReady>
 8007a40:	4603      	mov	r3, r0
 8007a42:	2b01      	cmp	r3, #1
 8007a44:	d1f0      	bne.n	8007a28 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8007a46:	7bfb      	ldrb	r3, [r7, #15]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d108      	bne.n	8007a5e <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8007a4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007a50:	691a      	ldr	r2, [r3, #16]
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	691b      	ldr	r3, [r3, #16]
 8007a56:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007a5a:	4313      	orrs	r3, r2
 8007a5c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8007a5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a60:	4618      	mov	r0, r3
 8007a62:	3710      	adds	r7, #16
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bd80      	pop	{r7, pc}

08007a68 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b084      	sub	sp, #16
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d101      	bne.n	8007a7a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007a76:	2301      	movs	r3, #1
 8007a78:	e095      	b.n	8007ba6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d108      	bne.n	8007a94 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	685b      	ldr	r3, [r3, #4]
 8007a86:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007a8a:	d009      	beq.n	8007aa0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2200      	movs	r2, #0
 8007a90:	61da      	str	r2, [r3, #28]
 8007a92:	e005      	b.n	8007aa0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2200      	movs	r2, #0
 8007a98:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007aac:	b2db      	uxtb	r3, r3
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d106      	bne.n	8007ac0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f7fd fbb8 	bl	8005230 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2202      	movs	r2, #2
 8007ac4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	681a      	ldr	r2, [r3, #0]
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007ad6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	68db      	ldr	r3, [r3, #12]
 8007adc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007ae0:	d902      	bls.n	8007ae8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	60fb      	str	r3, [r7, #12]
 8007ae6:	e002      	b.n	8007aee <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007ae8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007aec:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	68db      	ldr	r3, [r3, #12]
 8007af2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8007af6:	d007      	beq.n	8007b08 <HAL_SPI_Init+0xa0>
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	68db      	ldr	r3, [r3, #12]
 8007afc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007b00:	d002      	beq.n	8007b08 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2200      	movs	r2, #0
 8007b06:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	685b      	ldr	r3, [r3, #4]
 8007b0c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	689b      	ldr	r3, [r3, #8]
 8007b14:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007b18:	431a      	orrs	r2, r3
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	691b      	ldr	r3, [r3, #16]
 8007b1e:	f003 0302 	and.w	r3, r3, #2
 8007b22:	431a      	orrs	r2, r3
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	695b      	ldr	r3, [r3, #20]
 8007b28:	f003 0301 	and.w	r3, r3, #1
 8007b2c:	431a      	orrs	r2, r3
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	699b      	ldr	r3, [r3, #24]
 8007b32:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007b36:	431a      	orrs	r2, r3
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	69db      	ldr	r3, [r3, #28]
 8007b3c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007b40:	431a      	orrs	r2, r3
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6a1b      	ldr	r3, [r3, #32]
 8007b46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b4a:	ea42 0103 	orr.w	r1, r2, r3
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b52:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	430a      	orrs	r2, r1
 8007b5c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	699b      	ldr	r3, [r3, #24]
 8007b62:	0c1b      	lsrs	r3, r3, #16
 8007b64:	f003 0204 	and.w	r2, r3, #4
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b6c:	f003 0310 	and.w	r3, r3, #16
 8007b70:	431a      	orrs	r2, r3
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b76:	f003 0308 	and.w	r3, r3, #8
 8007b7a:	431a      	orrs	r2, r3
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	68db      	ldr	r3, [r3, #12]
 8007b80:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8007b84:	ea42 0103 	orr.w	r1, r2, r3
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	430a      	orrs	r2, r1
 8007b94:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2200      	movs	r2, #0
 8007b9a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2201      	movs	r2, #1
 8007ba0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8007ba4:	2300      	movs	r3, #0
}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	3710      	adds	r7, #16
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}

08007bae <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007bae:	b580      	push	{r7, lr}
 8007bb0:	b088      	sub	sp, #32
 8007bb2:	af00      	add	r7, sp, #0
 8007bb4:	60f8      	str	r0, [r7, #12]
 8007bb6:	60b9      	str	r1, [r7, #8]
 8007bb8:	603b      	str	r3, [r7, #0]
 8007bba:	4613      	mov	r3, r2
 8007bbc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007bc8:	2b01      	cmp	r3, #1
 8007bca:	d101      	bne.n	8007bd0 <HAL_SPI_Transmit+0x22>
 8007bcc:	2302      	movs	r3, #2
 8007bce:	e15f      	b.n	8007e90 <HAL_SPI_Transmit+0x2e2>
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	2201      	movs	r2, #1
 8007bd4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007bd8:	f7fd fe68 	bl	80058ac <HAL_GetTick>
 8007bdc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007bde:	88fb      	ldrh	r3, [r7, #6]
 8007be0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007be8:	b2db      	uxtb	r3, r3
 8007bea:	2b01      	cmp	r3, #1
 8007bec:	d002      	beq.n	8007bf4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007bee:	2302      	movs	r3, #2
 8007bf0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007bf2:	e148      	b.n	8007e86 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d002      	beq.n	8007c00 <HAL_SPI_Transmit+0x52>
 8007bfa:	88fb      	ldrh	r3, [r7, #6]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d102      	bne.n	8007c06 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007c00:	2301      	movs	r3, #1
 8007c02:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007c04:	e13f      	b.n	8007e86 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	2203      	movs	r2, #3
 8007c0a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	2200      	movs	r2, #0
 8007c12:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	68ba      	ldr	r2, [r7, #8]
 8007c18:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	88fa      	ldrh	r2, [r7, #6]
 8007c1e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	88fa      	ldrh	r2, [r7, #6]
 8007c24:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	2200      	movs	r2, #0
 8007c2a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	2200      	movs	r2, #0
 8007c30:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	2200      	movs	r2, #0
 8007c38:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	2200      	movs	r2, #0
 8007c40:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	2200      	movs	r2, #0
 8007c46:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	689b      	ldr	r3, [r3, #8]
 8007c4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007c50:	d10f      	bne.n	8007c72 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	681a      	ldr	r2, [r3, #0]
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007c60:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	681a      	ldr	r2, [r3, #0]
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007c70:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c7c:	2b40      	cmp	r3, #64	@ 0x40
 8007c7e:	d007      	beq.n	8007c90 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	681a      	ldr	r2, [r3, #0]
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007c8e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	68db      	ldr	r3, [r3, #12]
 8007c94:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007c98:	d94f      	bls.n	8007d3a <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	685b      	ldr	r3, [r3, #4]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d002      	beq.n	8007ca8 <HAL_SPI_Transmit+0xfa>
 8007ca2:	8afb      	ldrh	r3, [r7, #22]
 8007ca4:	2b01      	cmp	r3, #1
 8007ca6:	d142      	bne.n	8007d2e <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cac:	881a      	ldrh	r2, [r3, #0]
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cb8:	1c9a      	adds	r2, r3, #2
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007cc2:	b29b      	uxth	r3, r3
 8007cc4:	3b01      	subs	r3, #1
 8007cc6:	b29a      	uxth	r2, r3
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007ccc:	e02f      	b.n	8007d2e <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	689b      	ldr	r3, [r3, #8]
 8007cd4:	f003 0302 	and.w	r3, r3, #2
 8007cd8:	2b02      	cmp	r3, #2
 8007cda:	d112      	bne.n	8007d02 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ce0:	881a      	ldrh	r2, [r3, #0]
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cec:	1c9a      	adds	r2, r3, #2
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007cf6:	b29b      	uxth	r3, r3
 8007cf8:	3b01      	subs	r3, #1
 8007cfa:	b29a      	uxth	r2, r3
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007d00:	e015      	b.n	8007d2e <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007d02:	f7fd fdd3 	bl	80058ac <HAL_GetTick>
 8007d06:	4602      	mov	r2, r0
 8007d08:	69bb      	ldr	r3, [r7, #24]
 8007d0a:	1ad3      	subs	r3, r2, r3
 8007d0c:	683a      	ldr	r2, [r7, #0]
 8007d0e:	429a      	cmp	r2, r3
 8007d10:	d803      	bhi.n	8007d1a <HAL_SPI_Transmit+0x16c>
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d18:	d102      	bne.n	8007d20 <HAL_SPI_Transmit+0x172>
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d106      	bne.n	8007d2e <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8007d20:	2303      	movs	r3, #3
 8007d22:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	2201      	movs	r2, #1
 8007d28:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8007d2c:	e0ab      	b.n	8007e86 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d32:	b29b      	uxth	r3, r3
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d1ca      	bne.n	8007cce <HAL_SPI_Transmit+0x120>
 8007d38:	e080      	b.n	8007e3c <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	685b      	ldr	r3, [r3, #4]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d002      	beq.n	8007d48 <HAL_SPI_Transmit+0x19a>
 8007d42:	8afb      	ldrh	r3, [r7, #22]
 8007d44:	2b01      	cmp	r3, #1
 8007d46:	d174      	bne.n	8007e32 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d4c:	b29b      	uxth	r3, r3
 8007d4e:	2b01      	cmp	r3, #1
 8007d50:	d912      	bls.n	8007d78 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d56:	881a      	ldrh	r2, [r3, #0]
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d62:	1c9a      	adds	r2, r3, #2
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d6c:	b29b      	uxth	r3, r3
 8007d6e:	3b02      	subs	r3, #2
 8007d70:	b29a      	uxth	r2, r3
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007d76:	e05c      	b.n	8007e32 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	330c      	adds	r3, #12
 8007d82:	7812      	ldrb	r2, [r2, #0]
 8007d84:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d8a:	1c5a      	adds	r2, r3, #1
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d94:	b29b      	uxth	r3, r3
 8007d96:	3b01      	subs	r3, #1
 8007d98:	b29a      	uxth	r2, r3
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8007d9e:	e048      	b.n	8007e32 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	689b      	ldr	r3, [r3, #8]
 8007da6:	f003 0302 	and.w	r3, r3, #2
 8007daa:	2b02      	cmp	r3, #2
 8007dac:	d12b      	bne.n	8007e06 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007db2:	b29b      	uxth	r3, r3
 8007db4:	2b01      	cmp	r3, #1
 8007db6:	d912      	bls.n	8007dde <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dbc:	881a      	ldrh	r2, [r3, #0]
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dc8:	1c9a      	adds	r2, r3, #2
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007dd2:	b29b      	uxth	r3, r3
 8007dd4:	3b02      	subs	r3, #2
 8007dd6:	b29a      	uxth	r2, r3
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007ddc:	e029      	b.n	8007e32 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	330c      	adds	r3, #12
 8007de8:	7812      	ldrb	r2, [r2, #0]
 8007dea:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007df0:	1c5a      	adds	r2, r3, #1
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007dfa:	b29b      	uxth	r3, r3
 8007dfc:	3b01      	subs	r3, #1
 8007dfe:	b29a      	uxth	r2, r3
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007e04:	e015      	b.n	8007e32 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007e06:	f7fd fd51 	bl	80058ac <HAL_GetTick>
 8007e0a:	4602      	mov	r2, r0
 8007e0c:	69bb      	ldr	r3, [r7, #24]
 8007e0e:	1ad3      	subs	r3, r2, r3
 8007e10:	683a      	ldr	r2, [r7, #0]
 8007e12:	429a      	cmp	r2, r3
 8007e14:	d803      	bhi.n	8007e1e <HAL_SPI_Transmit+0x270>
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e1c:	d102      	bne.n	8007e24 <HAL_SPI_Transmit+0x276>
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d106      	bne.n	8007e32 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8007e24:	2303      	movs	r3, #3
 8007e26:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	2201      	movs	r2, #1
 8007e2c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8007e30:	e029      	b.n	8007e86 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007e36:	b29b      	uxth	r3, r3
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d1b1      	bne.n	8007da0 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007e3c:	69ba      	ldr	r2, [r7, #24]
 8007e3e:	6839      	ldr	r1, [r7, #0]
 8007e40:	68f8      	ldr	r0, [r7, #12]
 8007e42:	f000 f947 	bl	80080d4 <SPI_EndRxTxTransaction>
 8007e46:	4603      	mov	r3, r0
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d002      	beq.n	8007e52 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	2220      	movs	r2, #32
 8007e50:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	689b      	ldr	r3, [r3, #8]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d10a      	bne.n	8007e70 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	613b      	str	r3, [r7, #16]
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	68db      	ldr	r3, [r3, #12]
 8007e64:	613b      	str	r3, [r7, #16]
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	689b      	ldr	r3, [r3, #8]
 8007e6c:	613b      	str	r3, [r7, #16]
 8007e6e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d002      	beq.n	8007e7e <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8007e78:	2301      	movs	r3, #1
 8007e7a:	77fb      	strb	r3, [r7, #31]
 8007e7c:	e003      	b.n	8007e86 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	2201      	movs	r2, #1
 8007e82:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8007e8e:	7ffb      	ldrb	r3, [r7, #31]
}
 8007e90:	4618      	mov	r0, r3
 8007e92:	3720      	adds	r7, #32
 8007e94:	46bd      	mov	sp, r7
 8007e96:	bd80      	pop	{r7, pc}

08007e98 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b088      	sub	sp, #32
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	60f8      	str	r0, [r7, #12]
 8007ea0:	60b9      	str	r1, [r7, #8]
 8007ea2:	603b      	str	r3, [r7, #0]
 8007ea4:	4613      	mov	r3, r2
 8007ea6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007ea8:	f7fd fd00 	bl	80058ac <HAL_GetTick>
 8007eac:	4602      	mov	r2, r0
 8007eae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007eb0:	1a9b      	subs	r3, r3, r2
 8007eb2:	683a      	ldr	r2, [r7, #0]
 8007eb4:	4413      	add	r3, r2
 8007eb6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007eb8:	f7fd fcf8 	bl	80058ac <HAL_GetTick>
 8007ebc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007ebe:	4b39      	ldr	r3, [pc, #228]	@ (8007fa4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	015b      	lsls	r3, r3, #5
 8007ec4:	0d1b      	lsrs	r3, r3, #20
 8007ec6:	69fa      	ldr	r2, [r7, #28]
 8007ec8:	fb02 f303 	mul.w	r3, r2, r3
 8007ecc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007ece:	e054      	b.n	8007f7a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ed6:	d050      	beq.n	8007f7a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007ed8:	f7fd fce8 	bl	80058ac <HAL_GetTick>
 8007edc:	4602      	mov	r2, r0
 8007ede:	69bb      	ldr	r3, [r7, #24]
 8007ee0:	1ad3      	subs	r3, r2, r3
 8007ee2:	69fa      	ldr	r2, [r7, #28]
 8007ee4:	429a      	cmp	r2, r3
 8007ee6:	d902      	bls.n	8007eee <SPI_WaitFlagStateUntilTimeout+0x56>
 8007ee8:	69fb      	ldr	r3, [r7, #28]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d13d      	bne.n	8007f6a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	685a      	ldr	r2, [r3, #4]
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007efc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	685b      	ldr	r3, [r3, #4]
 8007f02:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007f06:	d111      	bne.n	8007f2c <SPI_WaitFlagStateUntilTimeout+0x94>
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	689b      	ldr	r3, [r3, #8]
 8007f0c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007f10:	d004      	beq.n	8007f1c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	689b      	ldr	r3, [r3, #8]
 8007f16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f1a:	d107      	bne.n	8007f2c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	681a      	ldr	r2, [r3, #0]
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007f2a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f30:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007f34:	d10f      	bne.n	8007f56 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	681a      	ldr	r2, [r3, #0]
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007f44:	601a      	str	r2, [r3, #0]
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	681a      	ldr	r2, [r3, #0]
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007f54:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	2201      	movs	r2, #1
 8007f5a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	2200      	movs	r2, #0
 8007f62:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007f66:	2303      	movs	r3, #3
 8007f68:	e017      	b.n	8007f9a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007f6a:	697b      	ldr	r3, [r7, #20]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d101      	bne.n	8007f74 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007f70:	2300      	movs	r3, #0
 8007f72:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007f74:	697b      	ldr	r3, [r7, #20]
 8007f76:	3b01      	subs	r3, #1
 8007f78:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	689a      	ldr	r2, [r3, #8]
 8007f80:	68bb      	ldr	r3, [r7, #8]
 8007f82:	4013      	ands	r3, r2
 8007f84:	68ba      	ldr	r2, [r7, #8]
 8007f86:	429a      	cmp	r2, r3
 8007f88:	bf0c      	ite	eq
 8007f8a:	2301      	moveq	r3, #1
 8007f8c:	2300      	movne	r3, #0
 8007f8e:	b2db      	uxtb	r3, r3
 8007f90:	461a      	mov	r2, r3
 8007f92:	79fb      	ldrb	r3, [r7, #7]
 8007f94:	429a      	cmp	r2, r3
 8007f96:	d19b      	bne.n	8007ed0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007f98:	2300      	movs	r3, #0
}
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	3720      	adds	r7, #32
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bd80      	pop	{r7, pc}
 8007fa2:	bf00      	nop
 8007fa4:	20000018 	.word	0x20000018

08007fa8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b08a      	sub	sp, #40	@ 0x28
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	60f8      	str	r0, [r7, #12]
 8007fb0:	60b9      	str	r1, [r7, #8]
 8007fb2:	607a      	str	r2, [r7, #4]
 8007fb4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007fba:	f7fd fc77 	bl	80058ac <HAL_GetTick>
 8007fbe:	4602      	mov	r2, r0
 8007fc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fc2:	1a9b      	subs	r3, r3, r2
 8007fc4:	683a      	ldr	r2, [r7, #0]
 8007fc6:	4413      	add	r3, r2
 8007fc8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8007fca:	f7fd fc6f 	bl	80058ac <HAL_GetTick>
 8007fce:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	330c      	adds	r3, #12
 8007fd6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007fd8:	4b3d      	ldr	r3, [pc, #244]	@ (80080d0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007fda:	681a      	ldr	r2, [r3, #0]
 8007fdc:	4613      	mov	r3, r2
 8007fde:	009b      	lsls	r3, r3, #2
 8007fe0:	4413      	add	r3, r2
 8007fe2:	00da      	lsls	r2, r3, #3
 8007fe4:	1ad3      	subs	r3, r2, r3
 8007fe6:	0d1b      	lsrs	r3, r3, #20
 8007fe8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007fea:	fb02 f303 	mul.w	r3, r2, r3
 8007fee:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007ff0:	e060      	b.n	80080b4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007ff2:	68bb      	ldr	r3, [r7, #8]
 8007ff4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007ff8:	d107      	bne.n	800800a <SPI_WaitFifoStateUntilTimeout+0x62>
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d104      	bne.n	800800a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008000:	69fb      	ldr	r3, [r7, #28]
 8008002:	781b      	ldrb	r3, [r3, #0]
 8008004:	b2db      	uxtb	r3, r3
 8008006:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8008008:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008010:	d050      	beq.n	80080b4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008012:	f7fd fc4b 	bl	80058ac <HAL_GetTick>
 8008016:	4602      	mov	r2, r0
 8008018:	6a3b      	ldr	r3, [r7, #32]
 800801a:	1ad3      	subs	r3, r2, r3
 800801c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800801e:	429a      	cmp	r2, r3
 8008020:	d902      	bls.n	8008028 <SPI_WaitFifoStateUntilTimeout+0x80>
 8008022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008024:	2b00      	cmp	r3, #0
 8008026:	d13d      	bne.n	80080a4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	685a      	ldr	r2, [r3, #4]
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008036:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	685b      	ldr	r3, [r3, #4]
 800803c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008040:	d111      	bne.n	8008066 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	689b      	ldr	r3, [r3, #8]
 8008046:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800804a:	d004      	beq.n	8008056 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	689b      	ldr	r3, [r3, #8]
 8008050:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008054:	d107      	bne.n	8008066 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	681a      	ldr	r2, [r3, #0]
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008064:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800806a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800806e:	d10f      	bne.n	8008090 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	681a      	ldr	r2, [r3, #0]
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800807e:	601a      	str	r2, [r3, #0]
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	681a      	ldr	r2, [r3, #0]
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800808e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	2201      	movs	r2, #1
 8008094:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	2200      	movs	r2, #0
 800809c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80080a0:	2303      	movs	r3, #3
 80080a2:	e010      	b.n	80080c6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80080a4:	69bb      	ldr	r3, [r7, #24]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d101      	bne.n	80080ae <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80080aa:	2300      	movs	r3, #0
 80080ac:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80080ae:	69bb      	ldr	r3, [r7, #24]
 80080b0:	3b01      	subs	r3, #1
 80080b2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	689a      	ldr	r2, [r3, #8]
 80080ba:	68bb      	ldr	r3, [r7, #8]
 80080bc:	4013      	ands	r3, r2
 80080be:	687a      	ldr	r2, [r7, #4]
 80080c0:	429a      	cmp	r2, r3
 80080c2:	d196      	bne.n	8007ff2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80080c4:	2300      	movs	r3, #0
}
 80080c6:	4618      	mov	r0, r3
 80080c8:	3728      	adds	r7, #40	@ 0x28
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}
 80080ce:	bf00      	nop
 80080d0:	20000018 	.word	0x20000018

080080d4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b086      	sub	sp, #24
 80080d8:	af02      	add	r7, sp, #8
 80080da:	60f8      	str	r0, [r7, #12]
 80080dc:	60b9      	str	r1, [r7, #8]
 80080de:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	9300      	str	r3, [sp, #0]
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	2200      	movs	r2, #0
 80080e8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80080ec:	68f8      	ldr	r0, [r7, #12]
 80080ee:	f7ff ff5b 	bl	8007fa8 <SPI_WaitFifoStateUntilTimeout>
 80080f2:	4603      	mov	r3, r0
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d007      	beq.n	8008108 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80080fc:	f043 0220 	orr.w	r2, r3, #32
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008104:	2303      	movs	r3, #3
 8008106:	e027      	b.n	8008158 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	9300      	str	r3, [sp, #0]
 800810c:	68bb      	ldr	r3, [r7, #8]
 800810e:	2200      	movs	r2, #0
 8008110:	2180      	movs	r1, #128	@ 0x80
 8008112:	68f8      	ldr	r0, [r7, #12]
 8008114:	f7ff fec0 	bl	8007e98 <SPI_WaitFlagStateUntilTimeout>
 8008118:	4603      	mov	r3, r0
 800811a:	2b00      	cmp	r3, #0
 800811c:	d007      	beq.n	800812e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008122:	f043 0220 	orr.w	r2, r3, #32
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800812a:	2303      	movs	r3, #3
 800812c:	e014      	b.n	8008158 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	9300      	str	r3, [sp, #0]
 8008132:	68bb      	ldr	r3, [r7, #8]
 8008134:	2200      	movs	r2, #0
 8008136:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800813a:	68f8      	ldr	r0, [r7, #12]
 800813c:	f7ff ff34 	bl	8007fa8 <SPI_WaitFifoStateUntilTimeout>
 8008140:	4603      	mov	r3, r0
 8008142:	2b00      	cmp	r3, #0
 8008144:	d007      	beq.n	8008156 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800814a:	f043 0220 	orr.w	r2, r3, #32
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008152:	2303      	movs	r3, #3
 8008154:	e000      	b.n	8008158 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8008156:	2300      	movs	r3, #0
}
 8008158:	4618      	mov	r0, r3
 800815a:	3710      	adds	r7, #16
 800815c:	46bd      	mov	sp, r7
 800815e:	bd80      	pop	{r7, pc}

08008160 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b082      	sub	sp, #8
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d101      	bne.n	8008172 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800816e:	2301      	movs	r3, #1
 8008170:	e049      	b.n	8008206 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008178:	b2db      	uxtb	r3, r3
 800817a:	2b00      	cmp	r3, #0
 800817c:	d106      	bne.n	800818c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2200      	movs	r2, #0
 8008182:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	f000 f841 	bl	800820e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2202      	movs	r2, #2
 8008190:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681a      	ldr	r2, [r3, #0]
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	3304      	adds	r3, #4
 800819c:	4619      	mov	r1, r3
 800819e:	4610      	mov	r0, r2
 80081a0:	f000 f9be 	bl	8008520 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2201      	movs	r2, #1
 80081a8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2201      	movs	r2, #1
 80081b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2201      	movs	r2, #1
 80081b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2201      	movs	r2, #1
 80081c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2201      	movs	r2, #1
 80081c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2201      	movs	r2, #1
 80081d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2201      	movs	r2, #1
 80081d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2201      	movs	r2, #1
 80081e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2201      	movs	r2, #1
 80081e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2201      	movs	r2, #1
 80081f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2201      	movs	r2, #1
 80081f8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2201      	movs	r2, #1
 8008200:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008204:	2300      	movs	r3, #0
}
 8008206:	4618      	mov	r0, r3
 8008208:	3708      	adds	r7, #8
 800820a:	46bd      	mov	sp, r7
 800820c:	bd80      	pop	{r7, pc}

0800820e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800820e:	b480      	push	{r7}
 8008210:	b083      	sub	sp, #12
 8008212:	af00      	add	r7, sp, #0
 8008214:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008216:	bf00      	nop
 8008218:	370c      	adds	r7, #12
 800821a:	46bd      	mov	sp, r7
 800821c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008220:	4770      	bx	lr
	...

08008224 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008224:	b480      	push	{r7}
 8008226:	b085      	sub	sp, #20
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008232:	b2db      	uxtb	r3, r3
 8008234:	2b01      	cmp	r3, #1
 8008236:	d001      	beq.n	800823c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008238:	2301      	movs	r3, #1
 800823a:	e036      	b.n	80082aa <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2202      	movs	r2, #2
 8008240:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	68da      	ldr	r2, [r3, #12]
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f042 0201 	orr.w	r2, r2, #1
 8008252:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	4a17      	ldr	r2, [pc, #92]	@ (80082b8 <HAL_TIM_Base_Start_IT+0x94>)
 800825a:	4293      	cmp	r3, r2
 800825c:	d004      	beq.n	8008268 <HAL_TIM_Base_Start_IT+0x44>
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008266:	d115      	bne.n	8008294 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	689a      	ldr	r2, [r3, #8]
 800826e:	4b13      	ldr	r3, [pc, #76]	@ (80082bc <HAL_TIM_Base_Start_IT+0x98>)
 8008270:	4013      	ands	r3, r2
 8008272:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	2b06      	cmp	r3, #6
 8008278:	d015      	beq.n	80082a6 <HAL_TIM_Base_Start_IT+0x82>
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008280:	d011      	beq.n	80082a6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	681a      	ldr	r2, [r3, #0]
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	f042 0201 	orr.w	r2, r2, #1
 8008290:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008292:	e008      	b.n	80082a6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	681a      	ldr	r2, [r3, #0]
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	f042 0201 	orr.w	r2, r2, #1
 80082a2:	601a      	str	r2, [r3, #0]
 80082a4:	e000      	b.n	80082a8 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082a6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80082a8:	2300      	movs	r3, #0
}
 80082aa:	4618      	mov	r0, r3
 80082ac:	3714      	adds	r7, #20
 80082ae:	46bd      	mov	sp, r7
 80082b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b4:	4770      	bx	lr
 80082b6:	bf00      	nop
 80082b8:	40012c00 	.word	0x40012c00
 80082bc:	00010007 	.word	0x00010007

080082c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b084      	sub	sp, #16
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	68db      	ldr	r3, [r3, #12]
 80082ce:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	691b      	ldr	r3, [r3, #16]
 80082d6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80082d8:	68bb      	ldr	r3, [r7, #8]
 80082da:	f003 0302 	and.w	r3, r3, #2
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d020      	beq.n	8008324 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	f003 0302 	and.w	r3, r3, #2
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d01b      	beq.n	8008324 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f06f 0202 	mvn.w	r2, #2
 80082f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2201      	movs	r2, #1
 80082fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	699b      	ldr	r3, [r3, #24]
 8008302:	f003 0303 	and.w	r3, r3, #3
 8008306:	2b00      	cmp	r3, #0
 8008308:	d003      	beq.n	8008312 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f000 f8e9 	bl	80084e2 <HAL_TIM_IC_CaptureCallback>
 8008310:	e005      	b.n	800831e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	f000 f8db 	bl	80084ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008318:	6878      	ldr	r0, [r7, #4]
 800831a:	f000 f8ec 	bl	80084f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2200      	movs	r2, #0
 8008322:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	f003 0304 	and.w	r3, r3, #4
 800832a:	2b00      	cmp	r3, #0
 800832c:	d020      	beq.n	8008370 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	f003 0304 	and.w	r3, r3, #4
 8008334:	2b00      	cmp	r3, #0
 8008336:	d01b      	beq.n	8008370 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f06f 0204 	mvn.w	r2, #4
 8008340:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2202      	movs	r2, #2
 8008346:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	699b      	ldr	r3, [r3, #24]
 800834e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008352:	2b00      	cmp	r3, #0
 8008354:	d003      	beq.n	800835e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f000 f8c3 	bl	80084e2 <HAL_TIM_IC_CaptureCallback>
 800835c:	e005      	b.n	800836a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f000 f8b5 	bl	80084ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f000 f8c6 	bl	80084f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2200      	movs	r2, #0
 800836e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008370:	68bb      	ldr	r3, [r7, #8]
 8008372:	f003 0308 	and.w	r3, r3, #8
 8008376:	2b00      	cmp	r3, #0
 8008378:	d020      	beq.n	80083bc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	f003 0308 	and.w	r3, r3, #8
 8008380:	2b00      	cmp	r3, #0
 8008382:	d01b      	beq.n	80083bc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f06f 0208 	mvn.w	r2, #8
 800838c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2204      	movs	r2, #4
 8008392:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	69db      	ldr	r3, [r3, #28]
 800839a:	f003 0303 	and.w	r3, r3, #3
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d003      	beq.n	80083aa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f000 f89d 	bl	80084e2 <HAL_TIM_IC_CaptureCallback>
 80083a8:	e005      	b.n	80083b6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80083aa:	6878      	ldr	r0, [r7, #4]
 80083ac:	f000 f88f 	bl	80084ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083b0:	6878      	ldr	r0, [r7, #4]
 80083b2:	f000 f8a0 	bl	80084f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2200      	movs	r2, #0
 80083ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	f003 0310 	and.w	r3, r3, #16
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d020      	beq.n	8008408 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	f003 0310 	and.w	r3, r3, #16
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d01b      	beq.n	8008408 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	f06f 0210 	mvn.w	r2, #16
 80083d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2208      	movs	r2, #8
 80083de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	69db      	ldr	r3, [r3, #28]
 80083e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d003      	beq.n	80083f6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	f000 f877 	bl	80084e2 <HAL_TIM_IC_CaptureCallback>
 80083f4:	e005      	b.n	8008402 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	f000 f869 	bl	80084ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083fc:	6878      	ldr	r0, [r7, #4]
 80083fe:	f000 f87a 	bl	80084f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	2200      	movs	r2, #0
 8008406:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008408:	68bb      	ldr	r3, [r7, #8]
 800840a:	f003 0301 	and.w	r3, r3, #1
 800840e:	2b00      	cmp	r3, #0
 8008410:	d00c      	beq.n	800842c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	f003 0301 	and.w	r3, r3, #1
 8008418:	2b00      	cmp	r3, #0
 800841a:	d007      	beq.n	800842c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f06f 0201 	mvn.w	r2, #1
 8008424:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008426:	6878      	ldr	r0, [r7, #4]
 8008428:	f7fc feae 	bl	8005188 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800842c:	68bb      	ldr	r3, [r7, #8]
 800842e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008432:	2b00      	cmp	r3, #0
 8008434:	d104      	bne.n	8008440 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800843c:	2b00      	cmp	r3, #0
 800843e:	d00c      	beq.n	800845a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008446:	2b00      	cmp	r3, #0
 8008448:	d007      	beq.n	800845a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8008452:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008454:	6878      	ldr	r0, [r7, #4]
 8008456:	f000 f8dd 	bl	8008614 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800845a:	68bb      	ldr	r3, [r7, #8]
 800845c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008460:	2b00      	cmp	r3, #0
 8008462:	d00c      	beq.n	800847e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800846a:	2b00      	cmp	r3, #0
 800846c:	d007      	beq.n	800847e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008476:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008478:	6878      	ldr	r0, [r7, #4]
 800847a:	f000 f8d5 	bl	8008628 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800847e:	68bb      	ldr	r3, [r7, #8]
 8008480:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008484:	2b00      	cmp	r3, #0
 8008486:	d00c      	beq.n	80084a2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800848e:	2b00      	cmp	r3, #0
 8008490:	d007      	beq.n	80084a2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800849a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	f000 f834 	bl	800850a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80084a2:	68bb      	ldr	r3, [r7, #8]
 80084a4:	f003 0320 	and.w	r3, r3, #32
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d00c      	beq.n	80084c6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	f003 0320 	and.w	r3, r3, #32
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d007      	beq.n	80084c6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f06f 0220 	mvn.w	r2, #32
 80084be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	f000 f89d 	bl	8008600 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80084c6:	bf00      	nop
 80084c8:	3710      	adds	r7, #16
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bd80      	pop	{r7, pc}

080084ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80084ce:	b480      	push	{r7}
 80084d0:	b083      	sub	sp, #12
 80084d2:	af00      	add	r7, sp, #0
 80084d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80084d6:	bf00      	nop
 80084d8:	370c      	adds	r7, #12
 80084da:	46bd      	mov	sp, r7
 80084dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e0:	4770      	bx	lr

080084e2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80084e2:	b480      	push	{r7}
 80084e4:	b083      	sub	sp, #12
 80084e6:	af00      	add	r7, sp, #0
 80084e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80084ea:	bf00      	nop
 80084ec:	370c      	adds	r7, #12
 80084ee:	46bd      	mov	sp, r7
 80084f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f4:	4770      	bx	lr

080084f6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80084f6:	b480      	push	{r7}
 80084f8:	b083      	sub	sp, #12
 80084fa:	af00      	add	r7, sp, #0
 80084fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80084fe:	bf00      	nop
 8008500:	370c      	adds	r7, #12
 8008502:	46bd      	mov	sp, r7
 8008504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008508:	4770      	bx	lr

0800850a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800850a:	b480      	push	{r7}
 800850c:	b083      	sub	sp, #12
 800850e:	af00      	add	r7, sp, #0
 8008510:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008512:	bf00      	nop
 8008514:	370c      	adds	r7, #12
 8008516:	46bd      	mov	sp, r7
 8008518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851c:	4770      	bx	lr
	...

08008520 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008520:	b480      	push	{r7}
 8008522:	b085      	sub	sp, #20
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
 8008528:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	4a30      	ldr	r2, [pc, #192]	@ (80085f4 <TIM_Base_SetConfig+0xd4>)
 8008534:	4293      	cmp	r3, r2
 8008536:	d003      	beq.n	8008540 <TIM_Base_SetConfig+0x20>
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800853e:	d108      	bne.n	8008552 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008546:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	685b      	ldr	r3, [r3, #4]
 800854c:	68fa      	ldr	r2, [r7, #12]
 800854e:	4313      	orrs	r3, r2
 8008550:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	4a27      	ldr	r2, [pc, #156]	@ (80085f4 <TIM_Base_SetConfig+0xd4>)
 8008556:	4293      	cmp	r3, r2
 8008558:	d00b      	beq.n	8008572 <TIM_Base_SetConfig+0x52>
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008560:	d007      	beq.n	8008572 <TIM_Base_SetConfig+0x52>
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	4a24      	ldr	r2, [pc, #144]	@ (80085f8 <TIM_Base_SetConfig+0xd8>)
 8008566:	4293      	cmp	r3, r2
 8008568:	d003      	beq.n	8008572 <TIM_Base_SetConfig+0x52>
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	4a23      	ldr	r2, [pc, #140]	@ (80085fc <TIM_Base_SetConfig+0xdc>)
 800856e:	4293      	cmp	r3, r2
 8008570:	d108      	bne.n	8008584 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008578:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	68db      	ldr	r3, [r3, #12]
 800857e:	68fa      	ldr	r2, [r7, #12]
 8008580:	4313      	orrs	r3, r2
 8008582:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	695b      	ldr	r3, [r3, #20]
 800858e:	4313      	orrs	r3, r2
 8008590:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	68fa      	ldr	r2, [r7, #12]
 8008596:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	689a      	ldr	r2, [r3, #8]
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	681a      	ldr	r2, [r3, #0]
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	4a12      	ldr	r2, [pc, #72]	@ (80085f4 <TIM_Base_SetConfig+0xd4>)
 80085ac:	4293      	cmp	r3, r2
 80085ae:	d007      	beq.n	80085c0 <TIM_Base_SetConfig+0xa0>
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	4a11      	ldr	r2, [pc, #68]	@ (80085f8 <TIM_Base_SetConfig+0xd8>)
 80085b4:	4293      	cmp	r3, r2
 80085b6:	d003      	beq.n	80085c0 <TIM_Base_SetConfig+0xa0>
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	4a10      	ldr	r2, [pc, #64]	@ (80085fc <TIM_Base_SetConfig+0xdc>)
 80085bc:	4293      	cmp	r3, r2
 80085be:	d103      	bne.n	80085c8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	691a      	ldr	r2, [r3, #16]
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2201      	movs	r2, #1
 80085cc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	691b      	ldr	r3, [r3, #16]
 80085d2:	f003 0301 	and.w	r3, r3, #1
 80085d6:	2b01      	cmp	r3, #1
 80085d8:	d105      	bne.n	80085e6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	691b      	ldr	r3, [r3, #16]
 80085de:	f023 0201 	bic.w	r2, r3, #1
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	611a      	str	r2, [r3, #16]
  }
}
 80085e6:	bf00      	nop
 80085e8:	3714      	adds	r7, #20
 80085ea:	46bd      	mov	sp, r7
 80085ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f0:	4770      	bx	lr
 80085f2:	bf00      	nop
 80085f4:	40012c00 	.word	0x40012c00
 80085f8:	40014400 	.word	0x40014400
 80085fc:	40014800 	.word	0x40014800

08008600 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008600:	b480      	push	{r7}
 8008602:	b083      	sub	sp, #12
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008608:	bf00      	nop
 800860a:	370c      	adds	r7, #12
 800860c:	46bd      	mov	sp, r7
 800860e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008612:	4770      	bx	lr

08008614 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008614:	b480      	push	{r7}
 8008616:	b083      	sub	sp, #12
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800861c:	bf00      	nop
 800861e:	370c      	adds	r7, #12
 8008620:	46bd      	mov	sp, r7
 8008622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008626:	4770      	bx	lr

08008628 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008628:	b480      	push	{r7}
 800862a:	b083      	sub	sp, #12
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008630:	bf00      	nop
 8008632:	370c      	adds	r7, #12
 8008634:	46bd      	mov	sp, r7
 8008636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863a:	4770      	bx	lr

0800863c <LL_RCC_GetUSARTClockSource>:
{
 800863c:	b480      	push	{r7}
 800863e:	b083      	sub	sp, #12
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8008644:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008648:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	4013      	ands	r3, r2
}
 8008650:	4618      	mov	r0, r3
 8008652:	370c      	adds	r7, #12
 8008654:	46bd      	mov	sp, r7
 8008656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865a:	4770      	bx	lr

0800865c <LL_RCC_GetLPUARTClockSource>:
{
 800865c:	b480      	push	{r7}
 800865e:	b083      	sub	sp, #12
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8008664:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008668:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	4013      	ands	r3, r2
}
 8008670:	4618      	mov	r0, r3
 8008672:	370c      	adds	r7, #12
 8008674:	46bd      	mov	sp, r7
 8008676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867a:	4770      	bx	lr

0800867c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b082      	sub	sp, #8
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d101      	bne.n	800868e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800868a:	2301      	movs	r3, #1
 800868c:	e042      	b.n	8008714 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008694:	2b00      	cmp	r3, #0
 8008696:	d106      	bne.n	80086a6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2200      	movs	r2, #0
 800869c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	f000 f83b 	bl	800871c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2224      	movs	r2, #36	@ 0x24
 80086aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	681a      	ldr	r2, [r3, #0]
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f022 0201 	bic.w	r2, r2, #1
 80086bc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d002      	beq.n	80086cc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80086c6:	6878      	ldr	r0, [r7, #4]
 80086c8:	f000 fae8 	bl	8008c9c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80086cc:	6878      	ldr	r0, [r7, #4]
 80086ce:	f000 f8bd 	bl	800884c <UART_SetConfig>
 80086d2:	4603      	mov	r3, r0
 80086d4:	2b01      	cmp	r3, #1
 80086d6:	d101      	bne.n	80086dc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80086d8:	2301      	movs	r3, #1
 80086da:	e01b      	b.n	8008714 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	685a      	ldr	r2, [r3, #4]
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80086ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	689a      	ldr	r2, [r3, #8]
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80086fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	681a      	ldr	r2, [r3, #0]
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	f042 0201 	orr.w	r2, r2, #1
 800870a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800870c:	6878      	ldr	r0, [r7, #4]
 800870e:	f000 fb67 	bl	8008de0 <UART_CheckIdleState>
 8008712:	4603      	mov	r3, r0
}
 8008714:	4618      	mov	r0, r3
 8008716:	3708      	adds	r7, #8
 8008718:	46bd      	mov	sp, r7
 800871a:	bd80      	pop	{r7, pc}

0800871c <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800871c:	b480      	push	{r7}
 800871e:	b083      	sub	sp, #12
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8008724:	bf00      	nop
 8008726:	370c      	adds	r7, #12
 8008728:	46bd      	mov	sp, r7
 800872a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872e:	4770      	bx	lr

08008730 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b08a      	sub	sp, #40	@ 0x28
 8008734:	af02      	add	r7, sp, #8
 8008736:	60f8      	str	r0, [r7, #12]
 8008738:	60b9      	str	r1, [r7, #8]
 800873a:	603b      	str	r3, [r7, #0]
 800873c:	4613      	mov	r3, r2
 800873e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008746:	2b20      	cmp	r3, #32
 8008748:	d17b      	bne.n	8008842 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800874a:	68bb      	ldr	r3, [r7, #8]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d002      	beq.n	8008756 <HAL_UART_Transmit+0x26>
 8008750:	88fb      	ldrh	r3, [r7, #6]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d101      	bne.n	800875a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008756:	2301      	movs	r3, #1
 8008758:	e074      	b.n	8008844 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	2200      	movs	r2, #0
 800875e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	2221      	movs	r2, #33	@ 0x21
 8008766:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800876a:	f7fd f89f 	bl	80058ac <HAL_GetTick>
 800876e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	88fa      	ldrh	r2, [r7, #6]
 8008774:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	88fa      	ldrh	r2, [r7, #6]
 800877c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	689b      	ldr	r3, [r3, #8]
 8008784:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008788:	d108      	bne.n	800879c <HAL_UART_Transmit+0x6c>
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	691b      	ldr	r3, [r3, #16]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d104      	bne.n	800879c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008792:	2300      	movs	r3, #0
 8008794:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008796:	68bb      	ldr	r3, [r7, #8]
 8008798:	61bb      	str	r3, [r7, #24]
 800879a:	e003      	b.n	80087a4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800879c:	68bb      	ldr	r3, [r7, #8]
 800879e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80087a0:	2300      	movs	r3, #0
 80087a2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80087a4:	e030      	b.n	8008808 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	9300      	str	r3, [sp, #0]
 80087aa:	697b      	ldr	r3, [r7, #20]
 80087ac:	2200      	movs	r2, #0
 80087ae:	2180      	movs	r1, #128	@ 0x80
 80087b0:	68f8      	ldr	r0, [r7, #12]
 80087b2:	f000 fbbf 	bl	8008f34 <UART_WaitOnFlagUntilTimeout>
 80087b6:	4603      	mov	r3, r0
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d005      	beq.n	80087c8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	2220      	movs	r2, #32
 80087c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80087c4:	2303      	movs	r3, #3
 80087c6:	e03d      	b.n	8008844 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80087c8:	69fb      	ldr	r3, [r7, #28]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d10b      	bne.n	80087e6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80087ce:	69bb      	ldr	r3, [r7, #24]
 80087d0:	881b      	ldrh	r3, [r3, #0]
 80087d2:	461a      	mov	r2, r3
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80087dc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80087de:	69bb      	ldr	r3, [r7, #24]
 80087e0:	3302      	adds	r3, #2
 80087e2:	61bb      	str	r3, [r7, #24]
 80087e4:	e007      	b.n	80087f6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80087e6:	69fb      	ldr	r3, [r7, #28]
 80087e8:	781a      	ldrb	r2, [r3, #0]
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80087f0:	69fb      	ldr	r3, [r7, #28]
 80087f2:	3301      	adds	r3, #1
 80087f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80087fc:	b29b      	uxth	r3, r3
 80087fe:	3b01      	subs	r3, #1
 8008800:	b29a      	uxth	r2, r3
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800880e:	b29b      	uxth	r3, r3
 8008810:	2b00      	cmp	r3, #0
 8008812:	d1c8      	bne.n	80087a6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	9300      	str	r3, [sp, #0]
 8008818:	697b      	ldr	r3, [r7, #20]
 800881a:	2200      	movs	r2, #0
 800881c:	2140      	movs	r1, #64	@ 0x40
 800881e:	68f8      	ldr	r0, [r7, #12]
 8008820:	f000 fb88 	bl	8008f34 <UART_WaitOnFlagUntilTimeout>
 8008824:	4603      	mov	r3, r0
 8008826:	2b00      	cmp	r3, #0
 8008828:	d005      	beq.n	8008836 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	2220      	movs	r2, #32
 800882e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8008832:	2303      	movs	r3, #3
 8008834:	e006      	b.n	8008844 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	2220      	movs	r2, #32
 800883a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800883e:	2300      	movs	r3, #0
 8008840:	e000      	b.n	8008844 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8008842:	2302      	movs	r3, #2
  }
}
 8008844:	4618      	mov	r0, r3
 8008846:	3720      	adds	r7, #32
 8008848:	46bd      	mov	sp, r7
 800884a:	bd80      	pop	{r7, pc}

0800884c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800884c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008850:	b08c      	sub	sp, #48	@ 0x30
 8008852:	af00      	add	r7, sp, #0
 8008854:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008856:	2300      	movs	r3, #0
 8008858:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800885c:	697b      	ldr	r3, [r7, #20]
 800885e:	689a      	ldr	r2, [r3, #8]
 8008860:	697b      	ldr	r3, [r7, #20]
 8008862:	691b      	ldr	r3, [r3, #16]
 8008864:	431a      	orrs	r2, r3
 8008866:	697b      	ldr	r3, [r7, #20]
 8008868:	695b      	ldr	r3, [r3, #20]
 800886a:	431a      	orrs	r2, r3
 800886c:	697b      	ldr	r3, [r7, #20]
 800886e:	69db      	ldr	r3, [r3, #28]
 8008870:	4313      	orrs	r3, r2
 8008872:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008874:	697b      	ldr	r3, [r7, #20]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	681a      	ldr	r2, [r3, #0]
 800887a:	4baf      	ldr	r3, [pc, #700]	@ (8008b38 <UART_SetConfig+0x2ec>)
 800887c:	4013      	ands	r3, r2
 800887e:	697a      	ldr	r2, [r7, #20]
 8008880:	6812      	ldr	r2, [r2, #0]
 8008882:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008884:	430b      	orrs	r3, r1
 8008886:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008888:	697b      	ldr	r3, [r7, #20]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	685b      	ldr	r3, [r3, #4]
 800888e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008892:	697b      	ldr	r3, [r7, #20]
 8008894:	68da      	ldr	r2, [r3, #12]
 8008896:	697b      	ldr	r3, [r7, #20]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	430a      	orrs	r2, r1
 800889c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800889e:	697b      	ldr	r3, [r7, #20]
 80088a0:	699b      	ldr	r3, [r3, #24]
 80088a2:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80088a4:	697b      	ldr	r3, [r7, #20]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	4aa4      	ldr	r2, [pc, #656]	@ (8008b3c <UART_SetConfig+0x2f0>)
 80088aa:	4293      	cmp	r3, r2
 80088ac:	d004      	beq.n	80088b8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80088ae:	697b      	ldr	r3, [r7, #20]
 80088b0:	6a1b      	ldr	r3, [r3, #32]
 80088b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80088b4:	4313      	orrs	r3, r2
 80088b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80088b8:	697b      	ldr	r3, [r7, #20]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	689b      	ldr	r3, [r3, #8]
 80088be:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80088c2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80088c6:	697a      	ldr	r2, [r7, #20]
 80088c8:	6812      	ldr	r2, [r2, #0]
 80088ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80088cc:	430b      	orrs	r3, r1
 80088ce:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80088d0:	697b      	ldr	r3, [r7, #20]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088d6:	f023 010f 	bic.w	r1, r3, #15
 80088da:	697b      	ldr	r3, [r7, #20]
 80088dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80088de:	697b      	ldr	r3, [r7, #20]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	430a      	orrs	r2, r1
 80088e4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80088e6:	697b      	ldr	r3, [r7, #20]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	4a95      	ldr	r2, [pc, #596]	@ (8008b40 <UART_SetConfig+0x2f4>)
 80088ec:	4293      	cmp	r3, r2
 80088ee:	d125      	bne.n	800893c <UART_SetConfig+0xf0>
 80088f0:	2003      	movs	r0, #3
 80088f2:	f7ff fea3 	bl	800863c <LL_RCC_GetUSARTClockSource>
 80088f6:	4603      	mov	r3, r0
 80088f8:	2b03      	cmp	r3, #3
 80088fa:	d81b      	bhi.n	8008934 <UART_SetConfig+0xe8>
 80088fc:	a201      	add	r2, pc, #4	@ (adr r2, 8008904 <UART_SetConfig+0xb8>)
 80088fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008902:	bf00      	nop
 8008904:	08008915 	.word	0x08008915
 8008908:	08008925 	.word	0x08008925
 800890c:	0800891d 	.word	0x0800891d
 8008910:	0800892d 	.word	0x0800892d
 8008914:	2301      	movs	r3, #1
 8008916:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800891a:	e042      	b.n	80089a2 <UART_SetConfig+0x156>
 800891c:	2302      	movs	r3, #2
 800891e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008922:	e03e      	b.n	80089a2 <UART_SetConfig+0x156>
 8008924:	2304      	movs	r3, #4
 8008926:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800892a:	e03a      	b.n	80089a2 <UART_SetConfig+0x156>
 800892c:	2308      	movs	r3, #8
 800892e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008932:	e036      	b.n	80089a2 <UART_SetConfig+0x156>
 8008934:	2310      	movs	r3, #16
 8008936:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800893a:	e032      	b.n	80089a2 <UART_SetConfig+0x156>
 800893c:	697b      	ldr	r3, [r7, #20]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	4a7e      	ldr	r2, [pc, #504]	@ (8008b3c <UART_SetConfig+0x2f0>)
 8008942:	4293      	cmp	r3, r2
 8008944:	d12a      	bne.n	800899c <UART_SetConfig+0x150>
 8008946:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 800894a:	f7ff fe87 	bl	800865c <LL_RCC_GetLPUARTClockSource>
 800894e:	4603      	mov	r3, r0
 8008950:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008954:	d01a      	beq.n	800898c <UART_SetConfig+0x140>
 8008956:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800895a:	d81b      	bhi.n	8008994 <UART_SetConfig+0x148>
 800895c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008960:	d00c      	beq.n	800897c <UART_SetConfig+0x130>
 8008962:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008966:	d815      	bhi.n	8008994 <UART_SetConfig+0x148>
 8008968:	2b00      	cmp	r3, #0
 800896a:	d003      	beq.n	8008974 <UART_SetConfig+0x128>
 800896c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008970:	d008      	beq.n	8008984 <UART_SetConfig+0x138>
 8008972:	e00f      	b.n	8008994 <UART_SetConfig+0x148>
 8008974:	2300      	movs	r3, #0
 8008976:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800897a:	e012      	b.n	80089a2 <UART_SetConfig+0x156>
 800897c:	2302      	movs	r3, #2
 800897e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008982:	e00e      	b.n	80089a2 <UART_SetConfig+0x156>
 8008984:	2304      	movs	r3, #4
 8008986:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800898a:	e00a      	b.n	80089a2 <UART_SetConfig+0x156>
 800898c:	2308      	movs	r3, #8
 800898e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008992:	e006      	b.n	80089a2 <UART_SetConfig+0x156>
 8008994:	2310      	movs	r3, #16
 8008996:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800899a:	e002      	b.n	80089a2 <UART_SetConfig+0x156>
 800899c:	2310      	movs	r3, #16
 800899e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80089a2:	697b      	ldr	r3, [r7, #20]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	4a65      	ldr	r2, [pc, #404]	@ (8008b3c <UART_SetConfig+0x2f0>)
 80089a8:	4293      	cmp	r3, r2
 80089aa:	f040 8097 	bne.w	8008adc <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80089ae:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80089b2:	2b08      	cmp	r3, #8
 80089b4:	d823      	bhi.n	80089fe <UART_SetConfig+0x1b2>
 80089b6:	a201      	add	r2, pc, #4	@ (adr r2, 80089bc <UART_SetConfig+0x170>)
 80089b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089bc:	080089e1 	.word	0x080089e1
 80089c0:	080089ff 	.word	0x080089ff
 80089c4:	080089e9 	.word	0x080089e9
 80089c8:	080089ff 	.word	0x080089ff
 80089cc:	080089ef 	.word	0x080089ef
 80089d0:	080089ff 	.word	0x080089ff
 80089d4:	080089ff 	.word	0x080089ff
 80089d8:	080089ff 	.word	0x080089ff
 80089dc:	080089f7 	.word	0x080089f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80089e0:	f7fe fb0c 	bl	8006ffc <HAL_RCC_GetPCLK1Freq>
 80089e4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80089e6:	e010      	b.n	8008a0a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80089e8:	4b56      	ldr	r3, [pc, #344]	@ (8008b44 <UART_SetConfig+0x2f8>)
 80089ea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80089ec:	e00d      	b.n	8008a0a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80089ee:	f7fe fa85 	bl	8006efc <HAL_RCC_GetSysClockFreq>
 80089f2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80089f4:	e009      	b.n	8008a0a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80089f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80089fa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80089fc:	e005      	b.n	8008a0a <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 80089fe:	2300      	movs	r3, #0
 8008a00:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008a02:	2301      	movs	r3, #1
 8008a04:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008a08:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	f000 812b 	beq.w	8008c68 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008a12:	697b      	ldr	r3, [r7, #20]
 8008a14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a16:	4a4c      	ldr	r2, [pc, #304]	@ (8008b48 <UART_SetConfig+0x2fc>)
 8008a18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a1c:	461a      	mov	r2, r3
 8008a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a20:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a24:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008a26:	697b      	ldr	r3, [r7, #20]
 8008a28:	685a      	ldr	r2, [r3, #4]
 8008a2a:	4613      	mov	r3, r2
 8008a2c:	005b      	lsls	r3, r3, #1
 8008a2e:	4413      	add	r3, r2
 8008a30:	69ba      	ldr	r2, [r7, #24]
 8008a32:	429a      	cmp	r2, r3
 8008a34:	d305      	bcc.n	8008a42 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008a36:	697b      	ldr	r3, [r7, #20]
 8008a38:	685b      	ldr	r3, [r3, #4]
 8008a3a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008a3c:	69ba      	ldr	r2, [r7, #24]
 8008a3e:	429a      	cmp	r2, r3
 8008a40:	d903      	bls.n	8008a4a <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8008a42:	2301      	movs	r3, #1
 8008a44:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008a48:	e10e      	b.n	8008c68 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	60bb      	str	r3, [r7, #8]
 8008a50:	60fa      	str	r2, [r7, #12]
 8008a52:	697b      	ldr	r3, [r7, #20]
 8008a54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a56:	4a3c      	ldr	r2, [pc, #240]	@ (8008b48 <UART_SetConfig+0x2fc>)
 8008a58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a5c:	b29b      	uxth	r3, r3
 8008a5e:	2200      	movs	r2, #0
 8008a60:	603b      	str	r3, [r7, #0]
 8008a62:	607a      	str	r2, [r7, #4]
 8008a64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a68:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008a6c:	f7f8 f874 	bl	8000b58 <__aeabi_uldivmod>
 8008a70:	4602      	mov	r2, r0
 8008a72:	460b      	mov	r3, r1
 8008a74:	4610      	mov	r0, r2
 8008a76:	4619      	mov	r1, r3
 8008a78:	f04f 0200 	mov.w	r2, #0
 8008a7c:	f04f 0300 	mov.w	r3, #0
 8008a80:	020b      	lsls	r3, r1, #8
 8008a82:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008a86:	0202      	lsls	r2, r0, #8
 8008a88:	6979      	ldr	r1, [r7, #20]
 8008a8a:	6849      	ldr	r1, [r1, #4]
 8008a8c:	0849      	lsrs	r1, r1, #1
 8008a8e:	2000      	movs	r0, #0
 8008a90:	460c      	mov	r4, r1
 8008a92:	4605      	mov	r5, r0
 8008a94:	eb12 0804 	adds.w	r8, r2, r4
 8008a98:	eb43 0905 	adc.w	r9, r3, r5
 8008a9c:	697b      	ldr	r3, [r7, #20]
 8008a9e:	685b      	ldr	r3, [r3, #4]
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	469a      	mov	sl, r3
 8008aa4:	4693      	mov	fp, r2
 8008aa6:	4652      	mov	r2, sl
 8008aa8:	465b      	mov	r3, fp
 8008aaa:	4640      	mov	r0, r8
 8008aac:	4649      	mov	r1, r9
 8008aae:	f7f8 f853 	bl	8000b58 <__aeabi_uldivmod>
 8008ab2:	4602      	mov	r2, r0
 8008ab4:	460b      	mov	r3, r1
 8008ab6:	4613      	mov	r3, r2
 8008ab8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008aba:	6a3b      	ldr	r3, [r7, #32]
 8008abc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008ac0:	d308      	bcc.n	8008ad4 <UART_SetConfig+0x288>
 8008ac2:	6a3b      	ldr	r3, [r7, #32]
 8008ac4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008ac8:	d204      	bcs.n	8008ad4 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8008aca:	697b      	ldr	r3, [r7, #20]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	6a3a      	ldr	r2, [r7, #32]
 8008ad0:	60da      	str	r2, [r3, #12]
 8008ad2:	e0c9      	b.n	8008c68 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008ada:	e0c5      	b.n	8008c68 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008adc:	697b      	ldr	r3, [r7, #20]
 8008ade:	69db      	ldr	r3, [r3, #28]
 8008ae0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008ae4:	d16d      	bne.n	8008bc2 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8008ae6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008aea:	3b01      	subs	r3, #1
 8008aec:	2b07      	cmp	r3, #7
 8008aee:	d82d      	bhi.n	8008b4c <UART_SetConfig+0x300>
 8008af0:	a201      	add	r2, pc, #4	@ (adr r2, 8008af8 <UART_SetConfig+0x2ac>)
 8008af2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008af6:	bf00      	nop
 8008af8:	08008b19 	.word	0x08008b19
 8008afc:	08008b21 	.word	0x08008b21
 8008b00:	08008b4d 	.word	0x08008b4d
 8008b04:	08008b27 	.word	0x08008b27
 8008b08:	08008b4d 	.word	0x08008b4d
 8008b0c:	08008b4d 	.word	0x08008b4d
 8008b10:	08008b4d 	.word	0x08008b4d
 8008b14:	08008b2f 	.word	0x08008b2f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008b18:	f7fe fa86 	bl	8007028 <HAL_RCC_GetPCLK2Freq>
 8008b1c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008b1e:	e01b      	b.n	8008b58 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008b20:	4b08      	ldr	r3, [pc, #32]	@ (8008b44 <UART_SetConfig+0x2f8>)
 8008b22:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008b24:	e018      	b.n	8008b58 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008b26:	f7fe f9e9 	bl	8006efc <HAL_RCC_GetSysClockFreq>
 8008b2a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008b2c:	e014      	b.n	8008b58 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008b32:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008b34:	e010      	b.n	8008b58 <UART_SetConfig+0x30c>
 8008b36:	bf00      	nop
 8008b38:	cfff69f3 	.word	0xcfff69f3
 8008b3c:	40008000 	.word	0x40008000
 8008b40:	40013800 	.word	0x40013800
 8008b44:	00f42400 	.word	0x00f42400
 8008b48:	080125c8 	.word	0x080125c8
      default:
        pclk = 0U;
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008b50:	2301      	movs	r3, #1
 8008b52:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008b56:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	f000 8084 	beq.w	8008c68 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b60:	697b      	ldr	r3, [r7, #20]
 8008b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b64:	4a4b      	ldr	r2, [pc, #300]	@ (8008c94 <UART_SetConfig+0x448>)
 8008b66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b6a:	461a      	mov	r2, r3
 8008b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b6e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008b72:	005a      	lsls	r2, r3, #1
 8008b74:	697b      	ldr	r3, [r7, #20]
 8008b76:	685b      	ldr	r3, [r3, #4]
 8008b78:	085b      	lsrs	r3, r3, #1
 8008b7a:	441a      	add	r2, r3
 8008b7c:	697b      	ldr	r3, [r7, #20]
 8008b7e:	685b      	ldr	r3, [r3, #4]
 8008b80:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b84:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008b86:	6a3b      	ldr	r3, [r7, #32]
 8008b88:	2b0f      	cmp	r3, #15
 8008b8a:	d916      	bls.n	8008bba <UART_SetConfig+0x36e>
 8008b8c:	6a3b      	ldr	r3, [r7, #32]
 8008b8e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008b92:	d212      	bcs.n	8008bba <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008b94:	6a3b      	ldr	r3, [r7, #32]
 8008b96:	b29b      	uxth	r3, r3
 8008b98:	f023 030f 	bic.w	r3, r3, #15
 8008b9c:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008b9e:	6a3b      	ldr	r3, [r7, #32]
 8008ba0:	085b      	lsrs	r3, r3, #1
 8008ba2:	b29b      	uxth	r3, r3
 8008ba4:	f003 0307 	and.w	r3, r3, #7
 8008ba8:	b29a      	uxth	r2, r3
 8008baa:	8bfb      	ldrh	r3, [r7, #30]
 8008bac:	4313      	orrs	r3, r2
 8008bae:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008bb0:	697b      	ldr	r3, [r7, #20]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	8bfa      	ldrh	r2, [r7, #30]
 8008bb6:	60da      	str	r2, [r3, #12]
 8008bb8:	e056      	b.n	8008c68 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8008bba:	2301      	movs	r3, #1
 8008bbc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008bc0:	e052      	b.n	8008c68 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008bc2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008bc6:	3b01      	subs	r3, #1
 8008bc8:	2b07      	cmp	r3, #7
 8008bca:	d822      	bhi.n	8008c12 <UART_SetConfig+0x3c6>
 8008bcc:	a201      	add	r2, pc, #4	@ (adr r2, 8008bd4 <UART_SetConfig+0x388>)
 8008bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bd2:	bf00      	nop
 8008bd4:	08008bf5 	.word	0x08008bf5
 8008bd8:	08008bfd 	.word	0x08008bfd
 8008bdc:	08008c13 	.word	0x08008c13
 8008be0:	08008c03 	.word	0x08008c03
 8008be4:	08008c13 	.word	0x08008c13
 8008be8:	08008c13 	.word	0x08008c13
 8008bec:	08008c13 	.word	0x08008c13
 8008bf0:	08008c0b 	.word	0x08008c0b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008bf4:	f7fe fa18 	bl	8007028 <HAL_RCC_GetPCLK2Freq>
 8008bf8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008bfa:	e010      	b.n	8008c1e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008bfc:	4b26      	ldr	r3, [pc, #152]	@ (8008c98 <UART_SetConfig+0x44c>)
 8008bfe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008c00:	e00d      	b.n	8008c1e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008c02:	f7fe f97b 	bl	8006efc <HAL_RCC_GetSysClockFreq>
 8008c06:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008c08:	e009      	b.n	8008c1e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008c0e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008c10:	e005      	b.n	8008c1e <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8008c12:	2300      	movs	r3, #0
 8008c14:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008c16:	2301      	movs	r3, #1
 8008c18:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008c1c:	bf00      	nop
    }

    if (pclk != 0U)
 8008c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d021      	beq.n	8008c68 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008c24:	697b      	ldr	r3, [r7, #20]
 8008c26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c28:	4a1a      	ldr	r2, [pc, #104]	@ (8008c94 <UART_SetConfig+0x448>)
 8008c2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c2e:	461a      	mov	r2, r3
 8008c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c32:	fbb3 f2f2 	udiv	r2, r3, r2
 8008c36:	697b      	ldr	r3, [r7, #20]
 8008c38:	685b      	ldr	r3, [r3, #4]
 8008c3a:	085b      	lsrs	r3, r3, #1
 8008c3c:	441a      	add	r2, r3
 8008c3e:	697b      	ldr	r3, [r7, #20]
 8008c40:	685b      	ldr	r3, [r3, #4]
 8008c42:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c46:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008c48:	6a3b      	ldr	r3, [r7, #32]
 8008c4a:	2b0f      	cmp	r3, #15
 8008c4c:	d909      	bls.n	8008c62 <UART_SetConfig+0x416>
 8008c4e:	6a3b      	ldr	r3, [r7, #32]
 8008c50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008c54:	d205      	bcs.n	8008c62 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008c56:	6a3b      	ldr	r3, [r7, #32]
 8008c58:	b29a      	uxth	r2, r3
 8008c5a:	697b      	ldr	r3, [r7, #20]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	60da      	str	r2, [r3, #12]
 8008c60:	e002      	b.n	8008c68 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8008c62:	2301      	movs	r3, #1
 8008c64:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008c68:	697b      	ldr	r3, [r7, #20]
 8008c6a:	2201      	movs	r2, #1
 8008c6c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008c70:	697b      	ldr	r3, [r7, #20]
 8008c72:	2201      	movs	r2, #1
 8008c74:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008c78:	697b      	ldr	r3, [r7, #20]
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008c7e:	697b      	ldr	r3, [r7, #20]
 8008c80:	2200      	movs	r2, #0
 8008c82:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008c84:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8008c88:	4618      	mov	r0, r3
 8008c8a:	3730      	adds	r7, #48	@ 0x30
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008c92:	bf00      	nop
 8008c94:	080125c8 	.word	0x080125c8
 8008c98:	00f42400 	.word	0x00f42400

08008c9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008c9c:	b480      	push	{r7}
 8008c9e:	b083      	sub	sp, #12
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ca8:	f003 0308 	and.w	r3, r3, #8
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d00a      	beq.n	8008cc6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	685b      	ldr	r3, [r3, #4]
 8008cb6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	430a      	orrs	r2, r1
 8008cc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cca:	f003 0301 	and.w	r3, r3, #1
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d00a      	beq.n	8008ce8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	685b      	ldr	r3, [r3, #4]
 8008cd8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	430a      	orrs	r2, r1
 8008ce6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cec:	f003 0302 	and.w	r3, r3, #2
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d00a      	beq.n	8008d0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	685b      	ldr	r3, [r3, #4]
 8008cfa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	430a      	orrs	r2, r1
 8008d08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d0e:	f003 0304 	and.w	r3, r3, #4
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d00a      	beq.n	8008d2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	685b      	ldr	r3, [r3, #4]
 8008d1c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	430a      	orrs	r2, r1
 8008d2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d30:	f003 0310 	and.w	r3, r3, #16
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d00a      	beq.n	8008d4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	689b      	ldr	r3, [r3, #8]
 8008d3e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	430a      	orrs	r2, r1
 8008d4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d52:	f003 0320 	and.w	r3, r3, #32
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d00a      	beq.n	8008d70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	689b      	ldr	r3, [r3, #8]
 8008d60:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	430a      	orrs	r2, r1
 8008d6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d01a      	beq.n	8008db2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	685b      	ldr	r3, [r3, #4]
 8008d82:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	430a      	orrs	r2, r1
 8008d90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d96:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008d9a:	d10a      	bne.n	8008db2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	685b      	ldr	r3, [r3, #4]
 8008da2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	430a      	orrs	r2, r1
 8008db0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008db6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d00a      	beq.n	8008dd4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	685b      	ldr	r3, [r3, #4]
 8008dc4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	430a      	orrs	r2, r1
 8008dd2:	605a      	str	r2, [r3, #4]
  }
}
 8008dd4:	bf00      	nop
 8008dd6:	370c      	adds	r7, #12
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dde:	4770      	bx	lr

08008de0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b098      	sub	sp, #96	@ 0x60
 8008de4:	af02      	add	r7, sp, #8
 8008de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2200      	movs	r2, #0
 8008dec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008df0:	f7fc fd5c 	bl	80058ac <HAL_GetTick>
 8008df4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	f003 0308 	and.w	r3, r3, #8
 8008e00:	2b08      	cmp	r3, #8
 8008e02:	d12f      	bne.n	8008e64 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008e04:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008e08:	9300      	str	r3, [sp, #0]
 8008e0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	f000 f88e 	bl	8008f34 <UART_WaitOnFlagUntilTimeout>
 8008e18:	4603      	mov	r3, r0
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d022      	beq.n	8008e64 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e26:	e853 3f00 	ldrex	r3, [r3]
 8008e2a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008e2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e2e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008e32:	653b      	str	r3, [r7, #80]	@ 0x50
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	461a      	mov	r2, r3
 8008e3a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008e3c:	647b      	str	r3, [r7, #68]	@ 0x44
 8008e3e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e40:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008e42:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008e44:	e841 2300 	strex	r3, r2, [r1]
 8008e48:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008e4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d1e6      	bne.n	8008e1e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2220      	movs	r2, #32
 8008e54:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008e60:	2303      	movs	r3, #3
 8008e62:	e063      	b.n	8008f2c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	f003 0304 	and.w	r3, r3, #4
 8008e6e:	2b04      	cmp	r3, #4
 8008e70:	d149      	bne.n	8008f06 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008e72:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008e76:	9300      	str	r3, [sp, #0]
 8008e78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008e80:	6878      	ldr	r0, [r7, #4]
 8008e82:	f000 f857 	bl	8008f34 <UART_WaitOnFlagUntilTimeout>
 8008e86:	4603      	mov	r3, r0
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d03c      	beq.n	8008f06 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e94:	e853 3f00 	ldrex	r3, [r3]
 8008e98:	623b      	str	r3, [r7, #32]
   return(result);
 8008e9a:	6a3b      	ldr	r3, [r7, #32]
 8008e9c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008ea0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	461a      	mov	r2, r3
 8008ea8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008eaa:	633b      	str	r3, [r7, #48]	@ 0x30
 8008eac:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008eb0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008eb2:	e841 2300 	strex	r3, r2, [r1]
 8008eb6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008eb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d1e6      	bne.n	8008e8c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	3308      	adds	r3, #8
 8008ec4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ec6:	693b      	ldr	r3, [r7, #16]
 8008ec8:	e853 3f00 	ldrex	r3, [r3]
 8008ecc:	60fb      	str	r3, [r7, #12]
   return(result);
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	f023 0301 	bic.w	r3, r3, #1
 8008ed4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	3308      	adds	r3, #8
 8008edc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008ede:	61fa      	str	r2, [r7, #28]
 8008ee0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ee2:	69b9      	ldr	r1, [r7, #24]
 8008ee4:	69fa      	ldr	r2, [r7, #28]
 8008ee6:	e841 2300 	strex	r3, r2, [r1]
 8008eea:	617b      	str	r3, [r7, #20]
   return(result);
 8008eec:	697b      	ldr	r3, [r7, #20]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d1e5      	bne.n	8008ebe <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	2220      	movs	r2, #32
 8008ef6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2200      	movs	r2, #0
 8008efe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008f02:	2303      	movs	r3, #3
 8008f04:	e012      	b.n	8008f2c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2220      	movs	r2, #32
 8008f0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2220      	movs	r2, #32
 8008f12:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	2200      	movs	r2, #0
 8008f1a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2200      	movs	r2, #0
 8008f20:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2200      	movs	r2, #0
 8008f26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008f2a:	2300      	movs	r3, #0
}
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	3758      	adds	r7, #88	@ 0x58
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bd80      	pop	{r7, pc}

08008f34 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b084      	sub	sp, #16
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	60f8      	str	r0, [r7, #12]
 8008f3c:	60b9      	str	r1, [r7, #8]
 8008f3e:	603b      	str	r3, [r7, #0]
 8008f40:	4613      	mov	r3, r2
 8008f42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f44:	e04f      	b.n	8008fe6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f46:	69bb      	ldr	r3, [r7, #24]
 8008f48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f4c:	d04b      	beq.n	8008fe6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f4e:	f7fc fcad 	bl	80058ac <HAL_GetTick>
 8008f52:	4602      	mov	r2, r0
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	1ad3      	subs	r3, r2, r3
 8008f58:	69ba      	ldr	r2, [r7, #24]
 8008f5a:	429a      	cmp	r2, r3
 8008f5c:	d302      	bcc.n	8008f64 <UART_WaitOnFlagUntilTimeout+0x30>
 8008f5e:	69bb      	ldr	r3, [r7, #24]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d101      	bne.n	8008f68 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008f64:	2303      	movs	r3, #3
 8008f66:	e04e      	b.n	8009006 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	f003 0304 	and.w	r3, r3, #4
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d037      	beq.n	8008fe6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008f76:	68bb      	ldr	r3, [r7, #8]
 8008f78:	2b80      	cmp	r3, #128	@ 0x80
 8008f7a:	d034      	beq.n	8008fe6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008f7c:	68bb      	ldr	r3, [r7, #8]
 8008f7e:	2b40      	cmp	r3, #64	@ 0x40
 8008f80:	d031      	beq.n	8008fe6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	69db      	ldr	r3, [r3, #28]
 8008f88:	f003 0308 	and.w	r3, r3, #8
 8008f8c:	2b08      	cmp	r3, #8
 8008f8e:	d110      	bne.n	8008fb2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	2208      	movs	r2, #8
 8008f96:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008f98:	68f8      	ldr	r0, [r7, #12]
 8008f9a:	f000 f838 	bl	800900e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	2208      	movs	r2, #8
 8008fa2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	2200      	movs	r2, #0
 8008faa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008fae:	2301      	movs	r3, #1
 8008fb0:	e029      	b.n	8009006 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	69db      	ldr	r3, [r3, #28]
 8008fb8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008fbc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008fc0:	d111      	bne.n	8008fe6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008fca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008fcc:	68f8      	ldr	r0, [r7, #12]
 8008fce:	f000 f81e 	bl	800900e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	2220      	movs	r2, #32
 8008fd6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	2200      	movs	r2, #0
 8008fde:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008fe2:	2303      	movs	r3, #3
 8008fe4:	e00f      	b.n	8009006 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	69da      	ldr	r2, [r3, #28]
 8008fec:	68bb      	ldr	r3, [r7, #8]
 8008fee:	4013      	ands	r3, r2
 8008ff0:	68ba      	ldr	r2, [r7, #8]
 8008ff2:	429a      	cmp	r2, r3
 8008ff4:	bf0c      	ite	eq
 8008ff6:	2301      	moveq	r3, #1
 8008ff8:	2300      	movne	r3, #0
 8008ffa:	b2db      	uxtb	r3, r3
 8008ffc:	461a      	mov	r2, r3
 8008ffe:	79fb      	ldrb	r3, [r7, #7]
 8009000:	429a      	cmp	r2, r3
 8009002:	d0a0      	beq.n	8008f46 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009004:	2300      	movs	r3, #0
}
 8009006:	4618      	mov	r0, r3
 8009008:	3710      	adds	r7, #16
 800900a:	46bd      	mov	sp, r7
 800900c:	bd80      	pop	{r7, pc}

0800900e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800900e:	b480      	push	{r7}
 8009010:	b095      	sub	sp, #84	@ 0x54
 8009012:	af00      	add	r7, sp, #0
 8009014:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800901c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800901e:	e853 3f00 	ldrex	r3, [r3]
 8009022:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009024:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009026:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800902a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	461a      	mov	r2, r3
 8009032:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009034:	643b      	str	r3, [r7, #64]	@ 0x40
 8009036:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009038:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800903a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800903c:	e841 2300 	strex	r3, r2, [r1]
 8009040:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009042:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009044:	2b00      	cmp	r3, #0
 8009046:	d1e6      	bne.n	8009016 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	3308      	adds	r3, #8
 800904e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009050:	6a3b      	ldr	r3, [r7, #32]
 8009052:	e853 3f00 	ldrex	r3, [r3]
 8009056:	61fb      	str	r3, [r7, #28]
   return(result);
 8009058:	69fb      	ldr	r3, [r7, #28]
 800905a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800905e:	f023 0301 	bic.w	r3, r3, #1
 8009062:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	3308      	adds	r3, #8
 800906a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800906c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800906e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009070:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009072:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009074:	e841 2300 	strex	r3, r2, [r1]
 8009078:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800907a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800907c:	2b00      	cmp	r3, #0
 800907e:	d1e3      	bne.n	8009048 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009084:	2b01      	cmp	r3, #1
 8009086:	d118      	bne.n	80090ba <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	e853 3f00 	ldrex	r3, [r3]
 8009094:	60bb      	str	r3, [r7, #8]
   return(result);
 8009096:	68bb      	ldr	r3, [r7, #8]
 8009098:	f023 0310 	bic.w	r3, r3, #16
 800909c:	647b      	str	r3, [r7, #68]	@ 0x44
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	461a      	mov	r2, r3
 80090a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80090a6:	61bb      	str	r3, [r7, #24]
 80090a8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090aa:	6979      	ldr	r1, [r7, #20]
 80090ac:	69ba      	ldr	r2, [r7, #24]
 80090ae:	e841 2300 	strex	r3, r2, [r1]
 80090b2:	613b      	str	r3, [r7, #16]
   return(result);
 80090b4:	693b      	ldr	r3, [r7, #16]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d1e6      	bne.n	8009088 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2220      	movs	r2, #32
 80090be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2200      	movs	r2, #0
 80090c6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2200      	movs	r2, #0
 80090cc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80090ce:	bf00      	nop
 80090d0:	3754      	adds	r7, #84	@ 0x54
 80090d2:	46bd      	mov	sp, r7
 80090d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d8:	4770      	bx	lr
	...

080090dc <__NVIC_SetPriority>:
{
 80090dc:	b480      	push	{r7}
 80090de:	b083      	sub	sp, #12
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	4603      	mov	r3, r0
 80090e4:	6039      	str	r1, [r7, #0]
 80090e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80090e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	db0a      	blt.n	8009106 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	b2da      	uxtb	r2, r3
 80090f4:	490c      	ldr	r1, [pc, #48]	@ (8009128 <__NVIC_SetPriority+0x4c>)
 80090f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80090fa:	0112      	lsls	r2, r2, #4
 80090fc:	b2d2      	uxtb	r2, r2
 80090fe:	440b      	add	r3, r1
 8009100:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8009104:	e00a      	b.n	800911c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	b2da      	uxtb	r2, r3
 800910a:	4908      	ldr	r1, [pc, #32]	@ (800912c <__NVIC_SetPriority+0x50>)
 800910c:	79fb      	ldrb	r3, [r7, #7]
 800910e:	f003 030f 	and.w	r3, r3, #15
 8009112:	3b04      	subs	r3, #4
 8009114:	0112      	lsls	r2, r2, #4
 8009116:	b2d2      	uxtb	r2, r2
 8009118:	440b      	add	r3, r1
 800911a:	761a      	strb	r2, [r3, #24]
}
 800911c:	bf00      	nop
 800911e:	370c      	adds	r7, #12
 8009120:	46bd      	mov	sp, r7
 8009122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009126:	4770      	bx	lr
 8009128:	e000e100 	.word	0xe000e100
 800912c:	e000ed00 	.word	0xe000ed00

08009130 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009130:	b580      	push	{r7, lr}
 8009132:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009134:	4b05      	ldr	r3, [pc, #20]	@ (800914c <SysTick_Handler+0x1c>)
 8009136:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009138:	f001 fefc 	bl	800af34 <xTaskGetSchedulerState>
 800913c:	4603      	mov	r3, r0
 800913e:	2b01      	cmp	r3, #1
 8009140:	d001      	beq.n	8009146 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009142:	f002 fcf1 	bl	800bb28 <xPortSysTickHandler>
  }
}
 8009146:	bf00      	nop
 8009148:	bd80      	pop	{r7, pc}
 800914a:	bf00      	nop
 800914c:	e000e010 	.word	0xe000e010

08009150 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009150:	b580      	push	{r7, lr}
 8009152:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009154:	2100      	movs	r1, #0
 8009156:	f06f 0004 	mvn.w	r0, #4
 800915a:	f7ff ffbf 	bl	80090dc <__NVIC_SetPriority>
#endif
}
 800915e:	bf00      	nop
 8009160:	bd80      	pop	{r7, pc}
	...

08009164 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009164:	b480      	push	{r7}
 8009166:	b083      	sub	sp, #12
 8009168:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800916a:	f3ef 8305 	mrs	r3, IPSR
 800916e:	603b      	str	r3, [r7, #0]
  return(result);
 8009170:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009172:	2b00      	cmp	r3, #0
 8009174:	d003      	beq.n	800917e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009176:	f06f 0305 	mvn.w	r3, #5
 800917a:	607b      	str	r3, [r7, #4]
 800917c:	e00c      	b.n	8009198 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800917e:	4b0a      	ldr	r3, [pc, #40]	@ (80091a8 <osKernelInitialize+0x44>)
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d105      	bne.n	8009192 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009186:	4b08      	ldr	r3, [pc, #32]	@ (80091a8 <osKernelInitialize+0x44>)
 8009188:	2201      	movs	r2, #1
 800918a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800918c:	2300      	movs	r3, #0
 800918e:	607b      	str	r3, [r7, #4]
 8009190:	e002      	b.n	8009198 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009192:	f04f 33ff 	mov.w	r3, #4294967295
 8009196:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009198:	687b      	ldr	r3, [r7, #4]
}
 800919a:	4618      	mov	r0, r3
 800919c:	370c      	adds	r7, #12
 800919e:	46bd      	mov	sp, r7
 80091a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a4:	4770      	bx	lr
 80091a6:	bf00      	nop
 80091a8:	2000038c 	.word	0x2000038c

080091ac <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b082      	sub	sp, #8
 80091b0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80091b2:	f3ef 8305 	mrs	r3, IPSR
 80091b6:	603b      	str	r3, [r7, #0]
  return(result);
 80091b8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d003      	beq.n	80091c6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80091be:	f06f 0305 	mvn.w	r3, #5
 80091c2:	607b      	str	r3, [r7, #4]
 80091c4:	e010      	b.n	80091e8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80091c6:	4b0b      	ldr	r3, [pc, #44]	@ (80091f4 <osKernelStart+0x48>)
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	2b01      	cmp	r3, #1
 80091cc:	d109      	bne.n	80091e2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80091ce:	f7ff ffbf 	bl	8009150 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80091d2:	4b08      	ldr	r3, [pc, #32]	@ (80091f4 <osKernelStart+0x48>)
 80091d4:	2202      	movs	r2, #2
 80091d6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80091d8:	f001 fa12 	bl	800a600 <vTaskStartScheduler>
      stat = osOK;
 80091dc:	2300      	movs	r3, #0
 80091de:	607b      	str	r3, [r7, #4]
 80091e0:	e002      	b.n	80091e8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80091e2:	f04f 33ff 	mov.w	r3, #4294967295
 80091e6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80091e8:	687b      	ldr	r3, [r7, #4]
}
 80091ea:	4618      	mov	r0, r3
 80091ec:	3708      	adds	r7, #8
 80091ee:	46bd      	mov	sp, r7
 80091f0:	bd80      	pop	{r7, pc}
 80091f2:	bf00      	nop
 80091f4:	2000038c 	.word	0x2000038c

080091f8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b08e      	sub	sp, #56	@ 0x38
 80091fc:	af04      	add	r7, sp, #16
 80091fe:	60f8      	str	r0, [r7, #12]
 8009200:	60b9      	str	r1, [r7, #8]
 8009202:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009204:	2300      	movs	r3, #0
 8009206:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009208:	f3ef 8305 	mrs	r3, IPSR
 800920c:	617b      	str	r3, [r7, #20]
  return(result);
 800920e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009210:	2b00      	cmp	r3, #0
 8009212:	d17e      	bne.n	8009312 <osThreadNew+0x11a>
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d07b      	beq.n	8009312 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800921a:	2380      	movs	r3, #128	@ 0x80
 800921c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800921e:	2318      	movs	r3, #24
 8009220:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009222:	2300      	movs	r3, #0
 8009224:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8009226:	f04f 33ff 	mov.w	r3, #4294967295
 800922a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d045      	beq.n	80092be <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d002      	beq.n	8009240 <osThreadNew+0x48>
        name = attr->name;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	699b      	ldr	r3, [r3, #24]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d002      	beq.n	800924e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	699b      	ldr	r3, [r3, #24]
 800924c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800924e:	69fb      	ldr	r3, [r7, #28]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d008      	beq.n	8009266 <osThreadNew+0x6e>
 8009254:	69fb      	ldr	r3, [r7, #28]
 8009256:	2b38      	cmp	r3, #56	@ 0x38
 8009258:	d805      	bhi.n	8009266 <osThreadNew+0x6e>
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	685b      	ldr	r3, [r3, #4]
 800925e:	f003 0301 	and.w	r3, r3, #1
 8009262:	2b00      	cmp	r3, #0
 8009264:	d001      	beq.n	800926a <osThreadNew+0x72>
        return (NULL);
 8009266:	2300      	movs	r3, #0
 8009268:	e054      	b.n	8009314 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	695b      	ldr	r3, [r3, #20]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d003      	beq.n	800927a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	695b      	ldr	r3, [r3, #20]
 8009276:	089b      	lsrs	r3, r3, #2
 8009278:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	689b      	ldr	r3, [r3, #8]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d00e      	beq.n	80092a0 <osThreadNew+0xa8>
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	68db      	ldr	r3, [r3, #12]
 8009286:	2ba7      	cmp	r3, #167	@ 0xa7
 8009288:	d90a      	bls.n	80092a0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800928e:	2b00      	cmp	r3, #0
 8009290:	d006      	beq.n	80092a0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	695b      	ldr	r3, [r3, #20]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d002      	beq.n	80092a0 <osThreadNew+0xa8>
        mem = 1;
 800929a:	2301      	movs	r3, #1
 800929c:	61bb      	str	r3, [r7, #24]
 800929e:	e010      	b.n	80092c2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	689b      	ldr	r3, [r3, #8]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d10c      	bne.n	80092c2 <osThreadNew+0xca>
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	68db      	ldr	r3, [r3, #12]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d108      	bne.n	80092c2 <osThreadNew+0xca>
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	691b      	ldr	r3, [r3, #16]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d104      	bne.n	80092c2 <osThreadNew+0xca>
          mem = 0;
 80092b8:	2300      	movs	r3, #0
 80092ba:	61bb      	str	r3, [r7, #24]
 80092bc:	e001      	b.n	80092c2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80092be:	2300      	movs	r3, #0
 80092c0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80092c2:	69bb      	ldr	r3, [r7, #24]
 80092c4:	2b01      	cmp	r3, #1
 80092c6:	d110      	bne.n	80092ea <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80092cc:	687a      	ldr	r2, [r7, #4]
 80092ce:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80092d0:	9202      	str	r2, [sp, #8]
 80092d2:	9301      	str	r3, [sp, #4]
 80092d4:	69fb      	ldr	r3, [r7, #28]
 80092d6:	9300      	str	r3, [sp, #0]
 80092d8:	68bb      	ldr	r3, [r7, #8]
 80092da:	6a3a      	ldr	r2, [r7, #32]
 80092dc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80092de:	68f8      	ldr	r0, [r7, #12]
 80092e0:	f000 ff9a 	bl	800a218 <xTaskCreateStatic>
 80092e4:	4603      	mov	r3, r0
 80092e6:	613b      	str	r3, [r7, #16]
 80092e8:	e013      	b.n	8009312 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80092ea:	69bb      	ldr	r3, [r7, #24]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d110      	bne.n	8009312 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80092f0:	6a3b      	ldr	r3, [r7, #32]
 80092f2:	b29a      	uxth	r2, r3
 80092f4:	f107 0310 	add.w	r3, r7, #16
 80092f8:	9301      	str	r3, [sp, #4]
 80092fa:	69fb      	ldr	r3, [r7, #28]
 80092fc:	9300      	str	r3, [sp, #0]
 80092fe:	68bb      	ldr	r3, [r7, #8]
 8009300:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009302:	68f8      	ldr	r0, [r7, #12]
 8009304:	f000 ffe8 	bl	800a2d8 <xTaskCreate>
 8009308:	4603      	mov	r3, r0
 800930a:	2b01      	cmp	r3, #1
 800930c:	d001      	beq.n	8009312 <osThreadNew+0x11a>
            hTask = NULL;
 800930e:	2300      	movs	r3, #0
 8009310:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009312:	693b      	ldr	r3, [r7, #16]
}
 8009314:	4618      	mov	r0, r3
 8009316:	3728      	adds	r7, #40	@ 0x28
 8009318:	46bd      	mov	sp, r7
 800931a:	bd80      	pop	{r7, pc}

0800931c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800931c:	b580      	push	{r7, lr}
 800931e:	b084      	sub	sp, #16
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009324:	f3ef 8305 	mrs	r3, IPSR
 8009328:	60bb      	str	r3, [r7, #8]
  return(result);
 800932a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800932c:	2b00      	cmp	r3, #0
 800932e:	d003      	beq.n	8009338 <osDelay+0x1c>
    stat = osErrorISR;
 8009330:	f06f 0305 	mvn.w	r3, #5
 8009334:	60fb      	str	r3, [r7, #12]
 8009336:	e007      	b.n	8009348 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009338:	2300      	movs	r3, #0
 800933a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d002      	beq.n	8009348 <osDelay+0x2c>
      vTaskDelay(ticks);
 8009342:	6878      	ldr	r0, [r7, #4]
 8009344:	f001 f926 	bl	800a594 <vTaskDelay>
    }
  }

  return (stat);
 8009348:	68fb      	ldr	r3, [r7, #12]
}
 800934a:	4618      	mov	r0, r3
 800934c:	3710      	adds	r7, #16
 800934e:	46bd      	mov	sp, r7
 8009350:	bd80      	pop	{r7, pc}

08009352 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8009352:	b580      	push	{r7, lr}
 8009354:	b08a      	sub	sp, #40	@ 0x28
 8009356:	af02      	add	r7, sp, #8
 8009358:	60f8      	str	r0, [r7, #12]
 800935a:	60b9      	str	r1, [r7, #8]
 800935c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800935e:	2300      	movs	r3, #0
 8009360:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009362:	f3ef 8305 	mrs	r3, IPSR
 8009366:	613b      	str	r3, [r7, #16]
  return(result);
 8009368:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800936a:	2b00      	cmp	r3, #0
 800936c:	d175      	bne.n	800945a <osSemaphoreNew+0x108>
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d072      	beq.n	800945a <osSemaphoreNew+0x108>
 8009374:	68ba      	ldr	r2, [r7, #8]
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	429a      	cmp	r2, r3
 800937a:	d86e      	bhi.n	800945a <osSemaphoreNew+0x108>
    mem = -1;
 800937c:	f04f 33ff 	mov.w	r3, #4294967295
 8009380:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d015      	beq.n	80093b4 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	689b      	ldr	r3, [r3, #8]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d006      	beq.n	800939e <osSemaphoreNew+0x4c>
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	68db      	ldr	r3, [r3, #12]
 8009394:	2b4f      	cmp	r3, #79	@ 0x4f
 8009396:	d902      	bls.n	800939e <osSemaphoreNew+0x4c>
        mem = 1;
 8009398:	2301      	movs	r3, #1
 800939a:	61bb      	str	r3, [r7, #24]
 800939c:	e00c      	b.n	80093b8 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	689b      	ldr	r3, [r3, #8]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d108      	bne.n	80093b8 <osSemaphoreNew+0x66>
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	68db      	ldr	r3, [r3, #12]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d104      	bne.n	80093b8 <osSemaphoreNew+0x66>
          mem = 0;
 80093ae:	2300      	movs	r3, #0
 80093b0:	61bb      	str	r3, [r7, #24]
 80093b2:	e001      	b.n	80093b8 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80093b4:	2300      	movs	r3, #0
 80093b6:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80093b8:	69bb      	ldr	r3, [r7, #24]
 80093ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093be:	d04c      	beq.n	800945a <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	2b01      	cmp	r3, #1
 80093c4:	d128      	bne.n	8009418 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80093c6:	69bb      	ldr	r3, [r7, #24]
 80093c8:	2b01      	cmp	r3, #1
 80093ca:	d10a      	bne.n	80093e2 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	689b      	ldr	r3, [r3, #8]
 80093d0:	2203      	movs	r2, #3
 80093d2:	9200      	str	r2, [sp, #0]
 80093d4:	2200      	movs	r2, #0
 80093d6:	2100      	movs	r1, #0
 80093d8:	2001      	movs	r0, #1
 80093da:	f000 f995 	bl	8009708 <xQueueGenericCreateStatic>
 80093de:	61f8      	str	r0, [r7, #28]
 80093e0:	e005      	b.n	80093ee <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80093e2:	2203      	movs	r2, #3
 80093e4:	2100      	movs	r1, #0
 80093e6:	2001      	movs	r0, #1
 80093e8:	f000 fa0b 	bl	8009802 <xQueueGenericCreate>
 80093ec:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80093ee:	69fb      	ldr	r3, [r7, #28]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d022      	beq.n	800943a <osSemaphoreNew+0xe8>
 80093f4:	68bb      	ldr	r3, [r7, #8]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d01f      	beq.n	800943a <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80093fa:	2300      	movs	r3, #0
 80093fc:	2200      	movs	r2, #0
 80093fe:	2100      	movs	r1, #0
 8009400:	69f8      	ldr	r0, [r7, #28]
 8009402:	f000 facb 	bl	800999c <xQueueGenericSend>
 8009406:	4603      	mov	r3, r0
 8009408:	2b01      	cmp	r3, #1
 800940a:	d016      	beq.n	800943a <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800940c:	69f8      	ldr	r0, [r7, #28]
 800940e:	f000 fd47 	bl	8009ea0 <vQueueDelete>
            hSemaphore = NULL;
 8009412:	2300      	movs	r3, #0
 8009414:	61fb      	str	r3, [r7, #28]
 8009416:	e010      	b.n	800943a <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8009418:	69bb      	ldr	r3, [r7, #24]
 800941a:	2b01      	cmp	r3, #1
 800941c:	d108      	bne.n	8009430 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	689b      	ldr	r3, [r3, #8]
 8009422:	461a      	mov	r2, r3
 8009424:	68b9      	ldr	r1, [r7, #8]
 8009426:	68f8      	ldr	r0, [r7, #12]
 8009428:	f000 fa49 	bl	80098be <xQueueCreateCountingSemaphoreStatic>
 800942c:	61f8      	str	r0, [r7, #28]
 800942e:	e004      	b.n	800943a <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8009430:	68b9      	ldr	r1, [r7, #8]
 8009432:	68f8      	ldr	r0, [r7, #12]
 8009434:	f000 fa7c 	bl	8009930 <xQueueCreateCountingSemaphore>
 8009438:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800943a:	69fb      	ldr	r3, [r7, #28]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d00c      	beq.n	800945a <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d003      	beq.n	800944e <osSemaphoreNew+0xfc>
          name = attr->name;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	617b      	str	r3, [r7, #20]
 800944c:	e001      	b.n	8009452 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800944e:	2300      	movs	r3, #0
 8009450:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8009452:	6979      	ldr	r1, [r7, #20]
 8009454:	69f8      	ldr	r0, [r7, #28]
 8009456:	f000 fe57 	bl	800a108 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800945a:	69fb      	ldr	r3, [r7, #28]
}
 800945c:	4618      	mov	r0, r3
 800945e:	3720      	adds	r7, #32
 8009460:	46bd      	mov	sp, r7
 8009462:	bd80      	pop	{r7, pc}

08009464 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009464:	b480      	push	{r7}
 8009466:	b085      	sub	sp, #20
 8009468:	af00      	add	r7, sp, #0
 800946a:	60f8      	str	r0, [r7, #12]
 800946c:	60b9      	str	r1, [r7, #8]
 800946e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	4a07      	ldr	r2, [pc, #28]	@ (8009490 <vApplicationGetIdleTaskMemory+0x2c>)
 8009474:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009476:	68bb      	ldr	r3, [r7, #8]
 8009478:	4a06      	ldr	r2, [pc, #24]	@ (8009494 <vApplicationGetIdleTaskMemory+0x30>)
 800947a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	2280      	movs	r2, #128	@ 0x80
 8009480:	601a      	str	r2, [r3, #0]
}
 8009482:	bf00      	nop
 8009484:	3714      	adds	r7, #20
 8009486:	46bd      	mov	sp, r7
 8009488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948c:	4770      	bx	lr
 800948e:	bf00      	nop
 8009490:	20000390 	.word	0x20000390
 8009494:	20000438 	.word	0x20000438

08009498 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009498:	b480      	push	{r7}
 800949a:	b085      	sub	sp, #20
 800949c:	af00      	add	r7, sp, #0
 800949e:	60f8      	str	r0, [r7, #12]
 80094a0:	60b9      	str	r1, [r7, #8]
 80094a2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	4a07      	ldr	r2, [pc, #28]	@ (80094c4 <vApplicationGetTimerTaskMemory+0x2c>)
 80094a8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80094aa:	68bb      	ldr	r3, [r7, #8]
 80094ac:	4a06      	ldr	r2, [pc, #24]	@ (80094c8 <vApplicationGetTimerTaskMemory+0x30>)
 80094ae:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80094b6:	601a      	str	r2, [r3, #0]
}
 80094b8:	bf00      	nop
 80094ba:	3714      	adds	r7, #20
 80094bc:	46bd      	mov	sp, r7
 80094be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c2:	4770      	bx	lr
 80094c4:	20000638 	.word	0x20000638
 80094c8:	200006e0 	.word	0x200006e0

080094cc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80094cc:	b480      	push	{r7}
 80094ce:	b083      	sub	sp, #12
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	f103 0208 	add.w	r2, r3, #8
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	f04f 32ff 	mov.w	r2, #4294967295
 80094e4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	f103 0208 	add.w	r2, r3, #8
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	f103 0208 	add.w	r2, r3, #8
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	2200      	movs	r2, #0
 80094fe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009500:	bf00      	nop
 8009502:	370c      	adds	r7, #12
 8009504:	46bd      	mov	sp, r7
 8009506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950a:	4770      	bx	lr

0800950c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800950c:	b480      	push	{r7}
 800950e:	b083      	sub	sp, #12
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	2200      	movs	r2, #0
 8009518:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800951a:	bf00      	nop
 800951c:	370c      	adds	r7, #12
 800951e:	46bd      	mov	sp, r7
 8009520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009524:	4770      	bx	lr

08009526 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009526:	b480      	push	{r7}
 8009528:	b085      	sub	sp, #20
 800952a:	af00      	add	r7, sp, #0
 800952c:	6078      	str	r0, [r7, #4]
 800952e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	685b      	ldr	r3, [r3, #4]
 8009534:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009536:	683b      	ldr	r3, [r7, #0]
 8009538:	68fa      	ldr	r2, [r7, #12]
 800953a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	689a      	ldr	r2, [r3, #8]
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	689b      	ldr	r3, [r3, #8]
 8009548:	683a      	ldr	r2, [r7, #0]
 800954a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	683a      	ldr	r2, [r7, #0]
 8009550:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009552:	683b      	ldr	r3, [r7, #0]
 8009554:	687a      	ldr	r2, [r7, #4]
 8009556:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	1c5a      	adds	r2, r3, #1
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	601a      	str	r2, [r3, #0]
}
 8009562:	bf00      	nop
 8009564:	3714      	adds	r7, #20
 8009566:	46bd      	mov	sp, r7
 8009568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956c:	4770      	bx	lr

0800956e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800956e:	b480      	push	{r7}
 8009570:	b085      	sub	sp, #20
 8009572:	af00      	add	r7, sp, #0
 8009574:	6078      	str	r0, [r7, #4]
 8009576:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800957e:	68bb      	ldr	r3, [r7, #8]
 8009580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009584:	d103      	bne.n	800958e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	691b      	ldr	r3, [r3, #16]
 800958a:	60fb      	str	r3, [r7, #12]
 800958c:	e00c      	b.n	80095a8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	3308      	adds	r3, #8
 8009592:	60fb      	str	r3, [r7, #12]
 8009594:	e002      	b.n	800959c <vListInsert+0x2e>
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	685b      	ldr	r3, [r3, #4]
 800959a:	60fb      	str	r3, [r7, #12]
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	685b      	ldr	r3, [r3, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	68ba      	ldr	r2, [r7, #8]
 80095a4:	429a      	cmp	r2, r3
 80095a6:	d2f6      	bcs.n	8009596 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	685a      	ldr	r2, [r3, #4]
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	685b      	ldr	r3, [r3, #4]
 80095b4:	683a      	ldr	r2, [r7, #0]
 80095b6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	68fa      	ldr	r2, [r7, #12]
 80095bc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	683a      	ldr	r2, [r7, #0]
 80095c2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80095c4:	683b      	ldr	r3, [r7, #0]
 80095c6:	687a      	ldr	r2, [r7, #4]
 80095c8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	1c5a      	adds	r2, r3, #1
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	601a      	str	r2, [r3, #0]
}
 80095d4:	bf00      	nop
 80095d6:	3714      	adds	r7, #20
 80095d8:	46bd      	mov	sp, r7
 80095da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095de:	4770      	bx	lr

080095e0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80095e0:	b480      	push	{r7}
 80095e2:	b085      	sub	sp, #20
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	691b      	ldr	r3, [r3, #16]
 80095ec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	685b      	ldr	r3, [r3, #4]
 80095f2:	687a      	ldr	r2, [r7, #4]
 80095f4:	6892      	ldr	r2, [r2, #8]
 80095f6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	689b      	ldr	r3, [r3, #8]
 80095fc:	687a      	ldr	r2, [r7, #4]
 80095fe:	6852      	ldr	r2, [r2, #4]
 8009600:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	685b      	ldr	r3, [r3, #4]
 8009606:	687a      	ldr	r2, [r7, #4]
 8009608:	429a      	cmp	r2, r3
 800960a:	d103      	bne.n	8009614 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	689a      	ldr	r2, [r3, #8]
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	2200      	movs	r2, #0
 8009618:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	1e5a      	subs	r2, r3, #1
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	681b      	ldr	r3, [r3, #0]
}
 8009628:	4618      	mov	r0, r3
 800962a:	3714      	adds	r7, #20
 800962c:	46bd      	mov	sp, r7
 800962e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009632:	4770      	bx	lr

08009634 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009634:	b580      	push	{r7, lr}
 8009636:	b084      	sub	sp, #16
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
 800963c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d10b      	bne.n	8009660 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009648:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800964c:	f383 8811 	msr	BASEPRI, r3
 8009650:	f3bf 8f6f 	isb	sy
 8009654:	f3bf 8f4f 	dsb	sy
 8009658:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800965a:	bf00      	nop
 800965c:	bf00      	nop
 800965e:	e7fd      	b.n	800965c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009660:	f002 f9d2 	bl	800ba08 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	681a      	ldr	r2, [r3, #0]
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800966c:	68f9      	ldr	r1, [r7, #12]
 800966e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009670:	fb01 f303 	mul.w	r3, r1, r3
 8009674:	441a      	add	r2, r3
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	2200      	movs	r2, #0
 800967e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	681a      	ldr	r2, [r3, #0]
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	681a      	ldr	r2, [r3, #0]
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009690:	3b01      	subs	r3, #1
 8009692:	68f9      	ldr	r1, [r7, #12]
 8009694:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009696:	fb01 f303 	mul.w	r3, r1, r3
 800969a:	441a      	add	r2, r3
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	22ff      	movs	r2, #255	@ 0xff
 80096a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	22ff      	movs	r2, #255	@ 0xff
 80096ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80096b0:	683b      	ldr	r3, [r7, #0]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d114      	bne.n	80096e0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	691b      	ldr	r3, [r3, #16]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d01a      	beq.n	80096f4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	3310      	adds	r3, #16
 80096c2:	4618      	mov	r0, r3
 80096c4:	f001 fa70 	bl	800aba8 <xTaskRemoveFromEventList>
 80096c8:	4603      	mov	r3, r0
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d012      	beq.n	80096f4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80096ce:	4b0d      	ldr	r3, [pc, #52]	@ (8009704 <xQueueGenericReset+0xd0>)
 80096d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80096d4:	601a      	str	r2, [r3, #0]
 80096d6:	f3bf 8f4f 	dsb	sy
 80096da:	f3bf 8f6f 	isb	sy
 80096de:	e009      	b.n	80096f4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	3310      	adds	r3, #16
 80096e4:	4618      	mov	r0, r3
 80096e6:	f7ff fef1 	bl	80094cc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	3324      	adds	r3, #36	@ 0x24
 80096ee:	4618      	mov	r0, r3
 80096f0:	f7ff feec 	bl	80094cc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80096f4:	f002 f9ba 	bl	800ba6c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80096f8:	2301      	movs	r3, #1
}
 80096fa:	4618      	mov	r0, r3
 80096fc:	3710      	adds	r7, #16
 80096fe:	46bd      	mov	sp, r7
 8009700:	bd80      	pop	{r7, pc}
 8009702:	bf00      	nop
 8009704:	e000ed04 	.word	0xe000ed04

08009708 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009708:	b580      	push	{r7, lr}
 800970a:	b08e      	sub	sp, #56	@ 0x38
 800970c:	af02      	add	r7, sp, #8
 800970e:	60f8      	str	r0, [r7, #12]
 8009710:	60b9      	str	r1, [r7, #8]
 8009712:	607a      	str	r2, [r7, #4]
 8009714:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	2b00      	cmp	r3, #0
 800971a:	d10b      	bne.n	8009734 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800971c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009720:	f383 8811 	msr	BASEPRI, r3
 8009724:	f3bf 8f6f 	isb	sy
 8009728:	f3bf 8f4f 	dsb	sy
 800972c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800972e:	bf00      	nop
 8009730:	bf00      	nop
 8009732:	e7fd      	b.n	8009730 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d10b      	bne.n	8009752 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800973a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800973e:	f383 8811 	msr	BASEPRI, r3
 8009742:	f3bf 8f6f 	isb	sy
 8009746:	f3bf 8f4f 	dsb	sy
 800974a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800974c:	bf00      	nop
 800974e:	bf00      	nop
 8009750:	e7fd      	b.n	800974e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d002      	beq.n	800975e <xQueueGenericCreateStatic+0x56>
 8009758:	68bb      	ldr	r3, [r7, #8]
 800975a:	2b00      	cmp	r3, #0
 800975c:	d001      	beq.n	8009762 <xQueueGenericCreateStatic+0x5a>
 800975e:	2301      	movs	r3, #1
 8009760:	e000      	b.n	8009764 <xQueueGenericCreateStatic+0x5c>
 8009762:	2300      	movs	r3, #0
 8009764:	2b00      	cmp	r3, #0
 8009766:	d10b      	bne.n	8009780 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8009768:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800976c:	f383 8811 	msr	BASEPRI, r3
 8009770:	f3bf 8f6f 	isb	sy
 8009774:	f3bf 8f4f 	dsb	sy
 8009778:	623b      	str	r3, [r7, #32]
}
 800977a:	bf00      	nop
 800977c:	bf00      	nop
 800977e:	e7fd      	b.n	800977c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d102      	bne.n	800978c <xQueueGenericCreateStatic+0x84>
 8009786:	68bb      	ldr	r3, [r7, #8]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d101      	bne.n	8009790 <xQueueGenericCreateStatic+0x88>
 800978c:	2301      	movs	r3, #1
 800978e:	e000      	b.n	8009792 <xQueueGenericCreateStatic+0x8a>
 8009790:	2300      	movs	r3, #0
 8009792:	2b00      	cmp	r3, #0
 8009794:	d10b      	bne.n	80097ae <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8009796:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800979a:	f383 8811 	msr	BASEPRI, r3
 800979e:	f3bf 8f6f 	isb	sy
 80097a2:	f3bf 8f4f 	dsb	sy
 80097a6:	61fb      	str	r3, [r7, #28]
}
 80097a8:	bf00      	nop
 80097aa:	bf00      	nop
 80097ac:	e7fd      	b.n	80097aa <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80097ae:	2350      	movs	r3, #80	@ 0x50
 80097b0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80097b2:	697b      	ldr	r3, [r7, #20]
 80097b4:	2b50      	cmp	r3, #80	@ 0x50
 80097b6:	d00b      	beq.n	80097d0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80097b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097bc:	f383 8811 	msr	BASEPRI, r3
 80097c0:	f3bf 8f6f 	isb	sy
 80097c4:	f3bf 8f4f 	dsb	sy
 80097c8:	61bb      	str	r3, [r7, #24]
}
 80097ca:	bf00      	nop
 80097cc:	bf00      	nop
 80097ce:	e7fd      	b.n	80097cc <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80097d0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80097d2:	683b      	ldr	r3, [r7, #0]
 80097d4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80097d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d00d      	beq.n	80097f8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80097dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097de:	2201      	movs	r2, #1
 80097e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80097e4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80097e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097ea:	9300      	str	r3, [sp, #0]
 80097ec:	4613      	mov	r3, r2
 80097ee:	687a      	ldr	r2, [r7, #4]
 80097f0:	68b9      	ldr	r1, [r7, #8]
 80097f2:	68f8      	ldr	r0, [r7, #12]
 80097f4:	f000 f840 	bl	8009878 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80097f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80097fa:	4618      	mov	r0, r3
 80097fc:	3730      	adds	r7, #48	@ 0x30
 80097fe:	46bd      	mov	sp, r7
 8009800:	bd80      	pop	{r7, pc}

08009802 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009802:	b580      	push	{r7, lr}
 8009804:	b08a      	sub	sp, #40	@ 0x28
 8009806:	af02      	add	r7, sp, #8
 8009808:	60f8      	str	r0, [r7, #12]
 800980a:	60b9      	str	r1, [r7, #8]
 800980c:	4613      	mov	r3, r2
 800980e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d10b      	bne.n	800982e <xQueueGenericCreate+0x2c>
	__asm volatile
 8009816:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800981a:	f383 8811 	msr	BASEPRI, r3
 800981e:	f3bf 8f6f 	isb	sy
 8009822:	f3bf 8f4f 	dsb	sy
 8009826:	613b      	str	r3, [r7, #16]
}
 8009828:	bf00      	nop
 800982a:	bf00      	nop
 800982c:	e7fd      	b.n	800982a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	68ba      	ldr	r2, [r7, #8]
 8009832:	fb02 f303 	mul.w	r3, r2, r3
 8009836:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009838:	69fb      	ldr	r3, [r7, #28]
 800983a:	3350      	adds	r3, #80	@ 0x50
 800983c:	4618      	mov	r0, r3
 800983e:	f002 fa05 	bl	800bc4c <pvPortMalloc>
 8009842:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009844:	69bb      	ldr	r3, [r7, #24]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d011      	beq.n	800986e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800984a:	69bb      	ldr	r3, [r7, #24]
 800984c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800984e:	697b      	ldr	r3, [r7, #20]
 8009850:	3350      	adds	r3, #80	@ 0x50
 8009852:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009854:	69bb      	ldr	r3, [r7, #24]
 8009856:	2200      	movs	r2, #0
 8009858:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800985c:	79fa      	ldrb	r2, [r7, #7]
 800985e:	69bb      	ldr	r3, [r7, #24]
 8009860:	9300      	str	r3, [sp, #0]
 8009862:	4613      	mov	r3, r2
 8009864:	697a      	ldr	r2, [r7, #20]
 8009866:	68b9      	ldr	r1, [r7, #8]
 8009868:	68f8      	ldr	r0, [r7, #12]
 800986a:	f000 f805 	bl	8009878 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800986e:	69bb      	ldr	r3, [r7, #24]
	}
 8009870:	4618      	mov	r0, r3
 8009872:	3720      	adds	r7, #32
 8009874:	46bd      	mov	sp, r7
 8009876:	bd80      	pop	{r7, pc}

08009878 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b084      	sub	sp, #16
 800987c:	af00      	add	r7, sp, #0
 800987e:	60f8      	str	r0, [r7, #12]
 8009880:	60b9      	str	r1, [r7, #8]
 8009882:	607a      	str	r2, [r7, #4]
 8009884:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009886:	68bb      	ldr	r3, [r7, #8]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d103      	bne.n	8009894 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800988c:	69bb      	ldr	r3, [r7, #24]
 800988e:	69ba      	ldr	r2, [r7, #24]
 8009890:	601a      	str	r2, [r3, #0]
 8009892:	e002      	b.n	800989a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009894:	69bb      	ldr	r3, [r7, #24]
 8009896:	687a      	ldr	r2, [r7, #4]
 8009898:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800989a:	69bb      	ldr	r3, [r7, #24]
 800989c:	68fa      	ldr	r2, [r7, #12]
 800989e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80098a0:	69bb      	ldr	r3, [r7, #24]
 80098a2:	68ba      	ldr	r2, [r7, #8]
 80098a4:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80098a6:	2101      	movs	r1, #1
 80098a8:	69b8      	ldr	r0, [r7, #24]
 80098aa:	f7ff fec3 	bl	8009634 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80098ae:	69bb      	ldr	r3, [r7, #24]
 80098b0:	78fa      	ldrb	r2, [r7, #3]
 80098b2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80098b6:	bf00      	nop
 80098b8:	3710      	adds	r7, #16
 80098ba:	46bd      	mov	sp, r7
 80098bc:	bd80      	pop	{r7, pc}

080098be <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80098be:	b580      	push	{r7, lr}
 80098c0:	b08a      	sub	sp, #40	@ 0x28
 80098c2:	af02      	add	r7, sp, #8
 80098c4:	60f8      	str	r0, [r7, #12]
 80098c6:	60b9      	str	r1, [r7, #8]
 80098c8:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d10b      	bne.n	80098e8 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 80098d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098d4:	f383 8811 	msr	BASEPRI, r3
 80098d8:	f3bf 8f6f 	isb	sy
 80098dc:	f3bf 8f4f 	dsb	sy
 80098e0:	61bb      	str	r3, [r7, #24]
}
 80098e2:	bf00      	nop
 80098e4:	bf00      	nop
 80098e6:	e7fd      	b.n	80098e4 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80098e8:	68ba      	ldr	r2, [r7, #8]
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	429a      	cmp	r2, r3
 80098ee:	d90b      	bls.n	8009908 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 80098f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098f4:	f383 8811 	msr	BASEPRI, r3
 80098f8:	f3bf 8f6f 	isb	sy
 80098fc:	f3bf 8f4f 	dsb	sy
 8009900:	617b      	str	r3, [r7, #20]
}
 8009902:	bf00      	nop
 8009904:	bf00      	nop
 8009906:	e7fd      	b.n	8009904 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009908:	2302      	movs	r3, #2
 800990a:	9300      	str	r3, [sp, #0]
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2200      	movs	r2, #0
 8009910:	2100      	movs	r1, #0
 8009912:	68f8      	ldr	r0, [r7, #12]
 8009914:	f7ff fef8 	bl	8009708 <xQueueGenericCreateStatic>
 8009918:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800991a:	69fb      	ldr	r3, [r7, #28]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d002      	beq.n	8009926 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009920:	69fb      	ldr	r3, [r7, #28]
 8009922:	68ba      	ldr	r2, [r7, #8]
 8009924:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009926:	69fb      	ldr	r3, [r7, #28]
	}
 8009928:	4618      	mov	r0, r3
 800992a:	3720      	adds	r7, #32
 800992c:	46bd      	mov	sp, r7
 800992e:	bd80      	pop	{r7, pc}

08009930 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8009930:	b580      	push	{r7, lr}
 8009932:	b086      	sub	sp, #24
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
 8009938:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d10b      	bne.n	8009958 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8009940:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009944:	f383 8811 	msr	BASEPRI, r3
 8009948:	f3bf 8f6f 	isb	sy
 800994c:	f3bf 8f4f 	dsb	sy
 8009950:	613b      	str	r3, [r7, #16]
}
 8009952:	bf00      	nop
 8009954:	bf00      	nop
 8009956:	e7fd      	b.n	8009954 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009958:	683a      	ldr	r2, [r7, #0]
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	429a      	cmp	r2, r3
 800995e:	d90b      	bls.n	8009978 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8009960:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009964:	f383 8811 	msr	BASEPRI, r3
 8009968:	f3bf 8f6f 	isb	sy
 800996c:	f3bf 8f4f 	dsb	sy
 8009970:	60fb      	str	r3, [r7, #12]
}
 8009972:	bf00      	nop
 8009974:	bf00      	nop
 8009976:	e7fd      	b.n	8009974 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009978:	2202      	movs	r2, #2
 800997a:	2100      	movs	r1, #0
 800997c:	6878      	ldr	r0, [r7, #4]
 800997e:	f7ff ff40 	bl	8009802 <xQueueGenericCreate>
 8009982:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8009984:	697b      	ldr	r3, [r7, #20]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d002      	beq.n	8009990 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800998a:	697b      	ldr	r3, [r7, #20]
 800998c:	683a      	ldr	r2, [r7, #0]
 800998e:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009990:	697b      	ldr	r3, [r7, #20]
	}
 8009992:	4618      	mov	r0, r3
 8009994:	3718      	adds	r7, #24
 8009996:	46bd      	mov	sp, r7
 8009998:	bd80      	pop	{r7, pc}
	...

0800999c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b08e      	sub	sp, #56	@ 0x38
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	60f8      	str	r0, [r7, #12]
 80099a4:	60b9      	str	r1, [r7, #8]
 80099a6:	607a      	str	r2, [r7, #4]
 80099a8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80099aa:	2300      	movs	r3, #0
 80099ac:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80099b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d10b      	bne.n	80099d0 <xQueueGenericSend+0x34>
	__asm volatile
 80099b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099bc:	f383 8811 	msr	BASEPRI, r3
 80099c0:	f3bf 8f6f 	isb	sy
 80099c4:	f3bf 8f4f 	dsb	sy
 80099c8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80099ca:	bf00      	nop
 80099cc:	bf00      	nop
 80099ce:	e7fd      	b.n	80099cc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80099d0:	68bb      	ldr	r3, [r7, #8]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d103      	bne.n	80099de <xQueueGenericSend+0x42>
 80099d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d101      	bne.n	80099e2 <xQueueGenericSend+0x46>
 80099de:	2301      	movs	r3, #1
 80099e0:	e000      	b.n	80099e4 <xQueueGenericSend+0x48>
 80099e2:	2300      	movs	r3, #0
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d10b      	bne.n	8009a00 <xQueueGenericSend+0x64>
	__asm volatile
 80099e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099ec:	f383 8811 	msr	BASEPRI, r3
 80099f0:	f3bf 8f6f 	isb	sy
 80099f4:	f3bf 8f4f 	dsb	sy
 80099f8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80099fa:	bf00      	nop
 80099fc:	bf00      	nop
 80099fe:	e7fd      	b.n	80099fc <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009a00:	683b      	ldr	r3, [r7, #0]
 8009a02:	2b02      	cmp	r3, #2
 8009a04:	d103      	bne.n	8009a0e <xQueueGenericSend+0x72>
 8009a06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a0a:	2b01      	cmp	r3, #1
 8009a0c:	d101      	bne.n	8009a12 <xQueueGenericSend+0x76>
 8009a0e:	2301      	movs	r3, #1
 8009a10:	e000      	b.n	8009a14 <xQueueGenericSend+0x78>
 8009a12:	2300      	movs	r3, #0
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d10b      	bne.n	8009a30 <xQueueGenericSend+0x94>
	__asm volatile
 8009a18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a1c:	f383 8811 	msr	BASEPRI, r3
 8009a20:	f3bf 8f6f 	isb	sy
 8009a24:	f3bf 8f4f 	dsb	sy
 8009a28:	623b      	str	r3, [r7, #32]
}
 8009a2a:	bf00      	nop
 8009a2c:	bf00      	nop
 8009a2e:	e7fd      	b.n	8009a2c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009a30:	f001 fa80 	bl	800af34 <xTaskGetSchedulerState>
 8009a34:	4603      	mov	r3, r0
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d102      	bne.n	8009a40 <xQueueGenericSend+0xa4>
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d101      	bne.n	8009a44 <xQueueGenericSend+0xa8>
 8009a40:	2301      	movs	r3, #1
 8009a42:	e000      	b.n	8009a46 <xQueueGenericSend+0xaa>
 8009a44:	2300      	movs	r3, #0
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d10b      	bne.n	8009a62 <xQueueGenericSend+0xc6>
	__asm volatile
 8009a4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a4e:	f383 8811 	msr	BASEPRI, r3
 8009a52:	f3bf 8f6f 	isb	sy
 8009a56:	f3bf 8f4f 	dsb	sy
 8009a5a:	61fb      	str	r3, [r7, #28]
}
 8009a5c:	bf00      	nop
 8009a5e:	bf00      	nop
 8009a60:	e7fd      	b.n	8009a5e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009a62:	f001 ffd1 	bl	800ba08 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009a66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a68:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009a6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a6e:	429a      	cmp	r2, r3
 8009a70:	d302      	bcc.n	8009a78 <xQueueGenericSend+0xdc>
 8009a72:	683b      	ldr	r3, [r7, #0]
 8009a74:	2b02      	cmp	r3, #2
 8009a76:	d129      	bne.n	8009acc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009a78:	683a      	ldr	r2, [r7, #0]
 8009a7a:	68b9      	ldr	r1, [r7, #8]
 8009a7c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009a7e:	f000 fa33 	bl	8009ee8 <prvCopyDataToQueue>
 8009a82:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009a84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d010      	beq.n	8009aae <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009a8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a8e:	3324      	adds	r3, #36	@ 0x24
 8009a90:	4618      	mov	r0, r3
 8009a92:	f001 f889 	bl	800aba8 <xTaskRemoveFromEventList>
 8009a96:	4603      	mov	r3, r0
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d013      	beq.n	8009ac4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009a9c:	4b3f      	ldr	r3, [pc, #252]	@ (8009b9c <xQueueGenericSend+0x200>)
 8009a9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009aa2:	601a      	str	r2, [r3, #0]
 8009aa4:	f3bf 8f4f 	dsb	sy
 8009aa8:	f3bf 8f6f 	isb	sy
 8009aac:	e00a      	b.n	8009ac4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009aae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d007      	beq.n	8009ac4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009ab4:	4b39      	ldr	r3, [pc, #228]	@ (8009b9c <xQueueGenericSend+0x200>)
 8009ab6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009aba:	601a      	str	r2, [r3, #0]
 8009abc:	f3bf 8f4f 	dsb	sy
 8009ac0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009ac4:	f001 ffd2 	bl	800ba6c <vPortExitCritical>
				return pdPASS;
 8009ac8:	2301      	movs	r3, #1
 8009aca:	e063      	b.n	8009b94 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d103      	bne.n	8009ada <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009ad2:	f001 ffcb 	bl	800ba6c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	e05c      	b.n	8009b94 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009ada:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d106      	bne.n	8009aee <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009ae0:	f107 0314 	add.w	r3, r7, #20
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	f001 f8c3 	bl	800ac70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009aea:	2301      	movs	r3, #1
 8009aec:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009aee:	f001 ffbd 	bl	800ba6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009af2:	f000 fdf5 	bl	800a6e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009af6:	f001 ff87 	bl	800ba08 <vPortEnterCritical>
 8009afa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009afc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009b00:	b25b      	sxtb	r3, r3
 8009b02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b06:	d103      	bne.n	8009b10 <xQueueGenericSend+0x174>
 8009b08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009b10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b12:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009b16:	b25b      	sxtb	r3, r3
 8009b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b1c:	d103      	bne.n	8009b26 <xQueueGenericSend+0x18a>
 8009b1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b20:	2200      	movs	r2, #0
 8009b22:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009b26:	f001 ffa1 	bl	800ba6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009b2a:	1d3a      	adds	r2, r7, #4
 8009b2c:	f107 0314 	add.w	r3, r7, #20
 8009b30:	4611      	mov	r1, r2
 8009b32:	4618      	mov	r0, r3
 8009b34:	f001 f8b2 	bl	800ac9c <xTaskCheckForTimeOut>
 8009b38:	4603      	mov	r3, r0
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d124      	bne.n	8009b88 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009b3e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009b40:	f000 faca 	bl	800a0d8 <prvIsQueueFull>
 8009b44:	4603      	mov	r3, r0
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d018      	beq.n	8009b7c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009b4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b4c:	3310      	adds	r3, #16
 8009b4e:	687a      	ldr	r2, [r7, #4]
 8009b50:	4611      	mov	r1, r2
 8009b52:	4618      	mov	r0, r3
 8009b54:	f000 ffd6 	bl	800ab04 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009b58:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009b5a:	f000 fa55 	bl	800a008 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009b5e:	f000 fdcd 	bl	800a6fc <xTaskResumeAll>
 8009b62:	4603      	mov	r3, r0
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	f47f af7c 	bne.w	8009a62 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8009b6a:	4b0c      	ldr	r3, [pc, #48]	@ (8009b9c <xQueueGenericSend+0x200>)
 8009b6c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009b70:	601a      	str	r2, [r3, #0]
 8009b72:	f3bf 8f4f 	dsb	sy
 8009b76:	f3bf 8f6f 	isb	sy
 8009b7a:	e772      	b.n	8009a62 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009b7c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009b7e:	f000 fa43 	bl	800a008 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009b82:	f000 fdbb 	bl	800a6fc <xTaskResumeAll>
 8009b86:	e76c      	b.n	8009a62 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009b88:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009b8a:	f000 fa3d 	bl	800a008 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009b8e:	f000 fdb5 	bl	800a6fc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009b92:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009b94:	4618      	mov	r0, r3
 8009b96:	3738      	adds	r7, #56	@ 0x38
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	bd80      	pop	{r7, pc}
 8009b9c:	e000ed04 	.word	0xe000ed04

08009ba0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b090      	sub	sp, #64	@ 0x40
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	60f8      	str	r0, [r7, #12]
 8009ba8:	60b9      	str	r1, [r7, #8]
 8009baa:	607a      	str	r2, [r7, #4]
 8009bac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8009bb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d10b      	bne.n	8009bd0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8009bb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bbc:	f383 8811 	msr	BASEPRI, r3
 8009bc0:	f3bf 8f6f 	isb	sy
 8009bc4:	f3bf 8f4f 	dsb	sy
 8009bc8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009bca:	bf00      	nop
 8009bcc:	bf00      	nop
 8009bce:	e7fd      	b.n	8009bcc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009bd0:	68bb      	ldr	r3, [r7, #8]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d103      	bne.n	8009bde <xQueueGenericSendFromISR+0x3e>
 8009bd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d101      	bne.n	8009be2 <xQueueGenericSendFromISR+0x42>
 8009bde:	2301      	movs	r3, #1
 8009be0:	e000      	b.n	8009be4 <xQueueGenericSendFromISR+0x44>
 8009be2:	2300      	movs	r3, #0
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d10b      	bne.n	8009c00 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8009be8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bec:	f383 8811 	msr	BASEPRI, r3
 8009bf0:	f3bf 8f6f 	isb	sy
 8009bf4:	f3bf 8f4f 	dsb	sy
 8009bf8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009bfa:	bf00      	nop
 8009bfc:	bf00      	nop
 8009bfe:	e7fd      	b.n	8009bfc <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	2b02      	cmp	r3, #2
 8009c04:	d103      	bne.n	8009c0e <xQueueGenericSendFromISR+0x6e>
 8009c06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009c0a:	2b01      	cmp	r3, #1
 8009c0c:	d101      	bne.n	8009c12 <xQueueGenericSendFromISR+0x72>
 8009c0e:	2301      	movs	r3, #1
 8009c10:	e000      	b.n	8009c14 <xQueueGenericSendFromISR+0x74>
 8009c12:	2300      	movs	r3, #0
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d10b      	bne.n	8009c30 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8009c18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c1c:	f383 8811 	msr	BASEPRI, r3
 8009c20:	f3bf 8f6f 	isb	sy
 8009c24:	f3bf 8f4f 	dsb	sy
 8009c28:	623b      	str	r3, [r7, #32]
}
 8009c2a:	bf00      	nop
 8009c2c:	bf00      	nop
 8009c2e:	e7fd      	b.n	8009c2c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009c30:	f001 ffca 	bl	800bbc8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009c34:	f3ef 8211 	mrs	r2, BASEPRI
 8009c38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c3c:	f383 8811 	msr	BASEPRI, r3
 8009c40:	f3bf 8f6f 	isb	sy
 8009c44:	f3bf 8f4f 	dsb	sy
 8009c48:	61fa      	str	r2, [r7, #28]
 8009c4a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009c4c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009c4e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009c50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c52:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009c54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009c58:	429a      	cmp	r2, r3
 8009c5a:	d302      	bcc.n	8009c62 <xQueueGenericSendFromISR+0xc2>
 8009c5c:	683b      	ldr	r3, [r7, #0]
 8009c5e:	2b02      	cmp	r3, #2
 8009c60:	d12f      	bne.n	8009cc2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009c62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c64:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009c68:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009c6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c70:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009c72:	683a      	ldr	r2, [r7, #0]
 8009c74:	68b9      	ldr	r1, [r7, #8]
 8009c76:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009c78:	f000 f936 	bl	8009ee8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009c7c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8009c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c84:	d112      	bne.n	8009cac <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009c86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d016      	beq.n	8009cbc <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009c8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c90:	3324      	adds	r3, #36	@ 0x24
 8009c92:	4618      	mov	r0, r3
 8009c94:	f000 ff88 	bl	800aba8 <xTaskRemoveFromEventList>
 8009c98:	4603      	mov	r3, r0
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d00e      	beq.n	8009cbc <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d00b      	beq.n	8009cbc <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	2201      	movs	r2, #1
 8009ca8:	601a      	str	r2, [r3, #0]
 8009caa:	e007      	b.n	8009cbc <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009cac:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009cb0:	3301      	adds	r3, #1
 8009cb2:	b2db      	uxtb	r3, r3
 8009cb4:	b25a      	sxtb	r2, r3
 8009cb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cb8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8009cbc:	2301      	movs	r3, #1
 8009cbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8009cc0:	e001      	b.n	8009cc6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009cc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009cc8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009cca:	697b      	ldr	r3, [r7, #20]
 8009ccc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009cd0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009cd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	3740      	adds	r7, #64	@ 0x40
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	bd80      	pop	{r7, pc}

08009cdc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	b08c      	sub	sp, #48	@ 0x30
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	60f8      	str	r0, [r7, #12]
 8009ce4:	60b9      	str	r1, [r7, #8]
 8009ce6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009ce8:	2300      	movs	r3, #0
 8009cea:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009cf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d10b      	bne.n	8009d0e <xQueueReceive+0x32>
	__asm volatile
 8009cf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cfa:	f383 8811 	msr	BASEPRI, r3
 8009cfe:	f3bf 8f6f 	isb	sy
 8009d02:	f3bf 8f4f 	dsb	sy
 8009d06:	623b      	str	r3, [r7, #32]
}
 8009d08:	bf00      	nop
 8009d0a:	bf00      	nop
 8009d0c:	e7fd      	b.n	8009d0a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009d0e:	68bb      	ldr	r3, [r7, #8]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d103      	bne.n	8009d1c <xQueueReceive+0x40>
 8009d14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d101      	bne.n	8009d20 <xQueueReceive+0x44>
 8009d1c:	2301      	movs	r3, #1
 8009d1e:	e000      	b.n	8009d22 <xQueueReceive+0x46>
 8009d20:	2300      	movs	r3, #0
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d10b      	bne.n	8009d3e <xQueueReceive+0x62>
	__asm volatile
 8009d26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d2a:	f383 8811 	msr	BASEPRI, r3
 8009d2e:	f3bf 8f6f 	isb	sy
 8009d32:	f3bf 8f4f 	dsb	sy
 8009d36:	61fb      	str	r3, [r7, #28]
}
 8009d38:	bf00      	nop
 8009d3a:	bf00      	nop
 8009d3c:	e7fd      	b.n	8009d3a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009d3e:	f001 f8f9 	bl	800af34 <xTaskGetSchedulerState>
 8009d42:	4603      	mov	r3, r0
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d102      	bne.n	8009d4e <xQueueReceive+0x72>
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d101      	bne.n	8009d52 <xQueueReceive+0x76>
 8009d4e:	2301      	movs	r3, #1
 8009d50:	e000      	b.n	8009d54 <xQueueReceive+0x78>
 8009d52:	2300      	movs	r3, #0
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d10b      	bne.n	8009d70 <xQueueReceive+0x94>
	__asm volatile
 8009d58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d5c:	f383 8811 	msr	BASEPRI, r3
 8009d60:	f3bf 8f6f 	isb	sy
 8009d64:	f3bf 8f4f 	dsb	sy
 8009d68:	61bb      	str	r3, [r7, #24]
}
 8009d6a:	bf00      	nop
 8009d6c:	bf00      	nop
 8009d6e:	e7fd      	b.n	8009d6c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009d70:	f001 fe4a 	bl	800ba08 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009d74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d78:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d01f      	beq.n	8009dc0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009d80:	68b9      	ldr	r1, [r7, #8]
 8009d82:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009d84:	f000 f91a 	bl	8009fbc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d8a:	1e5a      	subs	r2, r3, #1
 8009d8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d8e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009d90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d92:	691b      	ldr	r3, [r3, #16]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d00f      	beq.n	8009db8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009d98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d9a:	3310      	adds	r3, #16
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	f000 ff03 	bl	800aba8 <xTaskRemoveFromEventList>
 8009da2:	4603      	mov	r3, r0
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d007      	beq.n	8009db8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009da8:	4b3c      	ldr	r3, [pc, #240]	@ (8009e9c <xQueueReceive+0x1c0>)
 8009daa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009dae:	601a      	str	r2, [r3, #0]
 8009db0:	f3bf 8f4f 	dsb	sy
 8009db4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009db8:	f001 fe58 	bl	800ba6c <vPortExitCritical>
				return pdPASS;
 8009dbc:	2301      	movs	r3, #1
 8009dbe:	e069      	b.n	8009e94 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d103      	bne.n	8009dce <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009dc6:	f001 fe51 	bl	800ba6c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009dca:	2300      	movs	r3, #0
 8009dcc:	e062      	b.n	8009e94 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009dce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d106      	bne.n	8009de2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009dd4:	f107 0310 	add.w	r3, r7, #16
 8009dd8:	4618      	mov	r0, r3
 8009dda:	f000 ff49 	bl	800ac70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009dde:	2301      	movs	r3, #1
 8009de0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009de2:	f001 fe43 	bl	800ba6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009de6:	f000 fc7b 	bl	800a6e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009dea:	f001 fe0d 	bl	800ba08 <vPortEnterCritical>
 8009dee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009df0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009df4:	b25b      	sxtb	r3, r3
 8009df6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dfa:	d103      	bne.n	8009e04 <xQueueReceive+0x128>
 8009dfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dfe:	2200      	movs	r2, #0
 8009e00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009e04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e06:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009e0a:	b25b      	sxtb	r3, r3
 8009e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e10:	d103      	bne.n	8009e1a <xQueueReceive+0x13e>
 8009e12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e14:	2200      	movs	r2, #0
 8009e16:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009e1a:	f001 fe27 	bl	800ba6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009e1e:	1d3a      	adds	r2, r7, #4
 8009e20:	f107 0310 	add.w	r3, r7, #16
 8009e24:	4611      	mov	r1, r2
 8009e26:	4618      	mov	r0, r3
 8009e28:	f000 ff38 	bl	800ac9c <xTaskCheckForTimeOut>
 8009e2c:	4603      	mov	r3, r0
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d123      	bne.n	8009e7a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009e32:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009e34:	f000 f93a 	bl	800a0ac <prvIsQueueEmpty>
 8009e38:	4603      	mov	r3, r0
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d017      	beq.n	8009e6e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009e3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e40:	3324      	adds	r3, #36	@ 0x24
 8009e42:	687a      	ldr	r2, [r7, #4]
 8009e44:	4611      	mov	r1, r2
 8009e46:	4618      	mov	r0, r3
 8009e48:	f000 fe5c 	bl	800ab04 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009e4c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009e4e:	f000 f8db 	bl	800a008 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009e52:	f000 fc53 	bl	800a6fc <xTaskResumeAll>
 8009e56:	4603      	mov	r3, r0
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d189      	bne.n	8009d70 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8009e5c:	4b0f      	ldr	r3, [pc, #60]	@ (8009e9c <xQueueReceive+0x1c0>)
 8009e5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009e62:	601a      	str	r2, [r3, #0]
 8009e64:	f3bf 8f4f 	dsb	sy
 8009e68:	f3bf 8f6f 	isb	sy
 8009e6c:	e780      	b.n	8009d70 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009e6e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009e70:	f000 f8ca 	bl	800a008 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009e74:	f000 fc42 	bl	800a6fc <xTaskResumeAll>
 8009e78:	e77a      	b.n	8009d70 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009e7a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009e7c:	f000 f8c4 	bl	800a008 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009e80:	f000 fc3c 	bl	800a6fc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009e84:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009e86:	f000 f911 	bl	800a0ac <prvIsQueueEmpty>
 8009e8a:	4603      	mov	r3, r0
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	f43f af6f 	beq.w	8009d70 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009e92:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009e94:	4618      	mov	r0, r3
 8009e96:	3730      	adds	r7, #48	@ 0x30
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	bd80      	pop	{r7, pc}
 8009e9c:	e000ed04 	.word	0xe000ed04

08009ea0 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b084      	sub	sp, #16
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d10b      	bne.n	8009eca <vQueueDelete+0x2a>
	__asm volatile
 8009eb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009eb6:	f383 8811 	msr	BASEPRI, r3
 8009eba:	f3bf 8f6f 	isb	sy
 8009ebe:	f3bf 8f4f 	dsb	sy
 8009ec2:	60bb      	str	r3, [r7, #8]
}
 8009ec4:	bf00      	nop
 8009ec6:	bf00      	nop
 8009ec8:	e7fd      	b.n	8009ec6 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8009eca:	68f8      	ldr	r0, [r7, #12]
 8009ecc:	f000 f946 	bl	800a15c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d102      	bne.n	8009ee0 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8009eda:	68f8      	ldr	r0, [r7, #12]
 8009edc:	f001 ff8a 	bl	800bdf4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8009ee0:	bf00      	nop
 8009ee2:	3710      	adds	r7, #16
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	bd80      	pop	{r7, pc}

08009ee8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b086      	sub	sp, #24
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	60f8      	str	r0, [r7, #12]
 8009ef0:	60b9      	str	r1, [r7, #8]
 8009ef2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009efc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d10d      	bne.n	8009f22 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d14d      	bne.n	8009faa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	689b      	ldr	r3, [r3, #8]
 8009f12:	4618      	mov	r0, r3
 8009f14:	f001 f82c 	bl	800af70 <xTaskPriorityDisinherit>
 8009f18:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	609a      	str	r2, [r3, #8]
 8009f20:	e043      	b.n	8009faa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d119      	bne.n	8009f5c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	6858      	ldr	r0, [r3, #4]
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f30:	461a      	mov	r2, r3
 8009f32:	68b9      	ldr	r1, [r7, #8]
 8009f34:	f003 f97b 	bl	800d22e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	685a      	ldr	r2, [r3, #4]
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f40:	441a      	add	r2, r3
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	685a      	ldr	r2, [r3, #4]
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	689b      	ldr	r3, [r3, #8]
 8009f4e:	429a      	cmp	r2, r3
 8009f50:	d32b      	bcc.n	8009faa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	681a      	ldr	r2, [r3, #0]
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	605a      	str	r2, [r3, #4]
 8009f5a:	e026      	b.n	8009faa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	68d8      	ldr	r0, [r3, #12]
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f64:	461a      	mov	r2, r3
 8009f66:	68b9      	ldr	r1, [r7, #8]
 8009f68:	f003 f961 	bl	800d22e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	68da      	ldr	r2, [r3, #12]
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f74:	425b      	negs	r3, r3
 8009f76:	441a      	add	r2, r3
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	68da      	ldr	r2, [r3, #12]
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	429a      	cmp	r2, r3
 8009f86:	d207      	bcs.n	8009f98 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	689a      	ldr	r2, [r3, #8]
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f90:	425b      	negs	r3, r3
 8009f92:	441a      	add	r2, r3
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	2b02      	cmp	r3, #2
 8009f9c:	d105      	bne.n	8009faa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009f9e:	693b      	ldr	r3, [r7, #16]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d002      	beq.n	8009faa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009fa4:	693b      	ldr	r3, [r7, #16]
 8009fa6:	3b01      	subs	r3, #1
 8009fa8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009faa:	693b      	ldr	r3, [r7, #16]
 8009fac:	1c5a      	adds	r2, r3, #1
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8009fb2:	697b      	ldr	r3, [r7, #20]
}
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	3718      	adds	r7, #24
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	bd80      	pop	{r7, pc}

08009fbc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b082      	sub	sp, #8
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
 8009fc4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d018      	beq.n	800a000 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	68da      	ldr	r2, [r3, #12]
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009fd6:	441a      	add	r2, r3
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	68da      	ldr	r2, [r3, #12]
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	689b      	ldr	r3, [r3, #8]
 8009fe4:	429a      	cmp	r2, r3
 8009fe6:	d303      	bcc.n	8009ff0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681a      	ldr	r2, [r3, #0]
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	68d9      	ldr	r1, [r3, #12]
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ff8:	461a      	mov	r2, r3
 8009ffa:	6838      	ldr	r0, [r7, #0]
 8009ffc:	f003 f917 	bl	800d22e <memcpy>
	}
}
 800a000:	bf00      	nop
 800a002:	3708      	adds	r7, #8
 800a004:	46bd      	mov	sp, r7
 800a006:	bd80      	pop	{r7, pc}

0800a008 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b084      	sub	sp, #16
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a010:	f001 fcfa 	bl	800ba08 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a01a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a01c:	e011      	b.n	800a042 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a022:	2b00      	cmp	r3, #0
 800a024:	d012      	beq.n	800a04c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	3324      	adds	r3, #36	@ 0x24
 800a02a:	4618      	mov	r0, r3
 800a02c:	f000 fdbc 	bl	800aba8 <xTaskRemoveFromEventList>
 800a030:	4603      	mov	r3, r0
 800a032:	2b00      	cmp	r3, #0
 800a034:	d001      	beq.n	800a03a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a036:	f000 fe95 	bl	800ad64 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a03a:	7bfb      	ldrb	r3, [r7, #15]
 800a03c:	3b01      	subs	r3, #1
 800a03e:	b2db      	uxtb	r3, r3
 800a040:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a042:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a046:	2b00      	cmp	r3, #0
 800a048:	dce9      	bgt.n	800a01e <prvUnlockQueue+0x16>
 800a04a:	e000      	b.n	800a04e <prvUnlockQueue+0x46>
					break;
 800a04c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	22ff      	movs	r2, #255	@ 0xff
 800a052:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800a056:	f001 fd09 	bl	800ba6c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a05a:	f001 fcd5 	bl	800ba08 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a064:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a066:	e011      	b.n	800a08c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	691b      	ldr	r3, [r3, #16]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d012      	beq.n	800a096 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	3310      	adds	r3, #16
 800a074:	4618      	mov	r0, r3
 800a076:	f000 fd97 	bl	800aba8 <xTaskRemoveFromEventList>
 800a07a:	4603      	mov	r3, r0
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d001      	beq.n	800a084 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a080:	f000 fe70 	bl	800ad64 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a084:	7bbb      	ldrb	r3, [r7, #14]
 800a086:	3b01      	subs	r3, #1
 800a088:	b2db      	uxtb	r3, r3
 800a08a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a08c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a090:	2b00      	cmp	r3, #0
 800a092:	dce9      	bgt.n	800a068 <prvUnlockQueue+0x60>
 800a094:	e000      	b.n	800a098 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a096:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	22ff      	movs	r2, #255	@ 0xff
 800a09c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800a0a0:	f001 fce4 	bl	800ba6c <vPortExitCritical>
}
 800a0a4:	bf00      	nop
 800a0a6:	3710      	adds	r7, #16
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	bd80      	pop	{r7, pc}

0800a0ac <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b084      	sub	sp, #16
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a0b4:	f001 fca8 	bl	800ba08 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d102      	bne.n	800a0c6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a0c0:	2301      	movs	r3, #1
 800a0c2:	60fb      	str	r3, [r7, #12]
 800a0c4:	e001      	b.n	800a0ca <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a0ca:	f001 fccf 	bl	800ba6c <vPortExitCritical>

	return xReturn;
 800a0ce:	68fb      	ldr	r3, [r7, #12]
}
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	3710      	adds	r7, #16
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	bd80      	pop	{r7, pc}

0800a0d8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b084      	sub	sp, #16
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a0e0:	f001 fc92 	bl	800ba08 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a0ec:	429a      	cmp	r2, r3
 800a0ee:	d102      	bne.n	800a0f6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a0f0:	2301      	movs	r3, #1
 800a0f2:	60fb      	str	r3, [r7, #12]
 800a0f4:	e001      	b.n	800a0fa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a0fa:	f001 fcb7 	bl	800ba6c <vPortExitCritical>

	return xReturn;
 800a0fe:	68fb      	ldr	r3, [r7, #12]
}
 800a100:	4618      	mov	r0, r3
 800a102:	3710      	adds	r7, #16
 800a104:	46bd      	mov	sp, r7
 800a106:	bd80      	pop	{r7, pc}

0800a108 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a108:	b480      	push	{r7}
 800a10a:	b085      	sub	sp, #20
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
 800a110:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a112:	2300      	movs	r3, #0
 800a114:	60fb      	str	r3, [r7, #12]
 800a116:	e014      	b.n	800a142 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a118:	4a0f      	ldr	r2, [pc, #60]	@ (800a158 <vQueueAddToRegistry+0x50>)
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d10b      	bne.n	800a13c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a124:	490c      	ldr	r1, [pc, #48]	@ (800a158 <vQueueAddToRegistry+0x50>)
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	683a      	ldr	r2, [r7, #0]
 800a12a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a12e:	4a0a      	ldr	r2, [pc, #40]	@ (800a158 <vQueueAddToRegistry+0x50>)
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	00db      	lsls	r3, r3, #3
 800a134:	4413      	add	r3, r2
 800a136:	687a      	ldr	r2, [r7, #4]
 800a138:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a13a:	e006      	b.n	800a14a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	3301      	adds	r3, #1
 800a140:	60fb      	str	r3, [r7, #12]
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	2b07      	cmp	r3, #7
 800a146:	d9e7      	bls.n	800a118 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a148:	bf00      	nop
 800a14a:	bf00      	nop
 800a14c:	3714      	adds	r7, #20
 800a14e:	46bd      	mov	sp, r7
 800a150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a154:	4770      	bx	lr
 800a156:	bf00      	nop
 800a158:	20000ae0 	.word	0x20000ae0

0800a15c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800a15c:	b480      	push	{r7}
 800a15e:	b085      	sub	sp, #20
 800a160:	af00      	add	r7, sp, #0
 800a162:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a164:	2300      	movs	r3, #0
 800a166:	60fb      	str	r3, [r7, #12]
 800a168:	e016      	b.n	800a198 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800a16a:	4a10      	ldr	r2, [pc, #64]	@ (800a1ac <vQueueUnregisterQueue+0x50>)
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	00db      	lsls	r3, r3, #3
 800a170:	4413      	add	r3, r2
 800a172:	685b      	ldr	r3, [r3, #4]
 800a174:	687a      	ldr	r2, [r7, #4]
 800a176:	429a      	cmp	r2, r3
 800a178:	d10b      	bne.n	800a192 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800a17a:	4a0c      	ldr	r2, [pc, #48]	@ (800a1ac <vQueueUnregisterQueue+0x50>)
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	2100      	movs	r1, #0
 800a180:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800a184:	4a09      	ldr	r2, [pc, #36]	@ (800a1ac <vQueueUnregisterQueue+0x50>)
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	00db      	lsls	r3, r3, #3
 800a18a:	4413      	add	r3, r2
 800a18c:	2200      	movs	r2, #0
 800a18e:	605a      	str	r2, [r3, #4]
				break;
 800a190:	e006      	b.n	800a1a0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	3301      	adds	r3, #1
 800a196:	60fb      	str	r3, [r7, #12]
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	2b07      	cmp	r3, #7
 800a19c:	d9e5      	bls.n	800a16a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800a19e:	bf00      	nop
 800a1a0:	bf00      	nop
 800a1a2:	3714      	adds	r7, #20
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1aa:	4770      	bx	lr
 800a1ac:	20000ae0 	.word	0x20000ae0

0800a1b0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	b086      	sub	sp, #24
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	60f8      	str	r0, [r7, #12]
 800a1b8:	60b9      	str	r1, [r7, #8]
 800a1ba:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a1c0:	f001 fc22 	bl	800ba08 <vPortEnterCritical>
 800a1c4:	697b      	ldr	r3, [r7, #20]
 800a1c6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a1ca:	b25b      	sxtb	r3, r3
 800a1cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1d0:	d103      	bne.n	800a1da <vQueueWaitForMessageRestricted+0x2a>
 800a1d2:	697b      	ldr	r3, [r7, #20]
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a1da:	697b      	ldr	r3, [r7, #20]
 800a1dc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a1e0:	b25b      	sxtb	r3, r3
 800a1e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1e6:	d103      	bne.n	800a1f0 <vQueueWaitForMessageRestricted+0x40>
 800a1e8:	697b      	ldr	r3, [r7, #20]
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a1f0:	f001 fc3c 	bl	800ba6c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a1f4:	697b      	ldr	r3, [r7, #20]
 800a1f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d106      	bne.n	800a20a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a1fc:	697b      	ldr	r3, [r7, #20]
 800a1fe:	3324      	adds	r3, #36	@ 0x24
 800a200:	687a      	ldr	r2, [r7, #4]
 800a202:	68b9      	ldr	r1, [r7, #8]
 800a204:	4618      	mov	r0, r3
 800a206:	f000 fca3 	bl	800ab50 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a20a:	6978      	ldr	r0, [r7, #20]
 800a20c:	f7ff fefc 	bl	800a008 <prvUnlockQueue>
	}
 800a210:	bf00      	nop
 800a212:	3718      	adds	r7, #24
 800a214:	46bd      	mov	sp, r7
 800a216:	bd80      	pop	{r7, pc}

0800a218 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a218:	b580      	push	{r7, lr}
 800a21a:	b08e      	sub	sp, #56	@ 0x38
 800a21c:	af04      	add	r7, sp, #16
 800a21e:	60f8      	str	r0, [r7, #12]
 800a220:	60b9      	str	r1, [r7, #8]
 800a222:	607a      	str	r2, [r7, #4]
 800a224:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a226:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d10b      	bne.n	800a244 <xTaskCreateStatic+0x2c>
	__asm volatile
 800a22c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a230:	f383 8811 	msr	BASEPRI, r3
 800a234:	f3bf 8f6f 	isb	sy
 800a238:	f3bf 8f4f 	dsb	sy
 800a23c:	623b      	str	r3, [r7, #32]
}
 800a23e:	bf00      	nop
 800a240:	bf00      	nop
 800a242:	e7fd      	b.n	800a240 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a244:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a246:	2b00      	cmp	r3, #0
 800a248:	d10b      	bne.n	800a262 <xTaskCreateStatic+0x4a>
	__asm volatile
 800a24a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a24e:	f383 8811 	msr	BASEPRI, r3
 800a252:	f3bf 8f6f 	isb	sy
 800a256:	f3bf 8f4f 	dsb	sy
 800a25a:	61fb      	str	r3, [r7, #28]
}
 800a25c:	bf00      	nop
 800a25e:	bf00      	nop
 800a260:	e7fd      	b.n	800a25e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a262:	23a8      	movs	r3, #168	@ 0xa8
 800a264:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a266:	693b      	ldr	r3, [r7, #16]
 800a268:	2ba8      	cmp	r3, #168	@ 0xa8
 800a26a:	d00b      	beq.n	800a284 <xTaskCreateStatic+0x6c>
	__asm volatile
 800a26c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a270:	f383 8811 	msr	BASEPRI, r3
 800a274:	f3bf 8f6f 	isb	sy
 800a278:	f3bf 8f4f 	dsb	sy
 800a27c:	61bb      	str	r3, [r7, #24]
}
 800a27e:	bf00      	nop
 800a280:	bf00      	nop
 800a282:	e7fd      	b.n	800a280 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a284:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a286:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d01e      	beq.n	800a2ca <xTaskCreateStatic+0xb2>
 800a28c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d01b      	beq.n	800a2ca <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a292:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a294:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a298:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a29a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a29c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a29e:	2202      	movs	r2, #2
 800a2a0:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	9303      	str	r3, [sp, #12]
 800a2a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2aa:	9302      	str	r3, [sp, #8]
 800a2ac:	f107 0314 	add.w	r3, r7, #20
 800a2b0:	9301      	str	r3, [sp, #4]
 800a2b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2b4:	9300      	str	r3, [sp, #0]
 800a2b6:	683b      	ldr	r3, [r7, #0]
 800a2b8:	687a      	ldr	r2, [r7, #4]
 800a2ba:	68b9      	ldr	r1, [r7, #8]
 800a2bc:	68f8      	ldr	r0, [r7, #12]
 800a2be:	f000 f851 	bl	800a364 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a2c2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a2c4:	f000 f8f6 	bl	800a4b4 <prvAddNewTaskToReadyList>
 800a2c8:	e001      	b.n	800a2ce <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a2ce:	697b      	ldr	r3, [r7, #20]
	}
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	3728      	adds	r7, #40	@ 0x28
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	bd80      	pop	{r7, pc}

0800a2d8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b08c      	sub	sp, #48	@ 0x30
 800a2dc:	af04      	add	r7, sp, #16
 800a2de:	60f8      	str	r0, [r7, #12]
 800a2e0:	60b9      	str	r1, [r7, #8]
 800a2e2:	603b      	str	r3, [r7, #0]
 800a2e4:	4613      	mov	r3, r2
 800a2e6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a2e8:	88fb      	ldrh	r3, [r7, #6]
 800a2ea:	009b      	lsls	r3, r3, #2
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	f001 fcad 	bl	800bc4c <pvPortMalloc>
 800a2f2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a2f4:	697b      	ldr	r3, [r7, #20]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d00e      	beq.n	800a318 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a2fa:	20a8      	movs	r0, #168	@ 0xa8
 800a2fc:	f001 fca6 	bl	800bc4c <pvPortMalloc>
 800a300:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a302:	69fb      	ldr	r3, [r7, #28]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d003      	beq.n	800a310 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a308:	69fb      	ldr	r3, [r7, #28]
 800a30a:	697a      	ldr	r2, [r7, #20]
 800a30c:	631a      	str	r2, [r3, #48]	@ 0x30
 800a30e:	e005      	b.n	800a31c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a310:	6978      	ldr	r0, [r7, #20]
 800a312:	f001 fd6f 	bl	800bdf4 <vPortFree>
 800a316:	e001      	b.n	800a31c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a318:	2300      	movs	r3, #0
 800a31a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a31c:	69fb      	ldr	r3, [r7, #28]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d017      	beq.n	800a352 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a322:	69fb      	ldr	r3, [r7, #28]
 800a324:	2200      	movs	r2, #0
 800a326:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a32a:	88fa      	ldrh	r2, [r7, #6]
 800a32c:	2300      	movs	r3, #0
 800a32e:	9303      	str	r3, [sp, #12]
 800a330:	69fb      	ldr	r3, [r7, #28]
 800a332:	9302      	str	r3, [sp, #8]
 800a334:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a336:	9301      	str	r3, [sp, #4]
 800a338:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a33a:	9300      	str	r3, [sp, #0]
 800a33c:	683b      	ldr	r3, [r7, #0]
 800a33e:	68b9      	ldr	r1, [r7, #8]
 800a340:	68f8      	ldr	r0, [r7, #12]
 800a342:	f000 f80f 	bl	800a364 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a346:	69f8      	ldr	r0, [r7, #28]
 800a348:	f000 f8b4 	bl	800a4b4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a34c:	2301      	movs	r3, #1
 800a34e:	61bb      	str	r3, [r7, #24]
 800a350:	e002      	b.n	800a358 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a352:	f04f 33ff 	mov.w	r3, #4294967295
 800a356:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a358:	69bb      	ldr	r3, [r7, #24]
	}
 800a35a:	4618      	mov	r0, r3
 800a35c:	3720      	adds	r7, #32
 800a35e:	46bd      	mov	sp, r7
 800a360:	bd80      	pop	{r7, pc}
	...

0800a364 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a364:	b580      	push	{r7, lr}
 800a366:	b088      	sub	sp, #32
 800a368:	af00      	add	r7, sp, #0
 800a36a:	60f8      	str	r0, [r7, #12]
 800a36c:	60b9      	str	r1, [r7, #8]
 800a36e:	607a      	str	r2, [r7, #4]
 800a370:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a374:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	009b      	lsls	r3, r3, #2
 800a37a:	461a      	mov	r2, r3
 800a37c:	21a5      	movs	r1, #165	@ 0xa5
 800a37e:	f002 fe2d 	bl	800cfdc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a384:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800a38c:	3b01      	subs	r3, #1
 800a38e:	009b      	lsls	r3, r3, #2
 800a390:	4413      	add	r3, r2
 800a392:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a394:	69bb      	ldr	r3, [r7, #24]
 800a396:	f023 0307 	bic.w	r3, r3, #7
 800a39a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a39c:	69bb      	ldr	r3, [r7, #24]
 800a39e:	f003 0307 	and.w	r3, r3, #7
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d00b      	beq.n	800a3be <prvInitialiseNewTask+0x5a>
	__asm volatile
 800a3a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3aa:	f383 8811 	msr	BASEPRI, r3
 800a3ae:	f3bf 8f6f 	isb	sy
 800a3b2:	f3bf 8f4f 	dsb	sy
 800a3b6:	617b      	str	r3, [r7, #20]
}
 800a3b8:	bf00      	nop
 800a3ba:	bf00      	nop
 800a3bc:	e7fd      	b.n	800a3ba <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a3be:	68bb      	ldr	r3, [r7, #8]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d01f      	beq.n	800a404 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	61fb      	str	r3, [r7, #28]
 800a3c8:	e012      	b.n	800a3f0 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a3ca:	68ba      	ldr	r2, [r7, #8]
 800a3cc:	69fb      	ldr	r3, [r7, #28]
 800a3ce:	4413      	add	r3, r2
 800a3d0:	7819      	ldrb	r1, [r3, #0]
 800a3d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a3d4:	69fb      	ldr	r3, [r7, #28]
 800a3d6:	4413      	add	r3, r2
 800a3d8:	3334      	adds	r3, #52	@ 0x34
 800a3da:	460a      	mov	r2, r1
 800a3dc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a3de:	68ba      	ldr	r2, [r7, #8]
 800a3e0:	69fb      	ldr	r3, [r7, #28]
 800a3e2:	4413      	add	r3, r2
 800a3e4:	781b      	ldrb	r3, [r3, #0]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d006      	beq.n	800a3f8 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a3ea:	69fb      	ldr	r3, [r7, #28]
 800a3ec:	3301      	adds	r3, #1
 800a3ee:	61fb      	str	r3, [r7, #28]
 800a3f0:	69fb      	ldr	r3, [r7, #28]
 800a3f2:	2b0f      	cmp	r3, #15
 800a3f4:	d9e9      	bls.n	800a3ca <prvInitialiseNewTask+0x66>
 800a3f6:	e000      	b.n	800a3fa <prvInitialiseNewTask+0x96>
			{
				break;
 800a3f8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a3fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3fc:	2200      	movs	r2, #0
 800a3fe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a402:	e003      	b.n	800a40c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a404:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a406:	2200      	movs	r2, #0
 800a408:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a40c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a40e:	2b37      	cmp	r3, #55	@ 0x37
 800a410:	d901      	bls.n	800a416 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a412:	2337      	movs	r3, #55	@ 0x37
 800a414:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a418:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a41a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a41c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a41e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a420:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a424:	2200      	movs	r2, #0
 800a426:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a428:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a42a:	3304      	adds	r3, #4
 800a42c:	4618      	mov	r0, r3
 800a42e:	f7ff f86d 	bl	800950c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a434:	3318      	adds	r3, #24
 800a436:	4618      	mov	r0, r3
 800a438:	f7ff f868 	bl	800950c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a43c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a43e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a440:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a444:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a44a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a44c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a44e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a450:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a454:	2200      	movs	r2, #0
 800a456:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a45a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a45c:	2200      	movs	r2, #0
 800a45e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a464:	3354      	adds	r3, #84	@ 0x54
 800a466:	224c      	movs	r2, #76	@ 0x4c
 800a468:	2100      	movs	r1, #0
 800a46a:	4618      	mov	r0, r3
 800a46c:	f002 fdb6 	bl	800cfdc <memset>
 800a470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a472:	4a0d      	ldr	r2, [pc, #52]	@ (800a4a8 <prvInitialiseNewTask+0x144>)
 800a474:	659a      	str	r2, [r3, #88]	@ 0x58
 800a476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a478:	4a0c      	ldr	r2, [pc, #48]	@ (800a4ac <prvInitialiseNewTask+0x148>)
 800a47a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800a47c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a47e:	4a0c      	ldr	r2, [pc, #48]	@ (800a4b0 <prvInitialiseNewTask+0x14c>)
 800a480:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a482:	683a      	ldr	r2, [r7, #0]
 800a484:	68f9      	ldr	r1, [r7, #12]
 800a486:	69b8      	ldr	r0, [r7, #24]
 800a488:	f001 f990 	bl	800b7ac <pxPortInitialiseStack>
 800a48c:	4602      	mov	r2, r0
 800a48e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a490:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a492:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a494:	2b00      	cmp	r3, #0
 800a496:	d002      	beq.n	800a49e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a498:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a49a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a49c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a49e:	bf00      	nop
 800a4a0:	3720      	adds	r7, #32
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	bd80      	pop	{r7, pc}
 800a4a6:	bf00      	nop
 800a4a8:	20011180 	.word	0x20011180
 800a4ac:	200111e8 	.word	0x200111e8
 800a4b0:	20011250 	.word	0x20011250

0800a4b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b082      	sub	sp, #8
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a4bc:	f001 faa4 	bl	800ba08 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a4c0:	4b2d      	ldr	r3, [pc, #180]	@ (800a578 <prvAddNewTaskToReadyList+0xc4>)
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	3301      	adds	r3, #1
 800a4c6:	4a2c      	ldr	r2, [pc, #176]	@ (800a578 <prvAddNewTaskToReadyList+0xc4>)
 800a4c8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a4ca:	4b2c      	ldr	r3, [pc, #176]	@ (800a57c <prvAddNewTaskToReadyList+0xc8>)
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d109      	bne.n	800a4e6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a4d2:	4a2a      	ldr	r2, [pc, #168]	@ (800a57c <prvAddNewTaskToReadyList+0xc8>)
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a4d8:	4b27      	ldr	r3, [pc, #156]	@ (800a578 <prvAddNewTaskToReadyList+0xc4>)
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	2b01      	cmp	r3, #1
 800a4de:	d110      	bne.n	800a502 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a4e0:	f000 fc64 	bl	800adac <prvInitialiseTaskLists>
 800a4e4:	e00d      	b.n	800a502 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a4e6:	4b26      	ldr	r3, [pc, #152]	@ (800a580 <prvAddNewTaskToReadyList+0xcc>)
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d109      	bne.n	800a502 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a4ee:	4b23      	ldr	r3, [pc, #140]	@ (800a57c <prvAddNewTaskToReadyList+0xc8>)
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4f8:	429a      	cmp	r2, r3
 800a4fa:	d802      	bhi.n	800a502 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a4fc:	4a1f      	ldr	r2, [pc, #124]	@ (800a57c <prvAddNewTaskToReadyList+0xc8>)
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a502:	4b20      	ldr	r3, [pc, #128]	@ (800a584 <prvAddNewTaskToReadyList+0xd0>)
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	3301      	adds	r3, #1
 800a508:	4a1e      	ldr	r2, [pc, #120]	@ (800a584 <prvAddNewTaskToReadyList+0xd0>)
 800a50a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a50c:	4b1d      	ldr	r3, [pc, #116]	@ (800a584 <prvAddNewTaskToReadyList+0xd0>)
 800a50e:	681a      	ldr	r2, [r3, #0]
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a518:	4b1b      	ldr	r3, [pc, #108]	@ (800a588 <prvAddNewTaskToReadyList+0xd4>)
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	429a      	cmp	r2, r3
 800a51e:	d903      	bls.n	800a528 <prvAddNewTaskToReadyList+0x74>
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a524:	4a18      	ldr	r2, [pc, #96]	@ (800a588 <prvAddNewTaskToReadyList+0xd4>)
 800a526:	6013      	str	r3, [r2, #0]
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a52c:	4613      	mov	r3, r2
 800a52e:	009b      	lsls	r3, r3, #2
 800a530:	4413      	add	r3, r2
 800a532:	009b      	lsls	r3, r3, #2
 800a534:	4a15      	ldr	r2, [pc, #84]	@ (800a58c <prvAddNewTaskToReadyList+0xd8>)
 800a536:	441a      	add	r2, r3
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	3304      	adds	r3, #4
 800a53c:	4619      	mov	r1, r3
 800a53e:	4610      	mov	r0, r2
 800a540:	f7fe fff1 	bl	8009526 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a544:	f001 fa92 	bl	800ba6c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a548:	4b0d      	ldr	r3, [pc, #52]	@ (800a580 <prvAddNewTaskToReadyList+0xcc>)
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d00e      	beq.n	800a56e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a550:	4b0a      	ldr	r3, [pc, #40]	@ (800a57c <prvAddNewTaskToReadyList+0xc8>)
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a55a:	429a      	cmp	r2, r3
 800a55c:	d207      	bcs.n	800a56e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a55e:	4b0c      	ldr	r3, [pc, #48]	@ (800a590 <prvAddNewTaskToReadyList+0xdc>)
 800a560:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a564:	601a      	str	r2, [r3, #0]
 800a566:	f3bf 8f4f 	dsb	sy
 800a56a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a56e:	bf00      	nop
 800a570:	3708      	adds	r7, #8
 800a572:	46bd      	mov	sp, r7
 800a574:	bd80      	pop	{r7, pc}
 800a576:	bf00      	nop
 800a578:	20000ff4 	.word	0x20000ff4
 800a57c:	20000b20 	.word	0x20000b20
 800a580:	20001000 	.word	0x20001000
 800a584:	20001010 	.word	0x20001010
 800a588:	20000ffc 	.word	0x20000ffc
 800a58c:	20000b24 	.word	0x20000b24
 800a590:	e000ed04 	.word	0xe000ed04

0800a594 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a594:	b580      	push	{r7, lr}
 800a596:	b084      	sub	sp, #16
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a59c:	2300      	movs	r3, #0
 800a59e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d018      	beq.n	800a5d8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a5a6:	4b14      	ldr	r3, [pc, #80]	@ (800a5f8 <vTaskDelay+0x64>)
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d00b      	beq.n	800a5c6 <vTaskDelay+0x32>
	__asm volatile
 800a5ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5b2:	f383 8811 	msr	BASEPRI, r3
 800a5b6:	f3bf 8f6f 	isb	sy
 800a5ba:	f3bf 8f4f 	dsb	sy
 800a5be:	60bb      	str	r3, [r7, #8]
}
 800a5c0:	bf00      	nop
 800a5c2:	bf00      	nop
 800a5c4:	e7fd      	b.n	800a5c2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a5c6:	f000 f88b 	bl	800a6e0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a5ca:	2100      	movs	r1, #0
 800a5cc:	6878      	ldr	r0, [r7, #4]
 800a5ce:	f000 fd3f 	bl	800b050 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a5d2:	f000 f893 	bl	800a6fc <xTaskResumeAll>
 800a5d6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d107      	bne.n	800a5ee <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800a5de:	4b07      	ldr	r3, [pc, #28]	@ (800a5fc <vTaskDelay+0x68>)
 800a5e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a5e4:	601a      	str	r2, [r3, #0]
 800a5e6:	f3bf 8f4f 	dsb	sy
 800a5ea:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a5ee:	bf00      	nop
 800a5f0:	3710      	adds	r7, #16
 800a5f2:	46bd      	mov	sp, r7
 800a5f4:	bd80      	pop	{r7, pc}
 800a5f6:	bf00      	nop
 800a5f8:	2000101c 	.word	0x2000101c
 800a5fc:	e000ed04 	.word	0xe000ed04

0800a600 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a600:	b580      	push	{r7, lr}
 800a602:	b08a      	sub	sp, #40	@ 0x28
 800a604:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a606:	2300      	movs	r3, #0
 800a608:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a60a:	2300      	movs	r3, #0
 800a60c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a60e:	463a      	mov	r2, r7
 800a610:	1d39      	adds	r1, r7, #4
 800a612:	f107 0308 	add.w	r3, r7, #8
 800a616:	4618      	mov	r0, r3
 800a618:	f7fe ff24 	bl	8009464 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a61c:	6839      	ldr	r1, [r7, #0]
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	68ba      	ldr	r2, [r7, #8]
 800a622:	9202      	str	r2, [sp, #8]
 800a624:	9301      	str	r3, [sp, #4]
 800a626:	2300      	movs	r3, #0
 800a628:	9300      	str	r3, [sp, #0]
 800a62a:	2300      	movs	r3, #0
 800a62c:	460a      	mov	r2, r1
 800a62e:	4924      	ldr	r1, [pc, #144]	@ (800a6c0 <vTaskStartScheduler+0xc0>)
 800a630:	4824      	ldr	r0, [pc, #144]	@ (800a6c4 <vTaskStartScheduler+0xc4>)
 800a632:	f7ff fdf1 	bl	800a218 <xTaskCreateStatic>
 800a636:	4603      	mov	r3, r0
 800a638:	4a23      	ldr	r2, [pc, #140]	@ (800a6c8 <vTaskStartScheduler+0xc8>)
 800a63a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a63c:	4b22      	ldr	r3, [pc, #136]	@ (800a6c8 <vTaskStartScheduler+0xc8>)
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	2b00      	cmp	r3, #0
 800a642:	d002      	beq.n	800a64a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a644:	2301      	movs	r3, #1
 800a646:	617b      	str	r3, [r7, #20]
 800a648:	e001      	b.n	800a64e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a64a:	2300      	movs	r3, #0
 800a64c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a64e:	697b      	ldr	r3, [r7, #20]
 800a650:	2b01      	cmp	r3, #1
 800a652:	d102      	bne.n	800a65a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a654:	f000 fd50 	bl	800b0f8 <xTimerCreateTimerTask>
 800a658:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a65a:	697b      	ldr	r3, [r7, #20]
 800a65c:	2b01      	cmp	r3, #1
 800a65e:	d11b      	bne.n	800a698 <vTaskStartScheduler+0x98>
	__asm volatile
 800a660:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a664:	f383 8811 	msr	BASEPRI, r3
 800a668:	f3bf 8f6f 	isb	sy
 800a66c:	f3bf 8f4f 	dsb	sy
 800a670:	613b      	str	r3, [r7, #16]
}
 800a672:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a674:	4b15      	ldr	r3, [pc, #84]	@ (800a6cc <vTaskStartScheduler+0xcc>)
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	3354      	adds	r3, #84	@ 0x54
 800a67a:	4a15      	ldr	r2, [pc, #84]	@ (800a6d0 <vTaskStartScheduler+0xd0>)
 800a67c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a67e:	4b15      	ldr	r3, [pc, #84]	@ (800a6d4 <vTaskStartScheduler+0xd4>)
 800a680:	f04f 32ff 	mov.w	r2, #4294967295
 800a684:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a686:	4b14      	ldr	r3, [pc, #80]	@ (800a6d8 <vTaskStartScheduler+0xd8>)
 800a688:	2201      	movs	r2, #1
 800a68a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a68c:	4b13      	ldr	r3, [pc, #76]	@ (800a6dc <vTaskStartScheduler+0xdc>)
 800a68e:	2200      	movs	r2, #0
 800a690:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a692:	f001 f915 	bl	800b8c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a696:	e00f      	b.n	800a6b8 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a698:	697b      	ldr	r3, [r7, #20]
 800a69a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a69e:	d10b      	bne.n	800a6b8 <vTaskStartScheduler+0xb8>
	__asm volatile
 800a6a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6a4:	f383 8811 	msr	BASEPRI, r3
 800a6a8:	f3bf 8f6f 	isb	sy
 800a6ac:	f3bf 8f4f 	dsb	sy
 800a6b0:	60fb      	str	r3, [r7, #12]
}
 800a6b2:	bf00      	nop
 800a6b4:	bf00      	nop
 800a6b6:	e7fd      	b.n	800a6b4 <vTaskStartScheduler+0xb4>
}
 800a6b8:	bf00      	nop
 800a6ba:	3718      	adds	r7, #24
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	bd80      	pop	{r7, pc}
 800a6c0:	0800f514 	.word	0x0800f514
 800a6c4:	0800ad7d 	.word	0x0800ad7d
 800a6c8:	20001018 	.word	0x20001018
 800a6cc:	20000b20 	.word	0x20000b20
 800a6d0:	20000038 	.word	0x20000038
 800a6d4:	20001014 	.word	0x20001014
 800a6d8:	20001000 	.word	0x20001000
 800a6dc:	20000ff8 	.word	0x20000ff8

0800a6e0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a6e0:	b480      	push	{r7}
 800a6e2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a6e4:	4b04      	ldr	r3, [pc, #16]	@ (800a6f8 <vTaskSuspendAll+0x18>)
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	3301      	adds	r3, #1
 800a6ea:	4a03      	ldr	r2, [pc, #12]	@ (800a6f8 <vTaskSuspendAll+0x18>)
 800a6ec:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a6ee:	bf00      	nop
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f6:	4770      	bx	lr
 800a6f8:	2000101c 	.word	0x2000101c

0800a6fc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a6fc:	b580      	push	{r7, lr}
 800a6fe:	b084      	sub	sp, #16
 800a700:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a702:	2300      	movs	r3, #0
 800a704:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a706:	2300      	movs	r3, #0
 800a708:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a70a:	4b42      	ldr	r3, [pc, #264]	@ (800a814 <xTaskResumeAll+0x118>)
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d10b      	bne.n	800a72a <xTaskResumeAll+0x2e>
	__asm volatile
 800a712:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a716:	f383 8811 	msr	BASEPRI, r3
 800a71a:	f3bf 8f6f 	isb	sy
 800a71e:	f3bf 8f4f 	dsb	sy
 800a722:	603b      	str	r3, [r7, #0]
}
 800a724:	bf00      	nop
 800a726:	bf00      	nop
 800a728:	e7fd      	b.n	800a726 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a72a:	f001 f96d 	bl	800ba08 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a72e:	4b39      	ldr	r3, [pc, #228]	@ (800a814 <xTaskResumeAll+0x118>)
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	3b01      	subs	r3, #1
 800a734:	4a37      	ldr	r2, [pc, #220]	@ (800a814 <xTaskResumeAll+0x118>)
 800a736:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a738:	4b36      	ldr	r3, [pc, #216]	@ (800a814 <xTaskResumeAll+0x118>)
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d162      	bne.n	800a806 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a740:	4b35      	ldr	r3, [pc, #212]	@ (800a818 <xTaskResumeAll+0x11c>)
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	2b00      	cmp	r3, #0
 800a746:	d05e      	beq.n	800a806 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a748:	e02f      	b.n	800a7aa <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a74a:	4b34      	ldr	r3, [pc, #208]	@ (800a81c <xTaskResumeAll+0x120>)
 800a74c:	68db      	ldr	r3, [r3, #12]
 800a74e:	68db      	ldr	r3, [r3, #12]
 800a750:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	3318      	adds	r3, #24
 800a756:	4618      	mov	r0, r3
 800a758:	f7fe ff42 	bl	80095e0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	3304      	adds	r3, #4
 800a760:	4618      	mov	r0, r3
 800a762:	f7fe ff3d 	bl	80095e0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a76a:	4b2d      	ldr	r3, [pc, #180]	@ (800a820 <xTaskResumeAll+0x124>)
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	429a      	cmp	r2, r3
 800a770:	d903      	bls.n	800a77a <xTaskResumeAll+0x7e>
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a776:	4a2a      	ldr	r2, [pc, #168]	@ (800a820 <xTaskResumeAll+0x124>)
 800a778:	6013      	str	r3, [r2, #0]
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a77e:	4613      	mov	r3, r2
 800a780:	009b      	lsls	r3, r3, #2
 800a782:	4413      	add	r3, r2
 800a784:	009b      	lsls	r3, r3, #2
 800a786:	4a27      	ldr	r2, [pc, #156]	@ (800a824 <xTaskResumeAll+0x128>)
 800a788:	441a      	add	r2, r3
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	3304      	adds	r3, #4
 800a78e:	4619      	mov	r1, r3
 800a790:	4610      	mov	r0, r2
 800a792:	f7fe fec8 	bl	8009526 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a79a:	4b23      	ldr	r3, [pc, #140]	@ (800a828 <xTaskResumeAll+0x12c>)
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7a0:	429a      	cmp	r2, r3
 800a7a2:	d302      	bcc.n	800a7aa <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800a7a4:	4b21      	ldr	r3, [pc, #132]	@ (800a82c <xTaskResumeAll+0x130>)
 800a7a6:	2201      	movs	r2, #1
 800a7a8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a7aa:	4b1c      	ldr	r3, [pc, #112]	@ (800a81c <xTaskResumeAll+0x120>)
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d1cb      	bne.n	800a74a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d001      	beq.n	800a7bc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a7b8:	f000 fb9c 	bl	800aef4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a7bc:	4b1c      	ldr	r3, [pc, #112]	@ (800a830 <xTaskResumeAll+0x134>)
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d010      	beq.n	800a7ea <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a7c8:	f000 f858 	bl	800a87c <xTaskIncrementTick>
 800a7cc:	4603      	mov	r3, r0
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d002      	beq.n	800a7d8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800a7d2:	4b16      	ldr	r3, [pc, #88]	@ (800a82c <xTaskResumeAll+0x130>)
 800a7d4:	2201      	movs	r2, #1
 800a7d6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	3b01      	subs	r3, #1
 800a7dc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d1f1      	bne.n	800a7c8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800a7e4:	4b12      	ldr	r3, [pc, #72]	@ (800a830 <xTaskResumeAll+0x134>)
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a7ea:	4b10      	ldr	r3, [pc, #64]	@ (800a82c <xTaskResumeAll+0x130>)
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d009      	beq.n	800a806 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a7f2:	2301      	movs	r3, #1
 800a7f4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a7f6:	4b0f      	ldr	r3, [pc, #60]	@ (800a834 <xTaskResumeAll+0x138>)
 800a7f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a7fc:	601a      	str	r2, [r3, #0]
 800a7fe:	f3bf 8f4f 	dsb	sy
 800a802:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a806:	f001 f931 	bl	800ba6c <vPortExitCritical>

	return xAlreadyYielded;
 800a80a:	68bb      	ldr	r3, [r7, #8]
}
 800a80c:	4618      	mov	r0, r3
 800a80e:	3710      	adds	r7, #16
 800a810:	46bd      	mov	sp, r7
 800a812:	bd80      	pop	{r7, pc}
 800a814:	2000101c 	.word	0x2000101c
 800a818:	20000ff4 	.word	0x20000ff4
 800a81c:	20000fb4 	.word	0x20000fb4
 800a820:	20000ffc 	.word	0x20000ffc
 800a824:	20000b24 	.word	0x20000b24
 800a828:	20000b20 	.word	0x20000b20
 800a82c:	20001008 	.word	0x20001008
 800a830:	20001004 	.word	0x20001004
 800a834:	e000ed04 	.word	0xe000ed04

0800a838 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a838:	b480      	push	{r7}
 800a83a:	b083      	sub	sp, #12
 800a83c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a83e:	4b05      	ldr	r3, [pc, #20]	@ (800a854 <xTaskGetTickCount+0x1c>)
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a844:	687b      	ldr	r3, [r7, #4]
}
 800a846:	4618      	mov	r0, r3
 800a848:	370c      	adds	r7, #12
 800a84a:	46bd      	mov	sp, r7
 800a84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a850:	4770      	bx	lr
 800a852:	bf00      	nop
 800a854:	20000ff8 	.word	0x20000ff8

0800a858 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	b082      	sub	sp, #8
 800a85c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a85e:	f001 f9b3 	bl	800bbc8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800a862:	2300      	movs	r3, #0
 800a864:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800a866:	4b04      	ldr	r3, [pc, #16]	@ (800a878 <xTaskGetTickCountFromISR+0x20>)
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a86c:	683b      	ldr	r3, [r7, #0]
}
 800a86e:	4618      	mov	r0, r3
 800a870:	3708      	adds	r7, #8
 800a872:	46bd      	mov	sp, r7
 800a874:	bd80      	pop	{r7, pc}
 800a876:	bf00      	nop
 800a878:	20000ff8 	.word	0x20000ff8

0800a87c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a87c:	b580      	push	{r7, lr}
 800a87e:	b086      	sub	sp, #24
 800a880:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a882:	2300      	movs	r3, #0
 800a884:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a886:	4b4f      	ldr	r3, [pc, #316]	@ (800a9c4 <xTaskIncrementTick+0x148>)
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	f040 8090 	bne.w	800a9b0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a890:	4b4d      	ldr	r3, [pc, #308]	@ (800a9c8 <xTaskIncrementTick+0x14c>)
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	3301      	adds	r3, #1
 800a896:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a898:	4a4b      	ldr	r2, [pc, #300]	@ (800a9c8 <xTaskIncrementTick+0x14c>)
 800a89a:	693b      	ldr	r3, [r7, #16]
 800a89c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a89e:	693b      	ldr	r3, [r7, #16]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d121      	bne.n	800a8e8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800a8a4:	4b49      	ldr	r3, [pc, #292]	@ (800a9cc <xTaskIncrementTick+0x150>)
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d00b      	beq.n	800a8c6 <xTaskIncrementTick+0x4a>
	__asm volatile
 800a8ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8b2:	f383 8811 	msr	BASEPRI, r3
 800a8b6:	f3bf 8f6f 	isb	sy
 800a8ba:	f3bf 8f4f 	dsb	sy
 800a8be:	603b      	str	r3, [r7, #0]
}
 800a8c0:	bf00      	nop
 800a8c2:	bf00      	nop
 800a8c4:	e7fd      	b.n	800a8c2 <xTaskIncrementTick+0x46>
 800a8c6:	4b41      	ldr	r3, [pc, #260]	@ (800a9cc <xTaskIncrementTick+0x150>)
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	60fb      	str	r3, [r7, #12]
 800a8cc:	4b40      	ldr	r3, [pc, #256]	@ (800a9d0 <xTaskIncrementTick+0x154>)
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	4a3e      	ldr	r2, [pc, #248]	@ (800a9cc <xTaskIncrementTick+0x150>)
 800a8d2:	6013      	str	r3, [r2, #0]
 800a8d4:	4a3e      	ldr	r2, [pc, #248]	@ (800a9d0 <xTaskIncrementTick+0x154>)
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	6013      	str	r3, [r2, #0]
 800a8da:	4b3e      	ldr	r3, [pc, #248]	@ (800a9d4 <xTaskIncrementTick+0x158>)
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	3301      	adds	r3, #1
 800a8e0:	4a3c      	ldr	r2, [pc, #240]	@ (800a9d4 <xTaskIncrementTick+0x158>)
 800a8e2:	6013      	str	r3, [r2, #0]
 800a8e4:	f000 fb06 	bl	800aef4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a8e8:	4b3b      	ldr	r3, [pc, #236]	@ (800a9d8 <xTaskIncrementTick+0x15c>)
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	693a      	ldr	r2, [r7, #16]
 800a8ee:	429a      	cmp	r2, r3
 800a8f0:	d349      	bcc.n	800a986 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a8f2:	4b36      	ldr	r3, [pc, #216]	@ (800a9cc <xTaskIncrementTick+0x150>)
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d104      	bne.n	800a906 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a8fc:	4b36      	ldr	r3, [pc, #216]	@ (800a9d8 <xTaskIncrementTick+0x15c>)
 800a8fe:	f04f 32ff 	mov.w	r2, #4294967295
 800a902:	601a      	str	r2, [r3, #0]
					break;
 800a904:	e03f      	b.n	800a986 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a906:	4b31      	ldr	r3, [pc, #196]	@ (800a9cc <xTaskIncrementTick+0x150>)
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	68db      	ldr	r3, [r3, #12]
 800a90c:	68db      	ldr	r3, [r3, #12]
 800a90e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a910:	68bb      	ldr	r3, [r7, #8]
 800a912:	685b      	ldr	r3, [r3, #4]
 800a914:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a916:	693a      	ldr	r2, [r7, #16]
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	429a      	cmp	r2, r3
 800a91c:	d203      	bcs.n	800a926 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a91e:	4a2e      	ldr	r2, [pc, #184]	@ (800a9d8 <xTaskIncrementTick+0x15c>)
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a924:	e02f      	b.n	800a986 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a926:	68bb      	ldr	r3, [r7, #8]
 800a928:	3304      	adds	r3, #4
 800a92a:	4618      	mov	r0, r3
 800a92c:	f7fe fe58 	bl	80095e0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a930:	68bb      	ldr	r3, [r7, #8]
 800a932:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a934:	2b00      	cmp	r3, #0
 800a936:	d004      	beq.n	800a942 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a938:	68bb      	ldr	r3, [r7, #8]
 800a93a:	3318      	adds	r3, #24
 800a93c:	4618      	mov	r0, r3
 800a93e:	f7fe fe4f 	bl	80095e0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a942:	68bb      	ldr	r3, [r7, #8]
 800a944:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a946:	4b25      	ldr	r3, [pc, #148]	@ (800a9dc <xTaskIncrementTick+0x160>)
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	429a      	cmp	r2, r3
 800a94c:	d903      	bls.n	800a956 <xTaskIncrementTick+0xda>
 800a94e:	68bb      	ldr	r3, [r7, #8]
 800a950:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a952:	4a22      	ldr	r2, [pc, #136]	@ (800a9dc <xTaskIncrementTick+0x160>)
 800a954:	6013      	str	r3, [r2, #0]
 800a956:	68bb      	ldr	r3, [r7, #8]
 800a958:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a95a:	4613      	mov	r3, r2
 800a95c:	009b      	lsls	r3, r3, #2
 800a95e:	4413      	add	r3, r2
 800a960:	009b      	lsls	r3, r3, #2
 800a962:	4a1f      	ldr	r2, [pc, #124]	@ (800a9e0 <xTaskIncrementTick+0x164>)
 800a964:	441a      	add	r2, r3
 800a966:	68bb      	ldr	r3, [r7, #8]
 800a968:	3304      	adds	r3, #4
 800a96a:	4619      	mov	r1, r3
 800a96c:	4610      	mov	r0, r2
 800a96e:	f7fe fdda 	bl	8009526 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a972:	68bb      	ldr	r3, [r7, #8]
 800a974:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a976:	4b1b      	ldr	r3, [pc, #108]	@ (800a9e4 <xTaskIncrementTick+0x168>)
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a97c:	429a      	cmp	r2, r3
 800a97e:	d3b8      	bcc.n	800a8f2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800a980:	2301      	movs	r3, #1
 800a982:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a984:	e7b5      	b.n	800a8f2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a986:	4b17      	ldr	r3, [pc, #92]	@ (800a9e4 <xTaskIncrementTick+0x168>)
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a98c:	4914      	ldr	r1, [pc, #80]	@ (800a9e0 <xTaskIncrementTick+0x164>)
 800a98e:	4613      	mov	r3, r2
 800a990:	009b      	lsls	r3, r3, #2
 800a992:	4413      	add	r3, r2
 800a994:	009b      	lsls	r3, r3, #2
 800a996:	440b      	add	r3, r1
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	2b01      	cmp	r3, #1
 800a99c:	d901      	bls.n	800a9a2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800a99e:	2301      	movs	r3, #1
 800a9a0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a9a2:	4b11      	ldr	r3, [pc, #68]	@ (800a9e8 <xTaskIncrementTick+0x16c>)
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d007      	beq.n	800a9ba <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800a9aa:	2301      	movs	r3, #1
 800a9ac:	617b      	str	r3, [r7, #20]
 800a9ae:	e004      	b.n	800a9ba <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a9b0:	4b0e      	ldr	r3, [pc, #56]	@ (800a9ec <xTaskIncrementTick+0x170>)
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	3301      	adds	r3, #1
 800a9b6:	4a0d      	ldr	r2, [pc, #52]	@ (800a9ec <xTaskIncrementTick+0x170>)
 800a9b8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a9ba:	697b      	ldr	r3, [r7, #20]
}
 800a9bc:	4618      	mov	r0, r3
 800a9be:	3718      	adds	r7, #24
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	bd80      	pop	{r7, pc}
 800a9c4:	2000101c 	.word	0x2000101c
 800a9c8:	20000ff8 	.word	0x20000ff8
 800a9cc:	20000fac 	.word	0x20000fac
 800a9d0:	20000fb0 	.word	0x20000fb0
 800a9d4:	2000100c 	.word	0x2000100c
 800a9d8:	20001014 	.word	0x20001014
 800a9dc:	20000ffc 	.word	0x20000ffc
 800a9e0:	20000b24 	.word	0x20000b24
 800a9e4:	20000b20 	.word	0x20000b20
 800a9e8:	20001008 	.word	0x20001008
 800a9ec:	20001004 	.word	0x20001004

0800a9f0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a9f0:	b580      	push	{r7, lr}
 800a9f2:	b086      	sub	sp, #24
 800a9f4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a9f6:	4b3d      	ldr	r3, [pc, #244]	@ (800aaec <vTaskSwitchContext+0xfc>)
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d003      	beq.n	800aa06 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a9fe:	4b3c      	ldr	r3, [pc, #240]	@ (800aaf0 <vTaskSwitchContext+0x100>)
 800aa00:	2201      	movs	r2, #1
 800aa02:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800aa04:	e06e      	b.n	800aae4 <vTaskSwitchContext+0xf4>
		xYieldPending = pdFALSE;
 800aa06:	4b3a      	ldr	r3, [pc, #232]	@ (800aaf0 <vTaskSwitchContext+0x100>)
 800aa08:	2200      	movs	r2, #0
 800aa0a:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800aa0c:	4b39      	ldr	r3, [pc, #228]	@ (800aaf4 <vTaskSwitchContext+0x104>)
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa12:	613b      	str	r3, [r7, #16]
 800aa14:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 800aa18:	60fb      	str	r3, [r7, #12]
 800aa1a:	693b      	ldr	r3, [r7, #16]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	68fa      	ldr	r2, [r7, #12]
 800aa20:	429a      	cmp	r2, r3
 800aa22:	d111      	bne.n	800aa48 <vTaskSwitchContext+0x58>
 800aa24:	693b      	ldr	r3, [r7, #16]
 800aa26:	3304      	adds	r3, #4
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	68fa      	ldr	r2, [r7, #12]
 800aa2c:	429a      	cmp	r2, r3
 800aa2e:	d10b      	bne.n	800aa48 <vTaskSwitchContext+0x58>
 800aa30:	693b      	ldr	r3, [r7, #16]
 800aa32:	3308      	adds	r3, #8
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	68fa      	ldr	r2, [r7, #12]
 800aa38:	429a      	cmp	r2, r3
 800aa3a:	d105      	bne.n	800aa48 <vTaskSwitchContext+0x58>
 800aa3c:	693b      	ldr	r3, [r7, #16]
 800aa3e:	330c      	adds	r3, #12
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	68fa      	ldr	r2, [r7, #12]
 800aa44:	429a      	cmp	r2, r3
 800aa46:	d008      	beq.n	800aa5a <vTaskSwitchContext+0x6a>
 800aa48:	4b2a      	ldr	r3, [pc, #168]	@ (800aaf4 <vTaskSwitchContext+0x104>)
 800aa4a:	681a      	ldr	r2, [r3, #0]
 800aa4c:	4b29      	ldr	r3, [pc, #164]	@ (800aaf4 <vTaskSwitchContext+0x104>)
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	3334      	adds	r3, #52	@ 0x34
 800aa52:	4619      	mov	r1, r3
 800aa54:	4610      	mov	r0, r2
 800aa56:	f7fa f961 	bl	8004d1c <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa5a:	4b27      	ldr	r3, [pc, #156]	@ (800aaf8 <vTaskSwitchContext+0x108>)
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	617b      	str	r3, [r7, #20]
 800aa60:	e011      	b.n	800aa86 <vTaskSwitchContext+0x96>
 800aa62:	697b      	ldr	r3, [r7, #20]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d10b      	bne.n	800aa80 <vTaskSwitchContext+0x90>
	__asm volatile
 800aa68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa6c:	f383 8811 	msr	BASEPRI, r3
 800aa70:	f3bf 8f6f 	isb	sy
 800aa74:	f3bf 8f4f 	dsb	sy
 800aa78:	607b      	str	r3, [r7, #4]
}
 800aa7a:	bf00      	nop
 800aa7c:	bf00      	nop
 800aa7e:	e7fd      	b.n	800aa7c <vTaskSwitchContext+0x8c>
 800aa80:	697b      	ldr	r3, [r7, #20]
 800aa82:	3b01      	subs	r3, #1
 800aa84:	617b      	str	r3, [r7, #20]
 800aa86:	491d      	ldr	r1, [pc, #116]	@ (800aafc <vTaskSwitchContext+0x10c>)
 800aa88:	697a      	ldr	r2, [r7, #20]
 800aa8a:	4613      	mov	r3, r2
 800aa8c:	009b      	lsls	r3, r3, #2
 800aa8e:	4413      	add	r3, r2
 800aa90:	009b      	lsls	r3, r3, #2
 800aa92:	440b      	add	r3, r1
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d0e3      	beq.n	800aa62 <vTaskSwitchContext+0x72>
 800aa9a:	697a      	ldr	r2, [r7, #20]
 800aa9c:	4613      	mov	r3, r2
 800aa9e:	009b      	lsls	r3, r3, #2
 800aaa0:	4413      	add	r3, r2
 800aaa2:	009b      	lsls	r3, r3, #2
 800aaa4:	4a15      	ldr	r2, [pc, #84]	@ (800aafc <vTaskSwitchContext+0x10c>)
 800aaa6:	4413      	add	r3, r2
 800aaa8:	60bb      	str	r3, [r7, #8]
 800aaaa:	68bb      	ldr	r3, [r7, #8]
 800aaac:	685b      	ldr	r3, [r3, #4]
 800aaae:	685a      	ldr	r2, [r3, #4]
 800aab0:	68bb      	ldr	r3, [r7, #8]
 800aab2:	605a      	str	r2, [r3, #4]
 800aab4:	68bb      	ldr	r3, [r7, #8]
 800aab6:	685a      	ldr	r2, [r3, #4]
 800aab8:	68bb      	ldr	r3, [r7, #8]
 800aaba:	3308      	adds	r3, #8
 800aabc:	429a      	cmp	r2, r3
 800aabe:	d104      	bne.n	800aaca <vTaskSwitchContext+0xda>
 800aac0:	68bb      	ldr	r3, [r7, #8]
 800aac2:	685b      	ldr	r3, [r3, #4]
 800aac4:	685a      	ldr	r2, [r3, #4]
 800aac6:	68bb      	ldr	r3, [r7, #8]
 800aac8:	605a      	str	r2, [r3, #4]
 800aaca:	68bb      	ldr	r3, [r7, #8]
 800aacc:	685b      	ldr	r3, [r3, #4]
 800aace:	68db      	ldr	r3, [r3, #12]
 800aad0:	4a08      	ldr	r2, [pc, #32]	@ (800aaf4 <vTaskSwitchContext+0x104>)
 800aad2:	6013      	str	r3, [r2, #0]
 800aad4:	4a08      	ldr	r2, [pc, #32]	@ (800aaf8 <vTaskSwitchContext+0x108>)
 800aad6:	697b      	ldr	r3, [r7, #20]
 800aad8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800aada:	4b06      	ldr	r3, [pc, #24]	@ (800aaf4 <vTaskSwitchContext+0x104>)
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	3354      	adds	r3, #84	@ 0x54
 800aae0:	4a07      	ldr	r2, [pc, #28]	@ (800ab00 <vTaskSwitchContext+0x110>)
 800aae2:	6013      	str	r3, [r2, #0]
}
 800aae4:	bf00      	nop
 800aae6:	3718      	adds	r7, #24
 800aae8:	46bd      	mov	sp, r7
 800aaea:	bd80      	pop	{r7, pc}
 800aaec:	2000101c 	.word	0x2000101c
 800aaf0:	20001008 	.word	0x20001008
 800aaf4:	20000b20 	.word	0x20000b20
 800aaf8:	20000ffc 	.word	0x20000ffc
 800aafc:	20000b24 	.word	0x20000b24
 800ab00:	20000038 	.word	0x20000038

0800ab04 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ab04:	b580      	push	{r7, lr}
 800ab06:	b084      	sub	sp, #16
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	6078      	str	r0, [r7, #4]
 800ab0c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d10b      	bne.n	800ab2c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800ab14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab18:	f383 8811 	msr	BASEPRI, r3
 800ab1c:	f3bf 8f6f 	isb	sy
 800ab20:	f3bf 8f4f 	dsb	sy
 800ab24:	60fb      	str	r3, [r7, #12]
}
 800ab26:	bf00      	nop
 800ab28:	bf00      	nop
 800ab2a:	e7fd      	b.n	800ab28 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ab2c:	4b07      	ldr	r3, [pc, #28]	@ (800ab4c <vTaskPlaceOnEventList+0x48>)
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	3318      	adds	r3, #24
 800ab32:	4619      	mov	r1, r3
 800ab34:	6878      	ldr	r0, [r7, #4]
 800ab36:	f7fe fd1a 	bl	800956e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ab3a:	2101      	movs	r1, #1
 800ab3c:	6838      	ldr	r0, [r7, #0]
 800ab3e:	f000 fa87 	bl	800b050 <prvAddCurrentTaskToDelayedList>
}
 800ab42:	bf00      	nop
 800ab44:	3710      	adds	r7, #16
 800ab46:	46bd      	mov	sp, r7
 800ab48:	bd80      	pop	{r7, pc}
 800ab4a:	bf00      	nop
 800ab4c:	20000b20 	.word	0x20000b20

0800ab50 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ab50:	b580      	push	{r7, lr}
 800ab52:	b086      	sub	sp, #24
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	60f8      	str	r0, [r7, #12]
 800ab58:	60b9      	str	r1, [r7, #8]
 800ab5a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d10b      	bne.n	800ab7a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800ab62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab66:	f383 8811 	msr	BASEPRI, r3
 800ab6a:	f3bf 8f6f 	isb	sy
 800ab6e:	f3bf 8f4f 	dsb	sy
 800ab72:	617b      	str	r3, [r7, #20]
}
 800ab74:	bf00      	nop
 800ab76:	bf00      	nop
 800ab78:	e7fd      	b.n	800ab76 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ab7a:	4b0a      	ldr	r3, [pc, #40]	@ (800aba4 <vTaskPlaceOnEventListRestricted+0x54>)
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	3318      	adds	r3, #24
 800ab80:	4619      	mov	r1, r3
 800ab82:	68f8      	ldr	r0, [r7, #12]
 800ab84:	f7fe fccf 	bl	8009526 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d002      	beq.n	800ab94 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800ab8e:	f04f 33ff 	mov.w	r3, #4294967295
 800ab92:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ab94:	6879      	ldr	r1, [r7, #4]
 800ab96:	68b8      	ldr	r0, [r7, #8]
 800ab98:	f000 fa5a 	bl	800b050 <prvAddCurrentTaskToDelayedList>
	}
 800ab9c:	bf00      	nop
 800ab9e:	3718      	adds	r7, #24
 800aba0:	46bd      	mov	sp, r7
 800aba2:	bd80      	pop	{r7, pc}
 800aba4:	20000b20 	.word	0x20000b20

0800aba8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800aba8:	b580      	push	{r7, lr}
 800abaa:	b086      	sub	sp, #24
 800abac:	af00      	add	r7, sp, #0
 800abae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	68db      	ldr	r3, [r3, #12]
 800abb4:	68db      	ldr	r3, [r3, #12]
 800abb6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800abb8:	693b      	ldr	r3, [r7, #16]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d10b      	bne.n	800abd6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800abbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abc2:	f383 8811 	msr	BASEPRI, r3
 800abc6:	f3bf 8f6f 	isb	sy
 800abca:	f3bf 8f4f 	dsb	sy
 800abce:	60fb      	str	r3, [r7, #12]
}
 800abd0:	bf00      	nop
 800abd2:	bf00      	nop
 800abd4:	e7fd      	b.n	800abd2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800abd6:	693b      	ldr	r3, [r7, #16]
 800abd8:	3318      	adds	r3, #24
 800abda:	4618      	mov	r0, r3
 800abdc:	f7fe fd00 	bl	80095e0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800abe0:	4b1d      	ldr	r3, [pc, #116]	@ (800ac58 <xTaskRemoveFromEventList+0xb0>)
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d11d      	bne.n	800ac24 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800abe8:	693b      	ldr	r3, [r7, #16]
 800abea:	3304      	adds	r3, #4
 800abec:	4618      	mov	r0, r3
 800abee:	f7fe fcf7 	bl	80095e0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800abf2:	693b      	ldr	r3, [r7, #16]
 800abf4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800abf6:	4b19      	ldr	r3, [pc, #100]	@ (800ac5c <xTaskRemoveFromEventList+0xb4>)
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	429a      	cmp	r2, r3
 800abfc:	d903      	bls.n	800ac06 <xTaskRemoveFromEventList+0x5e>
 800abfe:	693b      	ldr	r3, [r7, #16]
 800ac00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac02:	4a16      	ldr	r2, [pc, #88]	@ (800ac5c <xTaskRemoveFromEventList+0xb4>)
 800ac04:	6013      	str	r3, [r2, #0]
 800ac06:	693b      	ldr	r3, [r7, #16]
 800ac08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac0a:	4613      	mov	r3, r2
 800ac0c:	009b      	lsls	r3, r3, #2
 800ac0e:	4413      	add	r3, r2
 800ac10:	009b      	lsls	r3, r3, #2
 800ac12:	4a13      	ldr	r2, [pc, #76]	@ (800ac60 <xTaskRemoveFromEventList+0xb8>)
 800ac14:	441a      	add	r2, r3
 800ac16:	693b      	ldr	r3, [r7, #16]
 800ac18:	3304      	adds	r3, #4
 800ac1a:	4619      	mov	r1, r3
 800ac1c:	4610      	mov	r0, r2
 800ac1e:	f7fe fc82 	bl	8009526 <vListInsertEnd>
 800ac22:	e005      	b.n	800ac30 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ac24:	693b      	ldr	r3, [r7, #16]
 800ac26:	3318      	adds	r3, #24
 800ac28:	4619      	mov	r1, r3
 800ac2a:	480e      	ldr	r0, [pc, #56]	@ (800ac64 <xTaskRemoveFromEventList+0xbc>)
 800ac2c:	f7fe fc7b 	bl	8009526 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ac30:	693b      	ldr	r3, [r7, #16]
 800ac32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac34:	4b0c      	ldr	r3, [pc, #48]	@ (800ac68 <xTaskRemoveFromEventList+0xc0>)
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac3a:	429a      	cmp	r2, r3
 800ac3c:	d905      	bls.n	800ac4a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ac3e:	2301      	movs	r3, #1
 800ac40:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ac42:	4b0a      	ldr	r3, [pc, #40]	@ (800ac6c <xTaskRemoveFromEventList+0xc4>)
 800ac44:	2201      	movs	r2, #1
 800ac46:	601a      	str	r2, [r3, #0]
 800ac48:	e001      	b.n	800ac4e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ac4e:	697b      	ldr	r3, [r7, #20]
}
 800ac50:	4618      	mov	r0, r3
 800ac52:	3718      	adds	r7, #24
 800ac54:	46bd      	mov	sp, r7
 800ac56:	bd80      	pop	{r7, pc}
 800ac58:	2000101c 	.word	0x2000101c
 800ac5c:	20000ffc 	.word	0x20000ffc
 800ac60:	20000b24 	.word	0x20000b24
 800ac64:	20000fb4 	.word	0x20000fb4
 800ac68:	20000b20 	.word	0x20000b20
 800ac6c:	20001008 	.word	0x20001008

0800ac70 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ac70:	b480      	push	{r7}
 800ac72:	b083      	sub	sp, #12
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ac78:	4b06      	ldr	r3, [pc, #24]	@ (800ac94 <vTaskInternalSetTimeOutState+0x24>)
 800ac7a:	681a      	ldr	r2, [r3, #0]
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ac80:	4b05      	ldr	r3, [pc, #20]	@ (800ac98 <vTaskInternalSetTimeOutState+0x28>)
 800ac82:	681a      	ldr	r2, [r3, #0]
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	605a      	str	r2, [r3, #4]
}
 800ac88:	bf00      	nop
 800ac8a:	370c      	adds	r7, #12
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac92:	4770      	bx	lr
 800ac94:	2000100c 	.word	0x2000100c
 800ac98:	20000ff8 	.word	0x20000ff8

0800ac9c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	b088      	sub	sp, #32
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
 800aca4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d10b      	bne.n	800acc4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800acac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acb0:	f383 8811 	msr	BASEPRI, r3
 800acb4:	f3bf 8f6f 	isb	sy
 800acb8:	f3bf 8f4f 	dsb	sy
 800acbc:	613b      	str	r3, [r7, #16]
}
 800acbe:	bf00      	nop
 800acc0:	bf00      	nop
 800acc2:	e7fd      	b.n	800acc0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800acc4:	683b      	ldr	r3, [r7, #0]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d10b      	bne.n	800ace2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800acca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acce:	f383 8811 	msr	BASEPRI, r3
 800acd2:	f3bf 8f6f 	isb	sy
 800acd6:	f3bf 8f4f 	dsb	sy
 800acda:	60fb      	str	r3, [r7, #12]
}
 800acdc:	bf00      	nop
 800acde:	bf00      	nop
 800ace0:	e7fd      	b.n	800acde <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800ace2:	f000 fe91 	bl	800ba08 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ace6:	4b1d      	ldr	r3, [pc, #116]	@ (800ad5c <xTaskCheckForTimeOut+0xc0>)
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	685b      	ldr	r3, [r3, #4]
 800acf0:	69ba      	ldr	r2, [r7, #24]
 800acf2:	1ad3      	subs	r3, r2, r3
 800acf4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800acf6:	683b      	ldr	r3, [r7, #0]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acfe:	d102      	bne.n	800ad06 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ad00:	2300      	movs	r3, #0
 800ad02:	61fb      	str	r3, [r7, #28]
 800ad04:	e023      	b.n	800ad4e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681a      	ldr	r2, [r3, #0]
 800ad0a:	4b15      	ldr	r3, [pc, #84]	@ (800ad60 <xTaskCheckForTimeOut+0xc4>)
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	429a      	cmp	r2, r3
 800ad10:	d007      	beq.n	800ad22 <xTaskCheckForTimeOut+0x86>
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	685b      	ldr	r3, [r3, #4]
 800ad16:	69ba      	ldr	r2, [r7, #24]
 800ad18:	429a      	cmp	r2, r3
 800ad1a:	d302      	bcc.n	800ad22 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ad1c:	2301      	movs	r3, #1
 800ad1e:	61fb      	str	r3, [r7, #28]
 800ad20:	e015      	b.n	800ad4e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ad22:	683b      	ldr	r3, [r7, #0]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	697a      	ldr	r2, [r7, #20]
 800ad28:	429a      	cmp	r2, r3
 800ad2a:	d20b      	bcs.n	800ad44 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ad2c:	683b      	ldr	r3, [r7, #0]
 800ad2e:	681a      	ldr	r2, [r3, #0]
 800ad30:	697b      	ldr	r3, [r7, #20]
 800ad32:	1ad2      	subs	r2, r2, r3
 800ad34:	683b      	ldr	r3, [r7, #0]
 800ad36:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ad38:	6878      	ldr	r0, [r7, #4]
 800ad3a:	f7ff ff99 	bl	800ac70 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ad3e:	2300      	movs	r3, #0
 800ad40:	61fb      	str	r3, [r7, #28]
 800ad42:	e004      	b.n	800ad4e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800ad44:	683b      	ldr	r3, [r7, #0]
 800ad46:	2200      	movs	r2, #0
 800ad48:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ad4a:	2301      	movs	r3, #1
 800ad4c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ad4e:	f000 fe8d 	bl	800ba6c <vPortExitCritical>

	return xReturn;
 800ad52:	69fb      	ldr	r3, [r7, #28]
}
 800ad54:	4618      	mov	r0, r3
 800ad56:	3720      	adds	r7, #32
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	bd80      	pop	{r7, pc}
 800ad5c:	20000ff8 	.word	0x20000ff8
 800ad60:	2000100c 	.word	0x2000100c

0800ad64 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ad64:	b480      	push	{r7}
 800ad66:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ad68:	4b03      	ldr	r3, [pc, #12]	@ (800ad78 <vTaskMissedYield+0x14>)
 800ad6a:	2201      	movs	r2, #1
 800ad6c:	601a      	str	r2, [r3, #0]
}
 800ad6e:	bf00      	nop
 800ad70:	46bd      	mov	sp, r7
 800ad72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad76:	4770      	bx	lr
 800ad78:	20001008 	.word	0x20001008

0800ad7c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ad7c:	b580      	push	{r7, lr}
 800ad7e:	b082      	sub	sp, #8
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ad84:	f000 f852 	bl	800ae2c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ad88:	4b06      	ldr	r3, [pc, #24]	@ (800ada4 <prvIdleTask+0x28>)
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	2b01      	cmp	r3, #1
 800ad8e:	d9f9      	bls.n	800ad84 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ad90:	4b05      	ldr	r3, [pc, #20]	@ (800ada8 <prvIdleTask+0x2c>)
 800ad92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ad96:	601a      	str	r2, [r3, #0]
 800ad98:	f3bf 8f4f 	dsb	sy
 800ad9c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ada0:	e7f0      	b.n	800ad84 <prvIdleTask+0x8>
 800ada2:	bf00      	nop
 800ada4:	20000b24 	.word	0x20000b24
 800ada8:	e000ed04 	.word	0xe000ed04

0800adac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800adac:	b580      	push	{r7, lr}
 800adae:	b082      	sub	sp, #8
 800adb0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800adb2:	2300      	movs	r3, #0
 800adb4:	607b      	str	r3, [r7, #4]
 800adb6:	e00c      	b.n	800add2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800adb8:	687a      	ldr	r2, [r7, #4]
 800adba:	4613      	mov	r3, r2
 800adbc:	009b      	lsls	r3, r3, #2
 800adbe:	4413      	add	r3, r2
 800adc0:	009b      	lsls	r3, r3, #2
 800adc2:	4a12      	ldr	r2, [pc, #72]	@ (800ae0c <prvInitialiseTaskLists+0x60>)
 800adc4:	4413      	add	r3, r2
 800adc6:	4618      	mov	r0, r3
 800adc8:	f7fe fb80 	bl	80094cc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	3301      	adds	r3, #1
 800add0:	607b      	str	r3, [r7, #4]
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	2b37      	cmp	r3, #55	@ 0x37
 800add6:	d9ef      	bls.n	800adb8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800add8:	480d      	ldr	r0, [pc, #52]	@ (800ae10 <prvInitialiseTaskLists+0x64>)
 800adda:	f7fe fb77 	bl	80094cc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800adde:	480d      	ldr	r0, [pc, #52]	@ (800ae14 <prvInitialiseTaskLists+0x68>)
 800ade0:	f7fe fb74 	bl	80094cc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ade4:	480c      	ldr	r0, [pc, #48]	@ (800ae18 <prvInitialiseTaskLists+0x6c>)
 800ade6:	f7fe fb71 	bl	80094cc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800adea:	480c      	ldr	r0, [pc, #48]	@ (800ae1c <prvInitialiseTaskLists+0x70>)
 800adec:	f7fe fb6e 	bl	80094cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800adf0:	480b      	ldr	r0, [pc, #44]	@ (800ae20 <prvInitialiseTaskLists+0x74>)
 800adf2:	f7fe fb6b 	bl	80094cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800adf6:	4b0b      	ldr	r3, [pc, #44]	@ (800ae24 <prvInitialiseTaskLists+0x78>)
 800adf8:	4a05      	ldr	r2, [pc, #20]	@ (800ae10 <prvInitialiseTaskLists+0x64>)
 800adfa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800adfc:	4b0a      	ldr	r3, [pc, #40]	@ (800ae28 <prvInitialiseTaskLists+0x7c>)
 800adfe:	4a05      	ldr	r2, [pc, #20]	@ (800ae14 <prvInitialiseTaskLists+0x68>)
 800ae00:	601a      	str	r2, [r3, #0]
}
 800ae02:	bf00      	nop
 800ae04:	3708      	adds	r7, #8
 800ae06:	46bd      	mov	sp, r7
 800ae08:	bd80      	pop	{r7, pc}
 800ae0a:	bf00      	nop
 800ae0c:	20000b24 	.word	0x20000b24
 800ae10:	20000f84 	.word	0x20000f84
 800ae14:	20000f98 	.word	0x20000f98
 800ae18:	20000fb4 	.word	0x20000fb4
 800ae1c:	20000fc8 	.word	0x20000fc8
 800ae20:	20000fe0 	.word	0x20000fe0
 800ae24:	20000fac 	.word	0x20000fac
 800ae28:	20000fb0 	.word	0x20000fb0

0800ae2c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ae2c:	b580      	push	{r7, lr}
 800ae2e:	b082      	sub	sp, #8
 800ae30:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ae32:	e019      	b.n	800ae68 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ae34:	f000 fde8 	bl	800ba08 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ae38:	4b10      	ldr	r3, [pc, #64]	@ (800ae7c <prvCheckTasksWaitingTermination+0x50>)
 800ae3a:	68db      	ldr	r3, [r3, #12]
 800ae3c:	68db      	ldr	r3, [r3, #12]
 800ae3e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	3304      	adds	r3, #4
 800ae44:	4618      	mov	r0, r3
 800ae46:	f7fe fbcb 	bl	80095e0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ae4a:	4b0d      	ldr	r3, [pc, #52]	@ (800ae80 <prvCheckTasksWaitingTermination+0x54>)
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	3b01      	subs	r3, #1
 800ae50:	4a0b      	ldr	r2, [pc, #44]	@ (800ae80 <prvCheckTasksWaitingTermination+0x54>)
 800ae52:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ae54:	4b0b      	ldr	r3, [pc, #44]	@ (800ae84 <prvCheckTasksWaitingTermination+0x58>)
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	3b01      	subs	r3, #1
 800ae5a:	4a0a      	ldr	r2, [pc, #40]	@ (800ae84 <prvCheckTasksWaitingTermination+0x58>)
 800ae5c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ae5e:	f000 fe05 	bl	800ba6c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ae62:	6878      	ldr	r0, [r7, #4]
 800ae64:	f000 f810 	bl	800ae88 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ae68:	4b06      	ldr	r3, [pc, #24]	@ (800ae84 <prvCheckTasksWaitingTermination+0x58>)
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d1e1      	bne.n	800ae34 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ae70:	bf00      	nop
 800ae72:	bf00      	nop
 800ae74:	3708      	adds	r7, #8
 800ae76:	46bd      	mov	sp, r7
 800ae78:	bd80      	pop	{r7, pc}
 800ae7a:	bf00      	nop
 800ae7c:	20000fc8 	.word	0x20000fc8
 800ae80:	20000ff4 	.word	0x20000ff4
 800ae84:	20000fdc 	.word	0x20000fdc

0800ae88 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ae88:	b580      	push	{r7, lr}
 800ae8a:	b084      	sub	sp, #16
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	3354      	adds	r3, #84	@ 0x54
 800ae94:	4618      	mov	r0, r3
 800ae96:	f002 f8ed 	bl	800d074 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d108      	bne.n	800aeb6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aea8:	4618      	mov	r0, r3
 800aeaa:	f000 ffa3 	bl	800bdf4 <vPortFree>
				vPortFree( pxTCB );
 800aeae:	6878      	ldr	r0, [r7, #4]
 800aeb0:	f000 ffa0 	bl	800bdf4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800aeb4:	e019      	b.n	800aeea <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800aebc:	2b01      	cmp	r3, #1
 800aebe:	d103      	bne.n	800aec8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800aec0:	6878      	ldr	r0, [r7, #4]
 800aec2:	f000 ff97 	bl	800bdf4 <vPortFree>
	}
 800aec6:	e010      	b.n	800aeea <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800aece:	2b02      	cmp	r3, #2
 800aed0:	d00b      	beq.n	800aeea <prvDeleteTCB+0x62>
	__asm volatile
 800aed2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aed6:	f383 8811 	msr	BASEPRI, r3
 800aeda:	f3bf 8f6f 	isb	sy
 800aede:	f3bf 8f4f 	dsb	sy
 800aee2:	60fb      	str	r3, [r7, #12]
}
 800aee4:	bf00      	nop
 800aee6:	bf00      	nop
 800aee8:	e7fd      	b.n	800aee6 <prvDeleteTCB+0x5e>
	}
 800aeea:	bf00      	nop
 800aeec:	3710      	adds	r7, #16
 800aeee:	46bd      	mov	sp, r7
 800aef0:	bd80      	pop	{r7, pc}
	...

0800aef4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800aef4:	b480      	push	{r7}
 800aef6:	b083      	sub	sp, #12
 800aef8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aefa:	4b0c      	ldr	r3, [pc, #48]	@ (800af2c <prvResetNextTaskUnblockTime+0x38>)
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	2b00      	cmp	r3, #0
 800af02:	d104      	bne.n	800af0e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800af04:	4b0a      	ldr	r3, [pc, #40]	@ (800af30 <prvResetNextTaskUnblockTime+0x3c>)
 800af06:	f04f 32ff 	mov.w	r2, #4294967295
 800af0a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800af0c:	e008      	b.n	800af20 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af0e:	4b07      	ldr	r3, [pc, #28]	@ (800af2c <prvResetNextTaskUnblockTime+0x38>)
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	68db      	ldr	r3, [r3, #12]
 800af14:	68db      	ldr	r3, [r3, #12]
 800af16:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	685b      	ldr	r3, [r3, #4]
 800af1c:	4a04      	ldr	r2, [pc, #16]	@ (800af30 <prvResetNextTaskUnblockTime+0x3c>)
 800af1e:	6013      	str	r3, [r2, #0]
}
 800af20:	bf00      	nop
 800af22:	370c      	adds	r7, #12
 800af24:	46bd      	mov	sp, r7
 800af26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2a:	4770      	bx	lr
 800af2c:	20000fac 	.word	0x20000fac
 800af30:	20001014 	.word	0x20001014

0800af34 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800af34:	b480      	push	{r7}
 800af36:	b083      	sub	sp, #12
 800af38:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800af3a:	4b0b      	ldr	r3, [pc, #44]	@ (800af68 <xTaskGetSchedulerState+0x34>)
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d102      	bne.n	800af48 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800af42:	2301      	movs	r3, #1
 800af44:	607b      	str	r3, [r7, #4]
 800af46:	e008      	b.n	800af5a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800af48:	4b08      	ldr	r3, [pc, #32]	@ (800af6c <xTaskGetSchedulerState+0x38>)
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d102      	bne.n	800af56 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800af50:	2302      	movs	r3, #2
 800af52:	607b      	str	r3, [r7, #4]
 800af54:	e001      	b.n	800af5a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800af56:	2300      	movs	r3, #0
 800af58:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800af5a:	687b      	ldr	r3, [r7, #4]
	}
 800af5c:	4618      	mov	r0, r3
 800af5e:	370c      	adds	r7, #12
 800af60:	46bd      	mov	sp, r7
 800af62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af66:	4770      	bx	lr
 800af68:	20001000 	.word	0x20001000
 800af6c:	2000101c 	.word	0x2000101c

0800af70 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800af70:	b580      	push	{r7, lr}
 800af72:	b086      	sub	sp, #24
 800af74:	af00      	add	r7, sp, #0
 800af76:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800af7c:	2300      	movs	r3, #0
 800af7e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d058      	beq.n	800b038 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800af86:	4b2f      	ldr	r3, [pc, #188]	@ (800b044 <xTaskPriorityDisinherit+0xd4>)
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	693a      	ldr	r2, [r7, #16]
 800af8c:	429a      	cmp	r2, r3
 800af8e:	d00b      	beq.n	800afa8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800af90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af94:	f383 8811 	msr	BASEPRI, r3
 800af98:	f3bf 8f6f 	isb	sy
 800af9c:	f3bf 8f4f 	dsb	sy
 800afa0:	60fb      	str	r3, [r7, #12]
}
 800afa2:	bf00      	nop
 800afa4:	bf00      	nop
 800afa6:	e7fd      	b.n	800afa4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800afa8:	693b      	ldr	r3, [r7, #16]
 800afaa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800afac:	2b00      	cmp	r3, #0
 800afae:	d10b      	bne.n	800afc8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800afb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afb4:	f383 8811 	msr	BASEPRI, r3
 800afb8:	f3bf 8f6f 	isb	sy
 800afbc:	f3bf 8f4f 	dsb	sy
 800afc0:	60bb      	str	r3, [r7, #8]
}
 800afc2:	bf00      	nop
 800afc4:	bf00      	nop
 800afc6:	e7fd      	b.n	800afc4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800afc8:	693b      	ldr	r3, [r7, #16]
 800afca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800afcc:	1e5a      	subs	r2, r3, #1
 800afce:	693b      	ldr	r3, [r7, #16]
 800afd0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800afd2:	693b      	ldr	r3, [r7, #16]
 800afd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800afd6:	693b      	ldr	r3, [r7, #16]
 800afd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800afda:	429a      	cmp	r2, r3
 800afdc:	d02c      	beq.n	800b038 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800afde:	693b      	ldr	r3, [r7, #16]
 800afe0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d128      	bne.n	800b038 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800afe6:	693b      	ldr	r3, [r7, #16]
 800afe8:	3304      	adds	r3, #4
 800afea:	4618      	mov	r0, r3
 800afec:	f7fe faf8 	bl	80095e0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800aff0:	693b      	ldr	r3, [r7, #16]
 800aff2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800aff4:	693b      	ldr	r3, [r7, #16]
 800aff6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aff8:	693b      	ldr	r3, [r7, #16]
 800affa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800affc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b000:	693b      	ldr	r3, [r7, #16]
 800b002:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b004:	693b      	ldr	r3, [r7, #16]
 800b006:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b008:	4b0f      	ldr	r3, [pc, #60]	@ (800b048 <xTaskPriorityDisinherit+0xd8>)
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	429a      	cmp	r2, r3
 800b00e:	d903      	bls.n	800b018 <xTaskPriorityDisinherit+0xa8>
 800b010:	693b      	ldr	r3, [r7, #16]
 800b012:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b014:	4a0c      	ldr	r2, [pc, #48]	@ (800b048 <xTaskPriorityDisinherit+0xd8>)
 800b016:	6013      	str	r3, [r2, #0]
 800b018:	693b      	ldr	r3, [r7, #16]
 800b01a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b01c:	4613      	mov	r3, r2
 800b01e:	009b      	lsls	r3, r3, #2
 800b020:	4413      	add	r3, r2
 800b022:	009b      	lsls	r3, r3, #2
 800b024:	4a09      	ldr	r2, [pc, #36]	@ (800b04c <xTaskPriorityDisinherit+0xdc>)
 800b026:	441a      	add	r2, r3
 800b028:	693b      	ldr	r3, [r7, #16]
 800b02a:	3304      	adds	r3, #4
 800b02c:	4619      	mov	r1, r3
 800b02e:	4610      	mov	r0, r2
 800b030:	f7fe fa79 	bl	8009526 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b034:	2301      	movs	r3, #1
 800b036:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b038:	697b      	ldr	r3, [r7, #20]
	}
 800b03a:	4618      	mov	r0, r3
 800b03c:	3718      	adds	r7, #24
 800b03e:	46bd      	mov	sp, r7
 800b040:	bd80      	pop	{r7, pc}
 800b042:	bf00      	nop
 800b044:	20000b20 	.word	0x20000b20
 800b048:	20000ffc 	.word	0x20000ffc
 800b04c:	20000b24 	.word	0x20000b24

0800b050 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b050:	b580      	push	{r7, lr}
 800b052:	b084      	sub	sp, #16
 800b054:	af00      	add	r7, sp, #0
 800b056:	6078      	str	r0, [r7, #4]
 800b058:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b05a:	4b21      	ldr	r3, [pc, #132]	@ (800b0e0 <prvAddCurrentTaskToDelayedList+0x90>)
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b060:	4b20      	ldr	r3, [pc, #128]	@ (800b0e4 <prvAddCurrentTaskToDelayedList+0x94>)
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	3304      	adds	r3, #4
 800b066:	4618      	mov	r0, r3
 800b068:	f7fe faba 	bl	80095e0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b072:	d10a      	bne.n	800b08a <prvAddCurrentTaskToDelayedList+0x3a>
 800b074:	683b      	ldr	r3, [r7, #0]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d007      	beq.n	800b08a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b07a:	4b1a      	ldr	r3, [pc, #104]	@ (800b0e4 <prvAddCurrentTaskToDelayedList+0x94>)
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	3304      	adds	r3, #4
 800b080:	4619      	mov	r1, r3
 800b082:	4819      	ldr	r0, [pc, #100]	@ (800b0e8 <prvAddCurrentTaskToDelayedList+0x98>)
 800b084:	f7fe fa4f 	bl	8009526 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b088:	e026      	b.n	800b0d8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b08a:	68fa      	ldr	r2, [r7, #12]
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	4413      	add	r3, r2
 800b090:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b092:	4b14      	ldr	r3, [pc, #80]	@ (800b0e4 <prvAddCurrentTaskToDelayedList+0x94>)
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	68ba      	ldr	r2, [r7, #8]
 800b098:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b09a:	68ba      	ldr	r2, [r7, #8]
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	429a      	cmp	r2, r3
 800b0a0:	d209      	bcs.n	800b0b6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b0a2:	4b12      	ldr	r3, [pc, #72]	@ (800b0ec <prvAddCurrentTaskToDelayedList+0x9c>)
 800b0a4:	681a      	ldr	r2, [r3, #0]
 800b0a6:	4b0f      	ldr	r3, [pc, #60]	@ (800b0e4 <prvAddCurrentTaskToDelayedList+0x94>)
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	3304      	adds	r3, #4
 800b0ac:	4619      	mov	r1, r3
 800b0ae:	4610      	mov	r0, r2
 800b0b0:	f7fe fa5d 	bl	800956e <vListInsert>
}
 800b0b4:	e010      	b.n	800b0d8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b0b6:	4b0e      	ldr	r3, [pc, #56]	@ (800b0f0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b0b8:	681a      	ldr	r2, [r3, #0]
 800b0ba:	4b0a      	ldr	r3, [pc, #40]	@ (800b0e4 <prvAddCurrentTaskToDelayedList+0x94>)
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	3304      	adds	r3, #4
 800b0c0:	4619      	mov	r1, r3
 800b0c2:	4610      	mov	r0, r2
 800b0c4:	f7fe fa53 	bl	800956e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b0c8:	4b0a      	ldr	r3, [pc, #40]	@ (800b0f4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	68ba      	ldr	r2, [r7, #8]
 800b0ce:	429a      	cmp	r2, r3
 800b0d0:	d202      	bcs.n	800b0d8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b0d2:	4a08      	ldr	r2, [pc, #32]	@ (800b0f4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b0d4:	68bb      	ldr	r3, [r7, #8]
 800b0d6:	6013      	str	r3, [r2, #0]
}
 800b0d8:	bf00      	nop
 800b0da:	3710      	adds	r7, #16
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	bd80      	pop	{r7, pc}
 800b0e0:	20000ff8 	.word	0x20000ff8
 800b0e4:	20000b20 	.word	0x20000b20
 800b0e8:	20000fe0 	.word	0x20000fe0
 800b0ec:	20000fb0 	.word	0x20000fb0
 800b0f0:	20000fac 	.word	0x20000fac
 800b0f4:	20001014 	.word	0x20001014

0800b0f8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b0f8:	b580      	push	{r7, lr}
 800b0fa:	b08a      	sub	sp, #40	@ 0x28
 800b0fc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b0fe:	2300      	movs	r3, #0
 800b100:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b102:	f000 fb13 	bl	800b72c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b106:	4b1d      	ldr	r3, [pc, #116]	@ (800b17c <xTimerCreateTimerTask+0x84>)
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d021      	beq.n	800b152 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b10e:	2300      	movs	r3, #0
 800b110:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b112:	2300      	movs	r3, #0
 800b114:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b116:	1d3a      	adds	r2, r7, #4
 800b118:	f107 0108 	add.w	r1, r7, #8
 800b11c:	f107 030c 	add.w	r3, r7, #12
 800b120:	4618      	mov	r0, r3
 800b122:	f7fe f9b9 	bl	8009498 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b126:	6879      	ldr	r1, [r7, #4]
 800b128:	68bb      	ldr	r3, [r7, #8]
 800b12a:	68fa      	ldr	r2, [r7, #12]
 800b12c:	9202      	str	r2, [sp, #8]
 800b12e:	9301      	str	r3, [sp, #4]
 800b130:	2302      	movs	r3, #2
 800b132:	9300      	str	r3, [sp, #0]
 800b134:	2300      	movs	r3, #0
 800b136:	460a      	mov	r2, r1
 800b138:	4911      	ldr	r1, [pc, #68]	@ (800b180 <xTimerCreateTimerTask+0x88>)
 800b13a:	4812      	ldr	r0, [pc, #72]	@ (800b184 <xTimerCreateTimerTask+0x8c>)
 800b13c:	f7ff f86c 	bl	800a218 <xTaskCreateStatic>
 800b140:	4603      	mov	r3, r0
 800b142:	4a11      	ldr	r2, [pc, #68]	@ (800b188 <xTimerCreateTimerTask+0x90>)
 800b144:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b146:	4b10      	ldr	r3, [pc, #64]	@ (800b188 <xTimerCreateTimerTask+0x90>)
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d001      	beq.n	800b152 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b14e:	2301      	movs	r3, #1
 800b150:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b152:	697b      	ldr	r3, [r7, #20]
 800b154:	2b00      	cmp	r3, #0
 800b156:	d10b      	bne.n	800b170 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800b158:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b15c:	f383 8811 	msr	BASEPRI, r3
 800b160:	f3bf 8f6f 	isb	sy
 800b164:	f3bf 8f4f 	dsb	sy
 800b168:	613b      	str	r3, [r7, #16]
}
 800b16a:	bf00      	nop
 800b16c:	bf00      	nop
 800b16e:	e7fd      	b.n	800b16c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b170:	697b      	ldr	r3, [r7, #20]
}
 800b172:	4618      	mov	r0, r3
 800b174:	3718      	adds	r7, #24
 800b176:	46bd      	mov	sp, r7
 800b178:	bd80      	pop	{r7, pc}
 800b17a:	bf00      	nop
 800b17c:	20001050 	.word	0x20001050
 800b180:	0800f51c 	.word	0x0800f51c
 800b184:	0800b2c5 	.word	0x0800b2c5
 800b188:	20001054 	.word	0x20001054

0800b18c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b18c:	b580      	push	{r7, lr}
 800b18e:	b08a      	sub	sp, #40	@ 0x28
 800b190:	af00      	add	r7, sp, #0
 800b192:	60f8      	str	r0, [r7, #12]
 800b194:	60b9      	str	r1, [r7, #8]
 800b196:	607a      	str	r2, [r7, #4]
 800b198:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b19a:	2300      	movs	r3, #0
 800b19c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d10b      	bne.n	800b1bc <xTimerGenericCommand+0x30>
	__asm volatile
 800b1a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1a8:	f383 8811 	msr	BASEPRI, r3
 800b1ac:	f3bf 8f6f 	isb	sy
 800b1b0:	f3bf 8f4f 	dsb	sy
 800b1b4:	623b      	str	r3, [r7, #32]
}
 800b1b6:	bf00      	nop
 800b1b8:	bf00      	nop
 800b1ba:	e7fd      	b.n	800b1b8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b1bc:	4b19      	ldr	r3, [pc, #100]	@ (800b224 <xTimerGenericCommand+0x98>)
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d02a      	beq.n	800b21a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b1c4:	68bb      	ldr	r3, [r7, #8]
 800b1c6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b1d0:	68bb      	ldr	r3, [r7, #8]
 800b1d2:	2b05      	cmp	r3, #5
 800b1d4:	dc18      	bgt.n	800b208 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b1d6:	f7ff fead 	bl	800af34 <xTaskGetSchedulerState>
 800b1da:	4603      	mov	r3, r0
 800b1dc:	2b02      	cmp	r3, #2
 800b1de:	d109      	bne.n	800b1f4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b1e0:	4b10      	ldr	r3, [pc, #64]	@ (800b224 <xTimerGenericCommand+0x98>)
 800b1e2:	6818      	ldr	r0, [r3, #0]
 800b1e4:	f107 0110 	add.w	r1, r7, #16
 800b1e8:	2300      	movs	r3, #0
 800b1ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b1ec:	f7fe fbd6 	bl	800999c <xQueueGenericSend>
 800b1f0:	6278      	str	r0, [r7, #36]	@ 0x24
 800b1f2:	e012      	b.n	800b21a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b1f4:	4b0b      	ldr	r3, [pc, #44]	@ (800b224 <xTimerGenericCommand+0x98>)
 800b1f6:	6818      	ldr	r0, [r3, #0]
 800b1f8:	f107 0110 	add.w	r1, r7, #16
 800b1fc:	2300      	movs	r3, #0
 800b1fe:	2200      	movs	r2, #0
 800b200:	f7fe fbcc 	bl	800999c <xQueueGenericSend>
 800b204:	6278      	str	r0, [r7, #36]	@ 0x24
 800b206:	e008      	b.n	800b21a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b208:	4b06      	ldr	r3, [pc, #24]	@ (800b224 <xTimerGenericCommand+0x98>)
 800b20a:	6818      	ldr	r0, [r3, #0]
 800b20c:	f107 0110 	add.w	r1, r7, #16
 800b210:	2300      	movs	r3, #0
 800b212:	683a      	ldr	r2, [r7, #0]
 800b214:	f7fe fcc4 	bl	8009ba0 <xQueueGenericSendFromISR>
 800b218:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b21a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b21c:	4618      	mov	r0, r3
 800b21e:	3728      	adds	r7, #40	@ 0x28
 800b220:	46bd      	mov	sp, r7
 800b222:	bd80      	pop	{r7, pc}
 800b224:	20001050 	.word	0x20001050

0800b228 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b228:	b580      	push	{r7, lr}
 800b22a:	b088      	sub	sp, #32
 800b22c:	af02      	add	r7, sp, #8
 800b22e:	6078      	str	r0, [r7, #4]
 800b230:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b232:	4b23      	ldr	r3, [pc, #140]	@ (800b2c0 <prvProcessExpiredTimer+0x98>)
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	68db      	ldr	r3, [r3, #12]
 800b238:	68db      	ldr	r3, [r3, #12]
 800b23a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b23c:	697b      	ldr	r3, [r7, #20]
 800b23e:	3304      	adds	r3, #4
 800b240:	4618      	mov	r0, r3
 800b242:	f7fe f9cd 	bl	80095e0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b246:	697b      	ldr	r3, [r7, #20]
 800b248:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b24c:	f003 0304 	and.w	r3, r3, #4
 800b250:	2b00      	cmp	r3, #0
 800b252:	d023      	beq.n	800b29c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b254:	697b      	ldr	r3, [r7, #20]
 800b256:	699a      	ldr	r2, [r3, #24]
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	18d1      	adds	r1, r2, r3
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	683a      	ldr	r2, [r7, #0]
 800b260:	6978      	ldr	r0, [r7, #20]
 800b262:	f000 f8d5 	bl	800b410 <prvInsertTimerInActiveList>
 800b266:	4603      	mov	r3, r0
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d020      	beq.n	800b2ae <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b26c:	2300      	movs	r3, #0
 800b26e:	9300      	str	r3, [sp, #0]
 800b270:	2300      	movs	r3, #0
 800b272:	687a      	ldr	r2, [r7, #4]
 800b274:	2100      	movs	r1, #0
 800b276:	6978      	ldr	r0, [r7, #20]
 800b278:	f7ff ff88 	bl	800b18c <xTimerGenericCommand>
 800b27c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b27e:	693b      	ldr	r3, [r7, #16]
 800b280:	2b00      	cmp	r3, #0
 800b282:	d114      	bne.n	800b2ae <prvProcessExpiredTimer+0x86>
	__asm volatile
 800b284:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b288:	f383 8811 	msr	BASEPRI, r3
 800b28c:	f3bf 8f6f 	isb	sy
 800b290:	f3bf 8f4f 	dsb	sy
 800b294:	60fb      	str	r3, [r7, #12]
}
 800b296:	bf00      	nop
 800b298:	bf00      	nop
 800b29a:	e7fd      	b.n	800b298 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b29c:	697b      	ldr	r3, [r7, #20]
 800b29e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b2a2:	f023 0301 	bic.w	r3, r3, #1
 800b2a6:	b2da      	uxtb	r2, r3
 800b2a8:	697b      	ldr	r3, [r7, #20]
 800b2aa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b2ae:	697b      	ldr	r3, [r7, #20]
 800b2b0:	6a1b      	ldr	r3, [r3, #32]
 800b2b2:	6978      	ldr	r0, [r7, #20]
 800b2b4:	4798      	blx	r3
}
 800b2b6:	bf00      	nop
 800b2b8:	3718      	adds	r7, #24
 800b2ba:	46bd      	mov	sp, r7
 800b2bc:	bd80      	pop	{r7, pc}
 800b2be:	bf00      	nop
 800b2c0:	20001048 	.word	0x20001048

0800b2c4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b2c4:	b580      	push	{r7, lr}
 800b2c6:	b084      	sub	sp, #16
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b2cc:	f107 0308 	add.w	r3, r7, #8
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	f000 f859 	bl	800b388 <prvGetNextExpireTime>
 800b2d6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b2d8:	68bb      	ldr	r3, [r7, #8]
 800b2da:	4619      	mov	r1, r3
 800b2dc:	68f8      	ldr	r0, [r7, #12]
 800b2de:	f000 f805 	bl	800b2ec <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b2e2:	f000 f8d7 	bl	800b494 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b2e6:	bf00      	nop
 800b2e8:	e7f0      	b.n	800b2cc <prvTimerTask+0x8>
	...

0800b2ec <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b2ec:	b580      	push	{r7, lr}
 800b2ee:	b084      	sub	sp, #16
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	6078      	str	r0, [r7, #4]
 800b2f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b2f6:	f7ff f9f3 	bl	800a6e0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b2fa:	f107 0308 	add.w	r3, r7, #8
 800b2fe:	4618      	mov	r0, r3
 800b300:	f000 f866 	bl	800b3d0 <prvSampleTimeNow>
 800b304:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b306:	68bb      	ldr	r3, [r7, #8]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d130      	bne.n	800b36e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b30c:	683b      	ldr	r3, [r7, #0]
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d10a      	bne.n	800b328 <prvProcessTimerOrBlockTask+0x3c>
 800b312:	687a      	ldr	r2, [r7, #4]
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	429a      	cmp	r2, r3
 800b318:	d806      	bhi.n	800b328 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b31a:	f7ff f9ef 	bl	800a6fc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b31e:	68f9      	ldr	r1, [r7, #12]
 800b320:	6878      	ldr	r0, [r7, #4]
 800b322:	f7ff ff81 	bl	800b228 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b326:	e024      	b.n	800b372 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b328:	683b      	ldr	r3, [r7, #0]
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d008      	beq.n	800b340 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b32e:	4b13      	ldr	r3, [pc, #76]	@ (800b37c <prvProcessTimerOrBlockTask+0x90>)
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	2b00      	cmp	r3, #0
 800b336:	d101      	bne.n	800b33c <prvProcessTimerOrBlockTask+0x50>
 800b338:	2301      	movs	r3, #1
 800b33a:	e000      	b.n	800b33e <prvProcessTimerOrBlockTask+0x52>
 800b33c:	2300      	movs	r3, #0
 800b33e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b340:	4b0f      	ldr	r3, [pc, #60]	@ (800b380 <prvProcessTimerOrBlockTask+0x94>)
 800b342:	6818      	ldr	r0, [r3, #0]
 800b344:	687a      	ldr	r2, [r7, #4]
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	1ad3      	subs	r3, r2, r3
 800b34a:	683a      	ldr	r2, [r7, #0]
 800b34c:	4619      	mov	r1, r3
 800b34e:	f7fe ff2f 	bl	800a1b0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b352:	f7ff f9d3 	bl	800a6fc <xTaskResumeAll>
 800b356:	4603      	mov	r3, r0
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d10a      	bne.n	800b372 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b35c:	4b09      	ldr	r3, [pc, #36]	@ (800b384 <prvProcessTimerOrBlockTask+0x98>)
 800b35e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b362:	601a      	str	r2, [r3, #0]
 800b364:	f3bf 8f4f 	dsb	sy
 800b368:	f3bf 8f6f 	isb	sy
}
 800b36c:	e001      	b.n	800b372 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b36e:	f7ff f9c5 	bl	800a6fc <xTaskResumeAll>
}
 800b372:	bf00      	nop
 800b374:	3710      	adds	r7, #16
 800b376:	46bd      	mov	sp, r7
 800b378:	bd80      	pop	{r7, pc}
 800b37a:	bf00      	nop
 800b37c:	2000104c 	.word	0x2000104c
 800b380:	20001050 	.word	0x20001050
 800b384:	e000ed04 	.word	0xe000ed04

0800b388 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b388:	b480      	push	{r7}
 800b38a:	b085      	sub	sp, #20
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b390:	4b0e      	ldr	r3, [pc, #56]	@ (800b3cc <prvGetNextExpireTime+0x44>)
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d101      	bne.n	800b39e <prvGetNextExpireTime+0x16>
 800b39a:	2201      	movs	r2, #1
 800b39c:	e000      	b.n	800b3a0 <prvGetNextExpireTime+0x18>
 800b39e:	2200      	movs	r2, #0
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d105      	bne.n	800b3b8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b3ac:	4b07      	ldr	r3, [pc, #28]	@ (800b3cc <prvGetNextExpireTime+0x44>)
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	68db      	ldr	r3, [r3, #12]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	60fb      	str	r3, [r7, #12]
 800b3b6:	e001      	b.n	800b3bc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b3bc:	68fb      	ldr	r3, [r7, #12]
}
 800b3be:	4618      	mov	r0, r3
 800b3c0:	3714      	adds	r7, #20
 800b3c2:	46bd      	mov	sp, r7
 800b3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c8:	4770      	bx	lr
 800b3ca:	bf00      	nop
 800b3cc:	20001048 	.word	0x20001048

0800b3d0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b3d0:	b580      	push	{r7, lr}
 800b3d2:	b084      	sub	sp, #16
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b3d8:	f7ff fa2e 	bl	800a838 <xTaskGetTickCount>
 800b3dc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b3de:	4b0b      	ldr	r3, [pc, #44]	@ (800b40c <prvSampleTimeNow+0x3c>)
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	68fa      	ldr	r2, [r7, #12]
 800b3e4:	429a      	cmp	r2, r3
 800b3e6:	d205      	bcs.n	800b3f4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b3e8:	f000 f93a 	bl	800b660 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	2201      	movs	r2, #1
 800b3f0:	601a      	str	r2, [r3, #0]
 800b3f2:	e002      	b.n	800b3fa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	2200      	movs	r2, #0
 800b3f8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b3fa:	4a04      	ldr	r2, [pc, #16]	@ (800b40c <prvSampleTimeNow+0x3c>)
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b400:	68fb      	ldr	r3, [r7, #12]
}
 800b402:	4618      	mov	r0, r3
 800b404:	3710      	adds	r7, #16
 800b406:	46bd      	mov	sp, r7
 800b408:	bd80      	pop	{r7, pc}
 800b40a:	bf00      	nop
 800b40c:	20001058 	.word	0x20001058

0800b410 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b410:	b580      	push	{r7, lr}
 800b412:	b086      	sub	sp, #24
 800b414:	af00      	add	r7, sp, #0
 800b416:	60f8      	str	r0, [r7, #12]
 800b418:	60b9      	str	r1, [r7, #8]
 800b41a:	607a      	str	r2, [r7, #4]
 800b41c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b41e:	2300      	movs	r3, #0
 800b420:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	68ba      	ldr	r2, [r7, #8]
 800b426:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	68fa      	ldr	r2, [r7, #12]
 800b42c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b42e:	68ba      	ldr	r2, [r7, #8]
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	429a      	cmp	r2, r3
 800b434:	d812      	bhi.n	800b45c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b436:	687a      	ldr	r2, [r7, #4]
 800b438:	683b      	ldr	r3, [r7, #0]
 800b43a:	1ad2      	subs	r2, r2, r3
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	699b      	ldr	r3, [r3, #24]
 800b440:	429a      	cmp	r2, r3
 800b442:	d302      	bcc.n	800b44a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b444:	2301      	movs	r3, #1
 800b446:	617b      	str	r3, [r7, #20]
 800b448:	e01b      	b.n	800b482 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b44a:	4b10      	ldr	r3, [pc, #64]	@ (800b48c <prvInsertTimerInActiveList+0x7c>)
 800b44c:	681a      	ldr	r2, [r3, #0]
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	3304      	adds	r3, #4
 800b452:	4619      	mov	r1, r3
 800b454:	4610      	mov	r0, r2
 800b456:	f7fe f88a 	bl	800956e <vListInsert>
 800b45a:	e012      	b.n	800b482 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b45c:	687a      	ldr	r2, [r7, #4]
 800b45e:	683b      	ldr	r3, [r7, #0]
 800b460:	429a      	cmp	r2, r3
 800b462:	d206      	bcs.n	800b472 <prvInsertTimerInActiveList+0x62>
 800b464:	68ba      	ldr	r2, [r7, #8]
 800b466:	683b      	ldr	r3, [r7, #0]
 800b468:	429a      	cmp	r2, r3
 800b46a:	d302      	bcc.n	800b472 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b46c:	2301      	movs	r3, #1
 800b46e:	617b      	str	r3, [r7, #20]
 800b470:	e007      	b.n	800b482 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b472:	4b07      	ldr	r3, [pc, #28]	@ (800b490 <prvInsertTimerInActiveList+0x80>)
 800b474:	681a      	ldr	r2, [r3, #0]
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	3304      	adds	r3, #4
 800b47a:	4619      	mov	r1, r3
 800b47c:	4610      	mov	r0, r2
 800b47e:	f7fe f876 	bl	800956e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b482:	697b      	ldr	r3, [r7, #20]
}
 800b484:	4618      	mov	r0, r3
 800b486:	3718      	adds	r7, #24
 800b488:	46bd      	mov	sp, r7
 800b48a:	bd80      	pop	{r7, pc}
 800b48c:	2000104c 	.word	0x2000104c
 800b490:	20001048 	.word	0x20001048

0800b494 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b494:	b580      	push	{r7, lr}
 800b496:	b08e      	sub	sp, #56	@ 0x38
 800b498:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b49a:	e0ce      	b.n	800b63a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	da19      	bge.n	800b4d6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b4a2:	1d3b      	adds	r3, r7, #4
 800b4a4:	3304      	adds	r3, #4
 800b4a6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b4a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d10b      	bne.n	800b4c6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800b4ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4b2:	f383 8811 	msr	BASEPRI, r3
 800b4b6:	f3bf 8f6f 	isb	sy
 800b4ba:	f3bf 8f4f 	dsb	sy
 800b4be:	61fb      	str	r3, [r7, #28]
}
 800b4c0:	bf00      	nop
 800b4c2:	bf00      	nop
 800b4c4:	e7fd      	b.n	800b4c2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b4c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b4cc:	6850      	ldr	r0, [r2, #4]
 800b4ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b4d0:	6892      	ldr	r2, [r2, #8]
 800b4d2:	4611      	mov	r1, r2
 800b4d4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	f2c0 80ae 	blt.w	800b63a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b4e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4e4:	695b      	ldr	r3, [r3, #20]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d004      	beq.n	800b4f4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b4ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4ec:	3304      	adds	r3, #4
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	f7fe f876 	bl	80095e0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b4f4:	463b      	mov	r3, r7
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	f7ff ff6a 	bl	800b3d0 <prvSampleTimeNow>
 800b4fc:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	2b09      	cmp	r3, #9
 800b502:	f200 8097 	bhi.w	800b634 <prvProcessReceivedCommands+0x1a0>
 800b506:	a201      	add	r2, pc, #4	@ (adr r2, 800b50c <prvProcessReceivedCommands+0x78>)
 800b508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b50c:	0800b535 	.word	0x0800b535
 800b510:	0800b535 	.word	0x0800b535
 800b514:	0800b535 	.word	0x0800b535
 800b518:	0800b5ab 	.word	0x0800b5ab
 800b51c:	0800b5bf 	.word	0x0800b5bf
 800b520:	0800b60b 	.word	0x0800b60b
 800b524:	0800b535 	.word	0x0800b535
 800b528:	0800b535 	.word	0x0800b535
 800b52c:	0800b5ab 	.word	0x0800b5ab
 800b530:	0800b5bf 	.word	0x0800b5bf
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b534:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b536:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b53a:	f043 0301 	orr.w	r3, r3, #1
 800b53e:	b2da      	uxtb	r2, r3
 800b540:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b542:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b546:	68ba      	ldr	r2, [r7, #8]
 800b548:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b54a:	699b      	ldr	r3, [r3, #24]
 800b54c:	18d1      	adds	r1, r2, r3
 800b54e:	68bb      	ldr	r3, [r7, #8]
 800b550:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b552:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b554:	f7ff ff5c 	bl	800b410 <prvInsertTimerInActiveList>
 800b558:	4603      	mov	r3, r0
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d06c      	beq.n	800b638 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b55e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b560:	6a1b      	ldr	r3, [r3, #32]
 800b562:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b564:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b566:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b568:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b56c:	f003 0304 	and.w	r3, r3, #4
 800b570:	2b00      	cmp	r3, #0
 800b572:	d061      	beq.n	800b638 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b574:	68ba      	ldr	r2, [r7, #8]
 800b576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b578:	699b      	ldr	r3, [r3, #24]
 800b57a:	441a      	add	r2, r3
 800b57c:	2300      	movs	r3, #0
 800b57e:	9300      	str	r3, [sp, #0]
 800b580:	2300      	movs	r3, #0
 800b582:	2100      	movs	r1, #0
 800b584:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b586:	f7ff fe01 	bl	800b18c <xTimerGenericCommand>
 800b58a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b58c:	6a3b      	ldr	r3, [r7, #32]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d152      	bne.n	800b638 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800b592:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b596:	f383 8811 	msr	BASEPRI, r3
 800b59a:	f3bf 8f6f 	isb	sy
 800b59e:	f3bf 8f4f 	dsb	sy
 800b5a2:	61bb      	str	r3, [r7, #24]
}
 800b5a4:	bf00      	nop
 800b5a6:	bf00      	nop
 800b5a8:	e7fd      	b.n	800b5a6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b5aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b5b0:	f023 0301 	bic.w	r3, r3, #1
 800b5b4:	b2da      	uxtb	r2, r3
 800b5b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5b8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800b5bc:	e03d      	b.n	800b63a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b5be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5c0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b5c4:	f043 0301 	orr.w	r3, r3, #1
 800b5c8:	b2da      	uxtb	r2, r3
 800b5ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5cc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b5d0:	68ba      	ldr	r2, [r7, #8]
 800b5d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5d4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b5d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5d8:	699b      	ldr	r3, [r3, #24]
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d10b      	bne.n	800b5f6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800b5de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5e2:	f383 8811 	msr	BASEPRI, r3
 800b5e6:	f3bf 8f6f 	isb	sy
 800b5ea:	f3bf 8f4f 	dsb	sy
 800b5ee:	617b      	str	r3, [r7, #20]
}
 800b5f0:	bf00      	nop
 800b5f2:	bf00      	nop
 800b5f4:	e7fd      	b.n	800b5f2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b5f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5f8:	699a      	ldr	r2, [r3, #24]
 800b5fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5fc:	18d1      	adds	r1, r2, r3
 800b5fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b600:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b602:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b604:	f7ff ff04 	bl	800b410 <prvInsertTimerInActiveList>
					break;
 800b608:	e017      	b.n	800b63a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b60a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b60c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b610:	f003 0302 	and.w	r3, r3, #2
 800b614:	2b00      	cmp	r3, #0
 800b616:	d103      	bne.n	800b620 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800b618:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b61a:	f000 fbeb 	bl	800bdf4 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b61e:	e00c      	b.n	800b63a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b620:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b622:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b626:	f023 0301 	bic.w	r3, r3, #1
 800b62a:	b2da      	uxtb	r2, r3
 800b62c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b62e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800b632:	e002      	b.n	800b63a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800b634:	bf00      	nop
 800b636:	e000      	b.n	800b63a <prvProcessReceivedCommands+0x1a6>
					break;
 800b638:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b63a:	4b08      	ldr	r3, [pc, #32]	@ (800b65c <prvProcessReceivedCommands+0x1c8>)
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	1d39      	adds	r1, r7, #4
 800b640:	2200      	movs	r2, #0
 800b642:	4618      	mov	r0, r3
 800b644:	f7fe fb4a 	bl	8009cdc <xQueueReceive>
 800b648:	4603      	mov	r3, r0
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	f47f af26 	bne.w	800b49c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800b650:	bf00      	nop
 800b652:	bf00      	nop
 800b654:	3730      	adds	r7, #48	@ 0x30
 800b656:	46bd      	mov	sp, r7
 800b658:	bd80      	pop	{r7, pc}
 800b65a:	bf00      	nop
 800b65c:	20001050 	.word	0x20001050

0800b660 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b660:	b580      	push	{r7, lr}
 800b662:	b088      	sub	sp, #32
 800b664:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b666:	e049      	b.n	800b6fc <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b668:	4b2e      	ldr	r3, [pc, #184]	@ (800b724 <prvSwitchTimerLists+0xc4>)
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	68db      	ldr	r3, [r3, #12]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b672:	4b2c      	ldr	r3, [pc, #176]	@ (800b724 <prvSwitchTimerLists+0xc4>)
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	68db      	ldr	r3, [r3, #12]
 800b678:	68db      	ldr	r3, [r3, #12]
 800b67a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	3304      	adds	r3, #4
 800b680:	4618      	mov	r0, r3
 800b682:	f7fd ffad 	bl	80095e0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	6a1b      	ldr	r3, [r3, #32]
 800b68a:	68f8      	ldr	r0, [r7, #12]
 800b68c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b694:	f003 0304 	and.w	r3, r3, #4
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d02f      	beq.n	800b6fc <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	699b      	ldr	r3, [r3, #24]
 800b6a0:	693a      	ldr	r2, [r7, #16]
 800b6a2:	4413      	add	r3, r2
 800b6a4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b6a6:	68ba      	ldr	r2, [r7, #8]
 800b6a8:	693b      	ldr	r3, [r7, #16]
 800b6aa:	429a      	cmp	r2, r3
 800b6ac:	d90e      	bls.n	800b6cc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	68ba      	ldr	r2, [r7, #8]
 800b6b2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	68fa      	ldr	r2, [r7, #12]
 800b6b8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b6ba:	4b1a      	ldr	r3, [pc, #104]	@ (800b724 <prvSwitchTimerLists+0xc4>)
 800b6bc:	681a      	ldr	r2, [r3, #0]
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	3304      	adds	r3, #4
 800b6c2:	4619      	mov	r1, r3
 800b6c4:	4610      	mov	r0, r2
 800b6c6:	f7fd ff52 	bl	800956e <vListInsert>
 800b6ca:	e017      	b.n	800b6fc <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b6cc:	2300      	movs	r3, #0
 800b6ce:	9300      	str	r3, [sp, #0]
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	693a      	ldr	r2, [r7, #16]
 800b6d4:	2100      	movs	r1, #0
 800b6d6:	68f8      	ldr	r0, [r7, #12]
 800b6d8:	f7ff fd58 	bl	800b18c <xTimerGenericCommand>
 800b6dc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d10b      	bne.n	800b6fc <prvSwitchTimerLists+0x9c>
	__asm volatile
 800b6e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6e8:	f383 8811 	msr	BASEPRI, r3
 800b6ec:	f3bf 8f6f 	isb	sy
 800b6f0:	f3bf 8f4f 	dsb	sy
 800b6f4:	603b      	str	r3, [r7, #0]
}
 800b6f6:	bf00      	nop
 800b6f8:	bf00      	nop
 800b6fa:	e7fd      	b.n	800b6f8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b6fc:	4b09      	ldr	r3, [pc, #36]	@ (800b724 <prvSwitchTimerLists+0xc4>)
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	2b00      	cmp	r3, #0
 800b704:	d1b0      	bne.n	800b668 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b706:	4b07      	ldr	r3, [pc, #28]	@ (800b724 <prvSwitchTimerLists+0xc4>)
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b70c:	4b06      	ldr	r3, [pc, #24]	@ (800b728 <prvSwitchTimerLists+0xc8>)
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	4a04      	ldr	r2, [pc, #16]	@ (800b724 <prvSwitchTimerLists+0xc4>)
 800b712:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b714:	4a04      	ldr	r2, [pc, #16]	@ (800b728 <prvSwitchTimerLists+0xc8>)
 800b716:	697b      	ldr	r3, [r7, #20]
 800b718:	6013      	str	r3, [r2, #0]
}
 800b71a:	bf00      	nop
 800b71c:	3718      	adds	r7, #24
 800b71e:	46bd      	mov	sp, r7
 800b720:	bd80      	pop	{r7, pc}
 800b722:	bf00      	nop
 800b724:	20001048 	.word	0x20001048
 800b728:	2000104c 	.word	0x2000104c

0800b72c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b72c:	b580      	push	{r7, lr}
 800b72e:	b082      	sub	sp, #8
 800b730:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b732:	f000 f969 	bl	800ba08 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b736:	4b15      	ldr	r3, [pc, #84]	@ (800b78c <prvCheckForValidListAndQueue+0x60>)
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d120      	bne.n	800b780 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b73e:	4814      	ldr	r0, [pc, #80]	@ (800b790 <prvCheckForValidListAndQueue+0x64>)
 800b740:	f7fd fec4 	bl	80094cc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b744:	4813      	ldr	r0, [pc, #76]	@ (800b794 <prvCheckForValidListAndQueue+0x68>)
 800b746:	f7fd fec1 	bl	80094cc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b74a:	4b13      	ldr	r3, [pc, #76]	@ (800b798 <prvCheckForValidListAndQueue+0x6c>)
 800b74c:	4a10      	ldr	r2, [pc, #64]	@ (800b790 <prvCheckForValidListAndQueue+0x64>)
 800b74e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b750:	4b12      	ldr	r3, [pc, #72]	@ (800b79c <prvCheckForValidListAndQueue+0x70>)
 800b752:	4a10      	ldr	r2, [pc, #64]	@ (800b794 <prvCheckForValidListAndQueue+0x68>)
 800b754:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b756:	2300      	movs	r3, #0
 800b758:	9300      	str	r3, [sp, #0]
 800b75a:	4b11      	ldr	r3, [pc, #68]	@ (800b7a0 <prvCheckForValidListAndQueue+0x74>)
 800b75c:	4a11      	ldr	r2, [pc, #68]	@ (800b7a4 <prvCheckForValidListAndQueue+0x78>)
 800b75e:	2110      	movs	r1, #16
 800b760:	200a      	movs	r0, #10
 800b762:	f7fd ffd1 	bl	8009708 <xQueueGenericCreateStatic>
 800b766:	4603      	mov	r3, r0
 800b768:	4a08      	ldr	r2, [pc, #32]	@ (800b78c <prvCheckForValidListAndQueue+0x60>)
 800b76a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b76c:	4b07      	ldr	r3, [pc, #28]	@ (800b78c <prvCheckForValidListAndQueue+0x60>)
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	2b00      	cmp	r3, #0
 800b772:	d005      	beq.n	800b780 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b774:	4b05      	ldr	r3, [pc, #20]	@ (800b78c <prvCheckForValidListAndQueue+0x60>)
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	490b      	ldr	r1, [pc, #44]	@ (800b7a8 <prvCheckForValidListAndQueue+0x7c>)
 800b77a:	4618      	mov	r0, r3
 800b77c:	f7fe fcc4 	bl	800a108 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b780:	f000 f974 	bl	800ba6c <vPortExitCritical>
}
 800b784:	bf00      	nop
 800b786:	46bd      	mov	sp, r7
 800b788:	bd80      	pop	{r7, pc}
 800b78a:	bf00      	nop
 800b78c:	20001050 	.word	0x20001050
 800b790:	20001020 	.word	0x20001020
 800b794:	20001034 	.word	0x20001034
 800b798:	20001048 	.word	0x20001048
 800b79c:	2000104c 	.word	0x2000104c
 800b7a0:	200010fc 	.word	0x200010fc
 800b7a4:	2000105c 	.word	0x2000105c
 800b7a8:	0800f524 	.word	0x0800f524

0800b7ac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b7ac:	b480      	push	{r7}
 800b7ae:	b085      	sub	sp, #20
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	60f8      	str	r0, [r7, #12]
 800b7b4:	60b9      	str	r1, [r7, #8]
 800b7b6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	3b04      	subs	r3, #4
 800b7bc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800b7c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	3b04      	subs	r3, #4
 800b7ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b7cc:	68bb      	ldr	r3, [r7, #8]
 800b7ce:	f023 0201 	bic.w	r2, r3, #1
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	3b04      	subs	r3, #4
 800b7da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b7dc:	4a0c      	ldr	r2, [pc, #48]	@ (800b810 <pxPortInitialiseStack+0x64>)
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	3b14      	subs	r3, #20
 800b7e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b7e8:	687a      	ldr	r2, [r7, #4]
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	3b04      	subs	r3, #4
 800b7f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	f06f 0202 	mvn.w	r2, #2
 800b7fa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	3b20      	subs	r3, #32
 800b800:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b802:	68fb      	ldr	r3, [r7, #12]
}
 800b804:	4618      	mov	r0, r3
 800b806:	3714      	adds	r7, #20
 800b808:	46bd      	mov	sp, r7
 800b80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b80e:	4770      	bx	lr
 800b810:	0800b815 	.word	0x0800b815

0800b814 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b814:	b480      	push	{r7}
 800b816:	b085      	sub	sp, #20
 800b818:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b81a:	2300      	movs	r3, #0
 800b81c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b81e:	4b13      	ldr	r3, [pc, #76]	@ (800b86c <prvTaskExitError+0x58>)
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b826:	d00b      	beq.n	800b840 <prvTaskExitError+0x2c>
	__asm volatile
 800b828:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b82c:	f383 8811 	msr	BASEPRI, r3
 800b830:	f3bf 8f6f 	isb	sy
 800b834:	f3bf 8f4f 	dsb	sy
 800b838:	60fb      	str	r3, [r7, #12]
}
 800b83a:	bf00      	nop
 800b83c:	bf00      	nop
 800b83e:	e7fd      	b.n	800b83c <prvTaskExitError+0x28>
	__asm volatile
 800b840:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b844:	f383 8811 	msr	BASEPRI, r3
 800b848:	f3bf 8f6f 	isb	sy
 800b84c:	f3bf 8f4f 	dsb	sy
 800b850:	60bb      	str	r3, [r7, #8]
}
 800b852:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b854:	bf00      	nop
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d0fc      	beq.n	800b856 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b85c:	bf00      	nop
 800b85e:	bf00      	nop
 800b860:	3714      	adds	r7, #20
 800b862:	46bd      	mov	sp, r7
 800b864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b868:	4770      	bx	lr
 800b86a:	bf00      	nop
 800b86c:	20000028 	.word	0x20000028

0800b870 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b870:	4b07      	ldr	r3, [pc, #28]	@ (800b890 <pxCurrentTCBConst2>)
 800b872:	6819      	ldr	r1, [r3, #0]
 800b874:	6808      	ldr	r0, [r1, #0]
 800b876:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b87a:	f380 8809 	msr	PSP, r0
 800b87e:	f3bf 8f6f 	isb	sy
 800b882:	f04f 0000 	mov.w	r0, #0
 800b886:	f380 8811 	msr	BASEPRI, r0
 800b88a:	4770      	bx	lr
 800b88c:	f3af 8000 	nop.w

0800b890 <pxCurrentTCBConst2>:
 800b890:	20000b20 	.word	0x20000b20
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b894:	bf00      	nop
 800b896:	bf00      	nop

0800b898 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b898:	4808      	ldr	r0, [pc, #32]	@ (800b8bc <prvPortStartFirstTask+0x24>)
 800b89a:	6800      	ldr	r0, [r0, #0]
 800b89c:	6800      	ldr	r0, [r0, #0]
 800b89e:	f380 8808 	msr	MSP, r0
 800b8a2:	f04f 0000 	mov.w	r0, #0
 800b8a6:	f380 8814 	msr	CONTROL, r0
 800b8aa:	b662      	cpsie	i
 800b8ac:	b661      	cpsie	f
 800b8ae:	f3bf 8f4f 	dsb	sy
 800b8b2:	f3bf 8f6f 	isb	sy
 800b8b6:	df00      	svc	0
 800b8b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b8ba:	bf00      	nop
 800b8bc:	e000ed08 	.word	0xe000ed08

0800b8c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b8c0:	b580      	push	{r7, lr}
 800b8c2:	b086      	sub	sp, #24
 800b8c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b8c6:	4b47      	ldr	r3, [pc, #284]	@ (800b9e4 <xPortStartScheduler+0x124>)
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	4a47      	ldr	r2, [pc, #284]	@ (800b9e8 <xPortStartScheduler+0x128>)
 800b8cc:	4293      	cmp	r3, r2
 800b8ce:	d10b      	bne.n	800b8e8 <xPortStartScheduler+0x28>
	__asm volatile
 800b8d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8d4:	f383 8811 	msr	BASEPRI, r3
 800b8d8:	f3bf 8f6f 	isb	sy
 800b8dc:	f3bf 8f4f 	dsb	sy
 800b8e0:	613b      	str	r3, [r7, #16]
}
 800b8e2:	bf00      	nop
 800b8e4:	bf00      	nop
 800b8e6:	e7fd      	b.n	800b8e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b8e8:	4b3e      	ldr	r3, [pc, #248]	@ (800b9e4 <xPortStartScheduler+0x124>)
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	4a3f      	ldr	r2, [pc, #252]	@ (800b9ec <xPortStartScheduler+0x12c>)
 800b8ee:	4293      	cmp	r3, r2
 800b8f0:	d10b      	bne.n	800b90a <xPortStartScheduler+0x4a>
	__asm volatile
 800b8f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8f6:	f383 8811 	msr	BASEPRI, r3
 800b8fa:	f3bf 8f6f 	isb	sy
 800b8fe:	f3bf 8f4f 	dsb	sy
 800b902:	60fb      	str	r3, [r7, #12]
}
 800b904:	bf00      	nop
 800b906:	bf00      	nop
 800b908:	e7fd      	b.n	800b906 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b90a:	4b39      	ldr	r3, [pc, #228]	@ (800b9f0 <xPortStartScheduler+0x130>)
 800b90c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b90e:	697b      	ldr	r3, [r7, #20]
 800b910:	781b      	ldrb	r3, [r3, #0]
 800b912:	b2db      	uxtb	r3, r3
 800b914:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b916:	697b      	ldr	r3, [r7, #20]
 800b918:	22ff      	movs	r2, #255	@ 0xff
 800b91a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b91c:	697b      	ldr	r3, [r7, #20]
 800b91e:	781b      	ldrb	r3, [r3, #0]
 800b920:	b2db      	uxtb	r3, r3
 800b922:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b924:	78fb      	ldrb	r3, [r7, #3]
 800b926:	b2db      	uxtb	r3, r3
 800b928:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b92c:	b2da      	uxtb	r2, r3
 800b92e:	4b31      	ldr	r3, [pc, #196]	@ (800b9f4 <xPortStartScheduler+0x134>)
 800b930:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b932:	4b31      	ldr	r3, [pc, #196]	@ (800b9f8 <xPortStartScheduler+0x138>)
 800b934:	2207      	movs	r2, #7
 800b936:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b938:	e009      	b.n	800b94e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800b93a:	4b2f      	ldr	r3, [pc, #188]	@ (800b9f8 <xPortStartScheduler+0x138>)
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	3b01      	subs	r3, #1
 800b940:	4a2d      	ldr	r2, [pc, #180]	@ (800b9f8 <xPortStartScheduler+0x138>)
 800b942:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b944:	78fb      	ldrb	r3, [r7, #3]
 800b946:	b2db      	uxtb	r3, r3
 800b948:	005b      	lsls	r3, r3, #1
 800b94a:	b2db      	uxtb	r3, r3
 800b94c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b94e:	78fb      	ldrb	r3, [r7, #3]
 800b950:	b2db      	uxtb	r3, r3
 800b952:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b956:	2b80      	cmp	r3, #128	@ 0x80
 800b958:	d0ef      	beq.n	800b93a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b95a:	4b27      	ldr	r3, [pc, #156]	@ (800b9f8 <xPortStartScheduler+0x138>)
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	f1c3 0307 	rsb	r3, r3, #7
 800b962:	2b04      	cmp	r3, #4
 800b964:	d00b      	beq.n	800b97e <xPortStartScheduler+0xbe>
	__asm volatile
 800b966:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b96a:	f383 8811 	msr	BASEPRI, r3
 800b96e:	f3bf 8f6f 	isb	sy
 800b972:	f3bf 8f4f 	dsb	sy
 800b976:	60bb      	str	r3, [r7, #8]
}
 800b978:	bf00      	nop
 800b97a:	bf00      	nop
 800b97c:	e7fd      	b.n	800b97a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b97e:	4b1e      	ldr	r3, [pc, #120]	@ (800b9f8 <xPortStartScheduler+0x138>)
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	021b      	lsls	r3, r3, #8
 800b984:	4a1c      	ldr	r2, [pc, #112]	@ (800b9f8 <xPortStartScheduler+0x138>)
 800b986:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b988:	4b1b      	ldr	r3, [pc, #108]	@ (800b9f8 <xPortStartScheduler+0x138>)
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b990:	4a19      	ldr	r2, [pc, #100]	@ (800b9f8 <xPortStartScheduler+0x138>)
 800b992:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	b2da      	uxtb	r2, r3
 800b998:	697b      	ldr	r3, [r7, #20]
 800b99a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b99c:	4b17      	ldr	r3, [pc, #92]	@ (800b9fc <xPortStartScheduler+0x13c>)
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	4a16      	ldr	r2, [pc, #88]	@ (800b9fc <xPortStartScheduler+0x13c>)
 800b9a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800b9a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b9a8:	4b14      	ldr	r3, [pc, #80]	@ (800b9fc <xPortStartScheduler+0x13c>)
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	4a13      	ldr	r2, [pc, #76]	@ (800b9fc <xPortStartScheduler+0x13c>)
 800b9ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800b9b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b9b4:	f000 f8da 	bl	800bb6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b9b8:	4b11      	ldr	r3, [pc, #68]	@ (800ba00 <xPortStartScheduler+0x140>)
 800b9ba:	2200      	movs	r2, #0
 800b9bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b9be:	f000 f8f9 	bl	800bbb4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b9c2:	4b10      	ldr	r3, [pc, #64]	@ (800ba04 <xPortStartScheduler+0x144>)
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	4a0f      	ldr	r2, [pc, #60]	@ (800ba04 <xPortStartScheduler+0x144>)
 800b9c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800b9cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b9ce:	f7ff ff63 	bl	800b898 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b9d2:	f7ff f80d 	bl	800a9f0 <vTaskSwitchContext>
	prvTaskExitError();
 800b9d6:	f7ff ff1d 	bl	800b814 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b9da:	2300      	movs	r3, #0
}
 800b9dc:	4618      	mov	r0, r3
 800b9de:	3718      	adds	r7, #24
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	bd80      	pop	{r7, pc}
 800b9e4:	e000ed00 	.word	0xe000ed00
 800b9e8:	410fc271 	.word	0x410fc271
 800b9ec:	410fc270 	.word	0x410fc270
 800b9f0:	e000e400 	.word	0xe000e400
 800b9f4:	2000114c 	.word	0x2000114c
 800b9f8:	20001150 	.word	0x20001150
 800b9fc:	e000ed20 	.word	0xe000ed20
 800ba00:	20000028 	.word	0x20000028
 800ba04:	e000ef34 	.word	0xe000ef34

0800ba08 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ba08:	b480      	push	{r7}
 800ba0a:	b083      	sub	sp, #12
 800ba0c:	af00      	add	r7, sp, #0
	__asm volatile
 800ba0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba12:	f383 8811 	msr	BASEPRI, r3
 800ba16:	f3bf 8f6f 	isb	sy
 800ba1a:	f3bf 8f4f 	dsb	sy
 800ba1e:	607b      	str	r3, [r7, #4]
}
 800ba20:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ba22:	4b10      	ldr	r3, [pc, #64]	@ (800ba64 <vPortEnterCritical+0x5c>)
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	3301      	adds	r3, #1
 800ba28:	4a0e      	ldr	r2, [pc, #56]	@ (800ba64 <vPortEnterCritical+0x5c>)
 800ba2a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ba2c:	4b0d      	ldr	r3, [pc, #52]	@ (800ba64 <vPortEnterCritical+0x5c>)
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	2b01      	cmp	r3, #1
 800ba32:	d110      	bne.n	800ba56 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ba34:	4b0c      	ldr	r3, [pc, #48]	@ (800ba68 <vPortEnterCritical+0x60>)
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	b2db      	uxtb	r3, r3
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d00b      	beq.n	800ba56 <vPortEnterCritical+0x4e>
	__asm volatile
 800ba3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba42:	f383 8811 	msr	BASEPRI, r3
 800ba46:	f3bf 8f6f 	isb	sy
 800ba4a:	f3bf 8f4f 	dsb	sy
 800ba4e:	603b      	str	r3, [r7, #0]
}
 800ba50:	bf00      	nop
 800ba52:	bf00      	nop
 800ba54:	e7fd      	b.n	800ba52 <vPortEnterCritical+0x4a>
	}
}
 800ba56:	bf00      	nop
 800ba58:	370c      	adds	r7, #12
 800ba5a:	46bd      	mov	sp, r7
 800ba5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba60:	4770      	bx	lr
 800ba62:	bf00      	nop
 800ba64:	20000028 	.word	0x20000028
 800ba68:	e000ed04 	.word	0xe000ed04

0800ba6c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ba6c:	b480      	push	{r7}
 800ba6e:	b083      	sub	sp, #12
 800ba70:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ba72:	4b12      	ldr	r3, [pc, #72]	@ (800babc <vPortExitCritical+0x50>)
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d10b      	bne.n	800ba92 <vPortExitCritical+0x26>
	__asm volatile
 800ba7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba7e:	f383 8811 	msr	BASEPRI, r3
 800ba82:	f3bf 8f6f 	isb	sy
 800ba86:	f3bf 8f4f 	dsb	sy
 800ba8a:	607b      	str	r3, [r7, #4]
}
 800ba8c:	bf00      	nop
 800ba8e:	bf00      	nop
 800ba90:	e7fd      	b.n	800ba8e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ba92:	4b0a      	ldr	r3, [pc, #40]	@ (800babc <vPortExitCritical+0x50>)
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	3b01      	subs	r3, #1
 800ba98:	4a08      	ldr	r2, [pc, #32]	@ (800babc <vPortExitCritical+0x50>)
 800ba9a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ba9c:	4b07      	ldr	r3, [pc, #28]	@ (800babc <vPortExitCritical+0x50>)
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d105      	bne.n	800bab0 <vPortExitCritical+0x44>
 800baa4:	2300      	movs	r3, #0
 800baa6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800baa8:	683b      	ldr	r3, [r7, #0]
 800baaa:	f383 8811 	msr	BASEPRI, r3
}
 800baae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800bab0:	bf00      	nop
 800bab2:	370c      	adds	r7, #12
 800bab4:	46bd      	mov	sp, r7
 800bab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baba:	4770      	bx	lr
 800babc:	20000028 	.word	0x20000028

0800bac0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bac0:	f3ef 8009 	mrs	r0, PSP
 800bac4:	f3bf 8f6f 	isb	sy
 800bac8:	4b15      	ldr	r3, [pc, #84]	@ (800bb20 <pxCurrentTCBConst>)
 800baca:	681a      	ldr	r2, [r3, #0]
 800bacc:	f01e 0f10 	tst.w	lr, #16
 800bad0:	bf08      	it	eq
 800bad2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bad6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bada:	6010      	str	r0, [r2, #0]
 800badc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bae0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800bae4:	f380 8811 	msr	BASEPRI, r0
 800bae8:	f3bf 8f4f 	dsb	sy
 800baec:	f3bf 8f6f 	isb	sy
 800baf0:	f7fe ff7e 	bl	800a9f0 <vTaskSwitchContext>
 800baf4:	f04f 0000 	mov.w	r0, #0
 800baf8:	f380 8811 	msr	BASEPRI, r0
 800bafc:	bc09      	pop	{r0, r3}
 800bafe:	6819      	ldr	r1, [r3, #0]
 800bb00:	6808      	ldr	r0, [r1, #0]
 800bb02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb06:	f01e 0f10 	tst.w	lr, #16
 800bb0a:	bf08      	it	eq
 800bb0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bb10:	f380 8809 	msr	PSP, r0
 800bb14:	f3bf 8f6f 	isb	sy
 800bb18:	4770      	bx	lr
 800bb1a:	bf00      	nop
 800bb1c:	f3af 8000 	nop.w

0800bb20 <pxCurrentTCBConst>:
 800bb20:	20000b20 	.word	0x20000b20
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bb24:	bf00      	nop
 800bb26:	bf00      	nop

0800bb28 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bb28:	b580      	push	{r7, lr}
 800bb2a:	b082      	sub	sp, #8
 800bb2c:	af00      	add	r7, sp, #0
	__asm volatile
 800bb2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb32:	f383 8811 	msr	BASEPRI, r3
 800bb36:	f3bf 8f6f 	isb	sy
 800bb3a:	f3bf 8f4f 	dsb	sy
 800bb3e:	607b      	str	r3, [r7, #4]
}
 800bb40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bb42:	f7fe fe9b 	bl	800a87c <xTaskIncrementTick>
 800bb46:	4603      	mov	r3, r0
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d003      	beq.n	800bb54 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bb4c:	4b06      	ldr	r3, [pc, #24]	@ (800bb68 <xPortSysTickHandler+0x40>)
 800bb4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bb52:	601a      	str	r2, [r3, #0]
 800bb54:	2300      	movs	r3, #0
 800bb56:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bb58:	683b      	ldr	r3, [r7, #0]
 800bb5a:	f383 8811 	msr	BASEPRI, r3
}
 800bb5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bb60:	bf00      	nop
 800bb62:	3708      	adds	r7, #8
 800bb64:	46bd      	mov	sp, r7
 800bb66:	bd80      	pop	{r7, pc}
 800bb68:	e000ed04 	.word	0xe000ed04

0800bb6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bb6c:	b480      	push	{r7}
 800bb6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bb70:	4b0b      	ldr	r3, [pc, #44]	@ (800bba0 <vPortSetupTimerInterrupt+0x34>)
 800bb72:	2200      	movs	r2, #0
 800bb74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bb76:	4b0b      	ldr	r3, [pc, #44]	@ (800bba4 <vPortSetupTimerInterrupt+0x38>)
 800bb78:	2200      	movs	r2, #0
 800bb7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bb7c:	4b0a      	ldr	r3, [pc, #40]	@ (800bba8 <vPortSetupTimerInterrupt+0x3c>)
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	4a0a      	ldr	r2, [pc, #40]	@ (800bbac <vPortSetupTimerInterrupt+0x40>)
 800bb82:	fba2 2303 	umull	r2, r3, r2, r3
 800bb86:	099b      	lsrs	r3, r3, #6
 800bb88:	4a09      	ldr	r2, [pc, #36]	@ (800bbb0 <vPortSetupTimerInterrupt+0x44>)
 800bb8a:	3b01      	subs	r3, #1
 800bb8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bb8e:	4b04      	ldr	r3, [pc, #16]	@ (800bba0 <vPortSetupTimerInterrupt+0x34>)
 800bb90:	2207      	movs	r2, #7
 800bb92:	601a      	str	r2, [r3, #0]
}
 800bb94:	bf00      	nop
 800bb96:	46bd      	mov	sp, r7
 800bb98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb9c:	4770      	bx	lr
 800bb9e:	bf00      	nop
 800bba0:	e000e010 	.word	0xe000e010
 800bba4:	e000e018 	.word	0xe000e018
 800bba8:	20000018 	.word	0x20000018
 800bbac:	10624dd3 	.word	0x10624dd3
 800bbb0:	e000e014 	.word	0xe000e014

0800bbb4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bbb4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800bbc4 <vPortEnableVFP+0x10>
 800bbb8:	6801      	ldr	r1, [r0, #0]
 800bbba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800bbbe:	6001      	str	r1, [r0, #0]
 800bbc0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bbc2:	bf00      	nop
 800bbc4:	e000ed88 	.word	0xe000ed88

0800bbc8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bbc8:	b480      	push	{r7}
 800bbca:	b085      	sub	sp, #20
 800bbcc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bbce:	f3ef 8305 	mrs	r3, IPSR
 800bbd2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	2b0f      	cmp	r3, #15
 800bbd8:	d915      	bls.n	800bc06 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bbda:	4a18      	ldr	r2, [pc, #96]	@ (800bc3c <vPortValidateInterruptPriority+0x74>)
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	4413      	add	r3, r2
 800bbe0:	781b      	ldrb	r3, [r3, #0]
 800bbe2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bbe4:	4b16      	ldr	r3, [pc, #88]	@ (800bc40 <vPortValidateInterruptPriority+0x78>)
 800bbe6:	781b      	ldrb	r3, [r3, #0]
 800bbe8:	7afa      	ldrb	r2, [r7, #11]
 800bbea:	429a      	cmp	r2, r3
 800bbec:	d20b      	bcs.n	800bc06 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800bbee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbf2:	f383 8811 	msr	BASEPRI, r3
 800bbf6:	f3bf 8f6f 	isb	sy
 800bbfa:	f3bf 8f4f 	dsb	sy
 800bbfe:	607b      	str	r3, [r7, #4]
}
 800bc00:	bf00      	nop
 800bc02:	bf00      	nop
 800bc04:	e7fd      	b.n	800bc02 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bc06:	4b0f      	ldr	r3, [pc, #60]	@ (800bc44 <vPortValidateInterruptPriority+0x7c>)
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800bc0e:	4b0e      	ldr	r3, [pc, #56]	@ (800bc48 <vPortValidateInterruptPriority+0x80>)
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	429a      	cmp	r2, r3
 800bc14:	d90b      	bls.n	800bc2e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800bc16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc1a:	f383 8811 	msr	BASEPRI, r3
 800bc1e:	f3bf 8f6f 	isb	sy
 800bc22:	f3bf 8f4f 	dsb	sy
 800bc26:	603b      	str	r3, [r7, #0]
}
 800bc28:	bf00      	nop
 800bc2a:	bf00      	nop
 800bc2c:	e7fd      	b.n	800bc2a <vPortValidateInterruptPriority+0x62>
	}
 800bc2e:	bf00      	nop
 800bc30:	3714      	adds	r7, #20
 800bc32:	46bd      	mov	sp, r7
 800bc34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc38:	4770      	bx	lr
 800bc3a:	bf00      	nop
 800bc3c:	e000e3f0 	.word	0xe000e3f0
 800bc40:	2000114c 	.word	0x2000114c
 800bc44:	e000ed0c 	.word	0xe000ed0c
 800bc48:	20001150 	.word	0x20001150

0800bc4c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800bc4c:	b580      	push	{r7, lr}
 800bc4e:	b08a      	sub	sp, #40	@ 0x28
 800bc50:	af00      	add	r7, sp, #0
 800bc52:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800bc54:	2300      	movs	r3, #0
 800bc56:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800bc58:	f7fe fd42 	bl	800a6e0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800bc5c:	4b5f      	ldr	r3, [pc, #380]	@ (800bddc <pvPortMalloc+0x190>)
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d101      	bne.n	800bc68 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800bc64:	f000 f92a 	bl	800bebc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bc68:	4b5d      	ldr	r3, [pc, #372]	@ (800bde0 <pvPortMalloc+0x194>)
 800bc6a:	681a      	ldr	r2, [r3, #0]
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	4013      	ands	r3, r2
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	f040 8095 	bne.w	800bda0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d01e      	beq.n	800bcba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800bc7c:	2208      	movs	r2, #8
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	4413      	add	r3, r2
 800bc82:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	f003 0307 	and.w	r3, r3, #7
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d015      	beq.n	800bcba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	f023 0307 	bic.w	r3, r3, #7
 800bc94:	3308      	adds	r3, #8
 800bc96:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	f003 0307 	and.w	r3, r3, #7
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d00b      	beq.n	800bcba <pvPortMalloc+0x6e>
	__asm volatile
 800bca2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bca6:	f383 8811 	msr	BASEPRI, r3
 800bcaa:	f3bf 8f6f 	isb	sy
 800bcae:	f3bf 8f4f 	dsb	sy
 800bcb2:	617b      	str	r3, [r7, #20]
}
 800bcb4:	bf00      	nop
 800bcb6:	bf00      	nop
 800bcb8:	e7fd      	b.n	800bcb6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d06f      	beq.n	800bda0 <pvPortMalloc+0x154>
 800bcc0:	4b48      	ldr	r3, [pc, #288]	@ (800bde4 <pvPortMalloc+0x198>)
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	687a      	ldr	r2, [r7, #4]
 800bcc6:	429a      	cmp	r2, r3
 800bcc8:	d86a      	bhi.n	800bda0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800bcca:	4b47      	ldr	r3, [pc, #284]	@ (800bde8 <pvPortMalloc+0x19c>)
 800bccc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800bcce:	4b46      	ldr	r3, [pc, #280]	@ (800bde8 <pvPortMalloc+0x19c>)
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bcd4:	e004      	b.n	800bce0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800bcd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcd8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800bcda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bce2:	685b      	ldr	r3, [r3, #4]
 800bce4:	687a      	ldr	r2, [r7, #4]
 800bce6:	429a      	cmp	r2, r3
 800bce8:	d903      	bls.n	800bcf2 <pvPortMalloc+0xa6>
 800bcea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d1f1      	bne.n	800bcd6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800bcf2:	4b3a      	ldr	r3, [pc, #232]	@ (800bddc <pvPortMalloc+0x190>)
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bcf8:	429a      	cmp	r2, r3
 800bcfa:	d051      	beq.n	800bda0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bcfc:	6a3b      	ldr	r3, [r7, #32]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	2208      	movs	r2, #8
 800bd02:	4413      	add	r3, r2
 800bd04:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bd06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd08:	681a      	ldr	r2, [r3, #0]
 800bd0a:	6a3b      	ldr	r3, [r7, #32]
 800bd0c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bd0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd10:	685a      	ldr	r2, [r3, #4]
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	1ad2      	subs	r2, r2, r3
 800bd16:	2308      	movs	r3, #8
 800bd18:	005b      	lsls	r3, r3, #1
 800bd1a:	429a      	cmp	r2, r3
 800bd1c:	d920      	bls.n	800bd60 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bd1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	4413      	add	r3, r2
 800bd24:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bd26:	69bb      	ldr	r3, [r7, #24]
 800bd28:	f003 0307 	and.w	r3, r3, #7
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d00b      	beq.n	800bd48 <pvPortMalloc+0xfc>
	__asm volatile
 800bd30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd34:	f383 8811 	msr	BASEPRI, r3
 800bd38:	f3bf 8f6f 	isb	sy
 800bd3c:	f3bf 8f4f 	dsb	sy
 800bd40:	613b      	str	r3, [r7, #16]
}
 800bd42:	bf00      	nop
 800bd44:	bf00      	nop
 800bd46:	e7fd      	b.n	800bd44 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bd48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd4a:	685a      	ldr	r2, [r3, #4]
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	1ad2      	subs	r2, r2, r3
 800bd50:	69bb      	ldr	r3, [r7, #24]
 800bd52:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800bd54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd56:	687a      	ldr	r2, [r7, #4]
 800bd58:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800bd5a:	69b8      	ldr	r0, [r7, #24]
 800bd5c:	f000 f910 	bl	800bf80 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bd60:	4b20      	ldr	r3, [pc, #128]	@ (800bde4 <pvPortMalloc+0x198>)
 800bd62:	681a      	ldr	r2, [r3, #0]
 800bd64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd66:	685b      	ldr	r3, [r3, #4]
 800bd68:	1ad3      	subs	r3, r2, r3
 800bd6a:	4a1e      	ldr	r2, [pc, #120]	@ (800bde4 <pvPortMalloc+0x198>)
 800bd6c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bd6e:	4b1d      	ldr	r3, [pc, #116]	@ (800bde4 <pvPortMalloc+0x198>)
 800bd70:	681a      	ldr	r2, [r3, #0]
 800bd72:	4b1e      	ldr	r3, [pc, #120]	@ (800bdec <pvPortMalloc+0x1a0>)
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	429a      	cmp	r2, r3
 800bd78:	d203      	bcs.n	800bd82 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bd7a:	4b1a      	ldr	r3, [pc, #104]	@ (800bde4 <pvPortMalloc+0x198>)
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	4a1b      	ldr	r2, [pc, #108]	@ (800bdec <pvPortMalloc+0x1a0>)
 800bd80:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800bd82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd84:	685a      	ldr	r2, [r3, #4]
 800bd86:	4b16      	ldr	r3, [pc, #88]	@ (800bde0 <pvPortMalloc+0x194>)
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	431a      	orrs	r2, r3
 800bd8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd8e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800bd90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd92:	2200      	movs	r2, #0
 800bd94:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800bd96:	4b16      	ldr	r3, [pc, #88]	@ (800bdf0 <pvPortMalloc+0x1a4>)
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	3301      	adds	r3, #1
 800bd9c:	4a14      	ldr	r2, [pc, #80]	@ (800bdf0 <pvPortMalloc+0x1a4>)
 800bd9e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800bda0:	f7fe fcac 	bl	800a6fc <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800bda4:	69fb      	ldr	r3, [r7, #28]
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d101      	bne.n	800bdae <pvPortMalloc+0x162>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800bdaa:	f7f8 ffc2 	bl	8004d32 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800bdae:	69fb      	ldr	r3, [r7, #28]
 800bdb0:	f003 0307 	and.w	r3, r3, #7
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d00b      	beq.n	800bdd0 <pvPortMalloc+0x184>
	__asm volatile
 800bdb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdbc:	f383 8811 	msr	BASEPRI, r3
 800bdc0:	f3bf 8f6f 	isb	sy
 800bdc4:	f3bf 8f4f 	dsb	sy
 800bdc8:	60fb      	str	r3, [r7, #12]
}
 800bdca:	bf00      	nop
 800bdcc:	bf00      	nop
 800bdce:	e7fd      	b.n	800bdcc <pvPortMalloc+0x180>
	return pvReturn;
 800bdd0:	69fb      	ldr	r3, [r7, #28]
}
 800bdd2:	4618      	mov	r0, r3
 800bdd4:	3728      	adds	r7, #40	@ 0x28
 800bdd6:	46bd      	mov	sp, r7
 800bdd8:	bd80      	pop	{r7, pc}
 800bdda:	bf00      	nop
 800bddc:	2001115c 	.word	0x2001115c
 800bde0:	20011170 	.word	0x20011170
 800bde4:	20011160 	.word	0x20011160
 800bde8:	20011154 	.word	0x20011154
 800bdec:	20011164 	.word	0x20011164
 800bdf0:	20011168 	.word	0x20011168

0800bdf4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bdf4:	b580      	push	{r7, lr}
 800bdf6:	b086      	sub	sp, #24
 800bdf8:	af00      	add	r7, sp, #0
 800bdfa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	2b00      	cmp	r3, #0
 800be04:	d04f      	beq.n	800bea6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800be06:	2308      	movs	r3, #8
 800be08:	425b      	negs	r3, r3
 800be0a:	697a      	ldr	r2, [r7, #20]
 800be0c:	4413      	add	r3, r2
 800be0e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800be10:	697b      	ldr	r3, [r7, #20]
 800be12:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800be14:	693b      	ldr	r3, [r7, #16]
 800be16:	685a      	ldr	r2, [r3, #4]
 800be18:	4b25      	ldr	r3, [pc, #148]	@ (800beb0 <vPortFree+0xbc>)
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	4013      	ands	r3, r2
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d10b      	bne.n	800be3a <vPortFree+0x46>
	__asm volatile
 800be22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be26:	f383 8811 	msr	BASEPRI, r3
 800be2a:	f3bf 8f6f 	isb	sy
 800be2e:	f3bf 8f4f 	dsb	sy
 800be32:	60fb      	str	r3, [r7, #12]
}
 800be34:	bf00      	nop
 800be36:	bf00      	nop
 800be38:	e7fd      	b.n	800be36 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800be3a:	693b      	ldr	r3, [r7, #16]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d00b      	beq.n	800be5a <vPortFree+0x66>
	__asm volatile
 800be42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be46:	f383 8811 	msr	BASEPRI, r3
 800be4a:	f3bf 8f6f 	isb	sy
 800be4e:	f3bf 8f4f 	dsb	sy
 800be52:	60bb      	str	r3, [r7, #8]
}
 800be54:	bf00      	nop
 800be56:	bf00      	nop
 800be58:	e7fd      	b.n	800be56 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800be5a:	693b      	ldr	r3, [r7, #16]
 800be5c:	685a      	ldr	r2, [r3, #4]
 800be5e:	4b14      	ldr	r3, [pc, #80]	@ (800beb0 <vPortFree+0xbc>)
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	4013      	ands	r3, r2
 800be64:	2b00      	cmp	r3, #0
 800be66:	d01e      	beq.n	800bea6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800be68:	693b      	ldr	r3, [r7, #16]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d11a      	bne.n	800bea6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800be70:	693b      	ldr	r3, [r7, #16]
 800be72:	685a      	ldr	r2, [r3, #4]
 800be74:	4b0e      	ldr	r3, [pc, #56]	@ (800beb0 <vPortFree+0xbc>)
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	43db      	mvns	r3, r3
 800be7a:	401a      	ands	r2, r3
 800be7c:	693b      	ldr	r3, [r7, #16]
 800be7e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800be80:	f7fe fc2e 	bl	800a6e0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800be84:	693b      	ldr	r3, [r7, #16]
 800be86:	685a      	ldr	r2, [r3, #4]
 800be88:	4b0a      	ldr	r3, [pc, #40]	@ (800beb4 <vPortFree+0xc0>)
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	4413      	add	r3, r2
 800be8e:	4a09      	ldr	r2, [pc, #36]	@ (800beb4 <vPortFree+0xc0>)
 800be90:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800be92:	6938      	ldr	r0, [r7, #16]
 800be94:	f000 f874 	bl	800bf80 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800be98:	4b07      	ldr	r3, [pc, #28]	@ (800beb8 <vPortFree+0xc4>)
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	3301      	adds	r3, #1
 800be9e:	4a06      	ldr	r2, [pc, #24]	@ (800beb8 <vPortFree+0xc4>)
 800bea0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800bea2:	f7fe fc2b 	bl	800a6fc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bea6:	bf00      	nop
 800bea8:	3718      	adds	r7, #24
 800beaa:	46bd      	mov	sp, r7
 800beac:	bd80      	pop	{r7, pc}
 800beae:	bf00      	nop
 800beb0:	20011170 	.word	0x20011170
 800beb4:	20011160 	.word	0x20011160
 800beb8:	2001116c 	.word	0x2001116c

0800bebc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bebc:	b480      	push	{r7}
 800bebe:	b085      	sub	sp, #20
 800bec0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bec2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800bec6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bec8:	4b27      	ldr	r3, [pc, #156]	@ (800bf68 <prvHeapInit+0xac>)
 800beca:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	f003 0307 	and.w	r3, r3, #7
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d00c      	beq.n	800bef0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	3307      	adds	r3, #7
 800beda:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	f023 0307 	bic.w	r3, r3, #7
 800bee2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bee4:	68ba      	ldr	r2, [r7, #8]
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	1ad3      	subs	r3, r2, r3
 800beea:	4a1f      	ldr	r2, [pc, #124]	@ (800bf68 <prvHeapInit+0xac>)
 800beec:	4413      	add	r3, r2
 800beee:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bef4:	4a1d      	ldr	r2, [pc, #116]	@ (800bf6c <prvHeapInit+0xb0>)
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800befa:	4b1c      	ldr	r3, [pc, #112]	@ (800bf6c <prvHeapInit+0xb0>)
 800befc:	2200      	movs	r2, #0
 800befe:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	68ba      	ldr	r2, [r7, #8]
 800bf04:	4413      	add	r3, r2
 800bf06:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bf08:	2208      	movs	r2, #8
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	1a9b      	subs	r3, r3, r2
 800bf0e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	f023 0307 	bic.w	r3, r3, #7
 800bf16:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	4a15      	ldr	r2, [pc, #84]	@ (800bf70 <prvHeapInit+0xb4>)
 800bf1c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bf1e:	4b14      	ldr	r3, [pc, #80]	@ (800bf70 <prvHeapInit+0xb4>)
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	2200      	movs	r2, #0
 800bf24:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bf26:	4b12      	ldr	r3, [pc, #72]	@ (800bf70 <prvHeapInit+0xb4>)
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	2200      	movs	r2, #0
 800bf2c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bf32:	683b      	ldr	r3, [r7, #0]
 800bf34:	68fa      	ldr	r2, [r7, #12]
 800bf36:	1ad2      	subs	r2, r2, r3
 800bf38:	683b      	ldr	r3, [r7, #0]
 800bf3a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bf3c:	4b0c      	ldr	r3, [pc, #48]	@ (800bf70 <prvHeapInit+0xb4>)
 800bf3e:	681a      	ldr	r2, [r3, #0]
 800bf40:	683b      	ldr	r3, [r7, #0]
 800bf42:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bf44:	683b      	ldr	r3, [r7, #0]
 800bf46:	685b      	ldr	r3, [r3, #4]
 800bf48:	4a0a      	ldr	r2, [pc, #40]	@ (800bf74 <prvHeapInit+0xb8>)
 800bf4a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bf4c:	683b      	ldr	r3, [r7, #0]
 800bf4e:	685b      	ldr	r3, [r3, #4]
 800bf50:	4a09      	ldr	r2, [pc, #36]	@ (800bf78 <prvHeapInit+0xbc>)
 800bf52:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bf54:	4b09      	ldr	r3, [pc, #36]	@ (800bf7c <prvHeapInit+0xc0>)
 800bf56:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800bf5a:	601a      	str	r2, [r3, #0]
}
 800bf5c:	bf00      	nop
 800bf5e:	3714      	adds	r7, #20
 800bf60:	46bd      	mov	sp, r7
 800bf62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf66:	4770      	bx	lr
 800bf68:	20001154 	.word	0x20001154
 800bf6c:	20011154 	.word	0x20011154
 800bf70:	2001115c 	.word	0x2001115c
 800bf74:	20011164 	.word	0x20011164
 800bf78:	20011160 	.word	0x20011160
 800bf7c:	20011170 	.word	0x20011170

0800bf80 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bf80:	b480      	push	{r7}
 800bf82:	b085      	sub	sp, #20
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bf88:	4b28      	ldr	r3, [pc, #160]	@ (800c02c <prvInsertBlockIntoFreeList+0xac>)
 800bf8a:	60fb      	str	r3, [r7, #12]
 800bf8c:	e002      	b.n	800bf94 <prvInsertBlockIntoFreeList+0x14>
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	60fb      	str	r3, [r7, #12]
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	687a      	ldr	r2, [r7, #4]
 800bf9a:	429a      	cmp	r2, r3
 800bf9c:	d8f7      	bhi.n	800bf8e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	685b      	ldr	r3, [r3, #4]
 800bfa6:	68ba      	ldr	r2, [r7, #8]
 800bfa8:	4413      	add	r3, r2
 800bfaa:	687a      	ldr	r2, [r7, #4]
 800bfac:	429a      	cmp	r2, r3
 800bfae:	d108      	bne.n	800bfc2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	685a      	ldr	r2, [r3, #4]
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	685b      	ldr	r3, [r3, #4]
 800bfb8:	441a      	add	r2, r3
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	685b      	ldr	r3, [r3, #4]
 800bfca:	68ba      	ldr	r2, [r7, #8]
 800bfcc:	441a      	add	r2, r3
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	429a      	cmp	r2, r3
 800bfd4:	d118      	bne.n	800c008 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	681a      	ldr	r2, [r3, #0]
 800bfda:	4b15      	ldr	r3, [pc, #84]	@ (800c030 <prvInsertBlockIntoFreeList+0xb0>)
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	429a      	cmp	r2, r3
 800bfe0:	d00d      	beq.n	800bffe <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	685a      	ldr	r2, [r3, #4]
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	685b      	ldr	r3, [r3, #4]
 800bfec:	441a      	add	r2, r3
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	681a      	ldr	r2, [r3, #0]
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	601a      	str	r2, [r3, #0]
 800bffc:	e008      	b.n	800c010 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bffe:	4b0c      	ldr	r3, [pc, #48]	@ (800c030 <prvInsertBlockIntoFreeList+0xb0>)
 800c000:	681a      	ldr	r2, [r3, #0]
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	601a      	str	r2, [r3, #0]
 800c006:	e003      	b.n	800c010 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	681a      	ldr	r2, [r3, #0]
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c010:	68fa      	ldr	r2, [r7, #12]
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	429a      	cmp	r2, r3
 800c016:	d002      	beq.n	800c01e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	687a      	ldr	r2, [r7, #4]
 800c01c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c01e:	bf00      	nop
 800c020:	3714      	adds	r7, #20
 800c022:	46bd      	mov	sp, r7
 800c024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c028:	4770      	bx	lr
 800c02a:	bf00      	nop
 800c02c:	20011154 	.word	0x20011154
 800c030:	2001115c 	.word	0x2001115c

0800c034 <_ZdlPvj>:
 800c034:	f000 b81a 	b.w	800c06c <_ZdlPv>

0800c038 <_Znwj>:
 800c038:	2801      	cmp	r0, #1
 800c03a:	bf38      	it	cc
 800c03c:	2001      	movcc	r0, #1
 800c03e:	b510      	push	{r4, lr}
 800c040:	4604      	mov	r4, r0
 800c042:	4620      	mov	r0, r4
 800c044:	f000 f824 	bl	800c090 <malloc>
 800c048:	b100      	cbz	r0, 800c04c <_Znwj+0x14>
 800c04a:	bd10      	pop	{r4, pc}
 800c04c:	f000 f810 	bl	800c070 <_ZSt15get_new_handlerv>
 800c050:	b908      	cbnz	r0, 800c056 <_Znwj+0x1e>
 800c052:	f000 f815 	bl	800c080 <abort>
 800c056:	4780      	blx	r0
 800c058:	e7f3      	b.n	800c042 <_Znwj+0xa>

0800c05a <_ZSt17__throw_bad_allocv>:
 800c05a:	b508      	push	{r3, lr}
 800c05c:	f000 f810 	bl	800c080 <abort>

0800c060 <_ZSt28__throw_bad_array_new_lengthv>:
 800c060:	b508      	push	{r3, lr}
 800c062:	f000 f80d 	bl	800c080 <abort>

0800c066 <_ZSt20__throw_length_errorPKc>:
 800c066:	b508      	push	{r3, lr}
 800c068:	f000 f80a 	bl	800c080 <abort>

0800c06c <_ZdlPv>:
 800c06c:	f000 b818 	b.w	800c0a0 <free>

0800c070 <_ZSt15get_new_handlerv>:
 800c070:	4b02      	ldr	r3, [pc, #8]	@ (800c07c <_ZSt15get_new_handlerv+0xc>)
 800c072:	6818      	ldr	r0, [r3, #0]
 800c074:	f3bf 8f5b 	dmb	ish
 800c078:	4770      	bx	lr
 800c07a:	bf00      	nop
 800c07c:	20011174 	.word	0x20011174

0800c080 <abort>:
 800c080:	b508      	push	{r3, lr}
 800c082:	2006      	movs	r0, #6
 800c084:	f000 ffda 	bl	800d03c <raise>
 800c088:	2001      	movs	r0, #1
 800c08a:	f7f9 f9c1 	bl	8005410 <_exit>
	...

0800c090 <malloc>:
 800c090:	4b02      	ldr	r3, [pc, #8]	@ (800c09c <malloc+0xc>)
 800c092:	4601      	mov	r1, r0
 800c094:	6818      	ldr	r0, [r3, #0]
 800c096:	f000 b82d 	b.w	800c0f4 <_malloc_r>
 800c09a:	bf00      	nop
 800c09c:	20000038 	.word	0x20000038

0800c0a0 <free>:
 800c0a0:	4b02      	ldr	r3, [pc, #8]	@ (800c0ac <free+0xc>)
 800c0a2:	4601      	mov	r1, r0
 800c0a4:	6818      	ldr	r0, [r3, #0]
 800c0a6:	f001 bf1f 	b.w	800dee8 <_free_r>
 800c0aa:	bf00      	nop
 800c0ac:	20000038 	.word	0x20000038

0800c0b0 <sbrk_aligned>:
 800c0b0:	b570      	push	{r4, r5, r6, lr}
 800c0b2:	4e0f      	ldr	r6, [pc, #60]	@ (800c0f0 <sbrk_aligned+0x40>)
 800c0b4:	460c      	mov	r4, r1
 800c0b6:	6831      	ldr	r1, [r6, #0]
 800c0b8:	4605      	mov	r5, r0
 800c0ba:	b911      	cbnz	r1, 800c0c2 <sbrk_aligned+0x12>
 800c0bc:	f001 f868 	bl	800d190 <_sbrk_r>
 800c0c0:	6030      	str	r0, [r6, #0]
 800c0c2:	4621      	mov	r1, r4
 800c0c4:	4628      	mov	r0, r5
 800c0c6:	f001 f863 	bl	800d190 <_sbrk_r>
 800c0ca:	1c43      	adds	r3, r0, #1
 800c0cc:	d103      	bne.n	800c0d6 <sbrk_aligned+0x26>
 800c0ce:	f04f 34ff 	mov.w	r4, #4294967295
 800c0d2:	4620      	mov	r0, r4
 800c0d4:	bd70      	pop	{r4, r5, r6, pc}
 800c0d6:	1cc4      	adds	r4, r0, #3
 800c0d8:	f024 0403 	bic.w	r4, r4, #3
 800c0dc:	42a0      	cmp	r0, r4
 800c0de:	d0f8      	beq.n	800c0d2 <sbrk_aligned+0x22>
 800c0e0:	1a21      	subs	r1, r4, r0
 800c0e2:	4628      	mov	r0, r5
 800c0e4:	f001 f854 	bl	800d190 <_sbrk_r>
 800c0e8:	3001      	adds	r0, #1
 800c0ea:	d1f2      	bne.n	800c0d2 <sbrk_aligned+0x22>
 800c0ec:	e7ef      	b.n	800c0ce <sbrk_aligned+0x1e>
 800c0ee:	bf00      	nop
 800c0f0:	20011178 	.word	0x20011178

0800c0f4 <_malloc_r>:
 800c0f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c0f8:	1ccd      	adds	r5, r1, #3
 800c0fa:	f025 0503 	bic.w	r5, r5, #3
 800c0fe:	3508      	adds	r5, #8
 800c100:	2d0c      	cmp	r5, #12
 800c102:	bf38      	it	cc
 800c104:	250c      	movcc	r5, #12
 800c106:	2d00      	cmp	r5, #0
 800c108:	4606      	mov	r6, r0
 800c10a:	db01      	blt.n	800c110 <_malloc_r+0x1c>
 800c10c:	42a9      	cmp	r1, r5
 800c10e:	d904      	bls.n	800c11a <_malloc_r+0x26>
 800c110:	230c      	movs	r3, #12
 800c112:	6033      	str	r3, [r6, #0]
 800c114:	2000      	movs	r0, #0
 800c116:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c11a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c1f0 <_malloc_r+0xfc>
 800c11e:	f000 f869 	bl	800c1f4 <__malloc_lock>
 800c122:	f8d8 3000 	ldr.w	r3, [r8]
 800c126:	461c      	mov	r4, r3
 800c128:	bb44      	cbnz	r4, 800c17c <_malloc_r+0x88>
 800c12a:	4629      	mov	r1, r5
 800c12c:	4630      	mov	r0, r6
 800c12e:	f7ff ffbf 	bl	800c0b0 <sbrk_aligned>
 800c132:	1c43      	adds	r3, r0, #1
 800c134:	4604      	mov	r4, r0
 800c136:	d158      	bne.n	800c1ea <_malloc_r+0xf6>
 800c138:	f8d8 4000 	ldr.w	r4, [r8]
 800c13c:	4627      	mov	r7, r4
 800c13e:	2f00      	cmp	r7, #0
 800c140:	d143      	bne.n	800c1ca <_malloc_r+0xd6>
 800c142:	2c00      	cmp	r4, #0
 800c144:	d04b      	beq.n	800c1de <_malloc_r+0xea>
 800c146:	6823      	ldr	r3, [r4, #0]
 800c148:	4639      	mov	r1, r7
 800c14a:	4630      	mov	r0, r6
 800c14c:	eb04 0903 	add.w	r9, r4, r3
 800c150:	f001 f81e 	bl	800d190 <_sbrk_r>
 800c154:	4581      	cmp	r9, r0
 800c156:	d142      	bne.n	800c1de <_malloc_r+0xea>
 800c158:	6821      	ldr	r1, [r4, #0]
 800c15a:	1a6d      	subs	r5, r5, r1
 800c15c:	4629      	mov	r1, r5
 800c15e:	4630      	mov	r0, r6
 800c160:	f7ff ffa6 	bl	800c0b0 <sbrk_aligned>
 800c164:	3001      	adds	r0, #1
 800c166:	d03a      	beq.n	800c1de <_malloc_r+0xea>
 800c168:	6823      	ldr	r3, [r4, #0]
 800c16a:	442b      	add	r3, r5
 800c16c:	6023      	str	r3, [r4, #0]
 800c16e:	f8d8 3000 	ldr.w	r3, [r8]
 800c172:	685a      	ldr	r2, [r3, #4]
 800c174:	bb62      	cbnz	r2, 800c1d0 <_malloc_r+0xdc>
 800c176:	f8c8 7000 	str.w	r7, [r8]
 800c17a:	e00f      	b.n	800c19c <_malloc_r+0xa8>
 800c17c:	6822      	ldr	r2, [r4, #0]
 800c17e:	1b52      	subs	r2, r2, r5
 800c180:	d420      	bmi.n	800c1c4 <_malloc_r+0xd0>
 800c182:	2a0b      	cmp	r2, #11
 800c184:	d917      	bls.n	800c1b6 <_malloc_r+0xc2>
 800c186:	1961      	adds	r1, r4, r5
 800c188:	42a3      	cmp	r3, r4
 800c18a:	6025      	str	r5, [r4, #0]
 800c18c:	bf18      	it	ne
 800c18e:	6059      	strne	r1, [r3, #4]
 800c190:	6863      	ldr	r3, [r4, #4]
 800c192:	bf08      	it	eq
 800c194:	f8c8 1000 	streq.w	r1, [r8]
 800c198:	5162      	str	r2, [r4, r5]
 800c19a:	604b      	str	r3, [r1, #4]
 800c19c:	4630      	mov	r0, r6
 800c19e:	f000 f82f 	bl	800c200 <__malloc_unlock>
 800c1a2:	f104 000b 	add.w	r0, r4, #11
 800c1a6:	1d23      	adds	r3, r4, #4
 800c1a8:	f020 0007 	bic.w	r0, r0, #7
 800c1ac:	1ac2      	subs	r2, r0, r3
 800c1ae:	bf1c      	itt	ne
 800c1b0:	1a1b      	subne	r3, r3, r0
 800c1b2:	50a3      	strne	r3, [r4, r2]
 800c1b4:	e7af      	b.n	800c116 <_malloc_r+0x22>
 800c1b6:	6862      	ldr	r2, [r4, #4]
 800c1b8:	42a3      	cmp	r3, r4
 800c1ba:	bf0c      	ite	eq
 800c1bc:	f8c8 2000 	streq.w	r2, [r8]
 800c1c0:	605a      	strne	r2, [r3, #4]
 800c1c2:	e7eb      	b.n	800c19c <_malloc_r+0xa8>
 800c1c4:	4623      	mov	r3, r4
 800c1c6:	6864      	ldr	r4, [r4, #4]
 800c1c8:	e7ae      	b.n	800c128 <_malloc_r+0x34>
 800c1ca:	463c      	mov	r4, r7
 800c1cc:	687f      	ldr	r7, [r7, #4]
 800c1ce:	e7b6      	b.n	800c13e <_malloc_r+0x4a>
 800c1d0:	461a      	mov	r2, r3
 800c1d2:	685b      	ldr	r3, [r3, #4]
 800c1d4:	42a3      	cmp	r3, r4
 800c1d6:	d1fb      	bne.n	800c1d0 <_malloc_r+0xdc>
 800c1d8:	2300      	movs	r3, #0
 800c1da:	6053      	str	r3, [r2, #4]
 800c1dc:	e7de      	b.n	800c19c <_malloc_r+0xa8>
 800c1de:	230c      	movs	r3, #12
 800c1e0:	6033      	str	r3, [r6, #0]
 800c1e2:	4630      	mov	r0, r6
 800c1e4:	f000 f80c 	bl	800c200 <__malloc_unlock>
 800c1e8:	e794      	b.n	800c114 <_malloc_r+0x20>
 800c1ea:	6005      	str	r5, [r0, #0]
 800c1ec:	e7d6      	b.n	800c19c <_malloc_r+0xa8>
 800c1ee:	bf00      	nop
 800c1f0:	2001117c 	.word	0x2001117c

0800c1f4 <__malloc_lock>:
 800c1f4:	4801      	ldr	r0, [pc, #4]	@ (800c1fc <__malloc_lock+0x8>)
 800c1f6:	f001 b818 	b.w	800d22a <__retarget_lock_acquire_recursive>
 800c1fa:	bf00      	nop
 800c1fc:	200112c0 	.word	0x200112c0

0800c200 <__malloc_unlock>:
 800c200:	4801      	ldr	r0, [pc, #4]	@ (800c208 <__malloc_unlock+0x8>)
 800c202:	f001 b813 	b.w	800d22c <__retarget_lock_release_recursive>
 800c206:	bf00      	nop
 800c208:	200112c0 	.word	0x200112c0

0800c20c <__cvt>:
 800c20c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c210:	ec57 6b10 	vmov	r6, r7, d0
 800c214:	2f00      	cmp	r7, #0
 800c216:	460c      	mov	r4, r1
 800c218:	4619      	mov	r1, r3
 800c21a:	463b      	mov	r3, r7
 800c21c:	bfbb      	ittet	lt
 800c21e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800c222:	461f      	movlt	r7, r3
 800c224:	2300      	movge	r3, #0
 800c226:	232d      	movlt	r3, #45	@ 0x2d
 800c228:	700b      	strb	r3, [r1, #0]
 800c22a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c22c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800c230:	4691      	mov	r9, r2
 800c232:	f023 0820 	bic.w	r8, r3, #32
 800c236:	bfbc      	itt	lt
 800c238:	4632      	movlt	r2, r6
 800c23a:	4616      	movlt	r6, r2
 800c23c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c240:	d005      	beq.n	800c24e <__cvt+0x42>
 800c242:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800c246:	d100      	bne.n	800c24a <__cvt+0x3e>
 800c248:	3401      	adds	r4, #1
 800c24a:	2102      	movs	r1, #2
 800c24c:	e000      	b.n	800c250 <__cvt+0x44>
 800c24e:	2103      	movs	r1, #3
 800c250:	ab03      	add	r3, sp, #12
 800c252:	9301      	str	r3, [sp, #4]
 800c254:	ab02      	add	r3, sp, #8
 800c256:	9300      	str	r3, [sp, #0]
 800c258:	ec47 6b10 	vmov	d0, r6, r7
 800c25c:	4653      	mov	r3, sl
 800c25e:	4622      	mov	r2, r4
 800c260:	f001 f87e 	bl	800d360 <_dtoa_r>
 800c264:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800c268:	4605      	mov	r5, r0
 800c26a:	d119      	bne.n	800c2a0 <__cvt+0x94>
 800c26c:	f019 0f01 	tst.w	r9, #1
 800c270:	d00e      	beq.n	800c290 <__cvt+0x84>
 800c272:	eb00 0904 	add.w	r9, r0, r4
 800c276:	2200      	movs	r2, #0
 800c278:	2300      	movs	r3, #0
 800c27a:	4630      	mov	r0, r6
 800c27c:	4639      	mov	r1, r7
 800c27e:	f7f4 fbfb 	bl	8000a78 <__aeabi_dcmpeq>
 800c282:	b108      	cbz	r0, 800c288 <__cvt+0x7c>
 800c284:	f8cd 900c 	str.w	r9, [sp, #12]
 800c288:	2230      	movs	r2, #48	@ 0x30
 800c28a:	9b03      	ldr	r3, [sp, #12]
 800c28c:	454b      	cmp	r3, r9
 800c28e:	d31e      	bcc.n	800c2ce <__cvt+0xc2>
 800c290:	9b03      	ldr	r3, [sp, #12]
 800c292:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c294:	1b5b      	subs	r3, r3, r5
 800c296:	4628      	mov	r0, r5
 800c298:	6013      	str	r3, [r2, #0]
 800c29a:	b004      	add	sp, #16
 800c29c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2a0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c2a4:	eb00 0904 	add.w	r9, r0, r4
 800c2a8:	d1e5      	bne.n	800c276 <__cvt+0x6a>
 800c2aa:	7803      	ldrb	r3, [r0, #0]
 800c2ac:	2b30      	cmp	r3, #48	@ 0x30
 800c2ae:	d10a      	bne.n	800c2c6 <__cvt+0xba>
 800c2b0:	2200      	movs	r2, #0
 800c2b2:	2300      	movs	r3, #0
 800c2b4:	4630      	mov	r0, r6
 800c2b6:	4639      	mov	r1, r7
 800c2b8:	f7f4 fbde 	bl	8000a78 <__aeabi_dcmpeq>
 800c2bc:	b918      	cbnz	r0, 800c2c6 <__cvt+0xba>
 800c2be:	f1c4 0401 	rsb	r4, r4, #1
 800c2c2:	f8ca 4000 	str.w	r4, [sl]
 800c2c6:	f8da 3000 	ldr.w	r3, [sl]
 800c2ca:	4499      	add	r9, r3
 800c2cc:	e7d3      	b.n	800c276 <__cvt+0x6a>
 800c2ce:	1c59      	adds	r1, r3, #1
 800c2d0:	9103      	str	r1, [sp, #12]
 800c2d2:	701a      	strb	r2, [r3, #0]
 800c2d4:	e7d9      	b.n	800c28a <__cvt+0x7e>

0800c2d6 <__exponent>:
 800c2d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c2d8:	2900      	cmp	r1, #0
 800c2da:	bfba      	itte	lt
 800c2dc:	4249      	neglt	r1, r1
 800c2de:	232d      	movlt	r3, #45	@ 0x2d
 800c2e0:	232b      	movge	r3, #43	@ 0x2b
 800c2e2:	2909      	cmp	r1, #9
 800c2e4:	7002      	strb	r2, [r0, #0]
 800c2e6:	7043      	strb	r3, [r0, #1]
 800c2e8:	dd29      	ble.n	800c33e <__exponent+0x68>
 800c2ea:	f10d 0307 	add.w	r3, sp, #7
 800c2ee:	461d      	mov	r5, r3
 800c2f0:	270a      	movs	r7, #10
 800c2f2:	461a      	mov	r2, r3
 800c2f4:	fbb1 f6f7 	udiv	r6, r1, r7
 800c2f8:	fb07 1416 	mls	r4, r7, r6, r1
 800c2fc:	3430      	adds	r4, #48	@ 0x30
 800c2fe:	f802 4c01 	strb.w	r4, [r2, #-1]
 800c302:	460c      	mov	r4, r1
 800c304:	2c63      	cmp	r4, #99	@ 0x63
 800c306:	f103 33ff 	add.w	r3, r3, #4294967295
 800c30a:	4631      	mov	r1, r6
 800c30c:	dcf1      	bgt.n	800c2f2 <__exponent+0x1c>
 800c30e:	3130      	adds	r1, #48	@ 0x30
 800c310:	1e94      	subs	r4, r2, #2
 800c312:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c316:	1c41      	adds	r1, r0, #1
 800c318:	4623      	mov	r3, r4
 800c31a:	42ab      	cmp	r3, r5
 800c31c:	d30a      	bcc.n	800c334 <__exponent+0x5e>
 800c31e:	f10d 0309 	add.w	r3, sp, #9
 800c322:	1a9b      	subs	r3, r3, r2
 800c324:	42ac      	cmp	r4, r5
 800c326:	bf88      	it	hi
 800c328:	2300      	movhi	r3, #0
 800c32a:	3302      	adds	r3, #2
 800c32c:	4403      	add	r3, r0
 800c32e:	1a18      	subs	r0, r3, r0
 800c330:	b003      	add	sp, #12
 800c332:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c334:	f813 6b01 	ldrb.w	r6, [r3], #1
 800c338:	f801 6f01 	strb.w	r6, [r1, #1]!
 800c33c:	e7ed      	b.n	800c31a <__exponent+0x44>
 800c33e:	2330      	movs	r3, #48	@ 0x30
 800c340:	3130      	adds	r1, #48	@ 0x30
 800c342:	7083      	strb	r3, [r0, #2]
 800c344:	70c1      	strb	r1, [r0, #3]
 800c346:	1d03      	adds	r3, r0, #4
 800c348:	e7f1      	b.n	800c32e <__exponent+0x58>
	...

0800c34c <_printf_float>:
 800c34c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c350:	b08d      	sub	sp, #52	@ 0x34
 800c352:	460c      	mov	r4, r1
 800c354:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800c358:	4616      	mov	r6, r2
 800c35a:	461f      	mov	r7, r3
 800c35c:	4605      	mov	r5, r0
 800c35e:	f000 fe75 	bl	800d04c <_localeconv_r>
 800c362:	6803      	ldr	r3, [r0, #0]
 800c364:	9304      	str	r3, [sp, #16]
 800c366:	4618      	mov	r0, r3
 800c368:	f7f3 ff5a 	bl	8000220 <strlen>
 800c36c:	2300      	movs	r3, #0
 800c36e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c370:	f8d8 3000 	ldr.w	r3, [r8]
 800c374:	9005      	str	r0, [sp, #20]
 800c376:	3307      	adds	r3, #7
 800c378:	f023 0307 	bic.w	r3, r3, #7
 800c37c:	f103 0208 	add.w	r2, r3, #8
 800c380:	f894 a018 	ldrb.w	sl, [r4, #24]
 800c384:	f8d4 b000 	ldr.w	fp, [r4]
 800c388:	f8c8 2000 	str.w	r2, [r8]
 800c38c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c390:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800c394:	9307      	str	r3, [sp, #28]
 800c396:	f8cd 8018 	str.w	r8, [sp, #24]
 800c39a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800c39e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c3a2:	4b9c      	ldr	r3, [pc, #624]	@ (800c614 <_printf_float+0x2c8>)
 800c3a4:	f04f 32ff 	mov.w	r2, #4294967295
 800c3a8:	f7f4 fb98 	bl	8000adc <__aeabi_dcmpun>
 800c3ac:	bb70      	cbnz	r0, 800c40c <_printf_float+0xc0>
 800c3ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c3b2:	4b98      	ldr	r3, [pc, #608]	@ (800c614 <_printf_float+0x2c8>)
 800c3b4:	f04f 32ff 	mov.w	r2, #4294967295
 800c3b8:	f7f4 fb72 	bl	8000aa0 <__aeabi_dcmple>
 800c3bc:	bb30      	cbnz	r0, 800c40c <_printf_float+0xc0>
 800c3be:	2200      	movs	r2, #0
 800c3c0:	2300      	movs	r3, #0
 800c3c2:	4640      	mov	r0, r8
 800c3c4:	4649      	mov	r1, r9
 800c3c6:	f7f4 fb61 	bl	8000a8c <__aeabi_dcmplt>
 800c3ca:	b110      	cbz	r0, 800c3d2 <_printf_float+0x86>
 800c3cc:	232d      	movs	r3, #45	@ 0x2d
 800c3ce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c3d2:	4a91      	ldr	r2, [pc, #580]	@ (800c618 <_printf_float+0x2cc>)
 800c3d4:	4b91      	ldr	r3, [pc, #580]	@ (800c61c <_printf_float+0x2d0>)
 800c3d6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800c3da:	bf94      	ite	ls
 800c3dc:	4690      	movls	r8, r2
 800c3de:	4698      	movhi	r8, r3
 800c3e0:	2303      	movs	r3, #3
 800c3e2:	6123      	str	r3, [r4, #16]
 800c3e4:	f02b 0304 	bic.w	r3, fp, #4
 800c3e8:	6023      	str	r3, [r4, #0]
 800c3ea:	f04f 0900 	mov.w	r9, #0
 800c3ee:	9700      	str	r7, [sp, #0]
 800c3f0:	4633      	mov	r3, r6
 800c3f2:	aa0b      	add	r2, sp, #44	@ 0x2c
 800c3f4:	4621      	mov	r1, r4
 800c3f6:	4628      	mov	r0, r5
 800c3f8:	f000 f9d2 	bl	800c7a0 <_printf_common>
 800c3fc:	3001      	adds	r0, #1
 800c3fe:	f040 808d 	bne.w	800c51c <_printf_float+0x1d0>
 800c402:	f04f 30ff 	mov.w	r0, #4294967295
 800c406:	b00d      	add	sp, #52	@ 0x34
 800c408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c40c:	4642      	mov	r2, r8
 800c40e:	464b      	mov	r3, r9
 800c410:	4640      	mov	r0, r8
 800c412:	4649      	mov	r1, r9
 800c414:	f7f4 fb62 	bl	8000adc <__aeabi_dcmpun>
 800c418:	b140      	cbz	r0, 800c42c <_printf_float+0xe0>
 800c41a:	464b      	mov	r3, r9
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	bfbc      	itt	lt
 800c420:	232d      	movlt	r3, #45	@ 0x2d
 800c422:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800c426:	4a7e      	ldr	r2, [pc, #504]	@ (800c620 <_printf_float+0x2d4>)
 800c428:	4b7e      	ldr	r3, [pc, #504]	@ (800c624 <_printf_float+0x2d8>)
 800c42a:	e7d4      	b.n	800c3d6 <_printf_float+0x8a>
 800c42c:	6863      	ldr	r3, [r4, #4]
 800c42e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800c432:	9206      	str	r2, [sp, #24]
 800c434:	1c5a      	adds	r2, r3, #1
 800c436:	d13b      	bne.n	800c4b0 <_printf_float+0x164>
 800c438:	2306      	movs	r3, #6
 800c43a:	6063      	str	r3, [r4, #4]
 800c43c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800c440:	2300      	movs	r3, #0
 800c442:	6022      	str	r2, [r4, #0]
 800c444:	9303      	str	r3, [sp, #12]
 800c446:	ab0a      	add	r3, sp, #40	@ 0x28
 800c448:	e9cd a301 	strd	sl, r3, [sp, #4]
 800c44c:	ab09      	add	r3, sp, #36	@ 0x24
 800c44e:	9300      	str	r3, [sp, #0]
 800c450:	6861      	ldr	r1, [r4, #4]
 800c452:	ec49 8b10 	vmov	d0, r8, r9
 800c456:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800c45a:	4628      	mov	r0, r5
 800c45c:	f7ff fed6 	bl	800c20c <__cvt>
 800c460:	9b06      	ldr	r3, [sp, #24]
 800c462:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c464:	2b47      	cmp	r3, #71	@ 0x47
 800c466:	4680      	mov	r8, r0
 800c468:	d129      	bne.n	800c4be <_printf_float+0x172>
 800c46a:	1cc8      	adds	r0, r1, #3
 800c46c:	db02      	blt.n	800c474 <_printf_float+0x128>
 800c46e:	6863      	ldr	r3, [r4, #4]
 800c470:	4299      	cmp	r1, r3
 800c472:	dd41      	ble.n	800c4f8 <_printf_float+0x1ac>
 800c474:	f1aa 0a02 	sub.w	sl, sl, #2
 800c478:	fa5f fa8a 	uxtb.w	sl, sl
 800c47c:	3901      	subs	r1, #1
 800c47e:	4652      	mov	r2, sl
 800c480:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800c484:	9109      	str	r1, [sp, #36]	@ 0x24
 800c486:	f7ff ff26 	bl	800c2d6 <__exponent>
 800c48a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c48c:	1813      	adds	r3, r2, r0
 800c48e:	2a01      	cmp	r2, #1
 800c490:	4681      	mov	r9, r0
 800c492:	6123      	str	r3, [r4, #16]
 800c494:	dc02      	bgt.n	800c49c <_printf_float+0x150>
 800c496:	6822      	ldr	r2, [r4, #0]
 800c498:	07d2      	lsls	r2, r2, #31
 800c49a:	d501      	bpl.n	800c4a0 <_printf_float+0x154>
 800c49c:	3301      	adds	r3, #1
 800c49e:	6123      	str	r3, [r4, #16]
 800c4a0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d0a2      	beq.n	800c3ee <_printf_float+0xa2>
 800c4a8:	232d      	movs	r3, #45	@ 0x2d
 800c4aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c4ae:	e79e      	b.n	800c3ee <_printf_float+0xa2>
 800c4b0:	9a06      	ldr	r2, [sp, #24]
 800c4b2:	2a47      	cmp	r2, #71	@ 0x47
 800c4b4:	d1c2      	bne.n	800c43c <_printf_float+0xf0>
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d1c0      	bne.n	800c43c <_printf_float+0xf0>
 800c4ba:	2301      	movs	r3, #1
 800c4bc:	e7bd      	b.n	800c43a <_printf_float+0xee>
 800c4be:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c4c2:	d9db      	bls.n	800c47c <_printf_float+0x130>
 800c4c4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800c4c8:	d118      	bne.n	800c4fc <_printf_float+0x1b0>
 800c4ca:	2900      	cmp	r1, #0
 800c4cc:	6863      	ldr	r3, [r4, #4]
 800c4ce:	dd0b      	ble.n	800c4e8 <_printf_float+0x19c>
 800c4d0:	6121      	str	r1, [r4, #16]
 800c4d2:	b913      	cbnz	r3, 800c4da <_printf_float+0x18e>
 800c4d4:	6822      	ldr	r2, [r4, #0]
 800c4d6:	07d0      	lsls	r0, r2, #31
 800c4d8:	d502      	bpl.n	800c4e0 <_printf_float+0x194>
 800c4da:	3301      	adds	r3, #1
 800c4dc:	440b      	add	r3, r1
 800c4de:	6123      	str	r3, [r4, #16]
 800c4e0:	65a1      	str	r1, [r4, #88]	@ 0x58
 800c4e2:	f04f 0900 	mov.w	r9, #0
 800c4e6:	e7db      	b.n	800c4a0 <_printf_float+0x154>
 800c4e8:	b913      	cbnz	r3, 800c4f0 <_printf_float+0x1a4>
 800c4ea:	6822      	ldr	r2, [r4, #0]
 800c4ec:	07d2      	lsls	r2, r2, #31
 800c4ee:	d501      	bpl.n	800c4f4 <_printf_float+0x1a8>
 800c4f0:	3302      	adds	r3, #2
 800c4f2:	e7f4      	b.n	800c4de <_printf_float+0x192>
 800c4f4:	2301      	movs	r3, #1
 800c4f6:	e7f2      	b.n	800c4de <_printf_float+0x192>
 800c4f8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800c4fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c4fe:	4299      	cmp	r1, r3
 800c500:	db05      	blt.n	800c50e <_printf_float+0x1c2>
 800c502:	6823      	ldr	r3, [r4, #0]
 800c504:	6121      	str	r1, [r4, #16]
 800c506:	07d8      	lsls	r0, r3, #31
 800c508:	d5ea      	bpl.n	800c4e0 <_printf_float+0x194>
 800c50a:	1c4b      	adds	r3, r1, #1
 800c50c:	e7e7      	b.n	800c4de <_printf_float+0x192>
 800c50e:	2900      	cmp	r1, #0
 800c510:	bfd4      	ite	le
 800c512:	f1c1 0202 	rsble	r2, r1, #2
 800c516:	2201      	movgt	r2, #1
 800c518:	4413      	add	r3, r2
 800c51a:	e7e0      	b.n	800c4de <_printf_float+0x192>
 800c51c:	6823      	ldr	r3, [r4, #0]
 800c51e:	055a      	lsls	r2, r3, #21
 800c520:	d407      	bmi.n	800c532 <_printf_float+0x1e6>
 800c522:	6923      	ldr	r3, [r4, #16]
 800c524:	4642      	mov	r2, r8
 800c526:	4631      	mov	r1, r6
 800c528:	4628      	mov	r0, r5
 800c52a:	47b8      	blx	r7
 800c52c:	3001      	adds	r0, #1
 800c52e:	d12b      	bne.n	800c588 <_printf_float+0x23c>
 800c530:	e767      	b.n	800c402 <_printf_float+0xb6>
 800c532:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c536:	f240 80dd 	bls.w	800c6f4 <_printf_float+0x3a8>
 800c53a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c53e:	2200      	movs	r2, #0
 800c540:	2300      	movs	r3, #0
 800c542:	f7f4 fa99 	bl	8000a78 <__aeabi_dcmpeq>
 800c546:	2800      	cmp	r0, #0
 800c548:	d033      	beq.n	800c5b2 <_printf_float+0x266>
 800c54a:	4a37      	ldr	r2, [pc, #220]	@ (800c628 <_printf_float+0x2dc>)
 800c54c:	2301      	movs	r3, #1
 800c54e:	4631      	mov	r1, r6
 800c550:	4628      	mov	r0, r5
 800c552:	47b8      	blx	r7
 800c554:	3001      	adds	r0, #1
 800c556:	f43f af54 	beq.w	800c402 <_printf_float+0xb6>
 800c55a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800c55e:	4543      	cmp	r3, r8
 800c560:	db02      	blt.n	800c568 <_printf_float+0x21c>
 800c562:	6823      	ldr	r3, [r4, #0]
 800c564:	07d8      	lsls	r0, r3, #31
 800c566:	d50f      	bpl.n	800c588 <_printf_float+0x23c>
 800c568:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c56c:	4631      	mov	r1, r6
 800c56e:	4628      	mov	r0, r5
 800c570:	47b8      	blx	r7
 800c572:	3001      	adds	r0, #1
 800c574:	f43f af45 	beq.w	800c402 <_printf_float+0xb6>
 800c578:	f04f 0900 	mov.w	r9, #0
 800c57c:	f108 38ff 	add.w	r8, r8, #4294967295
 800c580:	f104 0a1a 	add.w	sl, r4, #26
 800c584:	45c8      	cmp	r8, r9
 800c586:	dc09      	bgt.n	800c59c <_printf_float+0x250>
 800c588:	6823      	ldr	r3, [r4, #0]
 800c58a:	079b      	lsls	r3, r3, #30
 800c58c:	f100 8103 	bmi.w	800c796 <_printf_float+0x44a>
 800c590:	68e0      	ldr	r0, [r4, #12]
 800c592:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c594:	4298      	cmp	r0, r3
 800c596:	bfb8      	it	lt
 800c598:	4618      	movlt	r0, r3
 800c59a:	e734      	b.n	800c406 <_printf_float+0xba>
 800c59c:	2301      	movs	r3, #1
 800c59e:	4652      	mov	r2, sl
 800c5a0:	4631      	mov	r1, r6
 800c5a2:	4628      	mov	r0, r5
 800c5a4:	47b8      	blx	r7
 800c5a6:	3001      	adds	r0, #1
 800c5a8:	f43f af2b 	beq.w	800c402 <_printf_float+0xb6>
 800c5ac:	f109 0901 	add.w	r9, r9, #1
 800c5b0:	e7e8      	b.n	800c584 <_printf_float+0x238>
 800c5b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	dc39      	bgt.n	800c62c <_printf_float+0x2e0>
 800c5b8:	4a1b      	ldr	r2, [pc, #108]	@ (800c628 <_printf_float+0x2dc>)
 800c5ba:	2301      	movs	r3, #1
 800c5bc:	4631      	mov	r1, r6
 800c5be:	4628      	mov	r0, r5
 800c5c0:	47b8      	blx	r7
 800c5c2:	3001      	adds	r0, #1
 800c5c4:	f43f af1d 	beq.w	800c402 <_printf_float+0xb6>
 800c5c8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800c5cc:	ea59 0303 	orrs.w	r3, r9, r3
 800c5d0:	d102      	bne.n	800c5d8 <_printf_float+0x28c>
 800c5d2:	6823      	ldr	r3, [r4, #0]
 800c5d4:	07d9      	lsls	r1, r3, #31
 800c5d6:	d5d7      	bpl.n	800c588 <_printf_float+0x23c>
 800c5d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c5dc:	4631      	mov	r1, r6
 800c5de:	4628      	mov	r0, r5
 800c5e0:	47b8      	blx	r7
 800c5e2:	3001      	adds	r0, #1
 800c5e4:	f43f af0d 	beq.w	800c402 <_printf_float+0xb6>
 800c5e8:	f04f 0a00 	mov.w	sl, #0
 800c5ec:	f104 0b1a 	add.w	fp, r4, #26
 800c5f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5f2:	425b      	negs	r3, r3
 800c5f4:	4553      	cmp	r3, sl
 800c5f6:	dc01      	bgt.n	800c5fc <_printf_float+0x2b0>
 800c5f8:	464b      	mov	r3, r9
 800c5fa:	e793      	b.n	800c524 <_printf_float+0x1d8>
 800c5fc:	2301      	movs	r3, #1
 800c5fe:	465a      	mov	r2, fp
 800c600:	4631      	mov	r1, r6
 800c602:	4628      	mov	r0, r5
 800c604:	47b8      	blx	r7
 800c606:	3001      	adds	r0, #1
 800c608:	f43f aefb 	beq.w	800c402 <_printf_float+0xb6>
 800c60c:	f10a 0a01 	add.w	sl, sl, #1
 800c610:	e7ee      	b.n	800c5f0 <_printf_float+0x2a4>
 800c612:	bf00      	nop
 800c614:	7fefffff 	.word	0x7fefffff
 800c618:	080125e0 	.word	0x080125e0
 800c61c:	080125e4 	.word	0x080125e4
 800c620:	080125e8 	.word	0x080125e8
 800c624:	080125ec 	.word	0x080125ec
 800c628:	080125f0 	.word	0x080125f0
 800c62c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c62e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c632:	4553      	cmp	r3, sl
 800c634:	bfa8      	it	ge
 800c636:	4653      	movge	r3, sl
 800c638:	2b00      	cmp	r3, #0
 800c63a:	4699      	mov	r9, r3
 800c63c:	dc36      	bgt.n	800c6ac <_printf_float+0x360>
 800c63e:	f04f 0b00 	mov.w	fp, #0
 800c642:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c646:	f104 021a 	add.w	r2, r4, #26
 800c64a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c64c:	9306      	str	r3, [sp, #24]
 800c64e:	eba3 0309 	sub.w	r3, r3, r9
 800c652:	455b      	cmp	r3, fp
 800c654:	dc31      	bgt.n	800c6ba <_printf_float+0x36e>
 800c656:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c658:	459a      	cmp	sl, r3
 800c65a:	dc3a      	bgt.n	800c6d2 <_printf_float+0x386>
 800c65c:	6823      	ldr	r3, [r4, #0]
 800c65e:	07da      	lsls	r2, r3, #31
 800c660:	d437      	bmi.n	800c6d2 <_printf_float+0x386>
 800c662:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c664:	ebaa 0903 	sub.w	r9, sl, r3
 800c668:	9b06      	ldr	r3, [sp, #24]
 800c66a:	ebaa 0303 	sub.w	r3, sl, r3
 800c66e:	4599      	cmp	r9, r3
 800c670:	bfa8      	it	ge
 800c672:	4699      	movge	r9, r3
 800c674:	f1b9 0f00 	cmp.w	r9, #0
 800c678:	dc33      	bgt.n	800c6e2 <_printf_float+0x396>
 800c67a:	f04f 0800 	mov.w	r8, #0
 800c67e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c682:	f104 0b1a 	add.w	fp, r4, #26
 800c686:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c688:	ebaa 0303 	sub.w	r3, sl, r3
 800c68c:	eba3 0309 	sub.w	r3, r3, r9
 800c690:	4543      	cmp	r3, r8
 800c692:	f77f af79 	ble.w	800c588 <_printf_float+0x23c>
 800c696:	2301      	movs	r3, #1
 800c698:	465a      	mov	r2, fp
 800c69a:	4631      	mov	r1, r6
 800c69c:	4628      	mov	r0, r5
 800c69e:	47b8      	blx	r7
 800c6a0:	3001      	adds	r0, #1
 800c6a2:	f43f aeae 	beq.w	800c402 <_printf_float+0xb6>
 800c6a6:	f108 0801 	add.w	r8, r8, #1
 800c6aa:	e7ec      	b.n	800c686 <_printf_float+0x33a>
 800c6ac:	4642      	mov	r2, r8
 800c6ae:	4631      	mov	r1, r6
 800c6b0:	4628      	mov	r0, r5
 800c6b2:	47b8      	blx	r7
 800c6b4:	3001      	adds	r0, #1
 800c6b6:	d1c2      	bne.n	800c63e <_printf_float+0x2f2>
 800c6b8:	e6a3      	b.n	800c402 <_printf_float+0xb6>
 800c6ba:	2301      	movs	r3, #1
 800c6bc:	4631      	mov	r1, r6
 800c6be:	4628      	mov	r0, r5
 800c6c0:	9206      	str	r2, [sp, #24]
 800c6c2:	47b8      	blx	r7
 800c6c4:	3001      	adds	r0, #1
 800c6c6:	f43f ae9c 	beq.w	800c402 <_printf_float+0xb6>
 800c6ca:	9a06      	ldr	r2, [sp, #24]
 800c6cc:	f10b 0b01 	add.w	fp, fp, #1
 800c6d0:	e7bb      	b.n	800c64a <_printf_float+0x2fe>
 800c6d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c6d6:	4631      	mov	r1, r6
 800c6d8:	4628      	mov	r0, r5
 800c6da:	47b8      	blx	r7
 800c6dc:	3001      	adds	r0, #1
 800c6de:	d1c0      	bne.n	800c662 <_printf_float+0x316>
 800c6e0:	e68f      	b.n	800c402 <_printf_float+0xb6>
 800c6e2:	9a06      	ldr	r2, [sp, #24]
 800c6e4:	464b      	mov	r3, r9
 800c6e6:	4442      	add	r2, r8
 800c6e8:	4631      	mov	r1, r6
 800c6ea:	4628      	mov	r0, r5
 800c6ec:	47b8      	blx	r7
 800c6ee:	3001      	adds	r0, #1
 800c6f0:	d1c3      	bne.n	800c67a <_printf_float+0x32e>
 800c6f2:	e686      	b.n	800c402 <_printf_float+0xb6>
 800c6f4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c6f8:	f1ba 0f01 	cmp.w	sl, #1
 800c6fc:	dc01      	bgt.n	800c702 <_printf_float+0x3b6>
 800c6fe:	07db      	lsls	r3, r3, #31
 800c700:	d536      	bpl.n	800c770 <_printf_float+0x424>
 800c702:	2301      	movs	r3, #1
 800c704:	4642      	mov	r2, r8
 800c706:	4631      	mov	r1, r6
 800c708:	4628      	mov	r0, r5
 800c70a:	47b8      	blx	r7
 800c70c:	3001      	adds	r0, #1
 800c70e:	f43f ae78 	beq.w	800c402 <_printf_float+0xb6>
 800c712:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c716:	4631      	mov	r1, r6
 800c718:	4628      	mov	r0, r5
 800c71a:	47b8      	blx	r7
 800c71c:	3001      	adds	r0, #1
 800c71e:	f43f ae70 	beq.w	800c402 <_printf_float+0xb6>
 800c722:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c726:	2200      	movs	r2, #0
 800c728:	2300      	movs	r3, #0
 800c72a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c72e:	f7f4 f9a3 	bl	8000a78 <__aeabi_dcmpeq>
 800c732:	b9c0      	cbnz	r0, 800c766 <_printf_float+0x41a>
 800c734:	4653      	mov	r3, sl
 800c736:	f108 0201 	add.w	r2, r8, #1
 800c73a:	4631      	mov	r1, r6
 800c73c:	4628      	mov	r0, r5
 800c73e:	47b8      	blx	r7
 800c740:	3001      	adds	r0, #1
 800c742:	d10c      	bne.n	800c75e <_printf_float+0x412>
 800c744:	e65d      	b.n	800c402 <_printf_float+0xb6>
 800c746:	2301      	movs	r3, #1
 800c748:	465a      	mov	r2, fp
 800c74a:	4631      	mov	r1, r6
 800c74c:	4628      	mov	r0, r5
 800c74e:	47b8      	blx	r7
 800c750:	3001      	adds	r0, #1
 800c752:	f43f ae56 	beq.w	800c402 <_printf_float+0xb6>
 800c756:	f108 0801 	add.w	r8, r8, #1
 800c75a:	45d0      	cmp	r8, sl
 800c75c:	dbf3      	blt.n	800c746 <_printf_float+0x3fa>
 800c75e:	464b      	mov	r3, r9
 800c760:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800c764:	e6df      	b.n	800c526 <_printf_float+0x1da>
 800c766:	f04f 0800 	mov.w	r8, #0
 800c76a:	f104 0b1a 	add.w	fp, r4, #26
 800c76e:	e7f4      	b.n	800c75a <_printf_float+0x40e>
 800c770:	2301      	movs	r3, #1
 800c772:	4642      	mov	r2, r8
 800c774:	e7e1      	b.n	800c73a <_printf_float+0x3ee>
 800c776:	2301      	movs	r3, #1
 800c778:	464a      	mov	r2, r9
 800c77a:	4631      	mov	r1, r6
 800c77c:	4628      	mov	r0, r5
 800c77e:	47b8      	blx	r7
 800c780:	3001      	adds	r0, #1
 800c782:	f43f ae3e 	beq.w	800c402 <_printf_float+0xb6>
 800c786:	f108 0801 	add.w	r8, r8, #1
 800c78a:	68e3      	ldr	r3, [r4, #12]
 800c78c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c78e:	1a5b      	subs	r3, r3, r1
 800c790:	4543      	cmp	r3, r8
 800c792:	dcf0      	bgt.n	800c776 <_printf_float+0x42a>
 800c794:	e6fc      	b.n	800c590 <_printf_float+0x244>
 800c796:	f04f 0800 	mov.w	r8, #0
 800c79a:	f104 0919 	add.w	r9, r4, #25
 800c79e:	e7f4      	b.n	800c78a <_printf_float+0x43e>

0800c7a0 <_printf_common>:
 800c7a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c7a4:	4616      	mov	r6, r2
 800c7a6:	4698      	mov	r8, r3
 800c7a8:	688a      	ldr	r2, [r1, #8]
 800c7aa:	690b      	ldr	r3, [r1, #16]
 800c7ac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c7b0:	4293      	cmp	r3, r2
 800c7b2:	bfb8      	it	lt
 800c7b4:	4613      	movlt	r3, r2
 800c7b6:	6033      	str	r3, [r6, #0]
 800c7b8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c7bc:	4607      	mov	r7, r0
 800c7be:	460c      	mov	r4, r1
 800c7c0:	b10a      	cbz	r2, 800c7c6 <_printf_common+0x26>
 800c7c2:	3301      	adds	r3, #1
 800c7c4:	6033      	str	r3, [r6, #0]
 800c7c6:	6823      	ldr	r3, [r4, #0]
 800c7c8:	0699      	lsls	r1, r3, #26
 800c7ca:	bf42      	ittt	mi
 800c7cc:	6833      	ldrmi	r3, [r6, #0]
 800c7ce:	3302      	addmi	r3, #2
 800c7d0:	6033      	strmi	r3, [r6, #0]
 800c7d2:	6825      	ldr	r5, [r4, #0]
 800c7d4:	f015 0506 	ands.w	r5, r5, #6
 800c7d8:	d106      	bne.n	800c7e8 <_printf_common+0x48>
 800c7da:	f104 0a19 	add.w	sl, r4, #25
 800c7de:	68e3      	ldr	r3, [r4, #12]
 800c7e0:	6832      	ldr	r2, [r6, #0]
 800c7e2:	1a9b      	subs	r3, r3, r2
 800c7e4:	42ab      	cmp	r3, r5
 800c7e6:	dc26      	bgt.n	800c836 <_printf_common+0x96>
 800c7e8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c7ec:	6822      	ldr	r2, [r4, #0]
 800c7ee:	3b00      	subs	r3, #0
 800c7f0:	bf18      	it	ne
 800c7f2:	2301      	movne	r3, #1
 800c7f4:	0692      	lsls	r2, r2, #26
 800c7f6:	d42b      	bmi.n	800c850 <_printf_common+0xb0>
 800c7f8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c7fc:	4641      	mov	r1, r8
 800c7fe:	4638      	mov	r0, r7
 800c800:	47c8      	blx	r9
 800c802:	3001      	adds	r0, #1
 800c804:	d01e      	beq.n	800c844 <_printf_common+0xa4>
 800c806:	6823      	ldr	r3, [r4, #0]
 800c808:	6922      	ldr	r2, [r4, #16]
 800c80a:	f003 0306 	and.w	r3, r3, #6
 800c80e:	2b04      	cmp	r3, #4
 800c810:	bf02      	ittt	eq
 800c812:	68e5      	ldreq	r5, [r4, #12]
 800c814:	6833      	ldreq	r3, [r6, #0]
 800c816:	1aed      	subeq	r5, r5, r3
 800c818:	68a3      	ldr	r3, [r4, #8]
 800c81a:	bf0c      	ite	eq
 800c81c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c820:	2500      	movne	r5, #0
 800c822:	4293      	cmp	r3, r2
 800c824:	bfc4      	itt	gt
 800c826:	1a9b      	subgt	r3, r3, r2
 800c828:	18ed      	addgt	r5, r5, r3
 800c82a:	2600      	movs	r6, #0
 800c82c:	341a      	adds	r4, #26
 800c82e:	42b5      	cmp	r5, r6
 800c830:	d11a      	bne.n	800c868 <_printf_common+0xc8>
 800c832:	2000      	movs	r0, #0
 800c834:	e008      	b.n	800c848 <_printf_common+0xa8>
 800c836:	2301      	movs	r3, #1
 800c838:	4652      	mov	r2, sl
 800c83a:	4641      	mov	r1, r8
 800c83c:	4638      	mov	r0, r7
 800c83e:	47c8      	blx	r9
 800c840:	3001      	adds	r0, #1
 800c842:	d103      	bne.n	800c84c <_printf_common+0xac>
 800c844:	f04f 30ff 	mov.w	r0, #4294967295
 800c848:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c84c:	3501      	adds	r5, #1
 800c84e:	e7c6      	b.n	800c7de <_printf_common+0x3e>
 800c850:	18e1      	adds	r1, r4, r3
 800c852:	1c5a      	adds	r2, r3, #1
 800c854:	2030      	movs	r0, #48	@ 0x30
 800c856:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c85a:	4422      	add	r2, r4
 800c85c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c860:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c864:	3302      	adds	r3, #2
 800c866:	e7c7      	b.n	800c7f8 <_printf_common+0x58>
 800c868:	2301      	movs	r3, #1
 800c86a:	4622      	mov	r2, r4
 800c86c:	4641      	mov	r1, r8
 800c86e:	4638      	mov	r0, r7
 800c870:	47c8      	blx	r9
 800c872:	3001      	adds	r0, #1
 800c874:	d0e6      	beq.n	800c844 <_printf_common+0xa4>
 800c876:	3601      	adds	r6, #1
 800c878:	e7d9      	b.n	800c82e <_printf_common+0x8e>
	...

0800c87c <_printf_i>:
 800c87c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c880:	7e0f      	ldrb	r7, [r1, #24]
 800c882:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c884:	2f78      	cmp	r7, #120	@ 0x78
 800c886:	4691      	mov	r9, r2
 800c888:	4680      	mov	r8, r0
 800c88a:	460c      	mov	r4, r1
 800c88c:	469a      	mov	sl, r3
 800c88e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c892:	d807      	bhi.n	800c8a4 <_printf_i+0x28>
 800c894:	2f62      	cmp	r7, #98	@ 0x62
 800c896:	d80a      	bhi.n	800c8ae <_printf_i+0x32>
 800c898:	2f00      	cmp	r7, #0
 800c89a:	f000 80d2 	beq.w	800ca42 <_printf_i+0x1c6>
 800c89e:	2f58      	cmp	r7, #88	@ 0x58
 800c8a0:	f000 80b9 	beq.w	800ca16 <_printf_i+0x19a>
 800c8a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c8a8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c8ac:	e03a      	b.n	800c924 <_printf_i+0xa8>
 800c8ae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c8b2:	2b15      	cmp	r3, #21
 800c8b4:	d8f6      	bhi.n	800c8a4 <_printf_i+0x28>
 800c8b6:	a101      	add	r1, pc, #4	@ (adr r1, 800c8bc <_printf_i+0x40>)
 800c8b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c8bc:	0800c915 	.word	0x0800c915
 800c8c0:	0800c929 	.word	0x0800c929
 800c8c4:	0800c8a5 	.word	0x0800c8a5
 800c8c8:	0800c8a5 	.word	0x0800c8a5
 800c8cc:	0800c8a5 	.word	0x0800c8a5
 800c8d0:	0800c8a5 	.word	0x0800c8a5
 800c8d4:	0800c929 	.word	0x0800c929
 800c8d8:	0800c8a5 	.word	0x0800c8a5
 800c8dc:	0800c8a5 	.word	0x0800c8a5
 800c8e0:	0800c8a5 	.word	0x0800c8a5
 800c8e4:	0800c8a5 	.word	0x0800c8a5
 800c8e8:	0800ca29 	.word	0x0800ca29
 800c8ec:	0800c953 	.word	0x0800c953
 800c8f0:	0800c9e3 	.word	0x0800c9e3
 800c8f4:	0800c8a5 	.word	0x0800c8a5
 800c8f8:	0800c8a5 	.word	0x0800c8a5
 800c8fc:	0800ca4b 	.word	0x0800ca4b
 800c900:	0800c8a5 	.word	0x0800c8a5
 800c904:	0800c953 	.word	0x0800c953
 800c908:	0800c8a5 	.word	0x0800c8a5
 800c90c:	0800c8a5 	.word	0x0800c8a5
 800c910:	0800c9eb 	.word	0x0800c9eb
 800c914:	6833      	ldr	r3, [r6, #0]
 800c916:	1d1a      	adds	r2, r3, #4
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	6032      	str	r2, [r6, #0]
 800c91c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c920:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c924:	2301      	movs	r3, #1
 800c926:	e09d      	b.n	800ca64 <_printf_i+0x1e8>
 800c928:	6833      	ldr	r3, [r6, #0]
 800c92a:	6820      	ldr	r0, [r4, #0]
 800c92c:	1d19      	adds	r1, r3, #4
 800c92e:	6031      	str	r1, [r6, #0]
 800c930:	0606      	lsls	r6, r0, #24
 800c932:	d501      	bpl.n	800c938 <_printf_i+0xbc>
 800c934:	681d      	ldr	r5, [r3, #0]
 800c936:	e003      	b.n	800c940 <_printf_i+0xc4>
 800c938:	0645      	lsls	r5, r0, #25
 800c93a:	d5fb      	bpl.n	800c934 <_printf_i+0xb8>
 800c93c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c940:	2d00      	cmp	r5, #0
 800c942:	da03      	bge.n	800c94c <_printf_i+0xd0>
 800c944:	232d      	movs	r3, #45	@ 0x2d
 800c946:	426d      	negs	r5, r5
 800c948:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c94c:	4859      	ldr	r0, [pc, #356]	@ (800cab4 <_printf_i+0x238>)
 800c94e:	230a      	movs	r3, #10
 800c950:	e011      	b.n	800c976 <_printf_i+0xfa>
 800c952:	6821      	ldr	r1, [r4, #0]
 800c954:	6833      	ldr	r3, [r6, #0]
 800c956:	0608      	lsls	r0, r1, #24
 800c958:	f853 5b04 	ldr.w	r5, [r3], #4
 800c95c:	d402      	bmi.n	800c964 <_printf_i+0xe8>
 800c95e:	0649      	lsls	r1, r1, #25
 800c960:	bf48      	it	mi
 800c962:	b2ad      	uxthmi	r5, r5
 800c964:	2f6f      	cmp	r7, #111	@ 0x6f
 800c966:	4853      	ldr	r0, [pc, #332]	@ (800cab4 <_printf_i+0x238>)
 800c968:	6033      	str	r3, [r6, #0]
 800c96a:	bf14      	ite	ne
 800c96c:	230a      	movne	r3, #10
 800c96e:	2308      	moveq	r3, #8
 800c970:	2100      	movs	r1, #0
 800c972:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c976:	6866      	ldr	r6, [r4, #4]
 800c978:	60a6      	str	r6, [r4, #8]
 800c97a:	2e00      	cmp	r6, #0
 800c97c:	bfa2      	ittt	ge
 800c97e:	6821      	ldrge	r1, [r4, #0]
 800c980:	f021 0104 	bicge.w	r1, r1, #4
 800c984:	6021      	strge	r1, [r4, #0]
 800c986:	b90d      	cbnz	r5, 800c98c <_printf_i+0x110>
 800c988:	2e00      	cmp	r6, #0
 800c98a:	d04b      	beq.n	800ca24 <_printf_i+0x1a8>
 800c98c:	4616      	mov	r6, r2
 800c98e:	fbb5 f1f3 	udiv	r1, r5, r3
 800c992:	fb03 5711 	mls	r7, r3, r1, r5
 800c996:	5dc7      	ldrb	r7, [r0, r7]
 800c998:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c99c:	462f      	mov	r7, r5
 800c99e:	42bb      	cmp	r3, r7
 800c9a0:	460d      	mov	r5, r1
 800c9a2:	d9f4      	bls.n	800c98e <_printf_i+0x112>
 800c9a4:	2b08      	cmp	r3, #8
 800c9a6:	d10b      	bne.n	800c9c0 <_printf_i+0x144>
 800c9a8:	6823      	ldr	r3, [r4, #0]
 800c9aa:	07df      	lsls	r7, r3, #31
 800c9ac:	d508      	bpl.n	800c9c0 <_printf_i+0x144>
 800c9ae:	6923      	ldr	r3, [r4, #16]
 800c9b0:	6861      	ldr	r1, [r4, #4]
 800c9b2:	4299      	cmp	r1, r3
 800c9b4:	bfde      	ittt	le
 800c9b6:	2330      	movle	r3, #48	@ 0x30
 800c9b8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c9bc:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c9c0:	1b92      	subs	r2, r2, r6
 800c9c2:	6122      	str	r2, [r4, #16]
 800c9c4:	f8cd a000 	str.w	sl, [sp]
 800c9c8:	464b      	mov	r3, r9
 800c9ca:	aa03      	add	r2, sp, #12
 800c9cc:	4621      	mov	r1, r4
 800c9ce:	4640      	mov	r0, r8
 800c9d0:	f7ff fee6 	bl	800c7a0 <_printf_common>
 800c9d4:	3001      	adds	r0, #1
 800c9d6:	d14a      	bne.n	800ca6e <_printf_i+0x1f2>
 800c9d8:	f04f 30ff 	mov.w	r0, #4294967295
 800c9dc:	b004      	add	sp, #16
 800c9de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9e2:	6823      	ldr	r3, [r4, #0]
 800c9e4:	f043 0320 	orr.w	r3, r3, #32
 800c9e8:	6023      	str	r3, [r4, #0]
 800c9ea:	4833      	ldr	r0, [pc, #204]	@ (800cab8 <_printf_i+0x23c>)
 800c9ec:	2778      	movs	r7, #120	@ 0x78
 800c9ee:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c9f2:	6823      	ldr	r3, [r4, #0]
 800c9f4:	6831      	ldr	r1, [r6, #0]
 800c9f6:	061f      	lsls	r7, r3, #24
 800c9f8:	f851 5b04 	ldr.w	r5, [r1], #4
 800c9fc:	d402      	bmi.n	800ca04 <_printf_i+0x188>
 800c9fe:	065f      	lsls	r7, r3, #25
 800ca00:	bf48      	it	mi
 800ca02:	b2ad      	uxthmi	r5, r5
 800ca04:	6031      	str	r1, [r6, #0]
 800ca06:	07d9      	lsls	r1, r3, #31
 800ca08:	bf44      	itt	mi
 800ca0a:	f043 0320 	orrmi.w	r3, r3, #32
 800ca0e:	6023      	strmi	r3, [r4, #0]
 800ca10:	b11d      	cbz	r5, 800ca1a <_printf_i+0x19e>
 800ca12:	2310      	movs	r3, #16
 800ca14:	e7ac      	b.n	800c970 <_printf_i+0xf4>
 800ca16:	4827      	ldr	r0, [pc, #156]	@ (800cab4 <_printf_i+0x238>)
 800ca18:	e7e9      	b.n	800c9ee <_printf_i+0x172>
 800ca1a:	6823      	ldr	r3, [r4, #0]
 800ca1c:	f023 0320 	bic.w	r3, r3, #32
 800ca20:	6023      	str	r3, [r4, #0]
 800ca22:	e7f6      	b.n	800ca12 <_printf_i+0x196>
 800ca24:	4616      	mov	r6, r2
 800ca26:	e7bd      	b.n	800c9a4 <_printf_i+0x128>
 800ca28:	6833      	ldr	r3, [r6, #0]
 800ca2a:	6825      	ldr	r5, [r4, #0]
 800ca2c:	6961      	ldr	r1, [r4, #20]
 800ca2e:	1d18      	adds	r0, r3, #4
 800ca30:	6030      	str	r0, [r6, #0]
 800ca32:	062e      	lsls	r6, r5, #24
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	d501      	bpl.n	800ca3c <_printf_i+0x1c0>
 800ca38:	6019      	str	r1, [r3, #0]
 800ca3a:	e002      	b.n	800ca42 <_printf_i+0x1c6>
 800ca3c:	0668      	lsls	r0, r5, #25
 800ca3e:	d5fb      	bpl.n	800ca38 <_printf_i+0x1bc>
 800ca40:	8019      	strh	r1, [r3, #0]
 800ca42:	2300      	movs	r3, #0
 800ca44:	6123      	str	r3, [r4, #16]
 800ca46:	4616      	mov	r6, r2
 800ca48:	e7bc      	b.n	800c9c4 <_printf_i+0x148>
 800ca4a:	6833      	ldr	r3, [r6, #0]
 800ca4c:	1d1a      	adds	r2, r3, #4
 800ca4e:	6032      	str	r2, [r6, #0]
 800ca50:	681e      	ldr	r6, [r3, #0]
 800ca52:	6862      	ldr	r2, [r4, #4]
 800ca54:	2100      	movs	r1, #0
 800ca56:	4630      	mov	r0, r6
 800ca58:	f7f3 fb92 	bl	8000180 <memchr>
 800ca5c:	b108      	cbz	r0, 800ca62 <_printf_i+0x1e6>
 800ca5e:	1b80      	subs	r0, r0, r6
 800ca60:	6060      	str	r0, [r4, #4]
 800ca62:	6863      	ldr	r3, [r4, #4]
 800ca64:	6123      	str	r3, [r4, #16]
 800ca66:	2300      	movs	r3, #0
 800ca68:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ca6c:	e7aa      	b.n	800c9c4 <_printf_i+0x148>
 800ca6e:	6923      	ldr	r3, [r4, #16]
 800ca70:	4632      	mov	r2, r6
 800ca72:	4649      	mov	r1, r9
 800ca74:	4640      	mov	r0, r8
 800ca76:	47d0      	blx	sl
 800ca78:	3001      	adds	r0, #1
 800ca7a:	d0ad      	beq.n	800c9d8 <_printf_i+0x15c>
 800ca7c:	6823      	ldr	r3, [r4, #0]
 800ca7e:	079b      	lsls	r3, r3, #30
 800ca80:	d413      	bmi.n	800caaa <_printf_i+0x22e>
 800ca82:	68e0      	ldr	r0, [r4, #12]
 800ca84:	9b03      	ldr	r3, [sp, #12]
 800ca86:	4298      	cmp	r0, r3
 800ca88:	bfb8      	it	lt
 800ca8a:	4618      	movlt	r0, r3
 800ca8c:	e7a6      	b.n	800c9dc <_printf_i+0x160>
 800ca8e:	2301      	movs	r3, #1
 800ca90:	4632      	mov	r2, r6
 800ca92:	4649      	mov	r1, r9
 800ca94:	4640      	mov	r0, r8
 800ca96:	47d0      	blx	sl
 800ca98:	3001      	adds	r0, #1
 800ca9a:	d09d      	beq.n	800c9d8 <_printf_i+0x15c>
 800ca9c:	3501      	adds	r5, #1
 800ca9e:	68e3      	ldr	r3, [r4, #12]
 800caa0:	9903      	ldr	r1, [sp, #12]
 800caa2:	1a5b      	subs	r3, r3, r1
 800caa4:	42ab      	cmp	r3, r5
 800caa6:	dcf2      	bgt.n	800ca8e <_printf_i+0x212>
 800caa8:	e7eb      	b.n	800ca82 <_printf_i+0x206>
 800caaa:	2500      	movs	r5, #0
 800caac:	f104 0619 	add.w	r6, r4, #25
 800cab0:	e7f5      	b.n	800ca9e <_printf_i+0x222>
 800cab2:	bf00      	nop
 800cab4:	080125f2 	.word	0x080125f2
 800cab8:	08012603 	.word	0x08012603

0800cabc <std>:
 800cabc:	2300      	movs	r3, #0
 800cabe:	b510      	push	{r4, lr}
 800cac0:	4604      	mov	r4, r0
 800cac2:	e9c0 3300 	strd	r3, r3, [r0]
 800cac6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800caca:	6083      	str	r3, [r0, #8]
 800cacc:	8181      	strh	r1, [r0, #12]
 800cace:	6643      	str	r3, [r0, #100]	@ 0x64
 800cad0:	81c2      	strh	r2, [r0, #14]
 800cad2:	6183      	str	r3, [r0, #24]
 800cad4:	4619      	mov	r1, r3
 800cad6:	2208      	movs	r2, #8
 800cad8:	305c      	adds	r0, #92	@ 0x5c
 800cada:	f000 fa7f 	bl	800cfdc <memset>
 800cade:	4b0d      	ldr	r3, [pc, #52]	@ (800cb14 <std+0x58>)
 800cae0:	6263      	str	r3, [r4, #36]	@ 0x24
 800cae2:	4b0d      	ldr	r3, [pc, #52]	@ (800cb18 <std+0x5c>)
 800cae4:	62a3      	str	r3, [r4, #40]	@ 0x28
 800cae6:	4b0d      	ldr	r3, [pc, #52]	@ (800cb1c <std+0x60>)
 800cae8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800caea:	4b0d      	ldr	r3, [pc, #52]	@ (800cb20 <std+0x64>)
 800caec:	6323      	str	r3, [r4, #48]	@ 0x30
 800caee:	4b0d      	ldr	r3, [pc, #52]	@ (800cb24 <std+0x68>)
 800caf0:	6224      	str	r4, [r4, #32]
 800caf2:	429c      	cmp	r4, r3
 800caf4:	d006      	beq.n	800cb04 <std+0x48>
 800caf6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800cafa:	4294      	cmp	r4, r2
 800cafc:	d002      	beq.n	800cb04 <std+0x48>
 800cafe:	33d0      	adds	r3, #208	@ 0xd0
 800cb00:	429c      	cmp	r4, r3
 800cb02:	d105      	bne.n	800cb10 <std+0x54>
 800cb04:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800cb08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cb0c:	f000 bb8c 	b.w	800d228 <__retarget_lock_init_recursive>
 800cb10:	bd10      	pop	{r4, pc}
 800cb12:	bf00      	nop
 800cb14:	0800cd89 	.word	0x0800cd89
 800cb18:	0800cdab 	.word	0x0800cdab
 800cb1c:	0800cde3 	.word	0x0800cde3
 800cb20:	0800ce07 	.word	0x0800ce07
 800cb24:	20011180 	.word	0x20011180

0800cb28 <stdio_exit_handler>:
 800cb28:	4a02      	ldr	r2, [pc, #8]	@ (800cb34 <stdio_exit_handler+0xc>)
 800cb2a:	4903      	ldr	r1, [pc, #12]	@ (800cb38 <stdio_exit_handler+0x10>)
 800cb2c:	4803      	ldr	r0, [pc, #12]	@ (800cb3c <stdio_exit_handler+0x14>)
 800cb2e:	f000 b869 	b.w	800cc04 <_fwalk_sglue>
 800cb32:	bf00      	nop
 800cb34:	2000002c 	.word	0x2000002c
 800cb38:	0800ecbd 	.word	0x0800ecbd
 800cb3c:	2000003c 	.word	0x2000003c

0800cb40 <cleanup_stdio>:
 800cb40:	6841      	ldr	r1, [r0, #4]
 800cb42:	4b0c      	ldr	r3, [pc, #48]	@ (800cb74 <cleanup_stdio+0x34>)
 800cb44:	4299      	cmp	r1, r3
 800cb46:	b510      	push	{r4, lr}
 800cb48:	4604      	mov	r4, r0
 800cb4a:	d001      	beq.n	800cb50 <cleanup_stdio+0x10>
 800cb4c:	f002 f8b6 	bl	800ecbc <_fflush_r>
 800cb50:	68a1      	ldr	r1, [r4, #8]
 800cb52:	4b09      	ldr	r3, [pc, #36]	@ (800cb78 <cleanup_stdio+0x38>)
 800cb54:	4299      	cmp	r1, r3
 800cb56:	d002      	beq.n	800cb5e <cleanup_stdio+0x1e>
 800cb58:	4620      	mov	r0, r4
 800cb5a:	f002 f8af 	bl	800ecbc <_fflush_r>
 800cb5e:	68e1      	ldr	r1, [r4, #12]
 800cb60:	4b06      	ldr	r3, [pc, #24]	@ (800cb7c <cleanup_stdio+0x3c>)
 800cb62:	4299      	cmp	r1, r3
 800cb64:	d004      	beq.n	800cb70 <cleanup_stdio+0x30>
 800cb66:	4620      	mov	r0, r4
 800cb68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cb6c:	f002 b8a6 	b.w	800ecbc <_fflush_r>
 800cb70:	bd10      	pop	{r4, pc}
 800cb72:	bf00      	nop
 800cb74:	20011180 	.word	0x20011180
 800cb78:	200111e8 	.word	0x200111e8
 800cb7c:	20011250 	.word	0x20011250

0800cb80 <global_stdio_init.part.0>:
 800cb80:	b510      	push	{r4, lr}
 800cb82:	4b0b      	ldr	r3, [pc, #44]	@ (800cbb0 <global_stdio_init.part.0+0x30>)
 800cb84:	4c0b      	ldr	r4, [pc, #44]	@ (800cbb4 <global_stdio_init.part.0+0x34>)
 800cb86:	4a0c      	ldr	r2, [pc, #48]	@ (800cbb8 <global_stdio_init.part.0+0x38>)
 800cb88:	601a      	str	r2, [r3, #0]
 800cb8a:	4620      	mov	r0, r4
 800cb8c:	2200      	movs	r2, #0
 800cb8e:	2104      	movs	r1, #4
 800cb90:	f7ff ff94 	bl	800cabc <std>
 800cb94:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800cb98:	2201      	movs	r2, #1
 800cb9a:	2109      	movs	r1, #9
 800cb9c:	f7ff ff8e 	bl	800cabc <std>
 800cba0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800cba4:	2202      	movs	r2, #2
 800cba6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cbaa:	2112      	movs	r1, #18
 800cbac:	f7ff bf86 	b.w	800cabc <std>
 800cbb0:	200112b8 	.word	0x200112b8
 800cbb4:	20011180 	.word	0x20011180
 800cbb8:	0800cb29 	.word	0x0800cb29

0800cbbc <__sfp_lock_acquire>:
 800cbbc:	4801      	ldr	r0, [pc, #4]	@ (800cbc4 <__sfp_lock_acquire+0x8>)
 800cbbe:	f000 bb34 	b.w	800d22a <__retarget_lock_acquire_recursive>
 800cbc2:	bf00      	nop
 800cbc4:	200112c1 	.word	0x200112c1

0800cbc8 <__sfp_lock_release>:
 800cbc8:	4801      	ldr	r0, [pc, #4]	@ (800cbd0 <__sfp_lock_release+0x8>)
 800cbca:	f000 bb2f 	b.w	800d22c <__retarget_lock_release_recursive>
 800cbce:	bf00      	nop
 800cbd0:	200112c1 	.word	0x200112c1

0800cbd4 <__sinit>:
 800cbd4:	b510      	push	{r4, lr}
 800cbd6:	4604      	mov	r4, r0
 800cbd8:	f7ff fff0 	bl	800cbbc <__sfp_lock_acquire>
 800cbdc:	6a23      	ldr	r3, [r4, #32]
 800cbde:	b11b      	cbz	r3, 800cbe8 <__sinit+0x14>
 800cbe0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cbe4:	f7ff bff0 	b.w	800cbc8 <__sfp_lock_release>
 800cbe8:	4b04      	ldr	r3, [pc, #16]	@ (800cbfc <__sinit+0x28>)
 800cbea:	6223      	str	r3, [r4, #32]
 800cbec:	4b04      	ldr	r3, [pc, #16]	@ (800cc00 <__sinit+0x2c>)
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d1f5      	bne.n	800cbe0 <__sinit+0xc>
 800cbf4:	f7ff ffc4 	bl	800cb80 <global_stdio_init.part.0>
 800cbf8:	e7f2      	b.n	800cbe0 <__sinit+0xc>
 800cbfa:	bf00      	nop
 800cbfc:	0800cb41 	.word	0x0800cb41
 800cc00:	200112b8 	.word	0x200112b8

0800cc04 <_fwalk_sglue>:
 800cc04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc08:	4607      	mov	r7, r0
 800cc0a:	4688      	mov	r8, r1
 800cc0c:	4614      	mov	r4, r2
 800cc0e:	2600      	movs	r6, #0
 800cc10:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cc14:	f1b9 0901 	subs.w	r9, r9, #1
 800cc18:	d505      	bpl.n	800cc26 <_fwalk_sglue+0x22>
 800cc1a:	6824      	ldr	r4, [r4, #0]
 800cc1c:	2c00      	cmp	r4, #0
 800cc1e:	d1f7      	bne.n	800cc10 <_fwalk_sglue+0xc>
 800cc20:	4630      	mov	r0, r6
 800cc22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc26:	89ab      	ldrh	r3, [r5, #12]
 800cc28:	2b01      	cmp	r3, #1
 800cc2a:	d907      	bls.n	800cc3c <_fwalk_sglue+0x38>
 800cc2c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cc30:	3301      	adds	r3, #1
 800cc32:	d003      	beq.n	800cc3c <_fwalk_sglue+0x38>
 800cc34:	4629      	mov	r1, r5
 800cc36:	4638      	mov	r0, r7
 800cc38:	47c0      	blx	r8
 800cc3a:	4306      	orrs	r6, r0
 800cc3c:	3568      	adds	r5, #104	@ 0x68
 800cc3e:	e7e9      	b.n	800cc14 <_fwalk_sglue+0x10>

0800cc40 <iprintf>:
 800cc40:	b40f      	push	{r0, r1, r2, r3}
 800cc42:	b507      	push	{r0, r1, r2, lr}
 800cc44:	4906      	ldr	r1, [pc, #24]	@ (800cc60 <iprintf+0x20>)
 800cc46:	ab04      	add	r3, sp, #16
 800cc48:	6808      	ldr	r0, [r1, #0]
 800cc4a:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc4e:	6881      	ldr	r1, [r0, #8]
 800cc50:	9301      	str	r3, [sp, #4]
 800cc52:	f001 fe97 	bl	800e984 <_vfiprintf_r>
 800cc56:	b003      	add	sp, #12
 800cc58:	f85d eb04 	ldr.w	lr, [sp], #4
 800cc5c:	b004      	add	sp, #16
 800cc5e:	4770      	bx	lr
 800cc60:	20000038 	.word	0x20000038

0800cc64 <_puts_r>:
 800cc64:	6a03      	ldr	r3, [r0, #32]
 800cc66:	b570      	push	{r4, r5, r6, lr}
 800cc68:	6884      	ldr	r4, [r0, #8]
 800cc6a:	4605      	mov	r5, r0
 800cc6c:	460e      	mov	r6, r1
 800cc6e:	b90b      	cbnz	r3, 800cc74 <_puts_r+0x10>
 800cc70:	f7ff ffb0 	bl	800cbd4 <__sinit>
 800cc74:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cc76:	07db      	lsls	r3, r3, #31
 800cc78:	d405      	bmi.n	800cc86 <_puts_r+0x22>
 800cc7a:	89a3      	ldrh	r3, [r4, #12]
 800cc7c:	0598      	lsls	r0, r3, #22
 800cc7e:	d402      	bmi.n	800cc86 <_puts_r+0x22>
 800cc80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cc82:	f000 fad2 	bl	800d22a <__retarget_lock_acquire_recursive>
 800cc86:	89a3      	ldrh	r3, [r4, #12]
 800cc88:	0719      	lsls	r1, r3, #28
 800cc8a:	d502      	bpl.n	800cc92 <_puts_r+0x2e>
 800cc8c:	6923      	ldr	r3, [r4, #16]
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d135      	bne.n	800ccfe <_puts_r+0x9a>
 800cc92:	4621      	mov	r1, r4
 800cc94:	4628      	mov	r0, r5
 800cc96:	f000 f931 	bl	800cefc <__swsetup_r>
 800cc9a:	b380      	cbz	r0, 800ccfe <_puts_r+0x9a>
 800cc9c:	f04f 35ff 	mov.w	r5, #4294967295
 800cca0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cca2:	07da      	lsls	r2, r3, #31
 800cca4:	d405      	bmi.n	800ccb2 <_puts_r+0x4e>
 800cca6:	89a3      	ldrh	r3, [r4, #12]
 800cca8:	059b      	lsls	r3, r3, #22
 800ccaa:	d402      	bmi.n	800ccb2 <_puts_r+0x4e>
 800ccac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ccae:	f000 fabd 	bl	800d22c <__retarget_lock_release_recursive>
 800ccb2:	4628      	mov	r0, r5
 800ccb4:	bd70      	pop	{r4, r5, r6, pc}
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	da04      	bge.n	800ccc4 <_puts_r+0x60>
 800ccba:	69a2      	ldr	r2, [r4, #24]
 800ccbc:	429a      	cmp	r2, r3
 800ccbe:	dc17      	bgt.n	800ccf0 <_puts_r+0x8c>
 800ccc0:	290a      	cmp	r1, #10
 800ccc2:	d015      	beq.n	800ccf0 <_puts_r+0x8c>
 800ccc4:	6823      	ldr	r3, [r4, #0]
 800ccc6:	1c5a      	adds	r2, r3, #1
 800ccc8:	6022      	str	r2, [r4, #0]
 800ccca:	7019      	strb	r1, [r3, #0]
 800cccc:	68a3      	ldr	r3, [r4, #8]
 800ccce:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ccd2:	3b01      	subs	r3, #1
 800ccd4:	60a3      	str	r3, [r4, #8]
 800ccd6:	2900      	cmp	r1, #0
 800ccd8:	d1ed      	bne.n	800ccb6 <_puts_r+0x52>
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	da11      	bge.n	800cd02 <_puts_r+0x9e>
 800ccde:	4622      	mov	r2, r4
 800cce0:	210a      	movs	r1, #10
 800cce2:	4628      	mov	r0, r5
 800cce4:	f000 f8cc 	bl	800ce80 <__swbuf_r>
 800cce8:	3001      	adds	r0, #1
 800ccea:	d0d7      	beq.n	800cc9c <_puts_r+0x38>
 800ccec:	250a      	movs	r5, #10
 800ccee:	e7d7      	b.n	800cca0 <_puts_r+0x3c>
 800ccf0:	4622      	mov	r2, r4
 800ccf2:	4628      	mov	r0, r5
 800ccf4:	f000 f8c4 	bl	800ce80 <__swbuf_r>
 800ccf8:	3001      	adds	r0, #1
 800ccfa:	d1e7      	bne.n	800cccc <_puts_r+0x68>
 800ccfc:	e7ce      	b.n	800cc9c <_puts_r+0x38>
 800ccfe:	3e01      	subs	r6, #1
 800cd00:	e7e4      	b.n	800cccc <_puts_r+0x68>
 800cd02:	6823      	ldr	r3, [r4, #0]
 800cd04:	1c5a      	adds	r2, r3, #1
 800cd06:	6022      	str	r2, [r4, #0]
 800cd08:	220a      	movs	r2, #10
 800cd0a:	701a      	strb	r2, [r3, #0]
 800cd0c:	e7ee      	b.n	800ccec <_puts_r+0x88>
	...

0800cd10 <puts>:
 800cd10:	4b02      	ldr	r3, [pc, #8]	@ (800cd1c <puts+0xc>)
 800cd12:	4601      	mov	r1, r0
 800cd14:	6818      	ldr	r0, [r3, #0]
 800cd16:	f7ff bfa5 	b.w	800cc64 <_puts_r>
 800cd1a:	bf00      	nop
 800cd1c:	20000038 	.word	0x20000038

0800cd20 <sniprintf>:
 800cd20:	b40c      	push	{r2, r3}
 800cd22:	b530      	push	{r4, r5, lr}
 800cd24:	4b17      	ldr	r3, [pc, #92]	@ (800cd84 <sniprintf+0x64>)
 800cd26:	1e0c      	subs	r4, r1, #0
 800cd28:	681d      	ldr	r5, [r3, #0]
 800cd2a:	b09d      	sub	sp, #116	@ 0x74
 800cd2c:	da08      	bge.n	800cd40 <sniprintf+0x20>
 800cd2e:	238b      	movs	r3, #139	@ 0x8b
 800cd30:	602b      	str	r3, [r5, #0]
 800cd32:	f04f 30ff 	mov.w	r0, #4294967295
 800cd36:	b01d      	add	sp, #116	@ 0x74
 800cd38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cd3c:	b002      	add	sp, #8
 800cd3e:	4770      	bx	lr
 800cd40:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800cd44:	f8ad 3014 	strh.w	r3, [sp, #20]
 800cd48:	bf14      	ite	ne
 800cd4a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800cd4e:	4623      	moveq	r3, r4
 800cd50:	9304      	str	r3, [sp, #16]
 800cd52:	9307      	str	r3, [sp, #28]
 800cd54:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800cd58:	9002      	str	r0, [sp, #8]
 800cd5a:	9006      	str	r0, [sp, #24]
 800cd5c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800cd60:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800cd62:	ab21      	add	r3, sp, #132	@ 0x84
 800cd64:	a902      	add	r1, sp, #8
 800cd66:	4628      	mov	r0, r5
 800cd68:	9301      	str	r3, [sp, #4]
 800cd6a:	f001 fce5 	bl	800e738 <_svfiprintf_r>
 800cd6e:	1c43      	adds	r3, r0, #1
 800cd70:	bfbc      	itt	lt
 800cd72:	238b      	movlt	r3, #139	@ 0x8b
 800cd74:	602b      	strlt	r3, [r5, #0]
 800cd76:	2c00      	cmp	r4, #0
 800cd78:	d0dd      	beq.n	800cd36 <sniprintf+0x16>
 800cd7a:	9b02      	ldr	r3, [sp, #8]
 800cd7c:	2200      	movs	r2, #0
 800cd7e:	701a      	strb	r2, [r3, #0]
 800cd80:	e7d9      	b.n	800cd36 <sniprintf+0x16>
 800cd82:	bf00      	nop
 800cd84:	20000038 	.word	0x20000038

0800cd88 <__sread>:
 800cd88:	b510      	push	{r4, lr}
 800cd8a:	460c      	mov	r4, r1
 800cd8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd90:	f000 f9d8 	bl	800d144 <_read_r>
 800cd94:	2800      	cmp	r0, #0
 800cd96:	bfab      	itete	ge
 800cd98:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800cd9a:	89a3      	ldrhlt	r3, [r4, #12]
 800cd9c:	181b      	addge	r3, r3, r0
 800cd9e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800cda2:	bfac      	ite	ge
 800cda4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800cda6:	81a3      	strhlt	r3, [r4, #12]
 800cda8:	bd10      	pop	{r4, pc}

0800cdaa <__swrite>:
 800cdaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cdae:	461f      	mov	r7, r3
 800cdb0:	898b      	ldrh	r3, [r1, #12]
 800cdb2:	05db      	lsls	r3, r3, #23
 800cdb4:	4605      	mov	r5, r0
 800cdb6:	460c      	mov	r4, r1
 800cdb8:	4616      	mov	r6, r2
 800cdba:	d505      	bpl.n	800cdc8 <__swrite+0x1e>
 800cdbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cdc0:	2302      	movs	r3, #2
 800cdc2:	2200      	movs	r2, #0
 800cdc4:	f000 f9ac 	bl	800d120 <_lseek_r>
 800cdc8:	89a3      	ldrh	r3, [r4, #12]
 800cdca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cdce:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800cdd2:	81a3      	strh	r3, [r4, #12]
 800cdd4:	4632      	mov	r2, r6
 800cdd6:	463b      	mov	r3, r7
 800cdd8:	4628      	mov	r0, r5
 800cdda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cdde:	f000 b9e7 	b.w	800d1b0 <_write_r>

0800cde2 <__sseek>:
 800cde2:	b510      	push	{r4, lr}
 800cde4:	460c      	mov	r4, r1
 800cde6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cdea:	f000 f999 	bl	800d120 <_lseek_r>
 800cdee:	1c43      	adds	r3, r0, #1
 800cdf0:	89a3      	ldrh	r3, [r4, #12]
 800cdf2:	bf15      	itete	ne
 800cdf4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800cdf6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800cdfa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800cdfe:	81a3      	strheq	r3, [r4, #12]
 800ce00:	bf18      	it	ne
 800ce02:	81a3      	strhne	r3, [r4, #12]
 800ce04:	bd10      	pop	{r4, pc}

0800ce06 <__sclose>:
 800ce06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce0a:	f000 b923 	b.w	800d054 <_close_r>

0800ce0e <_vsniprintf_r>:
 800ce0e:	b530      	push	{r4, r5, lr}
 800ce10:	4614      	mov	r4, r2
 800ce12:	2c00      	cmp	r4, #0
 800ce14:	b09b      	sub	sp, #108	@ 0x6c
 800ce16:	4605      	mov	r5, r0
 800ce18:	461a      	mov	r2, r3
 800ce1a:	da05      	bge.n	800ce28 <_vsniprintf_r+0x1a>
 800ce1c:	238b      	movs	r3, #139	@ 0x8b
 800ce1e:	6003      	str	r3, [r0, #0]
 800ce20:	f04f 30ff 	mov.w	r0, #4294967295
 800ce24:	b01b      	add	sp, #108	@ 0x6c
 800ce26:	bd30      	pop	{r4, r5, pc}
 800ce28:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800ce2c:	f8ad 300c 	strh.w	r3, [sp, #12]
 800ce30:	bf14      	ite	ne
 800ce32:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ce36:	4623      	moveq	r3, r4
 800ce38:	9302      	str	r3, [sp, #8]
 800ce3a:	9305      	str	r3, [sp, #20]
 800ce3c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ce40:	9100      	str	r1, [sp, #0]
 800ce42:	9104      	str	r1, [sp, #16]
 800ce44:	f8ad 300e 	strh.w	r3, [sp, #14]
 800ce48:	4669      	mov	r1, sp
 800ce4a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800ce4c:	f001 fc74 	bl	800e738 <_svfiprintf_r>
 800ce50:	1c43      	adds	r3, r0, #1
 800ce52:	bfbc      	itt	lt
 800ce54:	238b      	movlt	r3, #139	@ 0x8b
 800ce56:	602b      	strlt	r3, [r5, #0]
 800ce58:	2c00      	cmp	r4, #0
 800ce5a:	d0e3      	beq.n	800ce24 <_vsniprintf_r+0x16>
 800ce5c:	9b00      	ldr	r3, [sp, #0]
 800ce5e:	2200      	movs	r2, #0
 800ce60:	701a      	strb	r2, [r3, #0]
 800ce62:	e7df      	b.n	800ce24 <_vsniprintf_r+0x16>

0800ce64 <vsniprintf>:
 800ce64:	b507      	push	{r0, r1, r2, lr}
 800ce66:	9300      	str	r3, [sp, #0]
 800ce68:	4613      	mov	r3, r2
 800ce6a:	460a      	mov	r2, r1
 800ce6c:	4601      	mov	r1, r0
 800ce6e:	4803      	ldr	r0, [pc, #12]	@ (800ce7c <vsniprintf+0x18>)
 800ce70:	6800      	ldr	r0, [r0, #0]
 800ce72:	f7ff ffcc 	bl	800ce0e <_vsniprintf_r>
 800ce76:	b003      	add	sp, #12
 800ce78:	f85d fb04 	ldr.w	pc, [sp], #4
 800ce7c:	20000038 	.word	0x20000038

0800ce80 <__swbuf_r>:
 800ce80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce82:	460e      	mov	r6, r1
 800ce84:	4614      	mov	r4, r2
 800ce86:	4605      	mov	r5, r0
 800ce88:	b118      	cbz	r0, 800ce92 <__swbuf_r+0x12>
 800ce8a:	6a03      	ldr	r3, [r0, #32]
 800ce8c:	b90b      	cbnz	r3, 800ce92 <__swbuf_r+0x12>
 800ce8e:	f7ff fea1 	bl	800cbd4 <__sinit>
 800ce92:	69a3      	ldr	r3, [r4, #24]
 800ce94:	60a3      	str	r3, [r4, #8]
 800ce96:	89a3      	ldrh	r3, [r4, #12]
 800ce98:	071a      	lsls	r2, r3, #28
 800ce9a:	d501      	bpl.n	800cea0 <__swbuf_r+0x20>
 800ce9c:	6923      	ldr	r3, [r4, #16]
 800ce9e:	b943      	cbnz	r3, 800ceb2 <__swbuf_r+0x32>
 800cea0:	4621      	mov	r1, r4
 800cea2:	4628      	mov	r0, r5
 800cea4:	f000 f82a 	bl	800cefc <__swsetup_r>
 800cea8:	b118      	cbz	r0, 800ceb2 <__swbuf_r+0x32>
 800ceaa:	f04f 37ff 	mov.w	r7, #4294967295
 800ceae:	4638      	mov	r0, r7
 800ceb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ceb2:	6823      	ldr	r3, [r4, #0]
 800ceb4:	6922      	ldr	r2, [r4, #16]
 800ceb6:	1a98      	subs	r0, r3, r2
 800ceb8:	6963      	ldr	r3, [r4, #20]
 800ceba:	b2f6      	uxtb	r6, r6
 800cebc:	4283      	cmp	r3, r0
 800cebe:	4637      	mov	r7, r6
 800cec0:	dc05      	bgt.n	800cece <__swbuf_r+0x4e>
 800cec2:	4621      	mov	r1, r4
 800cec4:	4628      	mov	r0, r5
 800cec6:	f001 fef9 	bl	800ecbc <_fflush_r>
 800ceca:	2800      	cmp	r0, #0
 800cecc:	d1ed      	bne.n	800ceaa <__swbuf_r+0x2a>
 800cece:	68a3      	ldr	r3, [r4, #8]
 800ced0:	3b01      	subs	r3, #1
 800ced2:	60a3      	str	r3, [r4, #8]
 800ced4:	6823      	ldr	r3, [r4, #0]
 800ced6:	1c5a      	adds	r2, r3, #1
 800ced8:	6022      	str	r2, [r4, #0]
 800ceda:	701e      	strb	r6, [r3, #0]
 800cedc:	6962      	ldr	r2, [r4, #20]
 800cede:	1c43      	adds	r3, r0, #1
 800cee0:	429a      	cmp	r2, r3
 800cee2:	d004      	beq.n	800ceee <__swbuf_r+0x6e>
 800cee4:	89a3      	ldrh	r3, [r4, #12]
 800cee6:	07db      	lsls	r3, r3, #31
 800cee8:	d5e1      	bpl.n	800ceae <__swbuf_r+0x2e>
 800ceea:	2e0a      	cmp	r6, #10
 800ceec:	d1df      	bne.n	800ceae <__swbuf_r+0x2e>
 800ceee:	4621      	mov	r1, r4
 800cef0:	4628      	mov	r0, r5
 800cef2:	f001 fee3 	bl	800ecbc <_fflush_r>
 800cef6:	2800      	cmp	r0, #0
 800cef8:	d0d9      	beq.n	800ceae <__swbuf_r+0x2e>
 800cefa:	e7d6      	b.n	800ceaa <__swbuf_r+0x2a>

0800cefc <__swsetup_r>:
 800cefc:	b538      	push	{r3, r4, r5, lr}
 800cefe:	4b29      	ldr	r3, [pc, #164]	@ (800cfa4 <__swsetup_r+0xa8>)
 800cf00:	4605      	mov	r5, r0
 800cf02:	6818      	ldr	r0, [r3, #0]
 800cf04:	460c      	mov	r4, r1
 800cf06:	b118      	cbz	r0, 800cf10 <__swsetup_r+0x14>
 800cf08:	6a03      	ldr	r3, [r0, #32]
 800cf0a:	b90b      	cbnz	r3, 800cf10 <__swsetup_r+0x14>
 800cf0c:	f7ff fe62 	bl	800cbd4 <__sinit>
 800cf10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf14:	0719      	lsls	r1, r3, #28
 800cf16:	d422      	bmi.n	800cf5e <__swsetup_r+0x62>
 800cf18:	06da      	lsls	r2, r3, #27
 800cf1a:	d407      	bmi.n	800cf2c <__swsetup_r+0x30>
 800cf1c:	2209      	movs	r2, #9
 800cf1e:	602a      	str	r2, [r5, #0]
 800cf20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cf24:	81a3      	strh	r3, [r4, #12]
 800cf26:	f04f 30ff 	mov.w	r0, #4294967295
 800cf2a:	e033      	b.n	800cf94 <__swsetup_r+0x98>
 800cf2c:	0758      	lsls	r0, r3, #29
 800cf2e:	d512      	bpl.n	800cf56 <__swsetup_r+0x5a>
 800cf30:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cf32:	b141      	cbz	r1, 800cf46 <__swsetup_r+0x4a>
 800cf34:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cf38:	4299      	cmp	r1, r3
 800cf3a:	d002      	beq.n	800cf42 <__swsetup_r+0x46>
 800cf3c:	4628      	mov	r0, r5
 800cf3e:	f000 ffd3 	bl	800dee8 <_free_r>
 800cf42:	2300      	movs	r3, #0
 800cf44:	6363      	str	r3, [r4, #52]	@ 0x34
 800cf46:	89a3      	ldrh	r3, [r4, #12]
 800cf48:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800cf4c:	81a3      	strh	r3, [r4, #12]
 800cf4e:	2300      	movs	r3, #0
 800cf50:	6063      	str	r3, [r4, #4]
 800cf52:	6923      	ldr	r3, [r4, #16]
 800cf54:	6023      	str	r3, [r4, #0]
 800cf56:	89a3      	ldrh	r3, [r4, #12]
 800cf58:	f043 0308 	orr.w	r3, r3, #8
 800cf5c:	81a3      	strh	r3, [r4, #12]
 800cf5e:	6923      	ldr	r3, [r4, #16]
 800cf60:	b94b      	cbnz	r3, 800cf76 <__swsetup_r+0x7a>
 800cf62:	89a3      	ldrh	r3, [r4, #12]
 800cf64:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800cf68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cf6c:	d003      	beq.n	800cf76 <__swsetup_r+0x7a>
 800cf6e:	4621      	mov	r1, r4
 800cf70:	4628      	mov	r0, r5
 800cf72:	f001 fef1 	bl	800ed58 <__smakebuf_r>
 800cf76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf7a:	f013 0201 	ands.w	r2, r3, #1
 800cf7e:	d00a      	beq.n	800cf96 <__swsetup_r+0x9a>
 800cf80:	2200      	movs	r2, #0
 800cf82:	60a2      	str	r2, [r4, #8]
 800cf84:	6962      	ldr	r2, [r4, #20]
 800cf86:	4252      	negs	r2, r2
 800cf88:	61a2      	str	r2, [r4, #24]
 800cf8a:	6922      	ldr	r2, [r4, #16]
 800cf8c:	b942      	cbnz	r2, 800cfa0 <__swsetup_r+0xa4>
 800cf8e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800cf92:	d1c5      	bne.n	800cf20 <__swsetup_r+0x24>
 800cf94:	bd38      	pop	{r3, r4, r5, pc}
 800cf96:	0799      	lsls	r1, r3, #30
 800cf98:	bf58      	it	pl
 800cf9a:	6962      	ldrpl	r2, [r4, #20]
 800cf9c:	60a2      	str	r2, [r4, #8]
 800cf9e:	e7f4      	b.n	800cf8a <__swsetup_r+0x8e>
 800cfa0:	2000      	movs	r0, #0
 800cfa2:	e7f7      	b.n	800cf94 <__swsetup_r+0x98>
 800cfa4:	20000038 	.word	0x20000038

0800cfa8 <memmove>:
 800cfa8:	4288      	cmp	r0, r1
 800cfaa:	b510      	push	{r4, lr}
 800cfac:	eb01 0402 	add.w	r4, r1, r2
 800cfb0:	d902      	bls.n	800cfb8 <memmove+0x10>
 800cfb2:	4284      	cmp	r4, r0
 800cfb4:	4623      	mov	r3, r4
 800cfb6:	d807      	bhi.n	800cfc8 <memmove+0x20>
 800cfb8:	1e43      	subs	r3, r0, #1
 800cfba:	42a1      	cmp	r1, r4
 800cfbc:	d008      	beq.n	800cfd0 <memmove+0x28>
 800cfbe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cfc2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cfc6:	e7f8      	b.n	800cfba <memmove+0x12>
 800cfc8:	4402      	add	r2, r0
 800cfca:	4601      	mov	r1, r0
 800cfcc:	428a      	cmp	r2, r1
 800cfce:	d100      	bne.n	800cfd2 <memmove+0x2a>
 800cfd0:	bd10      	pop	{r4, pc}
 800cfd2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cfd6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cfda:	e7f7      	b.n	800cfcc <memmove+0x24>

0800cfdc <memset>:
 800cfdc:	4402      	add	r2, r0
 800cfde:	4603      	mov	r3, r0
 800cfe0:	4293      	cmp	r3, r2
 800cfe2:	d100      	bne.n	800cfe6 <memset+0xa>
 800cfe4:	4770      	bx	lr
 800cfe6:	f803 1b01 	strb.w	r1, [r3], #1
 800cfea:	e7f9      	b.n	800cfe0 <memset+0x4>

0800cfec <_raise_r>:
 800cfec:	291f      	cmp	r1, #31
 800cfee:	b538      	push	{r3, r4, r5, lr}
 800cff0:	4605      	mov	r5, r0
 800cff2:	460c      	mov	r4, r1
 800cff4:	d904      	bls.n	800d000 <_raise_r+0x14>
 800cff6:	2316      	movs	r3, #22
 800cff8:	6003      	str	r3, [r0, #0]
 800cffa:	f04f 30ff 	mov.w	r0, #4294967295
 800cffe:	bd38      	pop	{r3, r4, r5, pc}
 800d000:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d002:	b112      	cbz	r2, 800d00a <_raise_r+0x1e>
 800d004:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d008:	b94b      	cbnz	r3, 800d01e <_raise_r+0x32>
 800d00a:	4628      	mov	r0, r5
 800d00c:	f000 f8be 	bl	800d18c <_getpid_r>
 800d010:	4622      	mov	r2, r4
 800d012:	4601      	mov	r1, r0
 800d014:	4628      	mov	r0, r5
 800d016:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d01a:	f000 b8a5 	b.w	800d168 <_kill_r>
 800d01e:	2b01      	cmp	r3, #1
 800d020:	d00a      	beq.n	800d038 <_raise_r+0x4c>
 800d022:	1c59      	adds	r1, r3, #1
 800d024:	d103      	bne.n	800d02e <_raise_r+0x42>
 800d026:	2316      	movs	r3, #22
 800d028:	6003      	str	r3, [r0, #0]
 800d02a:	2001      	movs	r0, #1
 800d02c:	e7e7      	b.n	800cffe <_raise_r+0x12>
 800d02e:	2100      	movs	r1, #0
 800d030:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d034:	4620      	mov	r0, r4
 800d036:	4798      	blx	r3
 800d038:	2000      	movs	r0, #0
 800d03a:	e7e0      	b.n	800cffe <_raise_r+0x12>

0800d03c <raise>:
 800d03c:	4b02      	ldr	r3, [pc, #8]	@ (800d048 <raise+0xc>)
 800d03e:	4601      	mov	r1, r0
 800d040:	6818      	ldr	r0, [r3, #0]
 800d042:	f7ff bfd3 	b.w	800cfec <_raise_r>
 800d046:	bf00      	nop
 800d048:	20000038 	.word	0x20000038

0800d04c <_localeconv_r>:
 800d04c:	4800      	ldr	r0, [pc, #0]	@ (800d050 <_localeconv_r+0x4>)
 800d04e:	4770      	bx	lr
 800d050:	20000178 	.word	0x20000178

0800d054 <_close_r>:
 800d054:	b538      	push	{r3, r4, r5, lr}
 800d056:	4d06      	ldr	r5, [pc, #24]	@ (800d070 <_close_r+0x1c>)
 800d058:	2300      	movs	r3, #0
 800d05a:	4604      	mov	r4, r0
 800d05c:	4608      	mov	r0, r1
 800d05e:	602b      	str	r3, [r5, #0]
 800d060:	f7f8 fa1a 	bl	8005498 <_close>
 800d064:	1c43      	adds	r3, r0, #1
 800d066:	d102      	bne.n	800d06e <_close_r+0x1a>
 800d068:	682b      	ldr	r3, [r5, #0]
 800d06a:	b103      	cbz	r3, 800d06e <_close_r+0x1a>
 800d06c:	6023      	str	r3, [r4, #0]
 800d06e:	bd38      	pop	{r3, r4, r5, pc}
 800d070:	200112bc 	.word	0x200112bc

0800d074 <_reclaim_reent>:
 800d074:	4b29      	ldr	r3, [pc, #164]	@ (800d11c <_reclaim_reent+0xa8>)
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	4283      	cmp	r3, r0
 800d07a:	b570      	push	{r4, r5, r6, lr}
 800d07c:	4604      	mov	r4, r0
 800d07e:	d04b      	beq.n	800d118 <_reclaim_reent+0xa4>
 800d080:	69c3      	ldr	r3, [r0, #28]
 800d082:	b1ab      	cbz	r3, 800d0b0 <_reclaim_reent+0x3c>
 800d084:	68db      	ldr	r3, [r3, #12]
 800d086:	b16b      	cbz	r3, 800d0a4 <_reclaim_reent+0x30>
 800d088:	2500      	movs	r5, #0
 800d08a:	69e3      	ldr	r3, [r4, #28]
 800d08c:	68db      	ldr	r3, [r3, #12]
 800d08e:	5959      	ldr	r1, [r3, r5]
 800d090:	2900      	cmp	r1, #0
 800d092:	d13b      	bne.n	800d10c <_reclaim_reent+0x98>
 800d094:	3504      	adds	r5, #4
 800d096:	2d80      	cmp	r5, #128	@ 0x80
 800d098:	d1f7      	bne.n	800d08a <_reclaim_reent+0x16>
 800d09a:	69e3      	ldr	r3, [r4, #28]
 800d09c:	4620      	mov	r0, r4
 800d09e:	68d9      	ldr	r1, [r3, #12]
 800d0a0:	f000 ff22 	bl	800dee8 <_free_r>
 800d0a4:	69e3      	ldr	r3, [r4, #28]
 800d0a6:	6819      	ldr	r1, [r3, #0]
 800d0a8:	b111      	cbz	r1, 800d0b0 <_reclaim_reent+0x3c>
 800d0aa:	4620      	mov	r0, r4
 800d0ac:	f000 ff1c 	bl	800dee8 <_free_r>
 800d0b0:	6961      	ldr	r1, [r4, #20]
 800d0b2:	b111      	cbz	r1, 800d0ba <_reclaim_reent+0x46>
 800d0b4:	4620      	mov	r0, r4
 800d0b6:	f000 ff17 	bl	800dee8 <_free_r>
 800d0ba:	69e1      	ldr	r1, [r4, #28]
 800d0bc:	b111      	cbz	r1, 800d0c4 <_reclaim_reent+0x50>
 800d0be:	4620      	mov	r0, r4
 800d0c0:	f000 ff12 	bl	800dee8 <_free_r>
 800d0c4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800d0c6:	b111      	cbz	r1, 800d0ce <_reclaim_reent+0x5a>
 800d0c8:	4620      	mov	r0, r4
 800d0ca:	f000 ff0d 	bl	800dee8 <_free_r>
 800d0ce:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d0d0:	b111      	cbz	r1, 800d0d8 <_reclaim_reent+0x64>
 800d0d2:	4620      	mov	r0, r4
 800d0d4:	f000 ff08 	bl	800dee8 <_free_r>
 800d0d8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800d0da:	b111      	cbz	r1, 800d0e2 <_reclaim_reent+0x6e>
 800d0dc:	4620      	mov	r0, r4
 800d0de:	f000 ff03 	bl	800dee8 <_free_r>
 800d0e2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800d0e4:	b111      	cbz	r1, 800d0ec <_reclaim_reent+0x78>
 800d0e6:	4620      	mov	r0, r4
 800d0e8:	f000 fefe 	bl	800dee8 <_free_r>
 800d0ec:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800d0ee:	b111      	cbz	r1, 800d0f6 <_reclaim_reent+0x82>
 800d0f0:	4620      	mov	r0, r4
 800d0f2:	f000 fef9 	bl	800dee8 <_free_r>
 800d0f6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800d0f8:	b111      	cbz	r1, 800d100 <_reclaim_reent+0x8c>
 800d0fa:	4620      	mov	r0, r4
 800d0fc:	f000 fef4 	bl	800dee8 <_free_r>
 800d100:	6a23      	ldr	r3, [r4, #32]
 800d102:	b14b      	cbz	r3, 800d118 <_reclaim_reent+0xa4>
 800d104:	4620      	mov	r0, r4
 800d106:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d10a:	4718      	bx	r3
 800d10c:	680e      	ldr	r6, [r1, #0]
 800d10e:	4620      	mov	r0, r4
 800d110:	f000 feea 	bl	800dee8 <_free_r>
 800d114:	4631      	mov	r1, r6
 800d116:	e7bb      	b.n	800d090 <_reclaim_reent+0x1c>
 800d118:	bd70      	pop	{r4, r5, r6, pc}
 800d11a:	bf00      	nop
 800d11c:	20000038 	.word	0x20000038

0800d120 <_lseek_r>:
 800d120:	b538      	push	{r3, r4, r5, lr}
 800d122:	4d07      	ldr	r5, [pc, #28]	@ (800d140 <_lseek_r+0x20>)
 800d124:	4604      	mov	r4, r0
 800d126:	4608      	mov	r0, r1
 800d128:	4611      	mov	r1, r2
 800d12a:	2200      	movs	r2, #0
 800d12c:	602a      	str	r2, [r5, #0]
 800d12e:	461a      	mov	r2, r3
 800d130:	f7f8 f9d9 	bl	80054e6 <_lseek>
 800d134:	1c43      	adds	r3, r0, #1
 800d136:	d102      	bne.n	800d13e <_lseek_r+0x1e>
 800d138:	682b      	ldr	r3, [r5, #0]
 800d13a:	b103      	cbz	r3, 800d13e <_lseek_r+0x1e>
 800d13c:	6023      	str	r3, [r4, #0]
 800d13e:	bd38      	pop	{r3, r4, r5, pc}
 800d140:	200112bc 	.word	0x200112bc

0800d144 <_read_r>:
 800d144:	b538      	push	{r3, r4, r5, lr}
 800d146:	4d07      	ldr	r5, [pc, #28]	@ (800d164 <_read_r+0x20>)
 800d148:	4604      	mov	r4, r0
 800d14a:	4608      	mov	r0, r1
 800d14c:	4611      	mov	r1, r2
 800d14e:	2200      	movs	r2, #0
 800d150:	602a      	str	r2, [r5, #0]
 800d152:	461a      	mov	r2, r3
 800d154:	f7f8 f967 	bl	8005426 <_read>
 800d158:	1c43      	adds	r3, r0, #1
 800d15a:	d102      	bne.n	800d162 <_read_r+0x1e>
 800d15c:	682b      	ldr	r3, [r5, #0]
 800d15e:	b103      	cbz	r3, 800d162 <_read_r+0x1e>
 800d160:	6023      	str	r3, [r4, #0]
 800d162:	bd38      	pop	{r3, r4, r5, pc}
 800d164:	200112bc 	.word	0x200112bc

0800d168 <_kill_r>:
 800d168:	b538      	push	{r3, r4, r5, lr}
 800d16a:	4d07      	ldr	r5, [pc, #28]	@ (800d188 <_kill_r+0x20>)
 800d16c:	2300      	movs	r3, #0
 800d16e:	4604      	mov	r4, r0
 800d170:	4608      	mov	r0, r1
 800d172:	4611      	mov	r1, r2
 800d174:	602b      	str	r3, [r5, #0]
 800d176:	f7f8 f93b 	bl	80053f0 <_kill>
 800d17a:	1c43      	adds	r3, r0, #1
 800d17c:	d102      	bne.n	800d184 <_kill_r+0x1c>
 800d17e:	682b      	ldr	r3, [r5, #0]
 800d180:	b103      	cbz	r3, 800d184 <_kill_r+0x1c>
 800d182:	6023      	str	r3, [r4, #0]
 800d184:	bd38      	pop	{r3, r4, r5, pc}
 800d186:	bf00      	nop
 800d188:	200112bc 	.word	0x200112bc

0800d18c <_getpid_r>:
 800d18c:	f7f8 b928 	b.w	80053e0 <_getpid>

0800d190 <_sbrk_r>:
 800d190:	b538      	push	{r3, r4, r5, lr}
 800d192:	4d06      	ldr	r5, [pc, #24]	@ (800d1ac <_sbrk_r+0x1c>)
 800d194:	2300      	movs	r3, #0
 800d196:	4604      	mov	r4, r0
 800d198:	4608      	mov	r0, r1
 800d19a:	602b      	str	r3, [r5, #0]
 800d19c:	f7f8 f9b0 	bl	8005500 <_sbrk>
 800d1a0:	1c43      	adds	r3, r0, #1
 800d1a2:	d102      	bne.n	800d1aa <_sbrk_r+0x1a>
 800d1a4:	682b      	ldr	r3, [r5, #0]
 800d1a6:	b103      	cbz	r3, 800d1aa <_sbrk_r+0x1a>
 800d1a8:	6023      	str	r3, [r4, #0]
 800d1aa:	bd38      	pop	{r3, r4, r5, pc}
 800d1ac:	200112bc 	.word	0x200112bc

0800d1b0 <_write_r>:
 800d1b0:	b538      	push	{r3, r4, r5, lr}
 800d1b2:	4d07      	ldr	r5, [pc, #28]	@ (800d1d0 <_write_r+0x20>)
 800d1b4:	4604      	mov	r4, r0
 800d1b6:	4608      	mov	r0, r1
 800d1b8:	4611      	mov	r1, r2
 800d1ba:	2200      	movs	r2, #0
 800d1bc:	602a      	str	r2, [r5, #0]
 800d1be:	461a      	mov	r2, r3
 800d1c0:	f7f8 f94e 	bl	8005460 <_write>
 800d1c4:	1c43      	adds	r3, r0, #1
 800d1c6:	d102      	bne.n	800d1ce <_write_r+0x1e>
 800d1c8:	682b      	ldr	r3, [r5, #0]
 800d1ca:	b103      	cbz	r3, 800d1ce <_write_r+0x1e>
 800d1cc:	6023      	str	r3, [r4, #0]
 800d1ce:	bd38      	pop	{r3, r4, r5, pc}
 800d1d0:	200112bc 	.word	0x200112bc

0800d1d4 <__errno>:
 800d1d4:	4b01      	ldr	r3, [pc, #4]	@ (800d1dc <__errno+0x8>)
 800d1d6:	6818      	ldr	r0, [r3, #0]
 800d1d8:	4770      	bx	lr
 800d1da:	bf00      	nop
 800d1dc:	20000038 	.word	0x20000038

0800d1e0 <__libc_init_array>:
 800d1e0:	b570      	push	{r4, r5, r6, lr}
 800d1e2:	4d0d      	ldr	r5, [pc, #52]	@ (800d218 <__libc_init_array+0x38>)
 800d1e4:	4c0d      	ldr	r4, [pc, #52]	@ (800d21c <__libc_init_array+0x3c>)
 800d1e6:	1b64      	subs	r4, r4, r5
 800d1e8:	10a4      	asrs	r4, r4, #2
 800d1ea:	2600      	movs	r6, #0
 800d1ec:	42a6      	cmp	r6, r4
 800d1ee:	d109      	bne.n	800d204 <__libc_init_array+0x24>
 800d1f0:	4d0b      	ldr	r5, [pc, #44]	@ (800d220 <__libc_init_array+0x40>)
 800d1f2:	4c0c      	ldr	r4, [pc, #48]	@ (800d224 <__libc_init_array+0x44>)
 800d1f4:	f001 fea8 	bl	800ef48 <_init>
 800d1f8:	1b64      	subs	r4, r4, r5
 800d1fa:	10a4      	asrs	r4, r4, #2
 800d1fc:	2600      	movs	r6, #0
 800d1fe:	42a6      	cmp	r6, r4
 800d200:	d105      	bne.n	800d20e <__libc_init_array+0x2e>
 800d202:	bd70      	pop	{r4, r5, r6, pc}
 800d204:	f855 3b04 	ldr.w	r3, [r5], #4
 800d208:	4798      	blx	r3
 800d20a:	3601      	adds	r6, #1
 800d20c:	e7ee      	b.n	800d1ec <__libc_init_array+0xc>
 800d20e:	f855 3b04 	ldr.w	r3, [r5], #4
 800d212:	4798      	blx	r3
 800d214:	3601      	adds	r6, #1
 800d216:	e7f2      	b.n	800d1fe <__libc_init_array+0x1e>
 800d218:	08012958 	.word	0x08012958
 800d21c:	08012958 	.word	0x08012958
 800d220:	08012958 	.word	0x08012958
 800d224:	08012960 	.word	0x08012960

0800d228 <__retarget_lock_init_recursive>:
 800d228:	4770      	bx	lr

0800d22a <__retarget_lock_acquire_recursive>:
 800d22a:	4770      	bx	lr

0800d22c <__retarget_lock_release_recursive>:
 800d22c:	4770      	bx	lr

0800d22e <memcpy>:
 800d22e:	440a      	add	r2, r1
 800d230:	4291      	cmp	r1, r2
 800d232:	f100 33ff 	add.w	r3, r0, #4294967295
 800d236:	d100      	bne.n	800d23a <memcpy+0xc>
 800d238:	4770      	bx	lr
 800d23a:	b510      	push	{r4, lr}
 800d23c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d240:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d244:	4291      	cmp	r1, r2
 800d246:	d1f9      	bne.n	800d23c <memcpy+0xe>
 800d248:	bd10      	pop	{r4, pc}

0800d24a <quorem>:
 800d24a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d24e:	6903      	ldr	r3, [r0, #16]
 800d250:	690c      	ldr	r4, [r1, #16]
 800d252:	42a3      	cmp	r3, r4
 800d254:	4607      	mov	r7, r0
 800d256:	db7e      	blt.n	800d356 <quorem+0x10c>
 800d258:	3c01      	subs	r4, #1
 800d25a:	f101 0814 	add.w	r8, r1, #20
 800d25e:	00a3      	lsls	r3, r4, #2
 800d260:	f100 0514 	add.w	r5, r0, #20
 800d264:	9300      	str	r3, [sp, #0]
 800d266:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d26a:	9301      	str	r3, [sp, #4]
 800d26c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d270:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d274:	3301      	adds	r3, #1
 800d276:	429a      	cmp	r2, r3
 800d278:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d27c:	fbb2 f6f3 	udiv	r6, r2, r3
 800d280:	d32e      	bcc.n	800d2e0 <quorem+0x96>
 800d282:	f04f 0a00 	mov.w	sl, #0
 800d286:	46c4      	mov	ip, r8
 800d288:	46ae      	mov	lr, r5
 800d28a:	46d3      	mov	fp, sl
 800d28c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d290:	b298      	uxth	r0, r3
 800d292:	fb06 a000 	mla	r0, r6, r0, sl
 800d296:	0c02      	lsrs	r2, r0, #16
 800d298:	0c1b      	lsrs	r3, r3, #16
 800d29a:	fb06 2303 	mla	r3, r6, r3, r2
 800d29e:	f8de 2000 	ldr.w	r2, [lr]
 800d2a2:	b280      	uxth	r0, r0
 800d2a4:	b292      	uxth	r2, r2
 800d2a6:	1a12      	subs	r2, r2, r0
 800d2a8:	445a      	add	r2, fp
 800d2aa:	f8de 0000 	ldr.w	r0, [lr]
 800d2ae:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d2b2:	b29b      	uxth	r3, r3
 800d2b4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800d2b8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800d2bc:	b292      	uxth	r2, r2
 800d2be:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800d2c2:	45e1      	cmp	r9, ip
 800d2c4:	f84e 2b04 	str.w	r2, [lr], #4
 800d2c8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800d2cc:	d2de      	bcs.n	800d28c <quorem+0x42>
 800d2ce:	9b00      	ldr	r3, [sp, #0]
 800d2d0:	58eb      	ldr	r3, [r5, r3]
 800d2d2:	b92b      	cbnz	r3, 800d2e0 <quorem+0x96>
 800d2d4:	9b01      	ldr	r3, [sp, #4]
 800d2d6:	3b04      	subs	r3, #4
 800d2d8:	429d      	cmp	r5, r3
 800d2da:	461a      	mov	r2, r3
 800d2dc:	d32f      	bcc.n	800d33e <quorem+0xf4>
 800d2de:	613c      	str	r4, [r7, #16]
 800d2e0:	4638      	mov	r0, r7
 800d2e2:	f001 f8c5 	bl	800e470 <__mcmp>
 800d2e6:	2800      	cmp	r0, #0
 800d2e8:	db25      	blt.n	800d336 <quorem+0xec>
 800d2ea:	4629      	mov	r1, r5
 800d2ec:	2000      	movs	r0, #0
 800d2ee:	f858 2b04 	ldr.w	r2, [r8], #4
 800d2f2:	f8d1 c000 	ldr.w	ip, [r1]
 800d2f6:	fa1f fe82 	uxth.w	lr, r2
 800d2fa:	fa1f f38c 	uxth.w	r3, ip
 800d2fe:	eba3 030e 	sub.w	r3, r3, lr
 800d302:	4403      	add	r3, r0
 800d304:	0c12      	lsrs	r2, r2, #16
 800d306:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800d30a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800d30e:	b29b      	uxth	r3, r3
 800d310:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d314:	45c1      	cmp	r9, r8
 800d316:	f841 3b04 	str.w	r3, [r1], #4
 800d31a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d31e:	d2e6      	bcs.n	800d2ee <quorem+0xa4>
 800d320:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d324:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d328:	b922      	cbnz	r2, 800d334 <quorem+0xea>
 800d32a:	3b04      	subs	r3, #4
 800d32c:	429d      	cmp	r5, r3
 800d32e:	461a      	mov	r2, r3
 800d330:	d30b      	bcc.n	800d34a <quorem+0x100>
 800d332:	613c      	str	r4, [r7, #16]
 800d334:	3601      	adds	r6, #1
 800d336:	4630      	mov	r0, r6
 800d338:	b003      	add	sp, #12
 800d33a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d33e:	6812      	ldr	r2, [r2, #0]
 800d340:	3b04      	subs	r3, #4
 800d342:	2a00      	cmp	r2, #0
 800d344:	d1cb      	bne.n	800d2de <quorem+0x94>
 800d346:	3c01      	subs	r4, #1
 800d348:	e7c6      	b.n	800d2d8 <quorem+0x8e>
 800d34a:	6812      	ldr	r2, [r2, #0]
 800d34c:	3b04      	subs	r3, #4
 800d34e:	2a00      	cmp	r2, #0
 800d350:	d1ef      	bne.n	800d332 <quorem+0xe8>
 800d352:	3c01      	subs	r4, #1
 800d354:	e7ea      	b.n	800d32c <quorem+0xe2>
 800d356:	2000      	movs	r0, #0
 800d358:	e7ee      	b.n	800d338 <quorem+0xee>
 800d35a:	0000      	movs	r0, r0
 800d35c:	0000      	movs	r0, r0
	...

0800d360 <_dtoa_r>:
 800d360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d364:	69c7      	ldr	r7, [r0, #28]
 800d366:	b099      	sub	sp, #100	@ 0x64
 800d368:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d36c:	ec55 4b10 	vmov	r4, r5, d0
 800d370:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800d372:	9109      	str	r1, [sp, #36]	@ 0x24
 800d374:	4683      	mov	fp, r0
 800d376:	920e      	str	r2, [sp, #56]	@ 0x38
 800d378:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d37a:	b97f      	cbnz	r7, 800d39c <_dtoa_r+0x3c>
 800d37c:	2010      	movs	r0, #16
 800d37e:	f7fe fe87 	bl	800c090 <malloc>
 800d382:	4602      	mov	r2, r0
 800d384:	f8cb 001c 	str.w	r0, [fp, #28]
 800d388:	b920      	cbnz	r0, 800d394 <_dtoa_r+0x34>
 800d38a:	4ba7      	ldr	r3, [pc, #668]	@ (800d628 <_dtoa_r+0x2c8>)
 800d38c:	21ef      	movs	r1, #239	@ 0xef
 800d38e:	48a7      	ldr	r0, [pc, #668]	@ (800d62c <_dtoa_r+0x2cc>)
 800d390:	f001 fd40 	bl	800ee14 <__assert_func>
 800d394:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800d398:	6007      	str	r7, [r0, #0]
 800d39a:	60c7      	str	r7, [r0, #12]
 800d39c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d3a0:	6819      	ldr	r1, [r3, #0]
 800d3a2:	b159      	cbz	r1, 800d3bc <_dtoa_r+0x5c>
 800d3a4:	685a      	ldr	r2, [r3, #4]
 800d3a6:	604a      	str	r2, [r1, #4]
 800d3a8:	2301      	movs	r3, #1
 800d3aa:	4093      	lsls	r3, r2
 800d3ac:	608b      	str	r3, [r1, #8]
 800d3ae:	4658      	mov	r0, fp
 800d3b0:	f000 fe24 	bl	800dffc <_Bfree>
 800d3b4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d3b8:	2200      	movs	r2, #0
 800d3ba:	601a      	str	r2, [r3, #0]
 800d3bc:	1e2b      	subs	r3, r5, #0
 800d3be:	bfb9      	ittee	lt
 800d3c0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800d3c4:	9303      	strlt	r3, [sp, #12]
 800d3c6:	2300      	movge	r3, #0
 800d3c8:	6033      	strge	r3, [r6, #0]
 800d3ca:	9f03      	ldr	r7, [sp, #12]
 800d3cc:	4b98      	ldr	r3, [pc, #608]	@ (800d630 <_dtoa_r+0x2d0>)
 800d3ce:	bfbc      	itt	lt
 800d3d0:	2201      	movlt	r2, #1
 800d3d2:	6032      	strlt	r2, [r6, #0]
 800d3d4:	43bb      	bics	r3, r7
 800d3d6:	d112      	bne.n	800d3fe <_dtoa_r+0x9e>
 800d3d8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d3da:	f242 730f 	movw	r3, #9999	@ 0x270f
 800d3de:	6013      	str	r3, [r2, #0]
 800d3e0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d3e4:	4323      	orrs	r3, r4
 800d3e6:	f000 854d 	beq.w	800de84 <_dtoa_r+0xb24>
 800d3ea:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d3ec:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800d644 <_dtoa_r+0x2e4>
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	f000 854f 	beq.w	800de94 <_dtoa_r+0xb34>
 800d3f6:	f10a 0303 	add.w	r3, sl, #3
 800d3fa:	f000 bd49 	b.w	800de90 <_dtoa_r+0xb30>
 800d3fe:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d402:	2200      	movs	r2, #0
 800d404:	ec51 0b17 	vmov	r0, r1, d7
 800d408:	2300      	movs	r3, #0
 800d40a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800d40e:	f7f3 fb33 	bl	8000a78 <__aeabi_dcmpeq>
 800d412:	4680      	mov	r8, r0
 800d414:	b158      	cbz	r0, 800d42e <_dtoa_r+0xce>
 800d416:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d418:	2301      	movs	r3, #1
 800d41a:	6013      	str	r3, [r2, #0]
 800d41c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d41e:	b113      	cbz	r3, 800d426 <_dtoa_r+0xc6>
 800d420:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800d422:	4b84      	ldr	r3, [pc, #528]	@ (800d634 <_dtoa_r+0x2d4>)
 800d424:	6013      	str	r3, [r2, #0]
 800d426:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800d648 <_dtoa_r+0x2e8>
 800d42a:	f000 bd33 	b.w	800de94 <_dtoa_r+0xb34>
 800d42e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d432:	aa16      	add	r2, sp, #88	@ 0x58
 800d434:	a917      	add	r1, sp, #92	@ 0x5c
 800d436:	4658      	mov	r0, fp
 800d438:	f001 f8ca 	bl	800e5d0 <__d2b>
 800d43c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800d440:	4681      	mov	r9, r0
 800d442:	2e00      	cmp	r6, #0
 800d444:	d077      	beq.n	800d536 <_dtoa_r+0x1d6>
 800d446:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d448:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800d44c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d450:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d454:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800d458:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800d45c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800d460:	4619      	mov	r1, r3
 800d462:	2200      	movs	r2, #0
 800d464:	4b74      	ldr	r3, [pc, #464]	@ (800d638 <_dtoa_r+0x2d8>)
 800d466:	f7f2 fee7 	bl	8000238 <__aeabi_dsub>
 800d46a:	a369      	add	r3, pc, #420	@ (adr r3, 800d610 <_dtoa_r+0x2b0>)
 800d46c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d470:	f7f3 f89a 	bl	80005a8 <__aeabi_dmul>
 800d474:	a368      	add	r3, pc, #416	@ (adr r3, 800d618 <_dtoa_r+0x2b8>)
 800d476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d47a:	f7f2 fedf 	bl	800023c <__adddf3>
 800d47e:	4604      	mov	r4, r0
 800d480:	4630      	mov	r0, r6
 800d482:	460d      	mov	r5, r1
 800d484:	f7f3 f826 	bl	80004d4 <__aeabi_i2d>
 800d488:	a365      	add	r3, pc, #404	@ (adr r3, 800d620 <_dtoa_r+0x2c0>)
 800d48a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d48e:	f7f3 f88b 	bl	80005a8 <__aeabi_dmul>
 800d492:	4602      	mov	r2, r0
 800d494:	460b      	mov	r3, r1
 800d496:	4620      	mov	r0, r4
 800d498:	4629      	mov	r1, r5
 800d49a:	f7f2 fecf 	bl	800023c <__adddf3>
 800d49e:	4604      	mov	r4, r0
 800d4a0:	460d      	mov	r5, r1
 800d4a2:	f7f3 fb31 	bl	8000b08 <__aeabi_d2iz>
 800d4a6:	2200      	movs	r2, #0
 800d4a8:	4607      	mov	r7, r0
 800d4aa:	2300      	movs	r3, #0
 800d4ac:	4620      	mov	r0, r4
 800d4ae:	4629      	mov	r1, r5
 800d4b0:	f7f3 faec 	bl	8000a8c <__aeabi_dcmplt>
 800d4b4:	b140      	cbz	r0, 800d4c8 <_dtoa_r+0x168>
 800d4b6:	4638      	mov	r0, r7
 800d4b8:	f7f3 f80c 	bl	80004d4 <__aeabi_i2d>
 800d4bc:	4622      	mov	r2, r4
 800d4be:	462b      	mov	r3, r5
 800d4c0:	f7f3 fada 	bl	8000a78 <__aeabi_dcmpeq>
 800d4c4:	b900      	cbnz	r0, 800d4c8 <_dtoa_r+0x168>
 800d4c6:	3f01      	subs	r7, #1
 800d4c8:	2f16      	cmp	r7, #22
 800d4ca:	d851      	bhi.n	800d570 <_dtoa_r+0x210>
 800d4cc:	4b5b      	ldr	r3, [pc, #364]	@ (800d63c <_dtoa_r+0x2dc>)
 800d4ce:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d4d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d4da:	f7f3 fad7 	bl	8000a8c <__aeabi_dcmplt>
 800d4de:	2800      	cmp	r0, #0
 800d4e0:	d048      	beq.n	800d574 <_dtoa_r+0x214>
 800d4e2:	3f01      	subs	r7, #1
 800d4e4:	2300      	movs	r3, #0
 800d4e6:	9312      	str	r3, [sp, #72]	@ 0x48
 800d4e8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d4ea:	1b9b      	subs	r3, r3, r6
 800d4ec:	1e5a      	subs	r2, r3, #1
 800d4ee:	bf44      	itt	mi
 800d4f0:	f1c3 0801 	rsbmi	r8, r3, #1
 800d4f4:	2300      	movmi	r3, #0
 800d4f6:	9208      	str	r2, [sp, #32]
 800d4f8:	bf54      	ite	pl
 800d4fa:	f04f 0800 	movpl.w	r8, #0
 800d4fe:	9308      	strmi	r3, [sp, #32]
 800d500:	2f00      	cmp	r7, #0
 800d502:	db39      	blt.n	800d578 <_dtoa_r+0x218>
 800d504:	9b08      	ldr	r3, [sp, #32]
 800d506:	970f      	str	r7, [sp, #60]	@ 0x3c
 800d508:	443b      	add	r3, r7
 800d50a:	9308      	str	r3, [sp, #32]
 800d50c:	2300      	movs	r3, #0
 800d50e:	930a      	str	r3, [sp, #40]	@ 0x28
 800d510:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d512:	2b09      	cmp	r3, #9
 800d514:	d864      	bhi.n	800d5e0 <_dtoa_r+0x280>
 800d516:	2b05      	cmp	r3, #5
 800d518:	bfc4      	itt	gt
 800d51a:	3b04      	subgt	r3, #4
 800d51c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800d51e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d520:	f1a3 0302 	sub.w	r3, r3, #2
 800d524:	bfcc      	ite	gt
 800d526:	2400      	movgt	r4, #0
 800d528:	2401      	movle	r4, #1
 800d52a:	2b03      	cmp	r3, #3
 800d52c:	d863      	bhi.n	800d5f6 <_dtoa_r+0x296>
 800d52e:	e8df f003 	tbb	[pc, r3]
 800d532:	372a      	.short	0x372a
 800d534:	5535      	.short	0x5535
 800d536:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800d53a:	441e      	add	r6, r3
 800d53c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800d540:	2b20      	cmp	r3, #32
 800d542:	bfc1      	itttt	gt
 800d544:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800d548:	409f      	lslgt	r7, r3
 800d54a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800d54e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800d552:	bfd6      	itet	le
 800d554:	f1c3 0320 	rsble	r3, r3, #32
 800d558:	ea47 0003 	orrgt.w	r0, r7, r3
 800d55c:	fa04 f003 	lslle.w	r0, r4, r3
 800d560:	f7f2 ffa8 	bl	80004b4 <__aeabi_ui2d>
 800d564:	2201      	movs	r2, #1
 800d566:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800d56a:	3e01      	subs	r6, #1
 800d56c:	9214      	str	r2, [sp, #80]	@ 0x50
 800d56e:	e777      	b.n	800d460 <_dtoa_r+0x100>
 800d570:	2301      	movs	r3, #1
 800d572:	e7b8      	b.n	800d4e6 <_dtoa_r+0x186>
 800d574:	9012      	str	r0, [sp, #72]	@ 0x48
 800d576:	e7b7      	b.n	800d4e8 <_dtoa_r+0x188>
 800d578:	427b      	negs	r3, r7
 800d57a:	930a      	str	r3, [sp, #40]	@ 0x28
 800d57c:	2300      	movs	r3, #0
 800d57e:	eba8 0807 	sub.w	r8, r8, r7
 800d582:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d584:	e7c4      	b.n	800d510 <_dtoa_r+0x1b0>
 800d586:	2300      	movs	r3, #0
 800d588:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d58a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	dc35      	bgt.n	800d5fc <_dtoa_r+0x29c>
 800d590:	2301      	movs	r3, #1
 800d592:	9300      	str	r3, [sp, #0]
 800d594:	9307      	str	r3, [sp, #28]
 800d596:	461a      	mov	r2, r3
 800d598:	920e      	str	r2, [sp, #56]	@ 0x38
 800d59a:	e00b      	b.n	800d5b4 <_dtoa_r+0x254>
 800d59c:	2301      	movs	r3, #1
 800d59e:	e7f3      	b.n	800d588 <_dtoa_r+0x228>
 800d5a0:	2300      	movs	r3, #0
 800d5a2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d5a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d5a6:	18fb      	adds	r3, r7, r3
 800d5a8:	9300      	str	r3, [sp, #0]
 800d5aa:	3301      	adds	r3, #1
 800d5ac:	2b01      	cmp	r3, #1
 800d5ae:	9307      	str	r3, [sp, #28]
 800d5b0:	bfb8      	it	lt
 800d5b2:	2301      	movlt	r3, #1
 800d5b4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800d5b8:	2100      	movs	r1, #0
 800d5ba:	2204      	movs	r2, #4
 800d5bc:	f102 0514 	add.w	r5, r2, #20
 800d5c0:	429d      	cmp	r5, r3
 800d5c2:	d91f      	bls.n	800d604 <_dtoa_r+0x2a4>
 800d5c4:	6041      	str	r1, [r0, #4]
 800d5c6:	4658      	mov	r0, fp
 800d5c8:	f000 fcd8 	bl	800df7c <_Balloc>
 800d5cc:	4682      	mov	sl, r0
 800d5ce:	2800      	cmp	r0, #0
 800d5d0:	d13c      	bne.n	800d64c <_dtoa_r+0x2ec>
 800d5d2:	4b1b      	ldr	r3, [pc, #108]	@ (800d640 <_dtoa_r+0x2e0>)
 800d5d4:	4602      	mov	r2, r0
 800d5d6:	f240 11af 	movw	r1, #431	@ 0x1af
 800d5da:	e6d8      	b.n	800d38e <_dtoa_r+0x2e>
 800d5dc:	2301      	movs	r3, #1
 800d5de:	e7e0      	b.n	800d5a2 <_dtoa_r+0x242>
 800d5e0:	2401      	movs	r4, #1
 800d5e2:	2300      	movs	r3, #0
 800d5e4:	9309      	str	r3, [sp, #36]	@ 0x24
 800d5e6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800d5e8:	f04f 33ff 	mov.w	r3, #4294967295
 800d5ec:	9300      	str	r3, [sp, #0]
 800d5ee:	9307      	str	r3, [sp, #28]
 800d5f0:	2200      	movs	r2, #0
 800d5f2:	2312      	movs	r3, #18
 800d5f4:	e7d0      	b.n	800d598 <_dtoa_r+0x238>
 800d5f6:	2301      	movs	r3, #1
 800d5f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d5fa:	e7f5      	b.n	800d5e8 <_dtoa_r+0x288>
 800d5fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d5fe:	9300      	str	r3, [sp, #0]
 800d600:	9307      	str	r3, [sp, #28]
 800d602:	e7d7      	b.n	800d5b4 <_dtoa_r+0x254>
 800d604:	3101      	adds	r1, #1
 800d606:	0052      	lsls	r2, r2, #1
 800d608:	e7d8      	b.n	800d5bc <_dtoa_r+0x25c>
 800d60a:	bf00      	nop
 800d60c:	f3af 8000 	nop.w
 800d610:	636f4361 	.word	0x636f4361
 800d614:	3fd287a7 	.word	0x3fd287a7
 800d618:	8b60c8b3 	.word	0x8b60c8b3
 800d61c:	3fc68a28 	.word	0x3fc68a28
 800d620:	509f79fb 	.word	0x509f79fb
 800d624:	3fd34413 	.word	0x3fd34413
 800d628:	08012621 	.word	0x08012621
 800d62c:	08012638 	.word	0x08012638
 800d630:	7ff00000 	.word	0x7ff00000
 800d634:	080125f1 	.word	0x080125f1
 800d638:	3ff80000 	.word	0x3ff80000
 800d63c:	08012730 	.word	0x08012730
 800d640:	08012690 	.word	0x08012690
 800d644:	0801261d 	.word	0x0801261d
 800d648:	080125f0 	.word	0x080125f0
 800d64c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d650:	6018      	str	r0, [r3, #0]
 800d652:	9b07      	ldr	r3, [sp, #28]
 800d654:	2b0e      	cmp	r3, #14
 800d656:	f200 80a4 	bhi.w	800d7a2 <_dtoa_r+0x442>
 800d65a:	2c00      	cmp	r4, #0
 800d65c:	f000 80a1 	beq.w	800d7a2 <_dtoa_r+0x442>
 800d660:	2f00      	cmp	r7, #0
 800d662:	dd33      	ble.n	800d6cc <_dtoa_r+0x36c>
 800d664:	4bad      	ldr	r3, [pc, #692]	@ (800d91c <_dtoa_r+0x5bc>)
 800d666:	f007 020f 	and.w	r2, r7, #15
 800d66a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d66e:	ed93 7b00 	vldr	d7, [r3]
 800d672:	05f8      	lsls	r0, r7, #23
 800d674:	ed8d 7b04 	vstr	d7, [sp, #16]
 800d678:	ea4f 1427 	mov.w	r4, r7, asr #4
 800d67c:	d516      	bpl.n	800d6ac <_dtoa_r+0x34c>
 800d67e:	4ba8      	ldr	r3, [pc, #672]	@ (800d920 <_dtoa_r+0x5c0>)
 800d680:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d684:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d688:	f7f3 f8b8 	bl	80007fc <__aeabi_ddiv>
 800d68c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d690:	f004 040f 	and.w	r4, r4, #15
 800d694:	2603      	movs	r6, #3
 800d696:	4da2      	ldr	r5, [pc, #648]	@ (800d920 <_dtoa_r+0x5c0>)
 800d698:	b954      	cbnz	r4, 800d6b0 <_dtoa_r+0x350>
 800d69a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d69e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d6a2:	f7f3 f8ab 	bl	80007fc <__aeabi_ddiv>
 800d6a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d6aa:	e028      	b.n	800d6fe <_dtoa_r+0x39e>
 800d6ac:	2602      	movs	r6, #2
 800d6ae:	e7f2      	b.n	800d696 <_dtoa_r+0x336>
 800d6b0:	07e1      	lsls	r1, r4, #31
 800d6b2:	d508      	bpl.n	800d6c6 <_dtoa_r+0x366>
 800d6b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d6b8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d6bc:	f7f2 ff74 	bl	80005a8 <__aeabi_dmul>
 800d6c0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d6c4:	3601      	adds	r6, #1
 800d6c6:	1064      	asrs	r4, r4, #1
 800d6c8:	3508      	adds	r5, #8
 800d6ca:	e7e5      	b.n	800d698 <_dtoa_r+0x338>
 800d6cc:	f000 80d2 	beq.w	800d874 <_dtoa_r+0x514>
 800d6d0:	427c      	negs	r4, r7
 800d6d2:	4b92      	ldr	r3, [pc, #584]	@ (800d91c <_dtoa_r+0x5bc>)
 800d6d4:	4d92      	ldr	r5, [pc, #584]	@ (800d920 <_dtoa_r+0x5c0>)
 800d6d6:	f004 020f 	and.w	r2, r4, #15
 800d6da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d6de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6e2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d6e6:	f7f2 ff5f 	bl	80005a8 <__aeabi_dmul>
 800d6ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d6ee:	1124      	asrs	r4, r4, #4
 800d6f0:	2300      	movs	r3, #0
 800d6f2:	2602      	movs	r6, #2
 800d6f4:	2c00      	cmp	r4, #0
 800d6f6:	f040 80b2 	bne.w	800d85e <_dtoa_r+0x4fe>
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d1d3      	bne.n	800d6a6 <_dtoa_r+0x346>
 800d6fe:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d700:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d704:	2b00      	cmp	r3, #0
 800d706:	f000 80b7 	beq.w	800d878 <_dtoa_r+0x518>
 800d70a:	4b86      	ldr	r3, [pc, #536]	@ (800d924 <_dtoa_r+0x5c4>)
 800d70c:	2200      	movs	r2, #0
 800d70e:	4620      	mov	r0, r4
 800d710:	4629      	mov	r1, r5
 800d712:	f7f3 f9bb 	bl	8000a8c <__aeabi_dcmplt>
 800d716:	2800      	cmp	r0, #0
 800d718:	f000 80ae 	beq.w	800d878 <_dtoa_r+0x518>
 800d71c:	9b07      	ldr	r3, [sp, #28]
 800d71e:	2b00      	cmp	r3, #0
 800d720:	f000 80aa 	beq.w	800d878 <_dtoa_r+0x518>
 800d724:	9b00      	ldr	r3, [sp, #0]
 800d726:	2b00      	cmp	r3, #0
 800d728:	dd37      	ble.n	800d79a <_dtoa_r+0x43a>
 800d72a:	1e7b      	subs	r3, r7, #1
 800d72c:	9304      	str	r3, [sp, #16]
 800d72e:	4620      	mov	r0, r4
 800d730:	4b7d      	ldr	r3, [pc, #500]	@ (800d928 <_dtoa_r+0x5c8>)
 800d732:	2200      	movs	r2, #0
 800d734:	4629      	mov	r1, r5
 800d736:	f7f2 ff37 	bl	80005a8 <__aeabi_dmul>
 800d73a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d73e:	9c00      	ldr	r4, [sp, #0]
 800d740:	3601      	adds	r6, #1
 800d742:	4630      	mov	r0, r6
 800d744:	f7f2 fec6 	bl	80004d4 <__aeabi_i2d>
 800d748:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d74c:	f7f2 ff2c 	bl	80005a8 <__aeabi_dmul>
 800d750:	4b76      	ldr	r3, [pc, #472]	@ (800d92c <_dtoa_r+0x5cc>)
 800d752:	2200      	movs	r2, #0
 800d754:	f7f2 fd72 	bl	800023c <__adddf3>
 800d758:	4605      	mov	r5, r0
 800d75a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800d75e:	2c00      	cmp	r4, #0
 800d760:	f040 808d 	bne.w	800d87e <_dtoa_r+0x51e>
 800d764:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d768:	4b71      	ldr	r3, [pc, #452]	@ (800d930 <_dtoa_r+0x5d0>)
 800d76a:	2200      	movs	r2, #0
 800d76c:	f7f2 fd64 	bl	8000238 <__aeabi_dsub>
 800d770:	4602      	mov	r2, r0
 800d772:	460b      	mov	r3, r1
 800d774:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d778:	462a      	mov	r2, r5
 800d77a:	4633      	mov	r3, r6
 800d77c:	f7f3 f9a4 	bl	8000ac8 <__aeabi_dcmpgt>
 800d780:	2800      	cmp	r0, #0
 800d782:	f040 828b 	bne.w	800dc9c <_dtoa_r+0x93c>
 800d786:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d78a:	462a      	mov	r2, r5
 800d78c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800d790:	f7f3 f97c 	bl	8000a8c <__aeabi_dcmplt>
 800d794:	2800      	cmp	r0, #0
 800d796:	f040 8128 	bne.w	800d9ea <_dtoa_r+0x68a>
 800d79a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800d79e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800d7a2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	f2c0 815a 	blt.w	800da5e <_dtoa_r+0x6fe>
 800d7aa:	2f0e      	cmp	r7, #14
 800d7ac:	f300 8157 	bgt.w	800da5e <_dtoa_r+0x6fe>
 800d7b0:	4b5a      	ldr	r3, [pc, #360]	@ (800d91c <_dtoa_r+0x5bc>)
 800d7b2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d7b6:	ed93 7b00 	vldr	d7, [r3]
 800d7ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	ed8d 7b00 	vstr	d7, [sp]
 800d7c2:	da03      	bge.n	800d7cc <_dtoa_r+0x46c>
 800d7c4:	9b07      	ldr	r3, [sp, #28]
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	f340 8101 	ble.w	800d9ce <_dtoa_r+0x66e>
 800d7cc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d7d0:	4656      	mov	r6, sl
 800d7d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d7d6:	4620      	mov	r0, r4
 800d7d8:	4629      	mov	r1, r5
 800d7da:	f7f3 f80f 	bl	80007fc <__aeabi_ddiv>
 800d7de:	f7f3 f993 	bl	8000b08 <__aeabi_d2iz>
 800d7e2:	4680      	mov	r8, r0
 800d7e4:	f7f2 fe76 	bl	80004d4 <__aeabi_i2d>
 800d7e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d7ec:	f7f2 fedc 	bl	80005a8 <__aeabi_dmul>
 800d7f0:	4602      	mov	r2, r0
 800d7f2:	460b      	mov	r3, r1
 800d7f4:	4620      	mov	r0, r4
 800d7f6:	4629      	mov	r1, r5
 800d7f8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800d7fc:	f7f2 fd1c 	bl	8000238 <__aeabi_dsub>
 800d800:	f806 4b01 	strb.w	r4, [r6], #1
 800d804:	9d07      	ldr	r5, [sp, #28]
 800d806:	eba6 040a 	sub.w	r4, r6, sl
 800d80a:	42a5      	cmp	r5, r4
 800d80c:	4602      	mov	r2, r0
 800d80e:	460b      	mov	r3, r1
 800d810:	f040 8117 	bne.w	800da42 <_dtoa_r+0x6e2>
 800d814:	f7f2 fd12 	bl	800023c <__adddf3>
 800d818:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d81c:	4604      	mov	r4, r0
 800d81e:	460d      	mov	r5, r1
 800d820:	f7f3 f952 	bl	8000ac8 <__aeabi_dcmpgt>
 800d824:	2800      	cmp	r0, #0
 800d826:	f040 80f9 	bne.w	800da1c <_dtoa_r+0x6bc>
 800d82a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d82e:	4620      	mov	r0, r4
 800d830:	4629      	mov	r1, r5
 800d832:	f7f3 f921 	bl	8000a78 <__aeabi_dcmpeq>
 800d836:	b118      	cbz	r0, 800d840 <_dtoa_r+0x4e0>
 800d838:	f018 0f01 	tst.w	r8, #1
 800d83c:	f040 80ee 	bne.w	800da1c <_dtoa_r+0x6bc>
 800d840:	4649      	mov	r1, r9
 800d842:	4658      	mov	r0, fp
 800d844:	f000 fbda 	bl	800dffc <_Bfree>
 800d848:	2300      	movs	r3, #0
 800d84a:	7033      	strb	r3, [r6, #0]
 800d84c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d84e:	3701      	adds	r7, #1
 800d850:	601f      	str	r7, [r3, #0]
 800d852:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d854:	2b00      	cmp	r3, #0
 800d856:	f000 831d 	beq.w	800de94 <_dtoa_r+0xb34>
 800d85a:	601e      	str	r6, [r3, #0]
 800d85c:	e31a      	b.n	800de94 <_dtoa_r+0xb34>
 800d85e:	07e2      	lsls	r2, r4, #31
 800d860:	d505      	bpl.n	800d86e <_dtoa_r+0x50e>
 800d862:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d866:	f7f2 fe9f 	bl	80005a8 <__aeabi_dmul>
 800d86a:	3601      	adds	r6, #1
 800d86c:	2301      	movs	r3, #1
 800d86e:	1064      	asrs	r4, r4, #1
 800d870:	3508      	adds	r5, #8
 800d872:	e73f      	b.n	800d6f4 <_dtoa_r+0x394>
 800d874:	2602      	movs	r6, #2
 800d876:	e742      	b.n	800d6fe <_dtoa_r+0x39e>
 800d878:	9c07      	ldr	r4, [sp, #28]
 800d87a:	9704      	str	r7, [sp, #16]
 800d87c:	e761      	b.n	800d742 <_dtoa_r+0x3e2>
 800d87e:	4b27      	ldr	r3, [pc, #156]	@ (800d91c <_dtoa_r+0x5bc>)
 800d880:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d882:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d886:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d88a:	4454      	add	r4, sl
 800d88c:	2900      	cmp	r1, #0
 800d88e:	d053      	beq.n	800d938 <_dtoa_r+0x5d8>
 800d890:	4928      	ldr	r1, [pc, #160]	@ (800d934 <_dtoa_r+0x5d4>)
 800d892:	2000      	movs	r0, #0
 800d894:	f7f2 ffb2 	bl	80007fc <__aeabi_ddiv>
 800d898:	4633      	mov	r3, r6
 800d89a:	462a      	mov	r2, r5
 800d89c:	f7f2 fccc 	bl	8000238 <__aeabi_dsub>
 800d8a0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d8a4:	4656      	mov	r6, sl
 800d8a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d8aa:	f7f3 f92d 	bl	8000b08 <__aeabi_d2iz>
 800d8ae:	4605      	mov	r5, r0
 800d8b0:	f7f2 fe10 	bl	80004d4 <__aeabi_i2d>
 800d8b4:	4602      	mov	r2, r0
 800d8b6:	460b      	mov	r3, r1
 800d8b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d8bc:	f7f2 fcbc 	bl	8000238 <__aeabi_dsub>
 800d8c0:	3530      	adds	r5, #48	@ 0x30
 800d8c2:	4602      	mov	r2, r0
 800d8c4:	460b      	mov	r3, r1
 800d8c6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d8ca:	f806 5b01 	strb.w	r5, [r6], #1
 800d8ce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d8d2:	f7f3 f8db 	bl	8000a8c <__aeabi_dcmplt>
 800d8d6:	2800      	cmp	r0, #0
 800d8d8:	d171      	bne.n	800d9be <_dtoa_r+0x65e>
 800d8da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d8de:	4911      	ldr	r1, [pc, #68]	@ (800d924 <_dtoa_r+0x5c4>)
 800d8e0:	2000      	movs	r0, #0
 800d8e2:	f7f2 fca9 	bl	8000238 <__aeabi_dsub>
 800d8e6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d8ea:	f7f3 f8cf 	bl	8000a8c <__aeabi_dcmplt>
 800d8ee:	2800      	cmp	r0, #0
 800d8f0:	f040 8095 	bne.w	800da1e <_dtoa_r+0x6be>
 800d8f4:	42a6      	cmp	r6, r4
 800d8f6:	f43f af50 	beq.w	800d79a <_dtoa_r+0x43a>
 800d8fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d8fe:	4b0a      	ldr	r3, [pc, #40]	@ (800d928 <_dtoa_r+0x5c8>)
 800d900:	2200      	movs	r2, #0
 800d902:	f7f2 fe51 	bl	80005a8 <__aeabi_dmul>
 800d906:	4b08      	ldr	r3, [pc, #32]	@ (800d928 <_dtoa_r+0x5c8>)
 800d908:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d90c:	2200      	movs	r2, #0
 800d90e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d912:	f7f2 fe49 	bl	80005a8 <__aeabi_dmul>
 800d916:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d91a:	e7c4      	b.n	800d8a6 <_dtoa_r+0x546>
 800d91c:	08012730 	.word	0x08012730
 800d920:	08012708 	.word	0x08012708
 800d924:	3ff00000 	.word	0x3ff00000
 800d928:	40240000 	.word	0x40240000
 800d92c:	401c0000 	.word	0x401c0000
 800d930:	40140000 	.word	0x40140000
 800d934:	3fe00000 	.word	0x3fe00000
 800d938:	4631      	mov	r1, r6
 800d93a:	4628      	mov	r0, r5
 800d93c:	f7f2 fe34 	bl	80005a8 <__aeabi_dmul>
 800d940:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d944:	9415      	str	r4, [sp, #84]	@ 0x54
 800d946:	4656      	mov	r6, sl
 800d948:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d94c:	f7f3 f8dc 	bl	8000b08 <__aeabi_d2iz>
 800d950:	4605      	mov	r5, r0
 800d952:	f7f2 fdbf 	bl	80004d4 <__aeabi_i2d>
 800d956:	4602      	mov	r2, r0
 800d958:	460b      	mov	r3, r1
 800d95a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d95e:	f7f2 fc6b 	bl	8000238 <__aeabi_dsub>
 800d962:	3530      	adds	r5, #48	@ 0x30
 800d964:	f806 5b01 	strb.w	r5, [r6], #1
 800d968:	4602      	mov	r2, r0
 800d96a:	460b      	mov	r3, r1
 800d96c:	42a6      	cmp	r6, r4
 800d96e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d972:	f04f 0200 	mov.w	r2, #0
 800d976:	d124      	bne.n	800d9c2 <_dtoa_r+0x662>
 800d978:	4bac      	ldr	r3, [pc, #688]	@ (800dc2c <_dtoa_r+0x8cc>)
 800d97a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d97e:	f7f2 fc5d 	bl	800023c <__adddf3>
 800d982:	4602      	mov	r2, r0
 800d984:	460b      	mov	r3, r1
 800d986:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d98a:	f7f3 f89d 	bl	8000ac8 <__aeabi_dcmpgt>
 800d98e:	2800      	cmp	r0, #0
 800d990:	d145      	bne.n	800da1e <_dtoa_r+0x6be>
 800d992:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d996:	49a5      	ldr	r1, [pc, #660]	@ (800dc2c <_dtoa_r+0x8cc>)
 800d998:	2000      	movs	r0, #0
 800d99a:	f7f2 fc4d 	bl	8000238 <__aeabi_dsub>
 800d99e:	4602      	mov	r2, r0
 800d9a0:	460b      	mov	r3, r1
 800d9a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d9a6:	f7f3 f871 	bl	8000a8c <__aeabi_dcmplt>
 800d9aa:	2800      	cmp	r0, #0
 800d9ac:	f43f aef5 	beq.w	800d79a <_dtoa_r+0x43a>
 800d9b0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800d9b2:	1e73      	subs	r3, r6, #1
 800d9b4:	9315      	str	r3, [sp, #84]	@ 0x54
 800d9b6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d9ba:	2b30      	cmp	r3, #48	@ 0x30
 800d9bc:	d0f8      	beq.n	800d9b0 <_dtoa_r+0x650>
 800d9be:	9f04      	ldr	r7, [sp, #16]
 800d9c0:	e73e      	b.n	800d840 <_dtoa_r+0x4e0>
 800d9c2:	4b9b      	ldr	r3, [pc, #620]	@ (800dc30 <_dtoa_r+0x8d0>)
 800d9c4:	f7f2 fdf0 	bl	80005a8 <__aeabi_dmul>
 800d9c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d9cc:	e7bc      	b.n	800d948 <_dtoa_r+0x5e8>
 800d9ce:	d10c      	bne.n	800d9ea <_dtoa_r+0x68a>
 800d9d0:	4b98      	ldr	r3, [pc, #608]	@ (800dc34 <_dtoa_r+0x8d4>)
 800d9d2:	2200      	movs	r2, #0
 800d9d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d9d8:	f7f2 fde6 	bl	80005a8 <__aeabi_dmul>
 800d9dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d9e0:	f7f3 f868 	bl	8000ab4 <__aeabi_dcmpge>
 800d9e4:	2800      	cmp	r0, #0
 800d9e6:	f000 8157 	beq.w	800dc98 <_dtoa_r+0x938>
 800d9ea:	2400      	movs	r4, #0
 800d9ec:	4625      	mov	r5, r4
 800d9ee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d9f0:	43db      	mvns	r3, r3
 800d9f2:	9304      	str	r3, [sp, #16]
 800d9f4:	4656      	mov	r6, sl
 800d9f6:	2700      	movs	r7, #0
 800d9f8:	4621      	mov	r1, r4
 800d9fa:	4658      	mov	r0, fp
 800d9fc:	f000 fafe 	bl	800dffc <_Bfree>
 800da00:	2d00      	cmp	r5, #0
 800da02:	d0dc      	beq.n	800d9be <_dtoa_r+0x65e>
 800da04:	b12f      	cbz	r7, 800da12 <_dtoa_r+0x6b2>
 800da06:	42af      	cmp	r7, r5
 800da08:	d003      	beq.n	800da12 <_dtoa_r+0x6b2>
 800da0a:	4639      	mov	r1, r7
 800da0c:	4658      	mov	r0, fp
 800da0e:	f000 faf5 	bl	800dffc <_Bfree>
 800da12:	4629      	mov	r1, r5
 800da14:	4658      	mov	r0, fp
 800da16:	f000 faf1 	bl	800dffc <_Bfree>
 800da1a:	e7d0      	b.n	800d9be <_dtoa_r+0x65e>
 800da1c:	9704      	str	r7, [sp, #16]
 800da1e:	4633      	mov	r3, r6
 800da20:	461e      	mov	r6, r3
 800da22:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800da26:	2a39      	cmp	r2, #57	@ 0x39
 800da28:	d107      	bne.n	800da3a <_dtoa_r+0x6da>
 800da2a:	459a      	cmp	sl, r3
 800da2c:	d1f8      	bne.n	800da20 <_dtoa_r+0x6c0>
 800da2e:	9a04      	ldr	r2, [sp, #16]
 800da30:	3201      	adds	r2, #1
 800da32:	9204      	str	r2, [sp, #16]
 800da34:	2230      	movs	r2, #48	@ 0x30
 800da36:	f88a 2000 	strb.w	r2, [sl]
 800da3a:	781a      	ldrb	r2, [r3, #0]
 800da3c:	3201      	adds	r2, #1
 800da3e:	701a      	strb	r2, [r3, #0]
 800da40:	e7bd      	b.n	800d9be <_dtoa_r+0x65e>
 800da42:	4b7b      	ldr	r3, [pc, #492]	@ (800dc30 <_dtoa_r+0x8d0>)
 800da44:	2200      	movs	r2, #0
 800da46:	f7f2 fdaf 	bl	80005a8 <__aeabi_dmul>
 800da4a:	2200      	movs	r2, #0
 800da4c:	2300      	movs	r3, #0
 800da4e:	4604      	mov	r4, r0
 800da50:	460d      	mov	r5, r1
 800da52:	f7f3 f811 	bl	8000a78 <__aeabi_dcmpeq>
 800da56:	2800      	cmp	r0, #0
 800da58:	f43f aebb 	beq.w	800d7d2 <_dtoa_r+0x472>
 800da5c:	e6f0      	b.n	800d840 <_dtoa_r+0x4e0>
 800da5e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800da60:	2a00      	cmp	r2, #0
 800da62:	f000 80db 	beq.w	800dc1c <_dtoa_r+0x8bc>
 800da66:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800da68:	2a01      	cmp	r2, #1
 800da6a:	f300 80bf 	bgt.w	800dbec <_dtoa_r+0x88c>
 800da6e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800da70:	2a00      	cmp	r2, #0
 800da72:	f000 80b7 	beq.w	800dbe4 <_dtoa_r+0x884>
 800da76:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800da7a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800da7c:	4646      	mov	r6, r8
 800da7e:	9a08      	ldr	r2, [sp, #32]
 800da80:	2101      	movs	r1, #1
 800da82:	441a      	add	r2, r3
 800da84:	4658      	mov	r0, fp
 800da86:	4498      	add	r8, r3
 800da88:	9208      	str	r2, [sp, #32]
 800da8a:	f000 fb6b 	bl	800e164 <__i2b>
 800da8e:	4605      	mov	r5, r0
 800da90:	b15e      	cbz	r6, 800daaa <_dtoa_r+0x74a>
 800da92:	9b08      	ldr	r3, [sp, #32]
 800da94:	2b00      	cmp	r3, #0
 800da96:	dd08      	ble.n	800daaa <_dtoa_r+0x74a>
 800da98:	42b3      	cmp	r3, r6
 800da9a:	9a08      	ldr	r2, [sp, #32]
 800da9c:	bfa8      	it	ge
 800da9e:	4633      	movge	r3, r6
 800daa0:	eba8 0803 	sub.w	r8, r8, r3
 800daa4:	1af6      	subs	r6, r6, r3
 800daa6:	1ad3      	subs	r3, r2, r3
 800daa8:	9308      	str	r3, [sp, #32]
 800daaa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800daac:	b1f3      	cbz	r3, 800daec <_dtoa_r+0x78c>
 800daae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	f000 80b7 	beq.w	800dc24 <_dtoa_r+0x8c4>
 800dab6:	b18c      	cbz	r4, 800dadc <_dtoa_r+0x77c>
 800dab8:	4629      	mov	r1, r5
 800daba:	4622      	mov	r2, r4
 800dabc:	4658      	mov	r0, fp
 800dabe:	f000 fc11 	bl	800e2e4 <__pow5mult>
 800dac2:	464a      	mov	r2, r9
 800dac4:	4601      	mov	r1, r0
 800dac6:	4605      	mov	r5, r0
 800dac8:	4658      	mov	r0, fp
 800daca:	f000 fb61 	bl	800e190 <__multiply>
 800dace:	4649      	mov	r1, r9
 800dad0:	9004      	str	r0, [sp, #16]
 800dad2:	4658      	mov	r0, fp
 800dad4:	f000 fa92 	bl	800dffc <_Bfree>
 800dad8:	9b04      	ldr	r3, [sp, #16]
 800dada:	4699      	mov	r9, r3
 800dadc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dade:	1b1a      	subs	r2, r3, r4
 800dae0:	d004      	beq.n	800daec <_dtoa_r+0x78c>
 800dae2:	4649      	mov	r1, r9
 800dae4:	4658      	mov	r0, fp
 800dae6:	f000 fbfd 	bl	800e2e4 <__pow5mult>
 800daea:	4681      	mov	r9, r0
 800daec:	2101      	movs	r1, #1
 800daee:	4658      	mov	r0, fp
 800daf0:	f000 fb38 	bl	800e164 <__i2b>
 800daf4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800daf6:	4604      	mov	r4, r0
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	f000 81cf 	beq.w	800de9c <_dtoa_r+0xb3c>
 800dafe:	461a      	mov	r2, r3
 800db00:	4601      	mov	r1, r0
 800db02:	4658      	mov	r0, fp
 800db04:	f000 fbee 	bl	800e2e4 <__pow5mult>
 800db08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800db0a:	2b01      	cmp	r3, #1
 800db0c:	4604      	mov	r4, r0
 800db0e:	f300 8095 	bgt.w	800dc3c <_dtoa_r+0x8dc>
 800db12:	9b02      	ldr	r3, [sp, #8]
 800db14:	2b00      	cmp	r3, #0
 800db16:	f040 8087 	bne.w	800dc28 <_dtoa_r+0x8c8>
 800db1a:	9b03      	ldr	r3, [sp, #12]
 800db1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800db20:	2b00      	cmp	r3, #0
 800db22:	f040 8089 	bne.w	800dc38 <_dtoa_r+0x8d8>
 800db26:	9b03      	ldr	r3, [sp, #12]
 800db28:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800db2c:	0d1b      	lsrs	r3, r3, #20
 800db2e:	051b      	lsls	r3, r3, #20
 800db30:	b12b      	cbz	r3, 800db3e <_dtoa_r+0x7de>
 800db32:	9b08      	ldr	r3, [sp, #32]
 800db34:	3301      	adds	r3, #1
 800db36:	9308      	str	r3, [sp, #32]
 800db38:	f108 0801 	add.w	r8, r8, #1
 800db3c:	2301      	movs	r3, #1
 800db3e:	930a      	str	r3, [sp, #40]	@ 0x28
 800db40:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800db42:	2b00      	cmp	r3, #0
 800db44:	f000 81b0 	beq.w	800dea8 <_dtoa_r+0xb48>
 800db48:	6923      	ldr	r3, [r4, #16]
 800db4a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800db4e:	6918      	ldr	r0, [r3, #16]
 800db50:	f000 fabc 	bl	800e0cc <__hi0bits>
 800db54:	f1c0 0020 	rsb	r0, r0, #32
 800db58:	9b08      	ldr	r3, [sp, #32]
 800db5a:	4418      	add	r0, r3
 800db5c:	f010 001f 	ands.w	r0, r0, #31
 800db60:	d077      	beq.n	800dc52 <_dtoa_r+0x8f2>
 800db62:	f1c0 0320 	rsb	r3, r0, #32
 800db66:	2b04      	cmp	r3, #4
 800db68:	dd6b      	ble.n	800dc42 <_dtoa_r+0x8e2>
 800db6a:	9b08      	ldr	r3, [sp, #32]
 800db6c:	f1c0 001c 	rsb	r0, r0, #28
 800db70:	4403      	add	r3, r0
 800db72:	4480      	add	r8, r0
 800db74:	4406      	add	r6, r0
 800db76:	9308      	str	r3, [sp, #32]
 800db78:	f1b8 0f00 	cmp.w	r8, #0
 800db7c:	dd05      	ble.n	800db8a <_dtoa_r+0x82a>
 800db7e:	4649      	mov	r1, r9
 800db80:	4642      	mov	r2, r8
 800db82:	4658      	mov	r0, fp
 800db84:	f000 fc08 	bl	800e398 <__lshift>
 800db88:	4681      	mov	r9, r0
 800db8a:	9b08      	ldr	r3, [sp, #32]
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	dd05      	ble.n	800db9c <_dtoa_r+0x83c>
 800db90:	4621      	mov	r1, r4
 800db92:	461a      	mov	r2, r3
 800db94:	4658      	mov	r0, fp
 800db96:	f000 fbff 	bl	800e398 <__lshift>
 800db9a:	4604      	mov	r4, r0
 800db9c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d059      	beq.n	800dc56 <_dtoa_r+0x8f6>
 800dba2:	4621      	mov	r1, r4
 800dba4:	4648      	mov	r0, r9
 800dba6:	f000 fc63 	bl	800e470 <__mcmp>
 800dbaa:	2800      	cmp	r0, #0
 800dbac:	da53      	bge.n	800dc56 <_dtoa_r+0x8f6>
 800dbae:	1e7b      	subs	r3, r7, #1
 800dbb0:	9304      	str	r3, [sp, #16]
 800dbb2:	4649      	mov	r1, r9
 800dbb4:	2300      	movs	r3, #0
 800dbb6:	220a      	movs	r2, #10
 800dbb8:	4658      	mov	r0, fp
 800dbba:	f000 fa41 	bl	800e040 <__multadd>
 800dbbe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dbc0:	4681      	mov	r9, r0
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	f000 8172 	beq.w	800deac <_dtoa_r+0xb4c>
 800dbc8:	2300      	movs	r3, #0
 800dbca:	4629      	mov	r1, r5
 800dbcc:	220a      	movs	r2, #10
 800dbce:	4658      	mov	r0, fp
 800dbd0:	f000 fa36 	bl	800e040 <__multadd>
 800dbd4:	9b00      	ldr	r3, [sp, #0]
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	4605      	mov	r5, r0
 800dbda:	dc67      	bgt.n	800dcac <_dtoa_r+0x94c>
 800dbdc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dbde:	2b02      	cmp	r3, #2
 800dbe0:	dc41      	bgt.n	800dc66 <_dtoa_r+0x906>
 800dbe2:	e063      	b.n	800dcac <_dtoa_r+0x94c>
 800dbe4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800dbe6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800dbea:	e746      	b.n	800da7a <_dtoa_r+0x71a>
 800dbec:	9b07      	ldr	r3, [sp, #28]
 800dbee:	1e5c      	subs	r4, r3, #1
 800dbf0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dbf2:	42a3      	cmp	r3, r4
 800dbf4:	bfbf      	itttt	lt
 800dbf6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800dbf8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800dbfa:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800dbfc:	1ae3      	sublt	r3, r4, r3
 800dbfe:	bfb4      	ite	lt
 800dc00:	18d2      	addlt	r2, r2, r3
 800dc02:	1b1c      	subge	r4, r3, r4
 800dc04:	9b07      	ldr	r3, [sp, #28]
 800dc06:	bfbc      	itt	lt
 800dc08:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800dc0a:	2400      	movlt	r4, #0
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	bfb5      	itete	lt
 800dc10:	eba8 0603 	sublt.w	r6, r8, r3
 800dc14:	9b07      	ldrge	r3, [sp, #28]
 800dc16:	2300      	movlt	r3, #0
 800dc18:	4646      	movge	r6, r8
 800dc1a:	e730      	b.n	800da7e <_dtoa_r+0x71e>
 800dc1c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800dc1e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800dc20:	4646      	mov	r6, r8
 800dc22:	e735      	b.n	800da90 <_dtoa_r+0x730>
 800dc24:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800dc26:	e75c      	b.n	800dae2 <_dtoa_r+0x782>
 800dc28:	2300      	movs	r3, #0
 800dc2a:	e788      	b.n	800db3e <_dtoa_r+0x7de>
 800dc2c:	3fe00000 	.word	0x3fe00000
 800dc30:	40240000 	.word	0x40240000
 800dc34:	40140000 	.word	0x40140000
 800dc38:	9b02      	ldr	r3, [sp, #8]
 800dc3a:	e780      	b.n	800db3e <_dtoa_r+0x7de>
 800dc3c:	2300      	movs	r3, #0
 800dc3e:	930a      	str	r3, [sp, #40]	@ 0x28
 800dc40:	e782      	b.n	800db48 <_dtoa_r+0x7e8>
 800dc42:	d099      	beq.n	800db78 <_dtoa_r+0x818>
 800dc44:	9a08      	ldr	r2, [sp, #32]
 800dc46:	331c      	adds	r3, #28
 800dc48:	441a      	add	r2, r3
 800dc4a:	4498      	add	r8, r3
 800dc4c:	441e      	add	r6, r3
 800dc4e:	9208      	str	r2, [sp, #32]
 800dc50:	e792      	b.n	800db78 <_dtoa_r+0x818>
 800dc52:	4603      	mov	r3, r0
 800dc54:	e7f6      	b.n	800dc44 <_dtoa_r+0x8e4>
 800dc56:	9b07      	ldr	r3, [sp, #28]
 800dc58:	9704      	str	r7, [sp, #16]
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	dc20      	bgt.n	800dca0 <_dtoa_r+0x940>
 800dc5e:	9300      	str	r3, [sp, #0]
 800dc60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc62:	2b02      	cmp	r3, #2
 800dc64:	dd1e      	ble.n	800dca4 <_dtoa_r+0x944>
 800dc66:	9b00      	ldr	r3, [sp, #0]
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	f47f aec0 	bne.w	800d9ee <_dtoa_r+0x68e>
 800dc6e:	4621      	mov	r1, r4
 800dc70:	2205      	movs	r2, #5
 800dc72:	4658      	mov	r0, fp
 800dc74:	f000 f9e4 	bl	800e040 <__multadd>
 800dc78:	4601      	mov	r1, r0
 800dc7a:	4604      	mov	r4, r0
 800dc7c:	4648      	mov	r0, r9
 800dc7e:	f000 fbf7 	bl	800e470 <__mcmp>
 800dc82:	2800      	cmp	r0, #0
 800dc84:	f77f aeb3 	ble.w	800d9ee <_dtoa_r+0x68e>
 800dc88:	4656      	mov	r6, sl
 800dc8a:	2331      	movs	r3, #49	@ 0x31
 800dc8c:	f806 3b01 	strb.w	r3, [r6], #1
 800dc90:	9b04      	ldr	r3, [sp, #16]
 800dc92:	3301      	adds	r3, #1
 800dc94:	9304      	str	r3, [sp, #16]
 800dc96:	e6ae      	b.n	800d9f6 <_dtoa_r+0x696>
 800dc98:	9c07      	ldr	r4, [sp, #28]
 800dc9a:	9704      	str	r7, [sp, #16]
 800dc9c:	4625      	mov	r5, r4
 800dc9e:	e7f3      	b.n	800dc88 <_dtoa_r+0x928>
 800dca0:	9b07      	ldr	r3, [sp, #28]
 800dca2:	9300      	str	r3, [sp, #0]
 800dca4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	f000 8104 	beq.w	800deb4 <_dtoa_r+0xb54>
 800dcac:	2e00      	cmp	r6, #0
 800dcae:	dd05      	ble.n	800dcbc <_dtoa_r+0x95c>
 800dcb0:	4629      	mov	r1, r5
 800dcb2:	4632      	mov	r2, r6
 800dcb4:	4658      	mov	r0, fp
 800dcb6:	f000 fb6f 	bl	800e398 <__lshift>
 800dcba:	4605      	mov	r5, r0
 800dcbc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d05a      	beq.n	800dd78 <_dtoa_r+0xa18>
 800dcc2:	6869      	ldr	r1, [r5, #4]
 800dcc4:	4658      	mov	r0, fp
 800dcc6:	f000 f959 	bl	800df7c <_Balloc>
 800dcca:	4606      	mov	r6, r0
 800dccc:	b928      	cbnz	r0, 800dcda <_dtoa_r+0x97a>
 800dcce:	4b84      	ldr	r3, [pc, #528]	@ (800dee0 <_dtoa_r+0xb80>)
 800dcd0:	4602      	mov	r2, r0
 800dcd2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800dcd6:	f7ff bb5a 	b.w	800d38e <_dtoa_r+0x2e>
 800dcda:	692a      	ldr	r2, [r5, #16]
 800dcdc:	3202      	adds	r2, #2
 800dcde:	0092      	lsls	r2, r2, #2
 800dce0:	f105 010c 	add.w	r1, r5, #12
 800dce4:	300c      	adds	r0, #12
 800dce6:	f7ff faa2 	bl	800d22e <memcpy>
 800dcea:	2201      	movs	r2, #1
 800dcec:	4631      	mov	r1, r6
 800dcee:	4658      	mov	r0, fp
 800dcf0:	f000 fb52 	bl	800e398 <__lshift>
 800dcf4:	f10a 0301 	add.w	r3, sl, #1
 800dcf8:	9307      	str	r3, [sp, #28]
 800dcfa:	9b00      	ldr	r3, [sp, #0]
 800dcfc:	4453      	add	r3, sl
 800dcfe:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dd00:	9b02      	ldr	r3, [sp, #8]
 800dd02:	f003 0301 	and.w	r3, r3, #1
 800dd06:	462f      	mov	r7, r5
 800dd08:	930a      	str	r3, [sp, #40]	@ 0x28
 800dd0a:	4605      	mov	r5, r0
 800dd0c:	9b07      	ldr	r3, [sp, #28]
 800dd0e:	4621      	mov	r1, r4
 800dd10:	3b01      	subs	r3, #1
 800dd12:	4648      	mov	r0, r9
 800dd14:	9300      	str	r3, [sp, #0]
 800dd16:	f7ff fa98 	bl	800d24a <quorem>
 800dd1a:	4639      	mov	r1, r7
 800dd1c:	9002      	str	r0, [sp, #8]
 800dd1e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800dd22:	4648      	mov	r0, r9
 800dd24:	f000 fba4 	bl	800e470 <__mcmp>
 800dd28:	462a      	mov	r2, r5
 800dd2a:	9008      	str	r0, [sp, #32]
 800dd2c:	4621      	mov	r1, r4
 800dd2e:	4658      	mov	r0, fp
 800dd30:	f000 fbba 	bl	800e4a8 <__mdiff>
 800dd34:	68c2      	ldr	r2, [r0, #12]
 800dd36:	4606      	mov	r6, r0
 800dd38:	bb02      	cbnz	r2, 800dd7c <_dtoa_r+0xa1c>
 800dd3a:	4601      	mov	r1, r0
 800dd3c:	4648      	mov	r0, r9
 800dd3e:	f000 fb97 	bl	800e470 <__mcmp>
 800dd42:	4602      	mov	r2, r0
 800dd44:	4631      	mov	r1, r6
 800dd46:	4658      	mov	r0, fp
 800dd48:	920e      	str	r2, [sp, #56]	@ 0x38
 800dd4a:	f000 f957 	bl	800dffc <_Bfree>
 800dd4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd50:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dd52:	9e07      	ldr	r6, [sp, #28]
 800dd54:	ea43 0102 	orr.w	r1, r3, r2
 800dd58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dd5a:	4319      	orrs	r1, r3
 800dd5c:	d110      	bne.n	800dd80 <_dtoa_r+0xa20>
 800dd5e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800dd62:	d029      	beq.n	800ddb8 <_dtoa_r+0xa58>
 800dd64:	9b08      	ldr	r3, [sp, #32]
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	dd02      	ble.n	800dd70 <_dtoa_r+0xa10>
 800dd6a:	9b02      	ldr	r3, [sp, #8]
 800dd6c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800dd70:	9b00      	ldr	r3, [sp, #0]
 800dd72:	f883 8000 	strb.w	r8, [r3]
 800dd76:	e63f      	b.n	800d9f8 <_dtoa_r+0x698>
 800dd78:	4628      	mov	r0, r5
 800dd7a:	e7bb      	b.n	800dcf4 <_dtoa_r+0x994>
 800dd7c:	2201      	movs	r2, #1
 800dd7e:	e7e1      	b.n	800dd44 <_dtoa_r+0x9e4>
 800dd80:	9b08      	ldr	r3, [sp, #32]
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	db04      	blt.n	800dd90 <_dtoa_r+0xa30>
 800dd86:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800dd88:	430b      	orrs	r3, r1
 800dd8a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800dd8c:	430b      	orrs	r3, r1
 800dd8e:	d120      	bne.n	800ddd2 <_dtoa_r+0xa72>
 800dd90:	2a00      	cmp	r2, #0
 800dd92:	dded      	ble.n	800dd70 <_dtoa_r+0xa10>
 800dd94:	4649      	mov	r1, r9
 800dd96:	2201      	movs	r2, #1
 800dd98:	4658      	mov	r0, fp
 800dd9a:	f000 fafd 	bl	800e398 <__lshift>
 800dd9e:	4621      	mov	r1, r4
 800dda0:	4681      	mov	r9, r0
 800dda2:	f000 fb65 	bl	800e470 <__mcmp>
 800dda6:	2800      	cmp	r0, #0
 800dda8:	dc03      	bgt.n	800ddb2 <_dtoa_r+0xa52>
 800ddaa:	d1e1      	bne.n	800dd70 <_dtoa_r+0xa10>
 800ddac:	f018 0f01 	tst.w	r8, #1
 800ddb0:	d0de      	beq.n	800dd70 <_dtoa_r+0xa10>
 800ddb2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ddb6:	d1d8      	bne.n	800dd6a <_dtoa_r+0xa0a>
 800ddb8:	9a00      	ldr	r2, [sp, #0]
 800ddba:	2339      	movs	r3, #57	@ 0x39
 800ddbc:	7013      	strb	r3, [r2, #0]
 800ddbe:	4633      	mov	r3, r6
 800ddc0:	461e      	mov	r6, r3
 800ddc2:	3b01      	subs	r3, #1
 800ddc4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800ddc8:	2a39      	cmp	r2, #57	@ 0x39
 800ddca:	d052      	beq.n	800de72 <_dtoa_r+0xb12>
 800ddcc:	3201      	adds	r2, #1
 800ddce:	701a      	strb	r2, [r3, #0]
 800ddd0:	e612      	b.n	800d9f8 <_dtoa_r+0x698>
 800ddd2:	2a00      	cmp	r2, #0
 800ddd4:	dd07      	ble.n	800dde6 <_dtoa_r+0xa86>
 800ddd6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ddda:	d0ed      	beq.n	800ddb8 <_dtoa_r+0xa58>
 800dddc:	9a00      	ldr	r2, [sp, #0]
 800ddde:	f108 0301 	add.w	r3, r8, #1
 800dde2:	7013      	strb	r3, [r2, #0]
 800dde4:	e608      	b.n	800d9f8 <_dtoa_r+0x698>
 800dde6:	9b07      	ldr	r3, [sp, #28]
 800dde8:	9a07      	ldr	r2, [sp, #28]
 800ddea:	f803 8c01 	strb.w	r8, [r3, #-1]
 800ddee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ddf0:	4293      	cmp	r3, r2
 800ddf2:	d028      	beq.n	800de46 <_dtoa_r+0xae6>
 800ddf4:	4649      	mov	r1, r9
 800ddf6:	2300      	movs	r3, #0
 800ddf8:	220a      	movs	r2, #10
 800ddfa:	4658      	mov	r0, fp
 800ddfc:	f000 f920 	bl	800e040 <__multadd>
 800de00:	42af      	cmp	r7, r5
 800de02:	4681      	mov	r9, r0
 800de04:	f04f 0300 	mov.w	r3, #0
 800de08:	f04f 020a 	mov.w	r2, #10
 800de0c:	4639      	mov	r1, r7
 800de0e:	4658      	mov	r0, fp
 800de10:	d107      	bne.n	800de22 <_dtoa_r+0xac2>
 800de12:	f000 f915 	bl	800e040 <__multadd>
 800de16:	4607      	mov	r7, r0
 800de18:	4605      	mov	r5, r0
 800de1a:	9b07      	ldr	r3, [sp, #28]
 800de1c:	3301      	adds	r3, #1
 800de1e:	9307      	str	r3, [sp, #28]
 800de20:	e774      	b.n	800dd0c <_dtoa_r+0x9ac>
 800de22:	f000 f90d 	bl	800e040 <__multadd>
 800de26:	4629      	mov	r1, r5
 800de28:	4607      	mov	r7, r0
 800de2a:	2300      	movs	r3, #0
 800de2c:	220a      	movs	r2, #10
 800de2e:	4658      	mov	r0, fp
 800de30:	f000 f906 	bl	800e040 <__multadd>
 800de34:	4605      	mov	r5, r0
 800de36:	e7f0      	b.n	800de1a <_dtoa_r+0xaba>
 800de38:	9b00      	ldr	r3, [sp, #0]
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	bfcc      	ite	gt
 800de3e:	461e      	movgt	r6, r3
 800de40:	2601      	movle	r6, #1
 800de42:	4456      	add	r6, sl
 800de44:	2700      	movs	r7, #0
 800de46:	4649      	mov	r1, r9
 800de48:	2201      	movs	r2, #1
 800de4a:	4658      	mov	r0, fp
 800de4c:	f000 faa4 	bl	800e398 <__lshift>
 800de50:	4621      	mov	r1, r4
 800de52:	4681      	mov	r9, r0
 800de54:	f000 fb0c 	bl	800e470 <__mcmp>
 800de58:	2800      	cmp	r0, #0
 800de5a:	dcb0      	bgt.n	800ddbe <_dtoa_r+0xa5e>
 800de5c:	d102      	bne.n	800de64 <_dtoa_r+0xb04>
 800de5e:	f018 0f01 	tst.w	r8, #1
 800de62:	d1ac      	bne.n	800ddbe <_dtoa_r+0xa5e>
 800de64:	4633      	mov	r3, r6
 800de66:	461e      	mov	r6, r3
 800de68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800de6c:	2a30      	cmp	r2, #48	@ 0x30
 800de6e:	d0fa      	beq.n	800de66 <_dtoa_r+0xb06>
 800de70:	e5c2      	b.n	800d9f8 <_dtoa_r+0x698>
 800de72:	459a      	cmp	sl, r3
 800de74:	d1a4      	bne.n	800ddc0 <_dtoa_r+0xa60>
 800de76:	9b04      	ldr	r3, [sp, #16]
 800de78:	3301      	adds	r3, #1
 800de7a:	9304      	str	r3, [sp, #16]
 800de7c:	2331      	movs	r3, #49	@ 0x31
 800de7e:	f88a 3000 	strb.w	r3, [sl]
 800de82:	e5b9      	b.n	800d9f8 <_dtoa_r+0x698>
 800de84:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800de86:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800dee4 <_dtoa_r+0xb84>
 800de8a:	b11b      	cbz	r3, 800de94 <_dtoa_r+0xb34>
 800de8c:	f10a 0308 	add.w	r3, sl, #8
 800de90:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800de92:	6013      	str	r3, [r2, #0]
 800de94:	4650      	mov	r0, sl
 800de96:	b019      	add	sp, #100	@ 0x64
 800de98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800de9e:	2b01      	cmp	r3, #1
 800dea0:	f77f ae37 	ble.w	800db12 <_dtoa_r+0x7b2>
 800dea4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dea6:	930a      	str	r3, [sp, #40]	@ 0x28
 800dea8:	2001      	movs	r0, #1
 800deaa:	e655      	b.n	800db58 <_dtoa_r+0x7f8>
 800deac:	9b00      	ldr	r3, [sp, #0]
 800deae:	2b00      	cmp	r3, #0
 800deb0:	f77f aed6 	ble.w	800dc60 <_dtoa_r+0x900>
 800deb4:	4656      	mov	r6, sl
 800deb6:	4621      	mov	r1, r4
 800deb8:	4648      	mov	r0, r9
 800deba:	f7ff f9c6 	bl	800d24a <quorem>
 800debe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800dec2:	f806 8b01 	strb.w	r8, [r6], #1
 800dec6:	9b00      	ldr	r3, [sp, #0]
 800dec8:	eba6 020a 	sub.w	r2, r6, sl
 800decc:	4293      	cmp	r3, r2
 800dece:	ddb3      	ble.n	800de38 <_dtoa_r+0xad8>
 800ded0:	4649      	mov	r1, r9
 800ded2:	2300      	movs	r3, #0
 800ded4:	220a      	movs	r2, #10
 800ded6:	4658      	mov	r0, fp
 800ded8:	f000 f8b2 	bl	800e040 <__multadd>
 800dedc:	4681      	mov	r9, r0
 800dede:	e7ea      	b.n	800deb6 <_dtoa_r+0xb56>
 800dee0:	08012690 	.word	0x08012690
 800dee4:	08012614 	.word	0x08012614

0800dee8 <_free_r>:
 800dee8:	b538      	push	{r3, r4, r5, lr}
 800deea:	4605      	mov	r5, r0
 800deec:	2900      	cmp	r1, #0
 800deee:	d041      	beq.n	800df74 <_free_r+0x8c>
 800def0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800def4:	1f0c      	subs	r4, r1, #4
 800def6:	2b00      	cmp	r3, #0
 800def8:	bfb8      	it	lt
 800defa:	18e4      	addlt	r4, r4, r3
 800defc:	f7fe f97a 	bl	800c1f4 <__malloc_lock>
 800df00:	4a1d      	ldr	r2, [pc, #116]	@ (800df78 <_free_r+0x90>)
 800df02:	6813      	ldr	r3, [r2, #0]
 800df04:	b933      	cbnz	r3, 800df14 <_free_r+0x2c>
 800df06:	6063      	str	r3, [r4, #4]
 800df08:	6014      	str	r4, [r2, #0]
 800df0a:	4628      	mov	r0, r5
 800df0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800df10:	f7fe b976 	b.w	800c200 <__malloc_unlock>
 800df14:	42a3      	cmp	r3, r4
 800df16:	d908      	bls.n	800df2a <_free_r+0x42>
 800df18:	6820      	ldr	r0, [r4, #0]
 800df1a:	1821      	adds	r1, r4, r0
 800df1c:	428b      	cmp	r3, r1
 800df1e:	bf01      	itttt	eq
 800df20:	6819      	ldreq	r1, [r3, #0]
 800df22:	685b      	ldreq	r3, [r3, #4]
 800df24:	1809      	addeq	r1, r1, r0
 800df26:	6021      	streq	r1, [r4, #0]
 800df28:	e7ed      	b.n	800df06 <_free_r+0x1e>
 800df2a:	461a      	mov	r2, r3
 800df2c:	685b      	ldr	r3, [r3, #4]
 800df2e:	b10b      	cbz	r3, 800df34 <_free_r+0x4c>
 800df30:	42a3      	cmp	r3, r4
 800df32:	d9fa      	bls.n	800df2a <_free_r+0x42>
 800df34:	6811      	ldr	r1, [r2, #0]
 800df36:	1850      	adds	r0, r2, r1
 800df38:	42a0      	cmp	r0, r4
 800df3a:	d10b      	bne.n	800df54 <_free_r+0x6c>
 800df3c:	6820      	ldr	r0, [r4, #0]
 800df3e:	4401      	add	r1, r0
 800df40:	1850      	adds	r0, r2, r1
 800df42:	4283      	cmp	r3, r0
 800df44:	6011      	str	r1, [r2, #0]
 800df46:	d1e0      	bne.n	800df0a <_free_r+0x22>
 800df48:	6818      	ldr	r0, [r3, #0]
 800df4a:	685b      	ldr	r3, [r3, #4]
 800df4c:	6053      	str	r3, [r2, #4]
 800df4e:	4408      	add	r0, r1
 800df50:	6010      	str	r0, [r2, #0]
 800df52:	e7da      	b.n	800df0a <_free_r+0x22>
 800df54:	d902      	bls.n	800df5c <_free_r+0x74>
 800df56:	230c      	movs	r3, #12
 800df58:	602b      	str	r3, [r5, #0]
 800df5a:	e7d6      	b.n	800df0a <_free_r+0x22>
 800df5c:	6820      	ldr	r0, [r4, #0]
 800df5e:	1821      	adds	r1, r4, r0
 800df60:	428b      	cmp	r3, r1
 800df62:	bf04      	itt	eq
 800df64:	6819      	ldreq	r1, [r3, #0]
 800df66:	685b      	ldreq	r3, [r3, #4]
 800df68:	6063      	str	r3, [r4, #4]
 800df6a:	bf04      	itt	eq
 800df6c:	1809      	addeq	r1, r1, r0
 800df6e:	6021      	streq	r1, [r4, #0]
 800df70:	6054      	str	r4, [r2, #4]
 800df72:	e7ca      	b.n	800df0a <_free_r+0x22>
 800df74:	bd38      	pop	{r3, r4, r5, pc}
 800df76:	bf00      	nop
 800df78:	2001117c 	.word	0x2001117c

0800df7c <_Balloc>:
 800df7c:	b570      	push	{r4, r5, r6, lr}
 800df7e:	69c6      	ldr	r6, [r0, #28]
 800df80:	4604      	mov	r4, r0
 800df82:	460d      	mov	r5, r1
 800df84:	b976      	cbnz	r6, 800dfa4 <_Balloc+0x28>
 800df86:	2010      	movs	r0, #16
 800df88:	f7fe f882 	bl	800c090 <malloc>
 800df8c:	4602      	mov	r2, r0
 800df8e:	61e0      	str	r0, [r4, #28]
 800df90:	b920      	cbnz	r0, 800df9c <_Balloc+0x20>
 800df92:	4b18      	ldr	r3, [pc, #96]	@ (800dff4 <_Balloc+0x78>)
 800df94:	4818      	ldr	r0, [pc, #96]	@ (800dff8 <_Balloc+0x7c>)
 800df96:	216b      	movs	r1, #107	@ 0x6b
 800df98:	f000 ff3c 	bl	800ee14 <__assert_func>
 800df9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dfa0:	6006      	str	r6, [r0, #0]
 800dfa2:	60c6      	str	r6, [r0, #12]
 800dfa4:	69e6      	ldr	r6, [r4, #28]
 800dfa6:	68f3      	ldr	r3, [r6, #12]
 800dfa8:	b183      	cbz	r3, 800dfcc <_Balloc+0x50>
 800dfaa:	69e3      	ldr	r3, [r4, #28]
 800dfac:	68db      	ldr	r3, [r3, #12]
 800dfae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800dfb2:	b9b8      	cbnz	r0, 800dfe4 <_Balloc+0x68>
 800dfb4:	2101      	movs	r1, #1
 800dfb6:	fa01 f605 	lsl.w	r6, r1, r5
 800dfba:	1d72      	adds	r2, r6, #5
 800dfbc:	0092      	lsls	r2, r2, #2
 800dfbe:	4620      	mov	r0, r4
 800dfc0:	f000 ff46 	bl	800ee50 <_calloc_r>
 800dfc4:	b160      	cbz	r0, 800dfe0 <_Balloc+0x64>
 800dfc6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800dfca:	e00e      	b.n	800dfea <_Balloc+0x6e>
 800dfcc:	2221      	movs	r2, #33	@ 0x21
 800dfce:	2104      	movs	r1, #4
 800dfd0:	4620      	mov	r0, r4
 800dfd2:	f000 ff3d 	bl	800ee50 <_calloc_r>
 800dfd6:	69e3      	ldr	r3, [r4, #28]
 800dfd8:	60f0      	str	r0, [r6, #12]
 800dfda:	68db      	ldr	r3, [r3, #12]
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d1e4      	bne.n	800dfaa <_Balloc+0x2e>
 800dfe0:	2000      	movs	r0, #0
 800dfe2:	bd70      	pop	{r4, r5, r6, pc}
 800dfe4:	6802      	ldr	r2, [r0, #0]
 800dfe6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800dfea:	2300      	movs	r3, #0
 800dfec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800dff0:	e7f7      	b.n	800dfe2 <_Balloc+0x66>
 800dff2:	bf00      	nop
 800dff4:	08012621 	.word	0x08012621
 800dff8:	080126a1 	.word	0x080126a1

0800dffc <_Bfree>:
 800dffc:	b570      	push	{r4, r5, r6, lr}
 800dffe:	69c6      	ldr	r6, [r0, #28]
 800e000:	4605      	mov	r5, r0
 800e002:	460c      	mov	r4, r1
 800e004:	b976      	cbnz	r6, 800e024 <_Bfree+0x28>
 800e006:	2010      	movs	r0, #16
 800e008:	f7fe f842 	bl	800c090 <malloc>
 800e00c:	4602      	mov	r2, r0
 800e00e:	61e8      	str	r0, [r5, #28]
 800e010:	b920      	cbnz	r0, 800e01c <_Bfree+0x20>
 800e012:	4b09      	ldr	r3, [pc, #36]	@ (800e038 <_Bfree+0x3c>)
 800e014:	4809      	ldr	r0, [pc, #36]	@ (800e03c <_Bfree+0x40>)
 800e016:	218f      	movs	r1, #143	@ 0x8f
 800e018:	f000 fefc 	bl	800ee14 <__assert_func>
 800e01c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e020:	6006      	str	r6, [r0, #0]
 800e022:	60c6      	str	r6, [r0, #12]
 800e024:	b13c      	cbz	r4, 800e036 <_Bfree+0x3a>
 800e026:	69eb      	ldr	r3, [r5, #28]
 800e028:	6862      	ldr	r2, [r4, #4]
 800e02a:	68db      	ldr	r3, [r3, #12]
 800e02c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e030:	6021      	str	r1, [r4, #0]
 800e032:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e036:	bd70      	pop	{r4, r5, r6, pc}
 800e038:	08012621 	.word	0x08012621
 800e03c:	080126a1 	.word	0x080126a1

0800e040 <__multadd>:
 800e040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e044:	690d      	ldr	r5, [r1, #16]
 800e046:	4607      	mov	r7, r0
 800e048:	460c      	mov	r4, r1
 800e04a:	461e      	mov	r6, r3
 800e04c:	f101 0c14 	add.w	ip, r1, #20
 800e050:	2000      	movs	r0, #0
 800e052:	f8dc 3000 	ldr.w	r3, [ip]
 800e056:	b299      	uxth	r1, r3
 800e058:	fb02 6101 	mla	r1, r2, r1, r6
 800e05c:	0c1e      	lsrs	r6, r3, #16
 800e05e:	0c0b      	lsrs	r3, r1, #16
 800e060:	fb02 3306 	mla	r3, r2, r6, r3
 800e064:	b289      	uxth	r1, r1
 800e066:	3001      	adds	r0, #1
 800e068:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e06c:	4285      	cmp	r5, r0
 800e06e:	f84c 1b04 	str.w	r1, [ip], #4
 800e072:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e076:	dcec      	bgt.n	800e052 <__multadd+0x12>
 800e078:	b30e      	cbz	r6, 800e0be <__multadd+0x7e>
 800e07a:	68a3      	ldr	r3, [r4, #8]
 800e07c:	42ab      	cmp	r3, r5
 800e07e:	dc19      	bgt.n	800e0b4 <__multadd+0x74>
 800e080:	6861      	ldr	r1, [r4, #4]
 800e082:	4638      	mov	r0, r7
 800e084:	3101      	adds	r1, #1
 800e086:	f7ff ff79 	bl	800df7c <_Balloc>
 800e08a:	4680      	mov	r8, r0
 800e08c:	b928      	cbnz	r0, 800e09a <__multadd+0x5a>
 800e08e:	4602      	mov	r2, r0
 800e090:	4b0c      	ldr	r3, [pc, #48]	@ (800e0c4 <__multadd+0x84>)
 800e092:	480d      	ldr	r0, [pc, #52]	@ (800e0c8 <__multadd+0x88>)
 800e094:	21ba      	movs	r1, #186	@ 0xba
 800e096:	f000 febd 	bl	800ee14 <__assert_func>
 800e09a:	6922      	ldr	r2, [r4, #16]
 800e09c:	3202      	adds	r2, #2
 800e09e:	f104 010c 	add.w	r1, r4, #12
 800e0a2:	0092      	lsls	r2, r2, #2
 800e0a4:	300c      	adds	r0, #12
 800e0a6:	f7ff f8c2 	bl	800d22e <memcpy>
 800e0aa:	4621      	mov	r1, r4
 800e0ac:	4638      	mov	r0, r7
 800e0ae:	f7ff ffa5 	bl	800dffc <_Bfree>
 800e0b2:	4644      	mov	r4, r8
 800e0b4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e0b8:	3501      	adds	r5, #1
 800e0ba:	615e      	str	r6, [r3, #20]
 800e0bc:	6125      	str	r5, [r4, #16]
 800e0be:	4620      	mov	r0, r4
 800e0c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0c4:	08012690 	.word	0x08012690
 800e0c8:	080126a1 	.word	0x080126a1

0800e0cc <__hi0bits>:
 800e0cc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800e0d0:	4603      	mov	r3, r0
 800e0d2:	bf36      	itet	cc
 800e0d4:	0403      	lslcc	r3, r0, #16
 800e0d6:	2000      	movcs	r0, #0
 800e0d8:	2010      	movcc	r0, #16
 800e0da:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e0de:	bf3c      	itt	cc
 800e0e0:	021b      	lslcc	r3, r3, #8
 800e0e2:	3008      	addcc	r0, #8
 800e0e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e0e8:	bf3c      	itt	cc
 800e0ea:	011b      	lslcc	r3, r3, #4
 800e0ec:	3004      	addcc	r0, #4
 800e0ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e0f2:	bf3c      	itt	cc
 800e0f4:	009b      	lslcc	r3, r3, #2
 800e0f6:	3002      	addcc	r0, #2
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	db05      	blt.n	800e108 <__hi0bits+0x3c>
 800e0fc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800e100:	f100 0001 	add.w	r0, r0, #1
 800e104:	bf08      	it	eq
 800e106:	2020      	moveq	r0, #32
 800e108:	4770      	bx	lr

0800e10a <__lo0bits>:
 800e10a:	6803      	ldr	r3, [r0, #0]
 800e10c:	4602      	mov	r2, r0
 800e10e:	f013 0007 	ands.w	r0, r3, #7
 800e112:	d00b      	beq.n	800e12c <__lo0bits+0x22>
 800e114:	07d9      	lsls	r1, r3, #31
 800e116:	d421      	bmi.n	800e15c <__lo0bits+0x52>
 800e118:	0798      	lsls	r0, r3, #30
 800e11a:	bf49      	itett	mi
 800e11c:	085b      	lsrmi	r3, r3, #1
 800e11e:	089b      	lsrpl	r3, r3, #2
 800e120:	2001      	movmi	r0, #1
 800e122:	6013      	strmi	r3, [r2, #0]
 800e124:	bf5c      	itt	pl
 800e126:	6013      	strpl	r3, [r2, #0]
 800e128:	2002      	movpl	r0, #2
 800e12a:	4770      	bx	lr
 800e12c:	b299      	uxth	r1, r3
 800e12e:	b909      	cbnz	r1, 800e134 <__lo0bits+0x2a>
 800e130:	0c1b      	lsrs	r3, r3, #16
 800e132:	2010      	movs	r0, #16
 800e134:	b2d9      	uxtb	r1, r3
 800e136:	b909      	cbnz	r1, 800e13c <__lo0bits+0x32>
 800e138:	3008      	adds	r0, #8
 800e13a:	0a1b      	lsrs	r3, r3, #8
 800e13c:	0719      	lsls	r1, r3, #28
 800e13e:	bf04      	itt	eq
 800e140:	091b      	lsreq	r3, r3, #4
 800e142:	3004      	addeq	r0, #4
 800e144:	0799      	lsls	r1, r3, #30
 800e146:	bf04      	itt	eq
 800e148:	089b      	lsreq	r3, r3, #2
 800e14a:	3002      	addeq	r0, #2
 800e14c:	07d9      	lsls	r1, r3, #31
 800e14e:	d403      	bmi.n	800e158 <__lo0bits+0x4e>
 800e150:	085b      	lsrs	r3, r3, #1
 800e152:	f100 0001 	add.w	r0, r0, #1
 800e156:	d003      	beq.n	800e160 <__lo0bits+0x56>
 800e158:	6013      	str	r3, [r2, #0]
 800e15a:	4770      	bx	lr
 800e15c:	2000      	movs	r0, #0
 800e15e:	4770      	bx	lr
 800e160:	2020      	movs	r0, #32
 800e162:	4770      	bx	lr

0800e164 <__i2b>:
 800e164:	b510      	push	{r4, lr}
 800e166:	460c      	mov	r4, r1
 800e168:	2101      	movs	r1, #1
 800e16a:	f7ff ff07 	bl	800df7c <_Balloc>
 800e16e:	4602      	mov	r2, r0
 800e170:	b928      	cbnz	r0, 800e17e <__i2b+0x1a>
 800e172:	4b05      	ldr	r3, [pc, #20]	@ (800e188 <__i2b+0x24>)
 800e174:	4805      	ldr	r0, [pc, #20]	@ (800e18c <__i2b+0x28>)
 800e176:	f240 1145 	movw	r1, #325	@ 0x145
 800e17a:	f000 fe4b 	bl	800ee14 <__assert_func>
 800e17e:	2301      	movs	r3, #1
 800e180:	6144      	str	r4, [r0, #20]
 800e182:	6103      	str	r3, [r0, #16]
 800e184:	bd10      	pop	{r4, pc}
 800e186:	bf00      	nop
 800e188:	08012690 	.word	0x08012690
 800e18c:	080126a1 	.word	0x080126a1

0800e190 <__multiply>:
 800e190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e194:	4614      	mov	r4, r2
 800e196:	690a      	ldr	r2, [r1, #16]
 800e198:	6923      	ldr	r3, [r4, #16]
 800e19a:	429a      	cmp	r2, r3
 800e19c:	bfa8      	it	ge
 800e19e:	4623      	movge	r3, r4
 800e1a0:	460f      	mov	r7, r1
 800e1a2:	bfa4      	itt	ge
 800e1a4:	460c      	movge	r4, r1
 800e1a6:	461f      	movge	r7, r3
 800e1a8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800e1ac:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800e1b0:	68a3      	ldr	r3, [r4, #8]
 800e1b2:	6861      	ldr	r1, [r4, #4]
 800e1b4:	eb0a 0609 	add.w	r6, sl, r9
 800e1b8:	42b3      	cmp	r3, r6
 800e1ba:	b085      	sub	sp, #20
 800e1bc:	bfb8      	it	lt
 800e1be:	3101      	addlt	r1, #1
 800e1c0:	f7ff fedc 	bl	800df7c <_Balloc>
 800e1c4:	b930      	cbnz	r0, 800e1d4 <__multiply+0x44>
 800e1c6:	4602      	mov	r2, r0
 800e1c8:	4b44      	ldr	r3, [pc, #272]	@ (800e2dc <__multiply+0x14c>)
 800e1ca:	4845      	ldr	r0, [pc, #276]	@ (800e2e0 <__multiply+0x150>)
 800e1cc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800e1d0:	f000 fe20 	bl	800ee14 <__assert_func>
 800e1d4:	f100 0514 	add.w	r5, r0, #20
 800e1d8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e1dc:	462b      	mov	r3, r5
 800e1de:	2200      	movs	r2, #0
 800e1e0:	4543      	cmp	r3, r8
 800e1e2:	d321      	bcc.n	800e228 <__multiply+0x98>
 800e1e4:	f107 0114 	add.w	r1, r7, #20
 800e1e8:	f104 0214 	add.w	r2, r4, #20
 800e1ec:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800e1f0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800e1f4:	9302      	str	r3, [sp, #8]
 800e1f6:	1b13      	subs	r3, r2, r4
 800e1f8:	3b15      	subs	r3, #21
 800e1fa:	f023 0303 	bic.w	r3, r3, #3
 800e1fe:	3304      	adds	r3, #4
 800e200:	f104 0715 	add.w	r7, r4, #21
 800e204:	42ba      	cmp	r2, r7
 800e206:	bf38      	it	cc
 800e208:	2304      	movcc	r3, #4
 800e20a:	9301      	str	r3, [sp, #4]
 800e20c:	9b02      	ldr	r3, [sp, #8]
 800e20e:	9103      	str	r1, [sp, #12]
 800e210:	428b      	cmp	r3, r1
 800e212:	d80c      	bhi.n	800e22e <__multiply+0x9e>
 800e214:	2e00      	cmp	r6, #0
 800e216:	dd03      	ble.n	800e220 <__multiply+0x90>
 800e218:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d05b      	beq.n	800e2d8 <__multiply+0x148>
 800e220:	6106      	str	r6, [r0, #16]
 800e222:	b005      	add	sp, #20
 800e224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e228:	f843 2b04 	str.w	r2, [r3], #4
 800e22c:	e7d8      	b.n	800e1e0 <__multiply+0x50>
 800e22e:	f8b1 a000 	ldrh.w	sl, [r1]
 800e232:	f1ba 0f00 	cmp.w	sl, #0
 800e236:	d024      	beq.n	800e282 <__multiply+0xf2>
 800e238:	f104 0e14 	add.w	lr, r4, #20
 800e23c:	46a9      	mov	r9, r5
 800e23e:	f04f 0c00 	mov.w	ip, #0
 800e242:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e246:	f8d9 3000 	ldr.w	r3, [r9]
 800e24a:	fa1f fb87 	uxth.w	fp, r7
 800e24e:	b29b      	uxth	r3, r3
 800e250:	fb0a 330b 	mla	r3, sl, fp, r3
 800e254:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800e258:	f8d9 7000 	ldr.w	r7, [r9]
 800e25c:	4463      	add	r3, ip
 800e25e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e262:	fb0a c70b 	mla	r7, sl, fp, ip
 800e266:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800e26a:	b29b      	uxth	r3, r3
 800e26c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e270:	4572      	cmp	r2, lr
 800e272:	f849 3b04 	str.w	r3, [r9], #4
 800e276:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e27a:	d8e2      	bhi.n	800e242 <__multiply+0xb2>
 800e27c:	9b01      	ldr	r3, [sp, #4]
 800e27e:	f845 c003 	str.w	ip, [r5, r3]
 800e282:	9b03      	ldr	r3, [sp, #12]
 800e284:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800e288:	3104      	adds	r1, #4
 800e28a:	f1b9 0f00 	cmp.w	r9, #0
 800e28e:	d021      	beq.n	800e2d4 <__multiply+0x144>
 800e290:	682b      	ldr	r3, [r5, #0]
 800e292:	f104 0c14 	add.w	ip, r4, #20
 800e296:	46ae      	mov	lr, r5
 800e298:	f04f 0a00 	mov.w	sl, #0
 800e29c:	f8bc b000 	ldrh.w	fp, [ip]
 800e2a0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800e2a4:	fb09 770b 	mla	r7, r9, fp, r7
 800e2a8:	4457      	add	r7, sl
 800e2aa:	b29b      	uxth	r3, r3
 800e2ac:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e2b0:	f84e 3b04 	str.w	r3, [lr], #4
 800e2b4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e2b8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e2bc:	f8be 3000 	ldrh.w	r3, [lr]
 800e2c0:	fb09 330a 	mla	r3, r9, sl, r3
 800e2c4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800e2c8:	4562      	cmp	r2, ip
 800e2ca:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e2ce:	d8e5      	bhi.n	800e29c <__multiply+0x10c>
 800e2d0:	9f01      	ldr	r7, [sp, #4]
 800e2d2:	51eb      	str	r3, [r5, r7]
 800e2d4:	3504      	adds	r5, #4
 800e2d6:	e799      	b.n	800e20c <__multiply+0x7c>
 800e2d8:	3e01      	subs	r6, #1
 800e2da:	e79b      	b.n	800e214 <__multiply+0x84>
 800e2dc:	08012690 	.word	0x08012690
 800e2e0:	080126a1 	.word	0x080126a1

0800e2e4 <__pow5mult>:
 800e2e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e2e8:	4615      	mov	r5, r2
 800e2ea:	f012 0203 	ands.w	r2, r2, #3
 800e2ee:	4607      	mov	r7, r0
 800e2f0:	460e      	mov	r6, r1
 800e2f2:	d007      	beq.n	800e304 <__pow5mult+0x20>
 800e2f4:	4c25      	ldr	r4, [pc, #148]	@ (800e38c <__pow5mult+0xa8>)
 800e2f6:	3a01      	subs	r2, #1
 800e2f8:	2300      	movs	r3, #0
 800e2fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e2fe:	f7ff fe9f 	bl	800e040 <__multadd>
 800e302:	4606      	mov	r6, r0
 800e304:	10ad      	asrs	r5, r5, #2
 800e306:	d03d      	beq.n	800e384 <__pow5mult+0xa0>
 800e308:	69fc      	ldr	r4, [r7, #28]
 800e30a:	b97c      	cbnz	r4, 800e32c <__pow5mult+0x48>
 800e30c:	2010      	movs	r0, #16
 800e30e:	f7fd febf 	bl	800c090 <malloc>
 800e312:	4602      	mov	r2, r0
 800e314:	61f8      	str	r0, [r7, #28]
 800e316:	b928      	cbnz	r0, 800e324 <__pow5mult+0x40>
 800e318:	4b1d      	ldr	r3, [pc, #116]	@ (800e390 <__pow5mult+0xac>)
 800e31a:	481e      	ldr	r0, [pc, #120]	@ (800e394 <__pow5mult+0xb0>)
 800e31c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800e320:	f000 fd78 	bl	800ee14 <__assert_func>
 800e324:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e328:	6004      	str	r4, [r0, #0]
 800e32a:	60c4      	str	r4, [r0, #12]
 800e32c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800e330:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e334:	b94c      	cbnz	r4, 800e34a <__pow5mult+0x66>
 800e336:	f240 2171 	movw	r1, #625	@ 0x271
 800e33a:	4638      	mov	r0, r7
 800e33c:	f7ff ff12 	bl	800e164 <__i2b>
 800e340:	2300      	movs	r3, #0
 800e342:	f8c8 0008 	str.w	r0, [r8, #8]
 800e346:	4604      	mov	r4, r0
 800e348:	6003      	str	r3, [r0, #0]
 800e34a:	f04f 0900 	mov.w	r9, #0
 800e34e:	07eb      	lsls	r3, r5, #31
 800e350:	d50a      	bpl.n	800e368 <__pow5mult+0x84>
 800e352:	4631      	mov	r1, r6
 800e354:	4622      	mov	r2, r4
 800e356:	4638      	mov	r0, r7
 800e358:	f7ff ff1a 	bl	800e190 <__multiply>
 800e35c:	4631      	mov	r1, r6
 800e35e:	4680      	mov	r8, r0
 800e360:	4638      	mov	r0, r7
 800e362:	f7ff fe4b 	bl	800dffc <_Bfree>
 800e366:	4646      	mov	r6, r8
 800e368:	106d      	asrs	r5, r5, #1
 800e36a:	d00b      	beq.n	800e384 <__pow5mult+0xa0>
 800e36c:	6820      	ldr	r0, [r4, #0]
 800e36e:	b938      	cbnz	r0, 800e380 <__pow5mult+0x9c>
 800e370:	4622      	mov	r2, r4
 800e372:	4621      	mov	r1, r4
 800e374:	4638      	mov	r0, r7
 800e376:	f7ff ff0b 	bl	800e190 <__multiply>
 800e37a:	6020      	str	r0, [r4, #0]
 800e37c:	f8c0 9000 	str.w	r9, [r0]
 800e380:	4604      	mov	r4, r0
 800e382:	e7e4      	b.n	800e34e <__pow5mult+0x6a>
 800e384:	4630      	mov	r0, r6
 800e386:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e38a:	bf00      	nop
 800e38c:	080126fc 	.word	0x080126fc
 800e390:	08012621 	.word	0x08012621
 800e394:	080126a1 	.word	0x080126a1

0800e398 <__lshift>:
 800e398:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e39c:	460c      	mov	r4, r1
 800e39e:	6849      	ldr	r1, [r1, #4]
 800e3a0:	6923      	ldr	r3, [r4, #16]
 800e3a2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e3a6:	68a3      	ldr	r3, [r4, #8]
 800e3a8:	4607      	mov	r7, r0
 800e3aa:	4691      	mov	r9, r2
 800e3ac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e3b0:	f108 0601 	add.w	r6, r8, #1
 800e3b4:	42b3      	cmp	r3, r6
 800e3b6:	db0b      	blt.n	800e3d0 <__lshift+0x38>
 800e3b8:	4638      	mov	r0, r7
 800e3ba:	f7ff fddf 	bl	800df7c <_Balloc>
 800e3be:	4605      	mov	r5, r0
 800e3c0:	b948      	cbnz	r0, 800e3d6 <__lshift+0x3e>
 800e3c2:	4602      	mov	r2, r0
 800e3c4:	4b28      	ldr	r3, [pc, #160]	@ (800e468 <__lshift+0xd0>)
 800e3c6:	4829      	ldr	r0, [pc, #164]	@ (800e46c <__lshift+0xd4>)
 800e3c8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800e3cc:	f000 fd22 	bl	800ee14 <__assert_func>
 800e3d0:	3101      	adds	r1, #1
 800e3d2:	005b      	lsls	r3, r3, #1
 800e3d4:	e7ee      	b.n	800e3b4 <__lshift+0x1c>
 800e3d6:	2300      	movs	r3, #0
 800e3d8:	f100 0114 	add.w	r1, r0, #20
 800e3dc:	f100 0210 	add.w	r2, r0, #16
 800e3e0:	4618      	mov	r0, r3
 800e3e2:	4553      	cmp	r3, sl
 800e3e4:	db33      	blt.n	800e44e <__lshift+0xb6>
 800e3e6:	6920      	ldr	r0, [r4, #16]
 800e3e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e3ec:	f104 0314 	add.w	r3, r4, #20
 800e3f0:	f019 091f 	ands.w	r9, r9, #31
 800e3f4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e3f8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e3fc:	d02b      	beq.n	800e456 <__lshift+0xbe>
 800e3fe:	f1c9 0e20 	rsb	lr, r9, #32
 800e402:	468a      	mov	sl, r1
 800e404:	2200      	movs	r2, #0
 800e406:	6818      	ldr	r0, [r3, #0]
 800e408:	fa00 f009 	lsl.w	r0, r0, r9
 800e40c:	4310      	orrs	r0, r2
 800e40e:	f84a 0b04 	str.w	r0, [sl], #4
 800e412:	f853 2b04 	ldr.w	r2, [r3], #4
 800e416:	459c      	cmp	ip, r3
 800e418:	fa22 f20e 	lsr.w	r2, r2, lr
 800e41c:	d8f3      	bhi.n	800e406 <__lshift+0x6e>
 800e41e:	ebac 0304 	sub.w	r3, ip, r4
 800e422:	3b15      	subs	r3, #21
 800e424:	f023 0303 	bic.w	r3, r3, #3
 800e428:	3304      	adds	r3, #4
 800e42a:	f104 0015 	add.w	r0, r4, #21
 800e42e:	4584      	cmp	ip, r0
 800e430:	bf38      	it	cc
 800e432:	2304      	movcc	r3, #4
 800e434:	50ca      	str	r2, [r1, r3]
 800e436:	b10a      	cbz	r2, 800e43c <__lshift+0xa4>
 800e438:	f108 0602 	add.w	r6, r8, #2
 800e43c:	3e01      	subs	r6, #1
 800e43e:	4638      	mov	r0, r7
 800e440:	612e      	str	r6, [r5, #16]
 800e442:	4621      	mov	r1, r4
 800e444:	f7ff fdda 	bl	800dffc <_Bfree>
 800e448:	4628      	mov	r0, r5
 800e44a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e44e:	f842 0f04 	str.w	r0, [r2, #4]!
 800e452:	3301      	adds	r3, #1
 800e454:	e7c5      	b.n	800e3e2 <__lshift+0x4a>
 800e456:	3904      	subs	r1, #4
 800e458:	f853 2b04 	ldr.w	r2, [r3], #4
 800e45c:	f841 2f04 	str.w	r2, [r1, #4]!
 800e460:	459c      	cmp	ip, r3
 800e462:	d8f9      	bhi.n	800e458 <__lshift+0xc0>
 800e464:	e7ea      	b.n	800e43c <__lshift+0xa4>
 800e466:	bf00      	nop
 800e468:	08012690 	.word	0x08012690
 800e46c:	080126a1 	.word	0x080126a1

0800e470 <__mcmp>:
 800e470:	690a      	ldr	r2, [r1, #16]
 800e472:	4603      	mov	r3, r0
 800e474:	6900      	ldr	r0, [r0, #16]
 800e476:	1a80      	subs	r0, r0, r2
 800e478:	b530      	push	{r4, r5, lr}
 800e47a:	d10e      	bne.n	800e49a <__mcmp+0x2a>
 800e47c:	3314      	adds	r3, #20
 800e47e:	3114      	adds	r1, #20
 800e480:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e484:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e488:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e48c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e490:	4295      	cmp	r5, r2
 800e492:	d003      	beq.n	800e49c <__mcmp+0x2c>
 800e494:	d205      	bcs.n	800e4a2 <__mcmp+0x32>
 800e496:	f04f 30ff 	mov.w	r0, #4294967295
 800e49a:	bd30      	pop	{r4, r5, pc}
 800e49c:	42a3      	cmp	r3, r4
 800e49e:	d3f3      	bcc.n	800e488 <__mcmp+0x18>
 800e4a0:	e7fb      	b.n	800e49a <__mcmp+0x2a>
 800e4a2:	2001      	movs	r0, #1
 800e4a4:	e7f9      	b.n	800e49a <__mcmp+0x2a>
	...

0800e4a8 <__mdiff>:
 800e4a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4ac:	4689      	mov	r9, r1
 800e4ae:	4606      	mov	r6, r0
 800e4b0:	4611      	mov	r1, r2
 800e4b2:	4648      	mov	r0, r9
 800e4b4:	4614      	mov	r4, r2
 800e4b6:	f7ff ffdb 	bl	800e470 <__mcmp>
 800e4ba:	1e05      	subs	r5, r0, #0
 800e4bc:	d112      	bne.n	800e4e4 <__mdiff+0x3c>
 800e4be:	4629      	mov	r1, r5
 800e4c0:	4630      	mov	r0, r6
 800e4c2:	f7ff fd5b 	bl	800df7c <_Balloc>
 800e4c6:	4602      	mov	r2, r0
 800e4c8:	b928      	cbnz	r0, 800e4d6 <__mdiff+0x2e>
 800e4ca:	4b3f      	ldr	r3, [pc, #252]	@ (800e5c8 <__mdiff+0x120>)
 800e4cc:	f240 2137 	movw	r1, #567	@ 0x237
 800e4d0:	483e      	ldr	r0, [pc, #248]	@ (800e5cc <__mdiff+0x124>)
 800e4d2:	f000 fc9f 	bl	800ee14 <__assert_func>
 800e4d6:	2301      	movs	r3, #1
 800e4d8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e4dc:	4610      	mov	r0, r2
 800e4de:	b003      	add	sp, #12
 800e4e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4e4:	bfbc      	itt	lt
 800e4e6:	464b      	movlt	r3, r9
 800e4e8:	46a1      	movlt	r9, r4
 800e4ea:	4630      	mov	r0, r6
 800e4ec:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800e4f0:	bfba      	itte	lt
 800e4f2:	461c      	movlt	r4, r3
 800e4f4:	2501      	movlt	r5, #1
 800e4f6:	2500      	movge	r5, #0
 800e4f8:	f7ff fd40 	bl	800df7c <_Balloc>
 800e4fc:	4602      	mov	r2, r0
 800e4fe:	b918      	cbnz	r0, 800e508 <__mdiff+0x60>
 800e500:	4b31      	ldr	r3, [pc, #196]	@ (800e5c8 <__mdiff+0x120>)
 800e502:	f240 2145 	movw	r1, #581	@ 0x245
 800e506:	e7e3      	b.n	800e4d0 <__mdiff+0x28>
 800e508:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800e50c:	6926      	ldr	r6, [r4, #16]
 800e50e:	60c5      	str	r5, [r0, #12]
 800e510:	f109 0310 	add.w	r3, r9, #16
 800e514:	f109 0514 	add.w	r5, r9, #20
 800e518:	f104 0e14 	add.w	lr, r4, #20
 800e51c:	f100 0b14 	add.w	fp, r0, #20
 800e520:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800e524:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800e528:	9301      	str	r3, [sp, #4]
 800e52a:	46d9      	mov	r9, fp
 800e52c:	f04f 0c00 	mov.w	ip, #0
 800e530:	9b01      	ldr	r3, [sp, #4]
 800e532:	f85e 0b04 	ldr.w	r0, [lr], #4
 800e536:	f853 af04 	ldr.w	sl, [r3, #4]!
 800e53a:	9301      	str	r3, [sp, #4]
 800e53c:	fa1f f38a 	uxth.w	r3, sl
 800e540:	4619      	mov	r1, r3
 800e542:	b283      	uxth	r3, r0
 800e544:	1acb      	subs	r3, r1, r3
 800e546:	0c00      	lsrs	r0, r0, #16
 800e548:	4463      	add	r3, ip
 800e54a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800e54e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800e552:	b29b      	uxth	r3, r3
 800e554:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e558:	4576      	cmp	r6, lr
 800e55a:	f849 3b04 	str.w	r3, [r9], #4
 800e55e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e562:	d8e5      	bhi.n	800e530 <__mdiff+0x88>
 800e564:	1b33      	subs	r3, r6, r4
 800e566:	3b15      	subs	r3, #21
 800e568:	f023 0303 	bic.w	r3, r3, #3
 800e56c:	3415      	adds	r4, #21
 800e56e:	3304      	adds	r3, #4
 800e570:	42a6      	cmp	r6, r4
 800e572:	bf38      	it	cc
 800e574:	2304      	movcc	r3, #4
 800e576:	441d      	add	r5, r3
 800e578:	445b      	add	r3, fp
 800e57a:	461e      	mov	r6, r3
 800e57c:	462c      	mov	r4, r5
 800e57e:	4544      	cmp	r4, r8
 800e580:	d30e      	bcc.n	800e5a0 <__mdiff+0xf8>
 800e582:	f108 0103 	add.w	r1, r8, #3
 800e586:	1b49      	subs	r1, r1, r5
 800e588:	f021 0103 	bic.w	r1, r1, #3
 800e58c:	3d03      	subs	r5, #3
 800e58e:	45a8      	cmp	r8, r5
 800e590:	bf38      	it	cc
 800e592:	2100      	movcc	r1, #0
 800e594:	440b      	add	r3, r1
 800e596:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e59a:	b191      	cbz	r1, 800e5c2 <__mdiff+0x11a>
 800e59c:	6117      	str	r7, [r2, #16]
 800e59e:	e79d      	b.n	800e4dc <__mdiff+0x34>
 800e5a0:	f854 1b04 	ldr.w	r1, [r4], #4
 800e5a4:	46e6      	mov	lr, ip
 800e5a6:	0c08      	lsrs	r0, r1, #16
 800e5a8:	fa1c fc81 	uxtah	ip, ip, r1
 800e5ac:	4471      	add	r1, lr
 800e5ae:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e5b2:	b289      	uxth	r1, r1
 800e5b4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e5b8:	f846 1b04 	str.w	r1, [r6], #4
 800e5bc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e5c0:	e7dd      	b.n	800e57e <__mdiff+0xd6>
 800e5c2:	3f01      	subs	r7, #1
 800e5c4:	e7e7      	b.n	800e596 <__mdiff+0xee>
 800e5c6:	bf00      	nop
 800e5c8:	08012690 	.word	0x08012690
 800e5cc:	080126a1 	.word	0x080126a1

0800e5d0 <__d2b>:
 800e5d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e5d4:	460f      	mov	r7, r1
 800e5d6:	2101      	movs	r1, #1
 800e5d8:	ec59 8b10 	vmov	r8, r9, d0
 800e5dc:	4616      	mov	r6, r2
 800e5de:	f7ff fccd 	bl	800df7c <_Balloc>
 800e5e2:	4604      	mov	r4, r0
 800e5e4:	b930      	cbnz	r0, 800e5f4 <__d2b+0x24>
 800e5e6:	4602      	mov	r2, r0
 800e5e8:	4b23      	ldr	r3, [pc, #140]	@ (800e678 <__d2b+0xa8>)
 800e5ea:	4824      	ldr	r0, [pc, #144]	@ (800e67c <__d2b+0xac>)
 800e5ec:	f240 310f 	movw	r1, #783	@ 0x30f
 800e5f0:	f000 fc10 	bl	800ee14 <__assert_func>
 800e5f4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e5f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e5fc:	b10d      	cbz	r5, 800e602 <__d2b+0x32>
 800e5fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e602:	9301      	str	r3, [sp, #4]
 800e604:	f1b8 0300 	subs.w	r3, r8, #0
 800e608:	d023      	beq.n	800e652 <__d2b+0x82>
 800e60a:	4668      	mov	r0, sp
 800e60c:	9300      	str	r3, [sp, #0]
 800e60e:	f7ff fd7c 	bl	800e10a <__lo0bits>
 800e612:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e616:	b1d0      	cbz	r0, 800e64e <__d2b+0x7e>
 800e618:	f1c0 0320 	rsb	r3, r0, #32
 800e61c:	fa02 f303 	lsl.w	r3, r2, r3
 800e620:	430b      	orrs	r3, r1
 800e622:	40c2      	lsrs	r2, r0
 800e624:	6163      	str	r3, [r4, #20]
 800e626:	9201      	str	r2, [sp, #4]
 800e628:	9b01      	ldr	r3, [sp, #4]
 800e62a:	61a3      	str	r3, [r4, #24]
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	bf0c      	ite	eq
 800e630:	2201      	moveq	r2, #1
 800e632:	2202      	movne	r2, #2
 800e634:	6122      	str	r2, [r4, #16]
 800e636:	b1a5      	cbz	r5, 800e662 <__d2b+0x92>
 800e638:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e63c:	4405      	add	r5, r0
 800e63e:	603d      	str	r5, [r7, #0]
 800e640:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e644:	6030      	str	r0, [r6, #0]
 800e646:	4620      	mov	r0, r4
 800e648:	b003      	add	sp, #12
 800e64a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e64e:	6161      	str	r1, [r4, #20]
 800e650:	e7ea      	b.n	800e628 <__d2b+0x58>
 800e652:	a801      	add	r0, sp, #4
 800e654:	f7ff fd59 	bl	800e10a <__lo0bits>
 800e658:	9b01      	ldr	r3, [sp, #4]
 800e65a:	6163      	str	r3, [r4, #20]
 800e65c:	3020      	adds	r0, #32
 800e65e:	2201      	movs	r2, #1
 800e660:	e7e8      	b.n	800e634 <__d2b+0x64>
 800e662:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e666:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e66a:	6038      	str	r0, [r7, #0]
 800e66c:	6918      	ldr	r0, [r3, #16]
 800e66e:	f7ff fd2d 	bl	800e0cc <__hi0bits>
 800e672:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e676:	e7e5      	b.n	800e644 <__d2b+0x74>
 800e678:	08012690 	.word	0x08012690
 800e67c:	080126a1 	.word	0x080126a1

0800e680 <__ssputs_r>:
 800e680:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e684:	688e      	ldr	r6, [r1, #8]
 800e686:	461f      	mov	r7, r3
 800e688:	42be      	cmp	r6, r7
 800e68a:	680b      	ldr	r3, [r1, #0]
 800e68c:	4682      	mov	sl, r0
 800e68e:	460c      	mov	r4, r1
 800e690:	4690      	mov	r8, r2
 800e692:	d82d      	bhi.n	800e6f0 <__ssputs_r+0x70>
 800e694:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e698:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e69c:	d026      	beq.n	800e6ec <__ssputs_r+0x6c>
 800e69e:	6965      	ldr	r5, [r4, #20]
 800e6a0:	6909      	ldr	r1, [r1, #16]
 800e6a2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e6a6:	eba3 0901 	sub.w	r9, r3, r1
 800e6aa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e6ae:	1c7b      	adds	r3, r7, #1
 800e6b0:	444b      	add	r3, r9
 800e6b2:	106d      	asrs	r5, r5, #1
 800e6b4:	429d      	cmp	r5, r3
 800e6b6:	bf38      	it	cc
 800e6b8:	461d      	movcc	r5, r3
 800e6ba:	0553      	lsls	r3, r2, #21
 800e6bc:	d527      	bpl.n	800e70e <__ssputs_r+0x8e>
 800e6be:	4629      	mov	r1, r5
 800e6c0:	f7fd fd18 	bl	800c0f4 <_malloc_r>
 800e6c4:	4606      	mov	r6, r0
 800e6c6:	b360      	cbz	r0, 800e722 <__ssputs_r+0xa2>
 800e6c8:	6921      	ldr	r1, [r4, #16]
 800e6ca:	464a      	mov	r2, r9
 800e6cc:	f7fe fdaf 	bl	800d22e <memcpy>
 800e6d0:	89a3      	ldrh	r3, [r4, #12]
 800e6d2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e6d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e6da:	81a3      	strh	r3, [r4, #12]
 800e6dc:	6126      	str	r6, [r4, #16]
 800e6de:	6165      	str	r5, [r4, #20]
 800e6e0:	444e      	add	r6, r9
 800e6e2:	eba5 0509 	sub.w	r5, r5, r9
 800e6e6:	6026      	str	r6, [r4, #0]
 800e6e8:	60a5      	str	r5, [r4, #8]
 800e6ea:	463e      	mov	r6, r7
 800e6ec:	42be      	cmp	r6, r7
 800e6ee:	d900      	bls.n	800e6f2 <__ssputs_r+0x72>
 800e6f0:	463e      	mov	r6, r7
 800e6f2:	6820      	ldr	r0, [r4, #0]
 800e6f4:	4632      	mov	r2, r6
 800e6f6:	4641      	mov	r1, r8
 800e6f8:	f7fe fc56 	bl	800cfa8 <memmove>
 800e6fc:	68a3      	ldr	r3, [r4, #8]
 800e6fe:	1b9b      	subs	r3, r3, r6
 800e700:	60a3      	str	r3, [r4, #8]
 800e702:	6823      	ldr	r3, [r4, #0]
 800e704:	4433      	add	r3, r6
 800e706:	6023      	str	r3, [r4, #0]
 800e708:	2000      	movs	r0, #0
 800e70a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e70e:	462a      	mov	r2, r5
 800e710:	f000 fbc4 	bl	800ee9c <_realloc_r>
 800e714:	4606      	mov	r6, r0
 800e716:	2800      	cmp	r0, #0
 800e718:	d1e0      	bne.n	800e6dc <__ssputs_r+0x5c>
 800e71a:	6921      	ldr	r1, [r4, #16]
 800e71c:	4650      	mov	r0, sl
 800e71e:	f7ff fbe3 	bl	800dee8 <_free_r>
 800e722:	230c      	movs	r3, #12
 800e724:	f8ca 3000 	str.w	r3, [sl]
 800e728:	89a3      	ldrh	r3, [r4, #12]
 800e72a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e72e:	81a3      	strh	r3, [r4, #12]
 800e730:	f04f 30ff 	mov.w	r0, #4294967295
 800e734:	e7e9      	b.n	800e70a <__ssputs_r+0x8a>
	...

0800e738 <_svfiprintf_r>:
 800e738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e73c:	4698      	mov	r8, r3
 800e73e:	898b      	ldrh	r3, [r1, #12]
 800e740:	061b      	lsls	r3, r3, #24
 800e742:	b09d      	sub	sp, #116	@ 0x74
 800e744:	4607      	mov	r7, r0
 800e746:	460d      	mov	r5, r1
 800e748:	4614      	mov	r4, r2
 800e74a:	d510      	bpl.n	800e76e <_svfiprintf_r+0x36>
 800e74c:	690b      	ldr	r3, [r1, #16]
 800e74e:	b973      	cbnz	r3, 800e76e <_svfiprintf_r+0x36>
 800e750:	2140      	movs	r1, #64	@ 0x40
 800e752:	f7fd fccf 	bl	800c0f4 <_malloc_r>
 800e756:	6028      	str	r0, [r5, #0]
 800e758:	6128      	str	r0, [r5, #16]
 800e75a:	b930      	cbnz	r0, 800e76a <_svfiprintf_r+0x32>
 800e75c:	230c      	movs	r3, #12
 800e75e:	603b      	str	r3, [r7, #0]
 800e760:	f04f 30ff 	mov.w	r0, #4294967295
 800e764:	b01d      	add	sp, #116	@ 0x74
 800e766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e76a:	2340      	movs	r3, #64	@ 0x40
 800e76c:	616b      	str	r3, [r5, #20]
 800e76e:	2300      	movs	r3, #0
 800e770:	9309      	str	r3, [sp, #36]	@ 0x24
 800e772:	2320      	movs	r3, #32
 800e774:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e778:	f8cd 800c 	str.w	r8, [sp, #12]
 800e77c:	2330      	movs	r3, #48	@ 0x30
 800e77e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e91c <_svfiprintf_r+0x1e4>
 800e782:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e786:	f04f 0901 	mov.w	r9, #1
 800e78a:	4623      	mov	r3, r4
 800e78c:	469a      	mov	sl, r3
 800e78e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e792:	b10a      	cbz	r2, 800e798 <_svfiprintf_r+0x60>
 800e794:	2a25      	cmp	r2, #37	@ 0x25
 800e796:	d1f9      	bne.n	800e78c <_svfiprintf_r+0x54>
 800e798:	ebba 0b04 	subs.w	fp, sl, r4
 800e79c:	d00b      	beq.n	800e7b6 <_svfiprintf_r+0x7e>
 800e79e:	465b      	mov	r3, fp
 800e7a0:	4622      	mov	r2, r4
 800e7a2:	4629      	mov	r1, r5
 800e7a4:	4638      	mov	r0, r7
 800e7a6:	f7ff ff6b 	bl	800e680 <__ssputs_r>
 800e7aa:	3001      	adds	r0, #1
 800e7ac:	f000 80a7 	beq.w	800e8fe <_svfiprintf_r+0x1c6>
 800e7b0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e7b2:	445a      	add	r2, fp
 800e7b4:	9209      	str	r2, [sp, #36]	@ 0x24
 800e7b6:	f89a 3000 	ldrb.w	r3, [sl]
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	f000 809f 	beq.w	800e8fe <_svfiprintf_r+0x1c6>
 800e7c0:	2300      	movs	r3, #0
 800e7c2:	f04f 32ff 	mov.w	r2, #4294967295
 800e7c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e7ca:	f10a 0a01 	add.w	sl, sl, #1
 800e7ce:	9304      	str	r3, [sp, #16]
 800e7d0:	9307      	str	r3, [sp, #28]
 800e7d2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e7d6:	931a      	str	r3, [sp, #104]	@ 0x68
 800e7d8:	4654      	mov	r4, sl
 800e7da:	2205      	movs	r2, #5
 800e7dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e7e0:	484e      	ldr	r0, [pc, #312]	@ (800e91c <_svfiprintf_r+0x1e4>)
 800e7e2:	f7f1 fccd 	bl	8000180 <memchr>
 800e7e6:	9a04      	ldr	r2, [sp, #16]
 800e7e8:	b9d8      	cbnz	r0, 800e822 <_svfiprintf_r+0xea>
 800e7ea:	06d0      	lsls	r0, r2, #27
 800e7ec:	bf44      	itt	mi
 800e7ee:	2320      	movmi	r3, #32
 800e7f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e7f4:	0711      	lsls	r1, r2, #28
 800e7f6:	bf44      	itt	mi
 800e7f8:	232b      	movmi	r3, #43	@ 0x2b
 800e7fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e7fe:	f89a 3000 	ldrb.w	r3, [sl]
 800e802:	2b2a      	cmp	r3, #42	@ 0x2a
 800e804:	d015      	beq.n	800e832 <_svfiprintf_r+0xfa>
 800e806:	9a07      	ldr	r2, [sp, #28]
 800e808:	4654      	mov	r4, sl
 800e80a:	2000      	movs	r0, #0
 800e80c:	f04f 0c0a 	mov.w	ip, #10
 800e810:	4621      	mov	r1, r4
 800e812:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e816:	3b30      	subs	r3, #48	@ 0x30
 800e818:	2b09      	cmp	r3, #9
 800e81a:	d94b      	bls.n	800e8b4 <_svfiprintf_r+0x17c>
 800e81c:	b1b0      	cbz	r0, 800e84c <_svfiprintf_r+0x114>
 800e81e:	9207      	str	r2, [sp, #28]
 800e820:	e014      	b.n	800e84c <_svfiprintf_r+0x114>
 800e822:	eba0 0308 	sub.w	r3, r0, r8
 800e826:	fa09 f303 	lsl.w	r3, r9, r3
 800e82a:	4313      	orrs	r3, r2
 800e82c:	9304      	str	r3, [sp, #16]
 800e82e:	46a2      	mov	sl, r4
 800e830:	e7d2      	b.n	800e7d8 <_svfiprintf_r+0xa0>
 800e832:	9b03      	ldr	r3, [sp, #12]
 800e834:	1d19      	adds	r1, r3, #4
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	9103      	str	r1, [sp, #12]
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	bfbb      	ittet	lt
 800e83e:	425b      	neglt	r3, r3
 800e840:	f042 0202 	orrlt.w	r2, r2, #2
 800e844:	9307      	strge	r3, [sp, #28]
 800e846:	9307      	strlt	r3, [sp, #28]
 800e848:	bfb8      	it	lt
 800e84a:	9204      	strlt	r2, [sp, #16]
 800e84c:	7823      	ldrb	r3, [r4, #0]
 800e84e:	2b2e      	cmp	r3, #46	@ 0x2e
 800e850:	d10a      	bne.n	800e868 <_svfiprintf_r+0x130>
 800e852:	7863      	ldrb	r3, [r4, #1]
 800e854:	2b2a      	cmp	r3, #42	@ 0x2a
 800e856:	d132      	bne.n	800e8be <_svfiprintf_r+0x186>
 800e858:	9b03      	ldr	r3, [sp, #12]
 800e85a:	1d1a      	adds	r2, r3, #4
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	9203      	str	r2, [sp, #12]
 800e860:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e864:	3402      	adds	r4, #2
 800e866:	9305      	str	r3, [sp, #20]
 800e868:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e92c <_svfiprintf_r+0x1f4>
 800e86c:	7821      	ldrb	r1, [r4, #0]
 800e86e:	2203      	movs	r2, #3
 800e870:	4650      	mov	r0, sl
 800e872:	f7f1 fc85 	bl	8000180 <memchr>
 800e876:	b138      	cbz	r0, 800e888 <_svfiprintf_r+0x150>
 800e878:	9b04      	ldr	r3, [sp, #16]
 800e87a:	eba0 000a 	sub.w	r0, r0, sl
 800e87e:	2240      	movs	r2, #64	@ 0x40
 800e880:	4082      	lsls	r2, r0
 800e882:	4313      	orrs	r3, r2
 800e884:	3401      	adds	r4, #1
 800e886:	9304      	str	r3, [sp, #16]
 800e888:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e88c:	4824      	ldr	r0, [pc, #144]	@ (800e920 <_svfiprintf_r+0x1e8>)
 800e88e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e892:	2206      	movs	r2, #6
 800e894:	f7f1 fc74 	bl	8000180 <memchr>
 800e898:	2800      	cmp	r0, #0
 800e89a:	d036      	beq.n	800e90a <_svfiprintf_r+0x1d2>
 800e89c:	4b21      	ldr	r3, [pc, #132]	@ (800e924 <_svfiprintf_r+0x1ec>)
 800e89e:	bb1b      	cbnz	r3, 800e8e8 <_svfiprintf_r+0x1b0>
 800e8a0:	9b03      	ldr	r3, [sp, #12]
 800e8a2:	3307      	adds	r3, #7
 800e8a4:	f023 0307 	bic.w	r3, r3, #7
 800e8a8:	3308      	adds	r3, #8
 800e8aa:	9303      	str	r3, [sp, #12]
 800e8ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e8ae:	4433      	add	r3, r6
 800e8b0:	9309      	str	r3, [sp, #36]	@ 0x24
 800e8b2:	e76a      	b.n	800e78a <_svfiprintf_r+0x52>
 800e8b4:	fb0c 3202 	mla	r2, ip, r2, r3
 800e8b8:	460c      	mov	r4, r1
 800e8ba:	2001      	movs	r0, #1
 800e8bc:	e7a8      	b.n	800e810 <_svfiprintf_r+0xd8>
 800e8be:	2300      	movs	r3, #0
 800e8c0:	3401      	adds	r4, #1
 800e8c2:	9305      	str	r3, [sp, #20]
 800e8c4:	4619      	mov	r1, r3
 800e8c6:	f04f 0c0a 	mov.w	ip, #10
 800e8ca:	4620      	mov	r0, r4
 800e8cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e8d0:	3a30      	subs	r2, #48	@ 0x30
 800e8d2:	2a09      	cmp	r2, #9
 800e8d4:	d903      	bls.n	800e8de <_svfiprintf_r+0x1a6>
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d0c6      	beq.n	800e868 <_svfiprintf_r+0x130>
 800e8da:	9105      	str	r1, [sp, #20]
 800e8dc:	e7c4      	b.n	800e868 <_svfiprintf_r+0x130>
 800e8de:	fb0c 2101 	mla	r1, ip, r1, r2
 800e8e2:	4604      	mov	r4, r0
 800e8e4:	2301      	movs	r3, #1
 800e8e6:	e7f0      	b.n	800e8ca <_svfiprintf_r+0x192>
 800e8e8:	ab03      	add	r3, sp, #12
 800e8ea:	9300      	str	r3, [sp, #0]
 800e8ec:	462a      	mov	r2, r5
 800e8ee:	4b0e      	ldr	r3, [pc, #56]	@ (800e928 <_svfiprintf_r+0x1f0>)
 800e8f0:	a904      	add	r1, sp, #16
 800e8f2:	4638      	mov	r0, r7
 800e8f4:	f7fd fd2a 	bl	800c34c <_printf_float>
 800e8f8:	1c42      	adds	r2, r0, #1
 800e8fa:	4606      	mov	r6, r0
 800e8fc:	d1d6      	bne.n	800e8ac <_svfiprintf_r+0x174>
 800e8fe:	89ab      	ldrh	r3, [r5, #12]
 800e900:	065b      	lsls	r3, r3, #25
 800e902:	f53f af2d 	bmi.w	800e760 <_svfiprintf_r+0x28>
 800e906:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e908:	e72c      	b.n	800e764 <_svfiprintf_r+0x2c>
 800e90a:	ab03      	add	r3, sp, #12
 800e90c:	9300      	str	r3, [sp, #0]
 800e90e:	462a      	mov	r2, r5
 800e910:	4b05      	ldr	r3, [pc, #20]	@ (800e928 <_svfiprintf_r+0x1f0>)
 800e912:	a904      	add	r1, sp, #16
 800e914:	4638      	mov	r0, r7
 800e916:	f7fd ffb1 	bl	800c87c <_printf_i>
 800e91a:	e7ed      	b.n	800e8f8 <_svfiprintf_r+0x1c0>
 800e91c:	080127f8 	.word	0x080127f8
 800e920:	08012802 	.word	0x08012802
 800e924:	0800c34d 	.word	0x0800c34d
 800e928:	0800e681 	.word	0x0800e681
 800e92c:	080127fe 	.word	0x080127fe

0800e930 <__sfputc_r>:
 800e930:	6893      	ldr	r3, [r2, #8]
 800e932:	3b01      	subs	r3, #1
 800e934:	2b00      	cmp	r3, #0
 800e936:	b410      	push	{r4}
 800e938:	6093      	str	r3, [r2, #8]
 800e93a:	da08      	bge.n	800e94e <__sfputc_r+0x1e>
 800e93c:	6994      	ldr	r4, [r2, #24]
 800e93e:	42a3      	cmp	r3, r4
 800e940:	db01      	blt.n	800e946 <__sfputc_r+0x16>
 800e942:	290a      	cmp	r1, #10
 800e944:	d103      	bne.n	800e94e <__sfputc_r+0x1e>
 800e946:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e94a:	f7fe ba99 	b.w	800ce80 <__swbuf_r>
 800e94e:	6813      	ldr	r3, [r2, #0]
 800e950:	1c58      	adds	r0, r3, #1
 800e952:	6010      	str	r0, [r2, #0]
 800e954:	7019      	strb	r1, [r3, #0]
 800e956:	4608      	mov	r0, r1
 800e958:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e95c:	4770      	bx	lr

0800e95e <__sfputs_r>:
 800e95e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e960:	4606      	mov	r6, r0
 800e962:	460f      	mov	r7, r1
 800e964:	4614      	mov	r4, r2
 800e966:	18d5      	adds	r5, r2, r3
 800e968:	42ac      	cmp	r4, r5
 800e96a:	d101      	bne.n	800e970 <__sfputs_r+0x12>
 800e96c:	2000      	movs	r0, #0
 800e96e:	e007      	b.n	800e980 <__sfputs_r+0x22>
 800e970:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e974:	463a      	mov	r2, r7
 800e976:	4630      	mov	r0, r6
 800e978:	f7ff ffda 	bl	800e930 <__sfputc_r>
 800e97c:	1c43      	adds	r3, r0, #1
 800e97e:	d1f3      	bne.n	800e968 <__sfputs_r+0xa>
 800e980:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e984 <_vfiprintf_r>:
 800e984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e988:	460d      	mov	r5, r1
 800e98a:	b09d      	sub	sp, #116	@ 0x74
 800e98c:	4614      	mov	r4, r2
 800e98e:	4698      	mov	r8, r3
 800e990:	4606      	mov	r6, r0
 800e992:	b118      	cbz	r0, 800e99c <_vfiprintf_r+0x18>
 800e994:	6a03      	ldr	r3, [r0, #32]
 800e996:	b90b      	cbnz	r3, 800e99c <_vfiprintf_r+0x18>
 800e998:	f7fe f91c 	bl	800cbd4 <__sinit>
 800e99c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e99e:	07d9      	lsls	r1, r3, #31
 800e9a0:	d405      	bmi.n	800e9ae <_vfiprintf_r+0x2a>
 800e9a2:	89ab      	ldrh	r3, [r5, #12]
 800e9a4:	059a      	lsls	r2, r3, #22
 800e9a6:	d402      	bmi.n	800e9ae <_vfiprintf_r+0x2a>
 800e9a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e9aa:	f7fe fc3e 	bl	800d22a <__retarget_lock_acquire_recursive>
 800e9ae:	89ab      	ldrh	r3, [r5, #12]
 800e9b0:	071b      	lsls	r3, r3, #28
 800e9b2:	d501      	bpl.n	800e9b8 <_vfiprintf_r+0x34>
 800e9b4:	692b      	ldr	r3, [r5, #16]
 800e9b6:	b99b      	cbnz	r3, 800e9e0 <_vfiprintf_r+0x5c>
 800e9b8:	4629      	mov	r1, r5
 800e9ba:	4630      	mov	r0, r6
 800e9bc:	f7fe fa9e 	bl	800cefc <__swsetup_r>
 800e9c0:	b170      	cbz	r0, 800e9e0 <_vfiprintf_r+0x5c>
 800e9c2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e9c4:	07dc      	lsls	r4, r3, #31
 800e9c6:	d504      	bpl.n	800e9d2 <_vfiprintf_r+0x4e>
 800e9c8:	f04f 30ff 	mov.w	r0, #4294967295
 800e9cc:	b01d      	add	sp, #116	@ 0x74
 800e9ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9d2:	89ab      	ldrh	r3, [r5, #12]
 800e9d4:	0598      	lsls	r0, r3, #22
 800e9d6:	d4f7      	bmi.n	800e9c8 <_vfiprintf_r+0x44>
 800e9d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e9da:	f7fe fc27 	bl	800d22c <__retarget_lock_release_recursive>
 800e9de:	e7f3      	b.n	800e9c8 <_vfiprintf_r+0x44>
 800e9e0:	2300      	movs	r3, #0
 800e9e2:	9309      	str	r3, [sp, #36]	@ 0x24
 800e9e4:	2320      	movs	r3, #32
 800e9e6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e9ea:	f8cd 800c 	str.w	r8, [sp, #12]
 800e9ee:	2330      	movs	r3, #48	@ 0x30
 800e9f0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800eba0 <_vfiprintf_r+0x21c>
 800e9f4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e9f8:	f04f 0901 	mov.w	r9, #1
 800e9fc:	4623      	mov	r3, r4
 800e9fe:	469a      	mov	sl, r3
 800ea00:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ea04:	b10a      	cbz	r2, 800ea0a <_vfiprintf_r+0x86>
 800ea06:	2a25      	cmp	r2, #37	@ 0x25
 800ea08:	d1f9      	bne.n	800e9fe <_vfiprintf_r+0x7a>
 800ea0a:	ebba 0b04 	subs.w	fp, sl, r4
 800ea0e:	d00b      	beq.n	800ea28 <_vfiprintf_r+0xa4>
 800ea10:	465b      	mov	r3, fp
 800ea12:	4622      	mov	r2, r4
 800ea14:	4629      	mov	r1, r5
 800ea16:	4630      	mov	r0, r6
 800ea18:	f7ff ffa1 	bl	800e95e <__sfputs_r>
 800ea1c:	3001      	adds	r0, #1
 800ea1e:	f000 80a7 	beq.w	800eb70 <_vfiprintf_r+0x1ec>
 800ea22:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ea24:	445a      	add	r2, fp
 800ea26:	9209      	str	r2, [sp, #36]	@ 0x24
 800ea28:	f89a 3000 	ldrb.w	r3, [sl]
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	f000 809f 	beq.w	800eb70 <_vfiprintf_r+0x1ec>
 800ea32:	2300      	movs	r3, #0
 800ea34:	f04f 32ff 	mov.w	r2, #4294967295
 800ea38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ea3c:	f10a 0a01 	add.w	sl, sl, #1
 800ea40:	9304      	str	r3, [sp, #16]
 800ea42:	9307      	str	r3, [sp, #28]
 800ea44:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ea48:	931a      	str	r3, [sp, #104]	@ 0x68
 800ea4a:	4654      	mov	r4, sl
 800ea4c:	2205      	movs	r2, #5
 800ea4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea52:	4853      	ldr	r0, [pc, #332]	@ (800eba0 <_vfiprintf_r+0x21c>)
 800ea54:	f7f1 fb94 	bl	8000180 <memchr>
 800ea58:	9a04      	ldr	r2, [sp, #16]
 800ea5a:	b9d8      	cbnz	r0, 800ea94 <_vfiprintf_r+0x110>
 800ea5c:	06d1      	lsls	r1, r2, #27
 800ea5e:	bf44      	itt	mi
 800ea60:	2320      	movmi	r3, #32
 800ea62:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ea66:	0713      	lsls	r3, r2, #28
 800ea68:	bf44      	itt	mi
 800ea6a:	232b      	movmi	r3, #43	@ 0x2b
 800ea6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ea70:	f89a 3000 	ldrb.w	r3, [sl]
 800ea74:	2b2a      	cmp	r3, #42	@ 0x2a
 800ea76:	d015      	beq.n	800eaa4 <_vfiprintf_r+0x120>
 800ea78:	9a07      	ldr	r2, [sp, #28]
 800ea7a:	4654      	mov	r4, sl
 800ea7c:	2000      	movs	r0, #0
 800ea7e:	f04f 0c0a 	mov.w	ip, #10
 800ea82:	4621      	mov	r1, r4
 800ea84:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ea88:	3b30      	subs	r3, #48	@ 0x30
 800ea8a:	2b09      	cmp	r3, #9
 800ea8c:	d94b      	bls.n	800eb26 <_vfiprintf_r+0x1a2>
 800ea8e:	b1b0      	cbz	r0, 800eabe <_vfiprintf_r+0x13a>
 800ea90:	9207      	str	r2, [sp, #28]
 800ea92:	e014      	b.n	800eabe <_vfiprintf_r+0x13a>
 800ea94:	eba0 0308 	sub.w	r3, r0, r8
 800ea98:	fa09 f303 	lsl.w	r3, r9, r3
 800ea9c:	4313      	orrs	r3, r2
 800ea9e:	9304      	str	r3, [sp, #16]
 800eaa0:	46a2      	mov	sl, r4
 800eaa2:	e7d2      	b.n	800ea4a <_vfiprintf_r+0xc6>
 800eaa4:	9b03      	ldr	r3, [sp, #12]
 800eaa6:	1d19      	adds	r1, r3, #4
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	9103      	str	r1, [sp, #12]
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	bfbb      	ittet	lt
 800eab0:	425b      	neglt	r3, r3
 800eab2:	f042 0202 	orrlt.w	r2, r2, #2
 800eab6:	9307      	strge	r3, [sp, #28]
 800eab8:	9307      	strlt	r3, [sp, #28]
 800eaba:	bfb8      	it	lt
 800eabc:	9204      	strlt	r2, [sp, #16]
 800eabe:	7823      	ldrb	r3, [r4, #0]
 800eac0:	2b2e      	cmp	r3, #46	@ 0x2e
 800eac2:	d10a      	bne.n	800eada <_vfiprintf_r+0x156>
 800eac4:	7863      	ldrb	r3, [r4, #1]
 800eac6:	2b2a      	cmp	r3, #42	@ 0x2a
 800eac8:	d132      	bne.n	800eb30 <_vfiprintf_r+0x1ac>
 800eaca:	9b03      	ldr	r3, [sp, #12]
 800eacc:	1d1a      	adds	r2, r3, #4
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	9203      	str	r2, [sp, #12]
 800ead2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ead6:	3402      	adds	r4, #2
 800ead8:	9305      	str	r3, [sp, #20]
 800eada:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ebb0 <_vfiprintf_r+0x22c>
 800eade:	7821      	ldrb	r1, [r4, #0]
 800eae0:	2203      	movs	r2, #3
 800eae2:	4650      	mov	r0, sl
 800eae4:	f7f1 fb4c 	bl	8000180 <memchr>
 800eae8:	b138      	cbz	r0, 800eafa <_vfiprintf_r+0x176>
 800eaea:	9b04      	ldr	r3, [sp, #16]
 800eaec:	eba0 000a 	sub.w	r0, r0, sl
 800eaf0:	2240      	movs	r2, #64	@ 0x40
 800eaf2:	4082      	lsls	r2, r0
 800eaf4:	4313      	orrs	r3, r2
 800eaf6:	3401      	adds	r4, #1
 800eaf8:	9304      	str	r3, [sp, #16]
 800eafa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eafe:	4829      	ldr	r0, [pc, #164]	@ (800eba4 <_vfiprintf_r+0x220>)
 800eb00:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800eb04:	2206      	movs	r2, #6
 800eb06:	f7f1 fb3b 	bl	8000180 <memchr>
 800eb0a:	2800      	cmp	r0, #0
 800eb0c:	d03f      	beq.n	800eb8e <_vfiprintf_r+0x20a>
 800eb0e:	4b26      	ldr	r3, [pc, #152]	@ (800eba8 <_vfiprintf_r+0x224>)
 800eb10:	bb1b      	cbnz	r3, 800eb5a <_vfiprintf_r+0x1d6>
 800eb12:	9b03      	ldr	r3, [sp, #12]
 800eb14:	3307      	adds	r3, #7
 800eb16:	f023 0307 	bic.w	r3, r3, #7
 800eb1a:	3308      	adds	r3, #8
 800eb1c:	9303      	str	r3, [sp, #12]
 800eb1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eb20:	443b      	add	r3, r7
 800eb22:	9309      	str	r3, [sp, #36]	@ 0x24
 800eb24:	e76a      	b.n	800e9fc <_vfiprintf_r+0x78>
 800eb26:	fb0c 3202 	mla	r2, ip, r2, r3
 800eb2a:	460c      	mov	r4, r1
 800eb2c:	2001      	movs	r0, #1
 800eb2e:	e7a8      	b.n	800ea82 <_vfiprintf_r+0xfe>
 800eb30:	2300      	movs	r3, #0
 800eb32:	3401      	adds	r4, #1
 800eb34:	9305      	str	r3, [sp, #20]
 800eb36:	4619      	mov	r1, r3
 800eb38:	f04f 0c0a 	mov.w	ip, #10
 800eb3c:	4620      	mov	r0, r4
 800eb3e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eb42:	3a30      	subs	r2, #48	@ 0x30
 800eb44:	2a09      	cmp	r2, #9
 800eb46:	d903      	bls.n	800eb50 <_vfiprintf_r+0x1cc>
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d0c6      	beq.n	800eada <_vfiprintf_r+0x156>
 800eb4c:	9105      	str	r1, [sp, #20]
 800eb4e:	e7c4      	b.n	800eada <_vfiprintf_r+0x156>
 800eb50:	fb0c 2101 	mla	r1, ip, r1, r2
 800eb54:	4604      	mov	r4, r0
 800eb56:	2301      	movs	r3, #1
 800eb58:	e7f0      	b.n	800eb3c <_vfiprintf_r+0x1b8>
 800eb5a:	ab03      	add	r3, sp, #12
 800eb5c:	9300      	str	r3, [sp, #0]
 800eb5e:	462a      	mov	r2, r5
 800eb60:	4b12      	ldr	r3, [pc, #72]	@ (800ebac <_vfiprintf_r+0x228>)
 800eb62:	a904      	add	r1, sp, #16
 800eb64:	4630      	mov	r0, r6
 800eb66:	f7fd fbf1 	bl	800c34c <_printf_float>
 800eb6a:	4607      	mov	r7, r0
 800eb6c:	1c78      	adds	r0, r7, #1
 800eb6e:	d1d6      	bne.n	800eb1e <_vfiprintf_r+0x19a>
 800eb70:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800eb72:	07d9      	lsls	r1, r3, #31
 800eb74:	d405      	bmi.n	800eb82 <_vfiprintf_r+0x1fe>
 800eb76:	89ab      	ldrh	r3, [r5, #12]
 800eb78:	059a      	lsls	r2, r3, #22
 800eb7a:	d402      	bmi.n	800eb82 <_vfiprintf_r+0x1fe>
 800eb7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800eb7e:	f7fe fb55 	bl	800d22c <__retarget_lock_release_recursive>
 800eb82:	89ab      	ldrh	r3, [r5, #12]
 800eb84:	065b      	lsls	r3, r3, #25
 800eb86:	f53f af1f 	bmi.w	800e9c8 <_vfiprintf_r+0x44>
 800eb8a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800eb8c:	e71e      	b.n	800e9cc <_vfiprintf_r+0x48>
 800eb8e:	ab03      	add	r3, sp, #12
 800eb90:	9300      	str	r3, [sp, #0]
 800eb92:	462a      	mov	r2, r5
 800eb94:	4b05      	ldr	r3, [pc, #20]	@ (800ebac <_vfiprintf_r+0x228>)
 800eb96:	a904      	add	r1, sp, #16
 800eb98:	4630      	mov	r0, r6
 800eb9a:	f7fd fe6f 	bl	800c87c <_printf_i>
 800eb9e:	e7e4      	b.n	800eb6a <_vfiprintf_r+0x1e6>
 800eba0:	080127f8 	.word	0x080127f8
 800eba4:	08012802 	.word	0x08012802
 800eba8:	0800c34d 	.word	0x0800c34d
 800ebac:	0800e95f 	.word	0x0800e95f
 800ebb0:	080127fe 	.word	0x080127fe

0800ebb4 <__sflush_r>:
 800ebb4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ebb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ebbc:	0716      	lsls	r6, r2, #28
 800ebbe:	4605      	mov	r5, r0
 800ebc0:	460c      	mov	r4, r1
 800ebc2:	d454      	bmi.n	800ec6e <__sflush_r+0xba>
 800ebc4:	684b      	ldr	r3, [r1, #4]
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	dc02      	bgt.n	800ebd0 <__sflush_r+0x1c>
 800ebca:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	dd48      	ble.n	800ec62 <__sflush_r+0xae>
 800ebd0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ebd2:	2e00      	cmp	r6, #0
 800ebd4:	d045      	beq.n	800ec62 <__sflush_r+0xae>
 800ebd6:	2300      	movs	r3, #0
 800ebd8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ebdc:	682f      	ldr	r7, [r5, #0]
 800ebde:	6a21      	ldr	r1, [r4, #32]
 800ebe0:	602b      	str	r3, [r5, #0]
 800ebe2:	d030      	beq.n	800ec46 <__sflush_r+0x92>
 800ebe4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ebe6:	89a3      	ldrh	r3, [r4, #12]
 800ebe8:	0759      	lsls	r1, r3, #29
 800ebea:	d505      	bpl.n	800ebf8 <__sflush_r+0x44>
 800ebec:	6863      	ldr	r3, [r4, #4]
 800ebee:	1ad2      	subs	r2, r2, r3
 800ebf0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ebf2:	b10b      	cbz	r3, 800ebf8 <__sflush_r+0x44>
 800ebf4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ebf6:	1ad2      	subs	r2, r2, r3
 800ebf8:	2300      	movs	r3, #0
 800ebfa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ebfc:	6a21      	ldr	r1, [r4, #32]
 800ebfe:	4628      	mov	r0, r5
 800ec00:	47b0      	blx	r6
 800ec02:	1c43      	adds	r3, r0, #1
 800ec04:	89a3      	ldrh	r3, [r4, #12]
 800ec06:	d106      	bne.n	800ec16 <__sflush_r+0x62>
 800ec08:	6829      	ldr	r1, [r5, #0]
 800ec0a:	291d      	cmp	r1, #29
 800ec0c:	d82b      	bhi.n	800ec66 <__sflush_r+0xb2>
 800ec0e:	4a2a      	ldr	r2, [pc, #168]	@ (800ecb8 <__sflush_r+0x104>)
 800ec10:	410a      	asrs	r2, r1
 800ec12:	07d6      	lsls	r6, r2, #31
 800ec14:	d427      	bmi.n	800ec66 <__sflush_r+0xb2>
 800ec16:	2200      	movs	r2, #0
 800ec18:	6062      	str	r2, [r4, #4]
 800ec1a:	04d9      	lsls	r1, r3, #19
 800ec1c:	6922      	ldr	r2, [r4, #16]
 800ec1e:	6022      	str	r2, [r4, #0]
 800ec20:	d504      	bpl.n	800ec2c <__sflush_r+0x78>
 800ec22:	1c42      	adds	r2, r0, #1
 800ec24:	d101      	bne.n	800ec2a <__sflush_r+0x76>
 800ec26:	682b      	ldr	r3, [r5, #0]
 800ec28:	b903      	cbnz	r3, 800ec2c <__sflush_r+0x78>
 800ec2a:	6560      	str	r0, [r4, #84]	@ 0x54
 800ec2c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ec2e:	602f      	str	r7, [r5, #0]
 800ec30:	b1b9      	cbz	r1, 800ec62 <__sflush_r+0xae>
 800ec32:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ec36:	4299      	cmp	r1, r3
 800ec38:	d002      	beq.n	800ec40 <__sflush_r+0x8c>
 800ec3a:	4628      	mov	r0, r5
 800ec3c:	f7ff f954 	bl	800dee8 <_free_r>
 800ec40:	2300      	movs	r3, #0
 800ec42:	6363      	str	r3, [r4, #52]	@ 0x34
 800ec44:	e00d      	b.n	800ec62 <__sflush_r+0xae>
 800ec46:	2301      	movs	r3, #1
 800ec48:	4628      	mov	r0, r5
 800ec4a:	47b0      	blx	r6
 800ec4c:	4602      	mov	r2, r0
 800ec4e:	1c50      	adds	r0, r2, #1
 800ec50:	d1c9      	bne.n	800ebe6 <__sflush_r+0x32>
 800ec52:	682b      	ldr	r3, [r5, #0]
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d0c6      	beq.n	800ebe6 <__sflush_r+0x32>
 800ec58:	2b1d      	cmp	r3, #29
 800ec5a:	d001      	beq.n	800ec60 <__sflush_r+0xac>
 800ec5c:	2b16      	cmp	r3, #22
 800ec5e:	d11e      	bne.n	800ec9e <__sflush_r+0xea>
 800ec60:	602f      	str	r7, [r5, #0]
 800ec62:	2000      	movs	r0, #0
 800ec64:	e022      	b.n	800ecac <__sflush_r+0xf8>
 800ec66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ec6a:	b21b      	sxth	r3, r3
 800ec6c:	e01b      	b.n	800eca6 <__sflush_r+0xf2>
 800ec6e:	690f      	ldr	r7, [r1, #16]
 800ec70:	2f00      	cmp	r7, #0
 800ec72:	d0f6      	beq.n	800ec62 <__sflush_r+0xae>
 800ec74:	0793      	lsls	r3, r2, #30
 800ec76:	680e      	ldr	r6, [r1, #0]
 800ec78:	bf08      	it	eq
 800ec7a:	694b      	ldreq	r3, [r1, #20]
 800ec7c:	600f      	str	r7, [r1, #0]
 800ec7e:	bf18      	it	ne
 800ec80:	2300      	movne	r3, #0
 800ec82:	eba6 0807 	sub.w	r8, r6, r7
 800ec86:	608b      	str	r3, [r1, #8]
 800ec88:	f1b8 0f00 	cmp.w	r8, #0
 800ec8c:	dde9      	ble.n	800ec62 <__sflush_r+0xae>
 800ec8e:	6a21      	ldr	r1, [r4, #32]
 800ec90:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ec92:	4643      	mov	r3, r8
 800ec94:	463a      	mov	r2, r7
 800ec96:	4628      	mov	r0, r5
 800ec98:	47b0      	blx	r6
 800ec9a:	2800      	cmp	r0, #0
 800ec9c:	dc08      	bgt.n	800ecb0 <__sflush_r+0xfc>
 800ec9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eca2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800eca6:	81a3      	strh	r3, [r4, #12]
 800eca8:	f04f 30ff 	mov.w	r0, #4294967295
 800ecac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ecb0:	4407      	add	r7, r0
 800ecb2:	eba8 0800 	sub.w	r8, r8, r0
 800ecb6:	e7e7      	b.n	800ec88 <__sflush_r+0xd4>
 800ecb8:	dfbffffe 	.word	0xdfbffffe

0800ecbc <_fflush_r>:
 800ecbc:	b538      	push	{r3, r4, r5, lr}
 800ecbe:	690b      	ldr	r3, [r1, #16]
 800ecc0:	4605      	mov	r5, r0
 800ecc2:	460c      	mov	r4, r1
 800ecc4:	b913      	cbnz	r3, 800eccc <_fflush_r+0x10>
 800ecc6:	2500      	movs	r5, #0
 800ecc8:	4628      	mov	r0, r5
 800ecca:	bd38      	pop	{r3, r4, r5, pc}
 800eccc:	b118      	cbz	r0, 800ecd6 <_fflush_r+0x1a>
 800ecce:	6a03      	ldr	r3, [r0, #32]
 800ecd0:	b90b      	cbnz	r3, 800ecd6 <_fflush_r+0x1a>
 800ecd2:	f7fd ff7f 	bl	800cbd4 <__sinit>
 800ecd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d0f3      	beq.n	800ecc6 <_fflush_r+0xa>
 800ecde:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ece0:	07d0      	lsls	r0, r2, #31
 800ece2:	d404      	bmi.n	800ecee <_fflush_r+0x32>
 800ece4:	0599      	lsls	r1, r3, #22
 800ece6:	d402      	bmi.n	800ecee <_fflush_r+0x32>
 800ece8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ecea:	f7fe fa9e 	bl	800d22a <__retarget_lock_acquire_recursive>
 800ecee:	4628      	mov	r0, r5
 800ecf0:	4621      	mov	r1, r4
 800ecf2:	f7ff ff5f 	bl	800ebb4 <__sflush_r>
 800ecf6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ecf8:	07da      	lsls	r2, r3, #31
 800ecfa:	4605      	mov	r5, r0
 800ecfc:	d4e4      	bmi.n	800ecc8 <_fflush_r+0xc>
 800ecfe:	89a3      	ldrh	r3, [r4, #12]
 800ed00:	059b      	lsls	r3, r3, #22
 800ed02:	d4e1      	bmi.n	800ecc8 <_fflush_r+0xc>
 800ed04:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ed06:	f7fe fa91 	bl	800d22c <__retarget_lock_release_recursive>
 800ed0a:	e7dd      	b.n	800ecc8 <_fflush_r+0xc>

0800ed0c <__swhatbuf_r>:
 800ed0c:	b570      	push	{r4, r5, r6, lr}
 800ed0e:	460c      	mov	r4, r1
 800ed10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ed14:	2900      	cmp	r1, #0
 800ed16:	b096      	sub	sp, #88	@ 0x58
 800ed18:	4615      	mov	r5, r2
 800ed1a:	461e      	mov	r6, r3
 800ed1c:	da0d      	bge.n	800ed3a <__swhatbuf_r+0x2e>
 800ed1e:	89a3      	ldrh	r3, [r4, #12]
 800ed20:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ed24:	f04f 0100 	mov.w	r1, #0
 800ed28:	bf14      	ite	ne
 800ed2a:	2340      	movne	r3, #64	@ 0x40
 800ed2c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ed30:	2000      	movs	r0, #0
 800ed32:	6031      	str	r1, [r6, #0]
 800ed34:	602b      	str	r3, [r5, #0]
 800ed36:	b016      	add	sp, #88	@ 0x58
 800ed38:	bd70      	pop	{r4, r5, r6, pc}
 800ed3a:	466a      	mov	r2, sp
 800ed3c:	f000 f848 	bl	800edd0 <_fstat_r>
 800ed40:	2800      	cmp	r0, #0
 800ed42:	dbec      	blt.n	800ed1e <__swhatbuf_r+0x12>
 800ed44:	9901      	ldr	r1, [sp, #4]
 800ed46:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ed4a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ed4e:	4259      	negs	r1, r3
 800ed50:	4159      	adcs	r1, r3
 800ed52:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ed56:	e7eb      	b.n	800ed30 <__swhatbuf_r+0x24>

0800ed58 <__smakebuf_r>:
 800ed58:	898b      	ldrh	r3, [r1, #12]
 800ed5a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ed5c:	079d      	lsls	r5, r3, #30
 800ed5e:	4606      	mov	r6, r0
 800ed60:	460c      	mov	r4, r1
 800ed62:	d507      	bpl.n	800ed74 <__smakebuf_r+0x1c>
 800ed64:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ed68:	6023      	str	r3, [r4, #0]
 800ed6a:	6123      	str	r3, [r4, #16]
 800ed6c:	2301      	movs	r3, #1
 800ed6e:	6163      	str	r3, [r4, #20]
 800ed70:	b003      	add	sp, #12
 800ed72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ed74:	ab01      	add	r3, sp, #4
 800ed76:	466a      	mov	r2, sp
 800ed78:	f7ff ffc8 	bl	800ed0c <__swhatbuf_r>
 800ed7c:	9f00      	ldr	r7, [sp, #0]
 800ed7e:	4605      	mov	r5, r0
 800ed80:	4639      	mov	r1, r7
 800ed82:	4630      	mov	r0, r6
 800ed84:	f7fd f9b6 	bl	800c0f4 <_malloc_r>
 800ed88:	b948      	cbnz	r0, 800ed9e <__smakebuf_r+0x46>
 800ed8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ed8e:	059a      	lsls	r2, r3, #22
 800ed90:	d4ee      	bmi.n	800ed70 <__smakebuf_r+0x18>
 800ed92:	f023 0303 	bic.w	r3, r3, #3
 800ed96:	f043 0302 	orr.w	r3, r3, #2
 800ed9a:	81a3      	strh	r3, [r4, #12]
 800ed9c:	e7e2      	b.n	800ed64 <__smakebuf_r+0xc>
 800ed9e:	89a3      	ldrh	r3, [r4, #12]
 800eda0:	6020      	str	r0, [r4, #0]
 800eda2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800eda6:	81a3      	strh	r3, [r4, #12]
 800eda8:	9b01      	ldr	r3, [sp, #4]
 800edaa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800edae:	b15b      	cbz	r3, 800edc8 <__smakebuf_r+0x70>
 800edb0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800edb4:	4630      	mov	r0, r6
 800edb6:	f000 f81d 	bl	800edf4 <_isatty_r>
 800edba:	b128      	cbz	r0, 800edc8 <__smakebuf_r+0x70>
 800edbc:	89a3      	ldrh	r3, [r4, #12]
 800edbe:	f023 0303 	bic.w	r3, r3, #3
 800edc2:	f043 0301 	orr.w	r3, r3, #1
 800edc6:	81a3      	strh	r3, [r4, #12]
 800edc8:	89a3      	ldrh	r3, [r4, #12]
 800edca:	431d      	orrs	r5, r3
 800edcc:	81a5      	strh	r5, [r4, #12]
 800edce:	e7cf      	b.n	800ed70 <__smakebuf_r+0x18>

0800edd0 <_fstat_r>:
 800edd0:	b538      	push	{r3, r4, r5, lr}
 800edd2:	4d07      	ldr	r5, [pc, #28]	@ (800edf0 <_fstat_r+0x20>)
 800edd4:	2300      	movs	r3, #0
 800edd6:	4604      	mov	r4, r0
 800edd8:	4608      	mov	r0, r1
 800edda:	4611      	mov	r1, r2
 800eddc:	602b      	str	r3, [r5, #0]
 800edde:	f7f6 fb67 	bl	80054b0 <_fstat>
 800ede2:	1c43      	adds	r3, r0, #1
 800ede4:	d102      	bne.n	800edec <_fstat_r+0x1c>
 800ede6:	682b      	ldr	r3, [r5, #0]
 800ede8:	b103      	cbz	r3, 800edec <_fstat_r+0x1c>
 800edea:	6023      	str	r3, [r4, #0]
 800edec:	bd38      	pop	{r3, r4, r5, pc}
 800edee:	bf00      	nop
 800edf0:	200112bc 	.word	0x200112bc

0800edf4 <_isatty_r>:
 800edf4:	b538      	push	{r3, r4, r5, lr}
 800edf6:	4d06      	ldr	r5, [pc, #24]	@ (800ee10 <_isatty_r+0x1c>)
 800edf8:	2300      	movs	r3, #0
 800edfa:	4604      	mov	r4, r0
 800edfc:	4608      	mov	r0, r1
 800edfe:	602b      	str	r3, [r5, #0]
 800ee00:	f7f6 fb66 	bl	80054d0 <_isatty>
 800ee04:	1c43      	adds	r3, r0, #1
 800ee06:	d102      	bne.n	800ee0e <_isatty_r+0x1a>
 800ee08:	682b      	ldr	r3, [r5, #0]
 800ee0a:	b103      	cbz	r3, 800ee0e <_isatty_r+0x1a>
 800ee0c:	6023      	str	r3, [r4, #0]
 800ee0e:	bd38      	pop	{r3, r4, r5, pc}
 800ee10:	200112bc 	.word	0x200112bc

0800ee14 <__assert_func>:
 800ee14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ee16:	4614      	mov	r4, r2
 800ee18:	461a      	mov	r2, r3
 800ee1a:	4b09      	ldr	r3, [pc, #36]	@ (800ee40 <__assert_func+0x2c>)
 800ee1c:	681b      	ldr	r3, [r3, #0]
 800ee1e:	4605      	mov	r5, r0
 800ee20:	68d8      	ldr	r0, [r3, #12]
 800ee22:	b954      	cbnz	r4, 800ee3a <__assert_func+0x26>
 800ee24:	4b07      	ldr	r3, [pc, #28]	@ (800ee44 <__assert_func+0x30>)
 800ee26:	461c      	mov	r4, r3
 800ee28:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ee2c:	9100      	str	r1, [sp, #0]
 800ee2e:	462b      	mov	r3, r5
 800ee30:	4905      	ldr	r1, [pc, #20]	@ (800ee48 <__assert_func+0x34>)
 800ee32:	f000 f86f 	bl	800ef14 <fiprintf>
 800ee36:	f7fd f923 	bl	800c080 <abort>
 800ee3a:	4b04      	ldr	r3, [pc, #16]	@ (800ee4c <__assert_func+0x38>)
 800ee3c:	e7f4      	b.n	800ee28 <__assert_func+0x14>
 800ee3e:	bf00      	nop
 800ee40:	20000038 	.word	0x20000038
 800ee44:	0801284e 	.word	0x0801284e
 800ee48:	08012820 	.word	0x08012820
 800ee4c:	08012813 	.word	0x08012813

0800ee50 <_calloc_r>:
 800ee50:	b570      	push	{r4, r5, r6, lr}
 800ee52:	fba1 5402 	umull	r5, r4, r1, r2
 800ee56:	b93c      	cbnz	r4, 800ee68 <_calloc_r+0x18>
 800ee58:	4629      	mov	r1, r5
 800ee5a:	f7fd f94b 	bl	800c0f4 <_malloc_r>
 800ee5e:	4606      	mov	r6, r0
 800ee60:	b928      	cbnz	r0, 800ee6e <_calloc_r+0x1e>
 800ee62:	2600      	movs	r6, #0
 800ee64:	4630      	mov	r0, r6
 800ee66:	bd70      	pop	{r4, r5, r6, pc}
 800ee68:	220c      	movs	r2, #12
 800ee6a:	6002      	str	r2, [r0, #0]
 800ee6c:	e7f9      	b.n	800ee62 <_calloc_r+0x12>
 800ee6e:	462a      	mov	r2, r5
 800ee70:	4621      	mov	r1, r4
 800ee72:	f7fe f8b3 	bl	800cfdc <memset>
 800ee76:	e7f5      	b.n	800ee64 <_calloc_r+0x14>

0800ee78 <__ascii_mbtowc>:
 800ee78:	b082      	sub	sp, #8
 800ee7a:	b901      	cbnz	r1, 800ee7e <__ascii_mbtowc+0x6>
 800ee7c:	a901      	add	r1, sp, #4
 800ee7e:	b142      	cbz	r2, 800ee92 <__ascii_mbtowc+0x1a>
 800ee80:	b14b      	cbz	r3, 800ee96 <__ascii_mbtowc+0x1e>
 800ee82:	7813      	ldrb	r3, [r2, #0]
 800ee84:	600b      	str	r3, [r1, #0]
 800ee86:	7812      	ldrb	r2, [r2, #0]
 800ee88:	1e10      	subs	r0, r2, #0
 800ee8a:	bf18      	it	ne
 800ee8c:	2001      	movne	r0, #1
 800ee8e:	b002      	add	sp, #8
 800ee90:	4770      	bx	lr
 800ee92:	4610      	mov	r0, r2
 800ee94:	e7fb      	b.n	800ee8e <__ascii_mbtowc+0x16>
 800ee96:	f06f 0001 	mvn.w	r0, #1
 800ee9a:	e7f8      	b.n	800ee8e <__ascii_mbtowc+0x16>

0800ee9c <_realloc_r>:
 800ee9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eea0:	4680      	mov	r8, r0
 800eea2:	4615      	mov	r5, r2
 800eea4:	460c      	mov	r4, r1
 800eea6:	b921      	cbnz	r1, 800eeb2 <_realloc_r+0x16>
 800eea8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eeac:	4611      	mov	r1, r2
 800eeae:	f7fd b921 	b.w	800c0f4 <_malloc_r>
 800eeb2:	b92a      	cbnz	r2, 800eec0 <_realloc_r+0x24>
 800eeb4:	f7ff f818 	bl	800dee8 <_free_r>
 800eeb8:	2400      	movs	r4, #0
 800eeba:	4620      	mov	r0, r4
 800eebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eec0:	f000 f83a 	bl	800ef38 <_malloc_usable_size_r>
 800eec4:	4285      	cmp	r5, r0
 800eec6:	4606      	mov	r6, r0
 800eec8:	d802      	bhi.n	800eed0 <_realloc_r+0x34>
 800eeca:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800eece:	d8f4      	bhi.n	800eeba <_realloc_r+0x1e>
 800eed0:	4629      	mov	r1, r5
 800eed2:	4640      	mov	r0, r8
 800eed4:	f7fd f90e 	bl	800c0f4 <_malloc_r>
 800eed8:	4607      	mov	r7, r0
 800eeda:	2800      	cmp	r0, #0
 800eedc:	d0ec      	beq.n	800eeb8 <_realloc_r+0x1c>
 800eede:	42b5      	cmp	r5, r6
 800eee0:	462a      	mov	r2, r5
 800eee2:	4621      	mov	r1, r4
 800eee4:	bf28      	it	cs
 800eee6:	4632      	movcs	r2, r6
 800eee8:	f7fe f9a1 	bl	800d22e <memcpy>
 800eeec:	4621      	mov	r1, r4
 800eeee:	4640      	mov	r0, r8
 800eef0:	f7fe fffa 	bl	800dee8 <_free_r>
 800eef4:	463c      	mov	r4, r7
 800eef6:	e7e0      	b.n	800eeba <_realloc_r+0x1e>

0800eef8 <__ascii_wctomb>:
 800eef8:	4603      	mov	r3, r0
 800eefa:	4608      	mov	r0, r1
 800eefc:	b141      	cbz	r1, 800ef10 <__ascii_wctomb+0x18>
 800eefe:	2aff      	cmp	r2, #255	@ 0xff
 800ef00:	d904      	bls.n	800ef0c <__ascii_wctomb+0x14>
 800ef02:	228a      	movs	r2, #138	@ 0x8a
 800ef04:	601a      	str	r2, [r3, #0]
 800ef06:	f04f 30ff 	mov.w	r0, #4294967295
 800ef0a:	4770      	bx	lr
 800ef0c:	700a      	strb	r2, [r1, #0]
 800ef0e:	2001      	movs	r0, #1
 800ef10:	4770      	bx	lr
	...

0800ef14 <fiprintf>:
 800ef14:	b40e      	push	{r1, r2, r3}
 800ef16:	b503      	push	{r0, r1, lr}
 800ef18:	4601      	mov	r1, r0
 800ef1a:	ab03      	add	r3, sp, #12
 800ef1c:	4805      	ldr	r0, [pc, #20]	@ (800ef34 <fiprintf+0x20>)
 800ef1e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ef22:	6800      	ldr	r0, [r0, #0]
 800ef24:	9301      	str	r3, [sp, #4]
 800ef26:	f7ff fd2d 	bl	800e984 <_vfiprintf_r>
 800ef2a:	b002      	add	sp, #8
 800ef2c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ef30:	b003      	add	sp, #12
 800ef32:	4770      	bx	lr
 800ef34:	20000038 	.word	0x20000038

0800ef38 <_malloc_usable_size_r>:
 800ef38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ef3c:	1f18      	subs	r0, r3, #4
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	bfbc      	itt	lt
 800ef42:	580b      	ldrlt	r3, [r1, r0]
 800ef44:	18c0      	addlt	r0, r0, r3
 800ef46:	4770      	bx	lr

0800ef48 <_init>:
 800ef48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef4a:	bf00      	nop
 800ef4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ef4e:	bc08      	pop	{r3}
 800ef50:	469e      	mov	lr, r3
 800ef52:	4770      	bx	lr

0800ef54 <_fini>:
 800ef54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef56:	bf00      	nop
 800ef58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ef5a:	bc08      	pop	{r3}
 800ef5c:	469e      	mov	lr, r3
 800ef5e:	4770      	bx	lr
